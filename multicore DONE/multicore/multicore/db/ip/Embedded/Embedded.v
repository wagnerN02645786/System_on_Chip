// Embedded.v

// Generated using ACDS version 15.0 145

`timescale 1 ps / 1 ps
module Embedded (
		input  wire        clk_clk,                                         //                                       clk.clk
		output wire [7:0]  ledgslave1_external_connection_export,           //            ledgslave1_external_connection.export
		output wire [7:0]  ledrslave2_external_connection_export,           //            ledrslave2_external_connection.export
		input  wire [15:0] pioslave1_external_connection_export,            //             pioslave1_external_connection.export
		input  wire [15:0] pioslave2_external_connection_export,            //             pioslave2_external_connection.export
		output wire [15:0] reg16_0_conduit_end_readdata,                    //                       reg16_0_conduit_end.readdata
		input  wire        reset_reset_n,                                   //                                     reset.reset_n
		input  wire        uart_0_external_connection_rxd,                  //                uart_0_external_connection.rxd
		output wire        uart_0_external_connection_txd,                  //                                          .txd
		output wire        video_vga_controller_0_external_interface_CLK,   // video_vga_controller_0_external_interface.CLK
		output wire        video_vga_controller_0_external_interface_HS,    //                                          .HS
		output wire        video_vga_controller_0_external_interface_VS,    //                                          .VS
		output wire        video_vga_controller_0_external_interface_BLANK, //                                          .BLANK
		output wire        video_vga_controller_0_external_interface_SYNC,  //                                          .SYNC
		output wire [7:0]  video_vga_controller_0_external_interface_R,     //                                          .R
		output wire [7:0]  video_vga_controller_0_external_interface_G,     //                                          .G
		output wire [7:0]  video_vga_controller_0_external_interface_B      //                                          .B
	);

	wire         video_character_buffer_with_dma_0_avalon_char_source_valid;                               // video_character_buffer_with_dma_0:stream_valid -> video_dual_clock_buffer_0:stream_in_valid
	wire  [29:0] video_character_buffer_with_dma_0_avalon_char_source_data;                                // video_character_buffer_with_dma_0:stream_data -> video_dual_clock_buffer_0:stream_in_data
	wire         video_character_buffer_with_dma_0_avalon_char_source_ready;                               // video_dual_clock_buffer_0:stream_in_ready -> video_character_buffer_with_dma_0:stream_ready
	wire         video_character_buffer_with_dma_0_avalon_char_source_startofpacket;                       // video_character_buffer_with_dma_0:stream_startofpacket -> video_dual_clock_buffer_0:stream_in_startofpacket
	wire         video_character_buffer_with_dma_0_avalon_char_source_endofpacket;                         // video_character_buffer_with_dma_0:stream_endofpacket -> video_dual_clock_buffer_0:stream_in_endofpacket
	wire         video_dual_clock_buffer_0_avalon_dc_buffer_source_valid;                                  // video_dual_clock_buffer_0:stream_out_valid -> video_vga_controller_0:valid
	wire  [29:0] video_dual_clock_buffer_0_avalon_dc_buffer_source_data;                                   // video_dual_clock_buffer_0:stream_out_data -> video_vga_controller_0:data
	wire         video_dual_clock_buffer_0_avalon_dc_buffer_source_ready;                                  // video_vga_controller_0:ready -> video_dual_clock_buffer_0:stream_out_ready
	wire         video_dual_clock_buffer_0_avalon_dc_buffer_source_startofpacket;                          // video_dual_clock_buffer_0:stream_out_startofpacket -> video_vga_controller_0:startofpacket
	wire         video_dual_clock_buffer_0_avalon_dc_buffer_source_endofpacket;                            // video_dual_clock_buffer_0:stream_out_endofpacket -> video_vga_controller_0:endofpacket
	wire         video_pll_0_vga_clk_clk;                                                                  // video_pll_0:vga_clk_clk -> [rst_controller_001:clk, video_dual_clock_buffer_0:clk_stream_out, video_vga_controller_0:clk]
	wire  [31:0] cpumaster_data_master_readdata;                                                           // mm_interconnect_0:CPUMaster_data_master_readdata -> CPUMaster:d_readdata
	wire         cpumaster_data_master_waitrequest;                                                        // mm_interconnect_0:CPUMaster_data_master_waitrequest -> CPUMaster:d_waitrequest
	wire         cpumaster_data_master_debugaccess;                                                        // CPUMaster:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:CPUMaster_data_master_debugaccess
	wire  [25:0] cpumaster_data_master_address;                                                            // CPUMaster:d_address -> mm_interconnect_0:CPUMaster_data_master_address
	wire   [3:0] cpumaster_data_master_byteenable;                                                         // CPUMaster:d_byteenable -> mm_interconnect_0:CPUMaster_data_master_byteenable
	wire         cpumaster_data_master_read;                                                               // CPUMaster:d_read -> mm_interconnect_0:CPUMaster_data_master_read
	wire         cpumaster_data_master_readdatavalid;                                                      // mm_interconnect_0:CPUMaster_data_master_readdatavalid -> CPUMaster:d_readdatavalid
	wire         cpumaster_data_master_write;                                                              // CPUMaster:d_write -> mm_interconnect_0:CPUMaster_data_master_write
	wire  [31:0] cpumaster_data_master_writedata;                                                          // CPUMaster:d_writedata -> mm_interconnect_0:CPUMaster_data_master_writedata
	wire  [31:0] cpuslave1_data_master_readdata;                                                           // mm_interconnect_0:CPUSlave1_data_master_readdata -> CPUSlave1:d_readdata
	wire         cpuslave1_data_master_waitrequest;                                                        // mm_interconnect_0:CPUSlave1_data_master_waitrequest -> CPUSlave1:d_waitrequest
	wire         cpuslave1_data_master_debugaccess;                                                        // CPUSlave1:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:CPUSlave1_data_master_debugaccess
	wire  [25:0] cpuslave1_data_master_address;                                                            // CPUSlave1:d_address -> mm_interconnect_0:CPUSlave1_data_master_address
	wire   [3:0] cpuslave1_data_master_byteenable;                                                         // CPUSlave1:d_byteenable -> mm_interconnect_0:CPUSlave1_data_master_byteenable
	wire         cpuslave1_data_master_read;                                                               // CPUSlave1:d_read -> mm_interconnect_0:CPUSlave1_data_master_read
	wire         cpuslave1_data_master_readdatavalid;                                                      // mm_interconnect_0:CPUSlave1_data_master_readdatavalid -> CPUSlave1:d_readdatavalid
	wire         cpuslave1_data_master_write;                                                              // CPUSlave1:d_write -> mm_interconnect_0:CPUSlave1_data_master_write
	wire  [31:0] cpuslave1_data_master_writedata;                                                          // CPUSlave1:d_writedata -> mm_interconnect_0:CPUSlave1_data_master_writedata
	wire  [31:0] cpuslave2_data_master_readdata;                                                           // mm_interconnect_0:CPUSlave2_data_master_readdata -> CPUSlave2:d_readdata
	wire         cpuslave2_data_master_waitrequest;                                                        // mm_interconnect_0:CPUSlave2_data_master_waitrequest -> CPUSlave2:d_waitrequest
	wire         cpuslave2_data_master_debugaccess;                                                        // CPUSlave2:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:CPUSlave2_data_master_debugaccess
	wire  [25:0] cpuslave2_data_master_address;                                                            // CPUSlave2:d_address -> mm_interconnect_0:CPUSlave2_data_master_address
	wire   [3:0] cpuslave2_data_master_byteenable;                                                         // CPUSlave2:d_byteenable -> mm_interconnect_0:CPUSlave2_data_master_byteenable
	wire         cpuslave2_data_master_read;                                                               // CPUSlave2:d_read -> mm_interconnect_0:CPUSlave2_data_master_read
	wire         cpuslave2_data_master_readdatavalid;                                                      // mm_interconnect_0:CPUSlave2_data_master_readdatavalid -> CPUSlave2:d_readdatavalid
	wire         cpuslave2_data_master_write;                                                              // CPUSlave2:d_write -> mm_interconnect_0:CPUSlave2_data_master_write
	wire  [31:0] cpuslave2_data_master_writedata;                                                          // CPUSlave2:d_writedata -> mm_interconnect_0:CPUSlave2_data_master_writedata
	wire  [31:0] cpuslave1_instruction_master_readdata;                                                    // mm_interconnect_0:CPUSlave1_instruction_master_readdata -> CPUSlave1:i_readdata
	wire         cpuslave1_instruction_master_waitrequest;                                                 // mm_interconnect_0:CPUSlave1_instruction_master_waitrequest -> CPUSlave1:i_waitrequest
	wire  [20:0] cpuslave1_instruction_master_address;                                                     // CPUSlave1:i_address -> mm_interconnect_0:CPUSlave1_instruction_master_address
	wire         cpuslave1_instruction_master_read;                                                        // CPUSlave1:i_read -> mm_interconnect_0:CPUSlave1_instruction_master_read
	wire         cpuslave1_instruction_master_readdatavalid;                                               // mm_interconnect_0:CPUSlave1_instruction_master_readdatavalid -> CPUSlave1:i_readdatavalid
	wire  [31:0] cpuslave2_instruction_master_readdata;                                                    // mm_interconnect_0:CPUSlave2_instruction_master_readdata -> CPUSlave2:i_readdata
	wire         cpuslave2_instruction_master_waitrequest;                                                 // mm_interconnect_0:CPUSlave2_instruction_master_waitrequest -> CPUSlave2:i_waitrequest
	wire  [21:0] cpuslave2_instruction_master_address;                                                     // CPUSlave2:i_address -> mm_interconnect_0:CPUSlave2_instruction_master_address
	wire         cpuslave2_instruction_master_read;                                                        // CPUSlave2:i_read -> mm_interconnect_0:CPUSlave2_instruction_master_read
	wire         cpuslave2_instruction_master_readdatavalid;                                               // mm_interconnect_0:CPUSlave2_instruction_master_readdatavalid -> CPUSlave2:i_readdatavalid
	wire  [31:0] cpumaster_instruction_master_readdata;                                                    // mm_interconnect_0:CPUMaster_instruction_master_readdata -> CPUMaster:i_readdata
	wire         cpumaster_instruction_master_waitrequest;                                                 // mm_interconnect_0:CPUMaster_instruction_master_waitrequest -> CPUMaster:i_waitrequest
	wire  [18:0] cpumaster_instruction_master_address;                                                     // CPUMaster:i_address -> mm_interconnect_0:CPUMaster_instruction_master_address
	wire         cpumaster_instruction_master_read;                                                        // CPUMaster:i_read -> mm_interconnect_0:CPUMaster_instruction_master_read
	wire         cpumaster_instruction_master_readdatavalid;                                               // mm_interconnect_0:CPUMaster_instruction_master_readdatavalid -> CPUMaster:i_readdatavalid
	wire         mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_chipselect;  // mm_interconnect_0:video_character_buffer_with_dma_0_avalon_char_buffer_slave_chipselect -> video_character_buffer_with_dma_0:buf_chipselect
	wire   [7:0] mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_readdata;    // video_character_buffer_with_dma_0:buf_readdata -> mm_interconnect_0:video_character_buffer_with_dma_0_avalon_char_buffer_slave_readdata
	wire         mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_waitrequest; // video_character_buffer_with_dma_0:buf_waitrequest -> mm_interconnect_0:video_character_buffer_with_dma_0_avalon_char_buffer_slave_waitrequest
	wire  [12:0] mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_address;     // mm_interconnect_0:video_character_buffer_with_dma_0_avalon_char_buffer_slave_address -> video_character_buffer_with_dma_0:buf_address
	wire         mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_read;        // mm_interconnect_0:video_character_buffer_with_dma_0_avalon_char_buffer_slave_read -> video_character_buffer_with_dma_0:buf_read
	wire   [0:0] mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_byteenable;  // mm_interconnect_0:video_character_buffer_with_dma_0_avalon_char_buffer_slave_byteenable -> video_character_buffer_with_dma_0:buf_byteenable
	wire         mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_write;       // mm_interconnect_0:video_character_buffer_with_dma_0_avalon_char_buffer_slave_write -> video_character_buffer_with_dma_0:buf_write
	wire   [7:0] mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_writedata;   // mm_interconnect_0:video_character_buffer_with_dma_0_avalon_char_buffer_slave_writedata -> video_character_buffer_with_dma_0:buf_writedata
	wire         mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_control_slave_chipselect; // mm_interconnect_0:video_character_buffer_with_dma_0_avalon_char_control_slave_chipselect -> video_character_buffer_with_dma_0:ctrl_chipselect
	wire  [31:0] mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_control_slave_readdata;   // video_character_buffer_with_dma_0:ctrl_readdata -> mm_interconnect_0:video_character_buffer_with_dma_0_avalon_char_control_slave_readdata
	wire   [0:0] mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_control_slave_address;    // mm_interconnect_0:video_character_buffer_with_dma_0_avalon_char_control_slave_address -> video_character_buffer_with_dma_0:ctrl_address
	wire         mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_control_slave_read;       // mm_interconnect_0:video_character_buffer_with_dma_0_avalon_char_control_slave_read -> video_character_buffer_with_dma_0:ctrl_read
	wire   [3:0] mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_control_slave_byteenable; // mm_interconnect_0:video_character_buffer_with_dma_0_avalon_char_control_slave_byteenable -> video_character_buffer_with_dma_0:ctrl_byteenable
	wire         mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_control_slave_write;      // mm_interconnect_0:video_character_buffer_with_dma_0_avalon_char_control_slave_write -> video_character_buffer_with_dma_0:ctrl_write
	wire  [31:0] mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_control_slave_writedata;  // mm_interconnect_0:video_character_buffer_with_dma_0_avalon_char_control_slave_writedata -> video_character_buffer_with_dma_0:ctrl_writedata
	wire         mm_interconnect_0_jtagmaster_avalon_jtag_slave_chipselect;                                // mm_interconnect_0:JTAGMaster_avalon_jtag_slave_chipselect -> JTAGMaster:av_chipselect
	wire  [31:0] mm_interconnect_0_jtagmaster_avalon_jtag_slave_readdata;                                  // JTAGMaster:av_readdata -> mm_interconnect_0:JTAGMaster_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_jtagmaster_avalon_jtag_slave_waitrequest;                               // JTAGMaster:av_waitrequest -> mm_interconnect_0:JTAGMaster_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_jtagmaster_avalon_jtag_slave_address;                                   // mm_interconnect_0:JTAGMaster_avalon_jtag_slave_address -> JTAGMaster:av_address
	wire         mm_interconnect_0_jtagmaster_avalon_jtag_slave_read;                                      // mm_interconnect_0:JTAGMaster_avalon_jtag_slave_read -> JTAGMaster:av_read_n
	wire         mm_interconnect_0_jtagmaster_avalon_jtag_slave_write;                                     // mm_interconnect_0:JTAGMaster_avalon_jtag_slave_write -> JTAGMaster:av_write_n
	wire  [31:0] mm_interconnect_0_jtagmaster_avalon_jtag_slave_writedata;                                 // mm_interconnect_0:JTAGMaster_avalon_jtag_slave_writedata -> JTAGMaster:av_writedata
	wire         mm_interconnect_0_reg16_0_avalon_slave_0_chipselect;                                      // mm_interconnect_0:reg16_0_avalon_slave_0_chipselect -> reg16_0:chipselect
	wire  [15:0] mm_interconnect_0_reg16_0_avalon_slave_0_readdata;                                        // reg16_0:readdata -> mm_interconnect_0:reg16_0_avalon_slave_0_readdata
	wire         mm_interconnect_0_reg16_0_avalon_slave_0_read;                                            // mm_interconnect_0:reg16_0_avalon_slave_0_read -> reg16_0:read
	wire   [1:0] mm_interconnect_0_reg16_0_avalon_slave_0_byteenable;                                      // mm_interconnect_0:reg16_0_avalon_slave_0_byteenable -> reg16_0:byteenable
	wire         mm_interconnect_0_reg16_0_avalon_slave_0_write;                                           // mm_interconnect_0:reg16_0_avalon_slave_0_write -> reg16_0:write
	wire  [15:0] mm_interconnect_0_reg16_0_avalon_slave_0_writedata;                                       // mm_interconnect_0:reg16_0_avalon_slave_0_writedata -> reg16_0:writedata
	wire  [31:0] mm_interconnect_0_cpumaster_debug_mem_slave_readdata;                                     // CPUMaster:debug_mem_slave_readdata -> mm_interconnect_0:CPUMaster_debug_mem_slave_readdata
	wire         mm_interconnect_0_cpumaster_debug_mem_slave_waitrequest;                                  // CPUMaster:debug_mem_slave_waitrequest -> mm_interconnect_0:CPUMaster_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_cpumaster_debug_mem_slave_debugaccess;                                  // mm_interconnect_0:CPUMaster_debug_mem_slave_debugaccess -> CPUMaster:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_cpumaster_debug_mem_slave_address;                                      // mm_interconnect_0:CPUMaster_debug_mem_slave_address -> CPUMaster:debug_mem_slave_address
	wire         mm_interconnect_0_cpumaster_debug_mem_slave_read;                                         // mm_interconnect_0:CPUMaster_debug_mem_slave_read -> CPUMaster:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_cpumaster_debug_mem_slave_byteenable;                                   // mm_interconnect_0:CPUMaster_debug_mem_slave_byteenable -> CPUMaster:debug_mem_slave_byteenable
	wire         mm_interconnect_0_cpumaster_debug_mem_slave_write;                                        // mm_interconnect_0:CPUMaster_debug_mem_slave_write -> CPUMaster:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_cpumaster_debug_mem_slave_writedata;                                    // mm_interconnect_0:CPUMaster_debug_mem_slave_writedata -> CPUMaster:debug_mem_slave_writedata
	wire         mm_interconnect_0_memmaster_s1_chipselect;                                                // mm_interconnect_0:MEMMaster_s1_chipselect -> MEMMaster:chipselect
	wire  [31:0] mm_interconnect_0_memmaster_s1_readdata;                                                  // MEMMaster:readdata -> mm_interconnect_0:MEMMaster_s1_readdata
	wire  [14:0] mm_interconnect_0_memmaster_s1_address;                                                   // mm_interconnect_0:MEMMaster_s1_address -> MEMMaster:address
	wire   [3:0] mm_interconnect_0_memmaster_s1_byteenable;                                                // mm_interconnect_0:MEMMaster_s1_byteenable -> MEMMaster:byteenable
	wire         mm_interconnect_0_memmaster_s1_write;                                                     // mm_interconnect_0:MEMMaster_s1_write -> MEMMaster:write
	wire  [31:0] mm_interconnect_0_memmaster_s1_writedata;                                                 // mm_interconnect_0:MEMMaster_s1_writedata -> MEMMaster:writedata
	wire         mm_interconnect_0_memmaster_s1_clken;                                                     // mm_interconnect_0:MEMMaster_s1_clken -> MEMMaster:clken
	wire         mm_interconnect_0_mutex_0_s1_chipselect;                                                  // mm_interconnect_0:mutex_0_s1_chipselect -> mutex_0:chipselect
	wire  [31:0] mm_interconnect_0_mutex_0_s1_readdata;                                                    // mutex_0:data_to_cpu -> mm_interconnect_0:mutex_0_s1_readdata
	wire   [0:0] mm_interconnect_0_mutex_0_s1_address;                                                     // mm_interconnect_0:mutex_0_s1_address -> mutex_0:address
	wire         mm_interconnect_0_mutex_0_s1_read;                                                        // mm_interconnect_0:mutex_0_s1_read -> mutex_0:read
	wire         mm_interconnect_0_mutex_0_s1_write;                                                       // mm_interconnect_0:mutex_0_s1_write -> mutex_0:write
	wire  [31:0] mm_interconnect_0_mutex_0_s1_writedata;                                                   // mm_interconnect_0:mutex_0_s1_writedata -> mutex_0:data_from_cpu
	wire         mm_interconnect_0_ledgslave1_s1_chipselect;                                               // mm_interconnect_0:LEDGSlave1_s1_chipselect -> LEDGSlave1:chipselect
	wire  [31:0] mm_interconnect_0_ledgslave1_s1_readdata;                                                 // LEDGSlave1:readdata -> mm_interconnect_0:LEDGSlave1_s1_readdata
	wire   [1:0] mm_interconnect_0_ledgslave1_s1_address;                                                  // mm_interconnect_0:LEDGSlave1_s1_address -> LEDGSlave1:address
	wire         mm_interconnect_0_ledgslave1_s1_write;                                                    // mm_interconnect_0:LEDGSlave1_s1_write -> LEDGSlave1:write_n
	wire  [31:0] mm_interconnect_0_ledgslave1_s1_writedata;                                                // mm_interconnect_0:LEDGSlave1_s1_writedata -> LEDGSlave1:writedata
	wire         mm_interconnect_0_ledrslave2_s1_chipselect;                                               // mm_interconnect_0:LEDRSlave2_s1_chipselect -> LEDRSlave2:chipselect
	wire  [31:0] mm_interconnect_0_ledrslave2_s1_readdata;                                                 // LEDRSlave2:readdata -> mm_interconnect_0:LEDRSlave2_s1_readdata
	wire   [1:0] mm_interconnect_0_ledrslave2_s1_address;                                                  // mm_interconnect_0:LEDRSlave2_s1_address -> LEDRSlave2:address
	wire         mm_interconnect_0_ledrslave2_s1_write;                                                    // mm_interconnect_0:LEDRSlave2_s1_write -> LEDRSlave2:write_n
	wire  [31:0] mm_interconnect_0_ledrslave2_s1_writedata;                                                // mm_interconnect_0:LEDRSlave2_s1_writedata -> LEDRSlave2:writedata
	wire         mm_interconnect_0_uart_0_s1_chipselect;                                                   // mm_interconnect_0:uart_0_s1_chipselect -> uart_0:chipselect
	wire  [15:0] mm_interconnect_0_uart_0_s1_readdata;                                                     // uart_0:readdata -> mm_interconnect_0:uart_0_s1_readdata
	wire   [2:0] mm_interconnect_0_uart_0_s1_address;                                                      // mm_interconnect_0:uart_0_s1_address -> uart_0:address
	wire         mm_interconnect_0_uart_0_s1_read;                                                         // mm_interconnect_0:uart_0_s1_read -> uart_0:read_n
	wire         mm_interconnect_0_uart_0_s1_begintransfer;                                                // mm_interconnect_0:uart_0_s1_begintransfer -> uart_0:begintransfer
	wire         mm_interconnect_0_uart_0_s1_write;                                                        // mm_interconnect_0:uart_0_s1_write -> uart_0:write_n
	wire  [15:0] mm_interconnect_0_uart_0_s1_writedata;                                                    // mm_interconnect_0:uart_0_s1_writedata -> uart_0:writedata
	wire         mm_interconnect_0_jtagslave2_avalon_jtag_slave_chipselect;                                // mm_interconnect_0:JTAGSlave2_avalon_jtag_slave_chipselect -> JTAGSlave2:av_chipselect
	wire  [31:0] mm_interconnect_0_jtagslave2_avalon_jtag_slave_readdata;                                  // JTAGSlave2:av_readdata -> mm_interconnect_0:JTAGSlave2_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_jtagslave2_avalon_jtag_slave_waitrequest;                               // JTAGSlave2:av_waitrequest -> mm_interconnect_0:JTAGSlave2_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_jtagslave2_avalon_jtag_slave_address;                                   // mm_interconnect_0:JTAGSlave2_avalon_jtag_slave_address -> JTAGSlave2:av_address
	wire         mm_interconnect_0_jtagslave2_avalon_jtag_slave_read;                                      // mm_interconnect_0:JTAGSlave2_avalon_jtag_slave_read -> JTAGSlave2:av_read_n
	wire         mm_interconnect_0_jtagslave2_avalon_jtag_slave_write;                                     // mm_interconnect_0:JTAGSlave2_avalon_jtag_slave_write -> JTAGSlave2:av_write_n
	wire  [31:0] mm_interconnect_0_jtagslave2_avalon_jtag_slave_writedata;                                 // mm_interconnect_0:JTAGSlave2_avalon_jtag_slave_writedata -> JTAGSlave2:av_writedata
	wire  [31:0] mm_interconnect_0_cpuslave2_debug_mem_slave_readdata;                                     // CPUSlave2:debug_mem_slave_readdata -> mm_interconnect_0:CPUSlave2_debug_mem_slave_readdata
	wire         mm_interconnect_0_cpuslave2_debug_mem_slave_waitrequest;                                  // CPUSlave2:debug_mem_slave_waitrequest -> mm_interconnect_0:CPUSlave2_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_cpuslave2_debug_mem_slave_debugaccess;                                  // mm_interconnect_0:CPUSlave2_debug_mem_slave_debugaccess -> CPUSlave2:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_cpuslave2_debug_mem_slave_address;                                      // mm_interconnect_0:CPUSlave2_debug_mem_slave_address -> CPUSlave2:debug_mem_slave_address
	wire         mm_interconnect_0_cpuslave2_debug_mem_slave_read;                                         // mm_interconnect_0:CPUSlave2_debug_mem_slave_read -> CPUSlave2:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_cpuslave2_debug_mem_slave_byteenable;                                   // mm_interconnect_0:CPUSlave2_debug_mem_slave_byteenable -> CPUSlave2:debug_mem_slave_byteenable
	wire         mm_interconnect_0_cpuslave2_debug_mem_slave_write;                                        // mm_interconnect_0:CPUSlave2_debug_mem_slave_write -> CPUSlave2:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_cpuslave2_debug_mem_slave_writedata;                                    // mm_interconnect_0:CPUSlave2_debug_mem_slave_writedata -> CPUSlave2:debug_mem_slave_writedata
	wire         mm_interconnect_0_memslave2_s1_chipselect;                                                // mm_interconnect_0:MEMSlave2_s1_chipselect -> MEMSlave2:chipselect
	wire  [31:0] mm_interconnect_0_memslave2_s1_readdata;                                                  // MEMSlave2:readdata -> mm_interconnect_0:MEMSlave2_s1_readdata
	wire  [14:0] mm_interconnect_0_memslave2_s1_address;                                                   // mm_interconnect_0:MEMSlave2_s1_address -> MEMSlave2:address
	wire   [3:0] mm_interconnect_0_memslave2_s1_byteenable;                                                // mm_interconnect_0:MEMSlave2_s1_byteenable -> MEMSlave2:byteenable
	wire         mm_interconnect_0_memslave2_s1_write;                                                     // mm_interconnect_0:MEMSlave2_s1_write -> MEMSlave2:write
	wire  [31:0] mm_interconnect_0_memslave2_s1_writedata;                                                 // mm_interconnect_0:MEMSlave2_s1_writedata -> MEMSlave2:writedata
	wire         mm_interconnect_0_memslave2_s1_clken;                                                     // mm_interconnect_0:MEMSlave2_s1_clken -> MEMSlave2:clken
	wire  [31:0] mm_interconnect_0_pioslave2_s1_readdata;                                                  // PIOSlave2:readdata -> mm_interconnect_0:PIOSlave2_s1_readdata
	wire   [1:0] mm_interconnect_0_pioslave2_s1_address;                                                   // mm_interconnect_0:PIOSlave2_s1_address -> PIOSlave2:address
	wire         mm_interconnect_0_jtagslave1_avalon_jtag_slave_chipselect;                                // mm_interconnect_0:JTAGSlave1_avalon_jtag_slave_chipselect -> JTAGSlave1:av_chipselect
	wire  [31:0] mm_interconnect_0_jtagslave1_avalon_jtag_slave_readdata;                                  // JTAGSlave1:av_readdata -> mm_interconnect_0:JTAGSlave1_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_jtagslave1_avalon_jtag_slave_waitrequest;                               // JTAGSlave1:av_waitrequest -> mm_interconnect_0:JTAGSlave1_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_jtagslave1_avalon_jtag_slave_address;                                   // mm_interconnect_0:JTAGSlave1_avalon_jtag_slave_address -> JTAGSlave1:av_address
	wire         mm_interconnect_0_jtagslave1_avalon_jtag_slave_read;                                      // mm_interconnect_0:JTAGSlave1_avalon_jtag_slave_read -> JTAGSlave1:av_read_n
	wire         mm_interconnect_0_jtagslave1_avalon_jtag_slave_write;                                     // mm_interconnect_0:JTAGSlave1_avalon_jtag_slave_write -> JTAGSlave1:av_write_n
	wire  [31:0] mm_interconnect_0_jtagslave1_avalon_jtag_slave_writedata;                                 // mm_interconnect_0:JTAGSlave1_avalon_jtag_slave_writedata -> JTAGSlave1:av_writedata
	wire  [31:0] mm_interconnect_0_cpuslave1_debug_mem_slave_readdata;                                     // CPUSlave1:debug_mem_slave_readdata -> mm_interconnect_0:CPUSlave1_debug_mem_slave_readdata
	wire         mm_interconnect_0_cpuslave1_debug_mem_slave_waitrequest;                                  // CPUSlave1:debug_mem_slave_waitrequest -> mm_interconnect_0:CPUSlave1_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_cpuslave1_debug_mem_slave_debugaccess;                                  // mm_interconnect_0:CPUSlave1_debug_mem_slave_debugaccess -> CPUSlave1:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_cpuslave1_debug_mem_slave_address;                                      // mm_interconnect_0:CPUSlave1_debug_mem_slave_address -> CPUSlave1:debug_mem_slave_address
	wire         mm_interconnect_0_cpuslave1_debug_mem_slave_read;                                         // mm_interconnect_0:CPUSlave1_debug_mem_slave_read -> CPUSlave1:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_cpuslave1_debug_mem_slave_byteenable;                                   // mm_interconnect_0:CPUSlave1_debug_mem_slave_byteenable -> CPUSlave1:debug_mem_slave_byteenable
	wire         mm_interconnect_0_cpuslave1_debug_mem_slave_write;                                        // mm_interconnect_0:CPUSlave1_debug_mem_slave_write -> CPUSlave1:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_cpuslave1_debug_mem_slave_writedata;                                    // mm_interconnect_0:CPUSlave1_debug_mem_slave_writedata -> CPUSlave1:debug_mem_slave_writedata
	wire  [31:0] mm_interconnect_0_pioslave1_s1_readdata;                                                  // PIOSlave1:readdata -> mm_interconnect_0:PIOSlave1_s1_readdata
	wire   [1:0] mm_interconnect_0_pioslave1_s1_address;                                                   // mm_interconnect_0:PIOSlave1_s1_address -> PIOSlave1:address
	wire         mm_interconnect_0_memslave1_s1_chipselect;                                                // mm_interconnect_0:MEMSlave1_s1_chipselect -> MEMSlave1:chipselect
	wire  [31:0] mm_interconnect_0_memslave1_s1_readdata;                                                  // MEMSlave1:readdata -> mm_interconnect_0:MEMSlave1_s1_readdata
	wire  [14:0] mm_interconnect_0_memslave1_s1_address;                                                   // mm_interconnect_0:MEMSlave1_s1_address -> MEMSlave1:address
	wire   [3:0] mm_interconnect_0_memslave1_s1_byteenable;                                                // mm_interconnect_0:MEMSlave1_s1_byteenable -> MEMSlave1:byteenable
	wire         mm_interconnect_0_memslave1_s1_write;                                                     // mm_interconnect_0:MEMSlave1_s1_write -> MEMSlave1:write
	wire  [31:0] mm_interconnect_0_memslave1_s1_writedata;                                                 // mm_interconnect_0:MEMSlave1_s1_writedata -> MEMSlave1:writedata
	wire         mm_interconnect_0_memslave1_s1_clken;                                                     // mm_interconnect_0:MEMSlave1_s1_clken -> MEMSlave1:clken
	wire         irq_mapper_receiver0_irq;                                                                 // JTAGMaster:av_irq -> irq_mapper:receiver0_irq
	wire  [31:0] cpumaster_irq_irq;                                                                        // irq_mapper:sender_irq -> CPUMaster:irq
	wire         irq_mapper_001_receiver0_irq;                                                             // JTAGSlave1:av_irq -> irq_mapper_001:receiver0_irq
	wire  [31:0] cpuslave1_irq_irq;                                                                        // irq_mapper_001:sender_irq -> CPUSlave1:irq
	wire         irq_mapper_002_receiver0_irq;                                                             // JTAGSlave2:av_irq -> irq_mapper_002:receiver0_irq
	wire  [31:0] cpuslave2_irq_irq;                                                                        // irq_mapper_002:sender_irq -> CPUSlave2:irq
	wire         irq_mapper_receiver1_irq;                                                                 // uart_0:irq -> [irq_mapper:receiver1_irq, irq_mapper_001:receiver1_irq, irq_mapper_002:receiver1_irq]
	wire         rst_controller_reset_out_reset;                                                           // rst_controller:reset_out -> [CPUMaster:reset_n, CPUSlave1:reset_n, CPUSlave2:reset_n, JTAGMaster:rst_n, JTAGSlave1:rst_n, JTAGSlave2:rst_n, LEDGSlave1:reset_n, LEDRSlave2:reset_n, MEMMaster:reset, MEMSlave1:reset, MEMSlave2:reset, PIOSlave1:reset_n, PIOSlave2:reset_n, irq_mapper:reset, irq_mapper_001:reset, irq_mapper_002:reset, mm_interconnect_0:CPUMaster_reset_reset_bridge_in_reset_reset, mutex_0:reset_n, reg16_0:resetn, rst_translator:in_reset, uart_0:reset_n, video_character_buffer_with_dma_0:reset, video_dual_clock_buffer_0:reset_stream_in, video_pll_0:ref_reset_reset]
	wire         rst_controller_reset_out_reset_req;                                                       // rst_controller:reset_req -> [CPUMaster:reset_req, CPUSlave1:reset_req, CPUSlave2:reset_req, MEMMaster:reset_req, MEMSlave1:reset_req, MEMSlave2:reset_req, rst_translator:reset_req_in]
	wire         rst_controller_001_reset_out_reset;                                                       // rst_controller_001:reset_out -> [video_dual_clock_buffer_0:reset_stream_out, video_vga_controller_0:reset]

	Embedded_CPUMaster cpumaster (
		.clk                                 (clk_clk),                                                 //                       clk.clk
		.reset_n                             (~rst_controller_reset_out_reset),                         //                     reset.reset_n
		.reset_req                           (rst_controller_reset_out_reset_req),                      //                          .reset_req
		.d_address                           (cpumaster_data_master_address),                           //               data_master.address
		.d_byteenable                        (cpumaster_data_master_byteenable),                        //                          .byteenable
		.d_read                              (cpumaster_data_master_read),                              //                          .read
		.d_readdata                          (cpumaster_data_master_readdata),                          //                          .readdata
		.d_waitrequest                       (cpumaster_data_master_waitrequest),                       //                          .waitrequest
		.d_write                             (cpumaster_data_master_write),                             //                          .write
		.d_writedata                         (cpumaster_data_master_writedata),                         //                          .writedata
		.d_readdatavalid                     (cpumaster_data_master_readdatavalid),                     //                          .readdatavalid
		.debug_mem_slave_debugaccess_to_roms (cpumaster_data_master_debugaccess),                       //                          .debugaccess
		.i_address                           (cpumaster_instruction_master_address),                    //        instruction_master.address
		.i_read                              (cpumaster_instruction_master_read),                       //                          .read
		.i_readdata                          (cpumaster_instruction_master_readdata),                   //                          .readdata
		.i_waitrequest                       (cpumaster_instruction_master_waitrequest),                //                          .waitrequest
		.i_readdatavalid                     (cpumaster_instruction_master_readdatavalid),              //                          .readdatavalid
		.irq                                 (cpumaster_irq_irq),                                       //                       irq.irq
		.debug_reset_request                 (),                                                        //       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_cpumaster_debug_mem_slave_address),     //           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_cpumaster_debug_mem_slave_byteenable),  //                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_cpumaster_debug_mem_slave_debugaccess), //                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_cpumaster_debug_mem_slave_read),        //                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_cpumaster_debug_mem_slave_readdata),    //                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_cpumaster_debug_mem_slave_waitrequest), //                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_cpumaster_debug_mem_slave_write),       //                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_cpumaster_debug_mem_slave_writedata),   //                          .writedata
		.dummy_ci_port                       ()                                                         // custom_instruction_master.readra
	);

	Embedded_CPUSlave1 cpuslave1 (
		.clk                                 (clk_clk),                                                 //                       clk.clk
		.reset_n                             (~rst_controller_reset_out_reset),                         //                     reset.reset_n
		.reset_req                           (rst_controller_reset_out_reset_req),                      //                          .reset_req
		.d_address                           (cpuslave1_data_master_address),                           //               data_master.address
		.d_byteenable                        (cpuslave1_data_master_byteenable),                        //                          .byteenable
		.d_read                              (cpuslave1_data_master_read),                              //                          .read
		.d_readdata                          (cpuslave1_data_master_readdata),                          //                          .readdata
		.d_waitrequest                       (cpuslave1_data_master_waitrequest),                       //                          .waitrequest
		.d_write                             (cpuslave1_data_master_write),                             //                          .write
		.d_writedata                         (cpuslave1_data_master_writedata),                         //                          .writedata
		.d_readdatavalid                     (cpuslave1_data_master_readdatavalid),                     //                          .readdatavalid
		.debug_mem_slave_debugaccess_to_roms (cpuslave1_data_master_debugaccess),                       //                          .debugaccess
		.i_address                           (cpuslave1_instruction_master_address),                    //        instruction_master.address
		.i_read                              (cpuslave1_instruction_master_read),                       //                          .read
		.i_readdata                          (cpuslave1_instruction_master_readdata),                   //                          .readdata
		.i_waitrequest                       (cpuslave1_instruction_master_waitrequest),                //                          .waitrequest
		.i_readdatavalid                     (cpuslave1_instruction_master_readdatavalid),              //                          .readdatavalid
		.irq                                 (cpuslave1_irq_irq),                                       //                       irq.irq
		.debug_reset_request                 (),                                                        //       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_cpuslave1_debug_mem_slave_address),     //           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_cpuslave1_debug_mem_slave_byteenable),  //                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_cpuslave1_debug_mem_slave_debugaccess), //                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_cpuslave1_debug_mem_slave_read),        //                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_cpuslave1_debug_mem_slave_readdata),    //                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_cpuslave1_debug_mem_slave_waitrequest), //                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_cpuslave1_debug_mem_slave_write),       //                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_cpuslave1_debug_mem_slave_writedata),   //                          .writedata
		.dummy_ci_port                       ()                                                         // custom_instruction_master.readra
	);

	Embedded_CPUSlave2 cpuslave2 (
		.clk                                 (clk_clk),                                                 //                       clk.clk
		.reset_n                             (~rst_controller_reset_out_reset),                         //                     reset.reset_n
		.reset_req                           (rst_controller_reset_out_reset_req),                      //                          .reset_req
		.d_address                           (cpuslave2_data_master_address),                           //               data_master.address
		.d_byteenable                        (cpuslave2_data_master_byteenable),                        //                          .byteenable
		.d_read                              (cpuslave2_data_master_read),                              //                          .read
		.d_readdata                          (cpuslave2_data_master_readdata),                          //                          .readdata
		.d_waitrequest                       (cpuslave2_data_master_waitrequest),                       //                          .waitrequest
		.d_write                             (cpuslave2_data_master_write),                             //                          .write
		.d_writedata                         (cpuslave2_data_master_writedata),                         //                          .writedata
		.d_readdatavalid                     (cpuslave2_data_master_readdatavalid),                     //                          .readdatavalid
		.debug_mem_slave_debugaccess_to_roms (cpuslave2_data_master_debugaccess),                       //                          .debugaccess
		.i_address                           (cpuslave2_instruction_master_address),                    //        instruction_master.address
		.i_read                              (cpuslave2_instruction_master_read),                       //                          .read
		.i_readdata                          (cpuslave2_instruction_master_readdata),                   //                          .readdata
		.i_waitrequest                       (cpuslave2_instruction_master_waitrequest),                //                          .waitrequest
		.i_readdatavalid                     (cpuslave2_instruction_master_readdatavalid),              //                          .readdatavalid
		.irq                                 (cpuslave2_irq_irq),                                       //                       irq.irq
		.debug_reset_request                 (),                                                        //       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_cpuslave2_debug_mem_slave_address),     //           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_cpuslave2_debug_mem_slave_byteenable),  //                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_cpuslave2_debug_mem_slave_debugaccess), //                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_cpuslave2_debug_mem_slave_read),        //                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_cpuslave2_debug_mem_slave_readdata),    //                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_cpuslave2_debug_mem_slave_waitrequest), //                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_cpuslave2_debug_mem_slave_write),       //                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_cpuslave2_debug_mem_slave_writedata),   //                          .writedata
		.dummy_ci_port                       ()                                                         // custom_instruction_master.readra
	);

	Embedded_JTAGMaster jtagmaster (
		.clk            (clk_clk),                                                    //               clk.clk
		.rst_n          (~rst_controller_reset_out_reset),                            //             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtagmaster_avalon_jtag_slave_chipselect),  // avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtagmaster_avalon_jtag_slave_address),     //                  .address
		.av_read_n      (~mm_interconnect_0_jtagmaster_avalon_jtag_slave_read),       //                  .read_n
		.av_readdata    (mm_interconnect_0_jtagmaster_avalon_jtag_slave_readdata),    //                  .readdata
		.av_write_n     (~mm_interconnect_0_jtagmaster_avalon_jtag_slave_write),      //                  .write_n
		.av_writedata   (mm_interconnect_0_jtagmaster_avalon_jtag_slave_writedata),   //                  .writedata
		.av_waitrequest (mm_interconnect_0_jtagmaster_avalon_jtag_slave_waitrequest), //                  .waitrequest
		.av_irq         (irq_mapper_receiver0_irq)                                    //               irq.irq
	);

	Embedded_JTAGMaster jtagslave1 (
		.clk            (clk_clk),                                                    //               clk.clk
		.rst_n          (~rst_controller_reset_out_reset),                            //             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtagslave1_avalon_jtag_slave_chipselect),  // avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtagslave1_avalon_jtag_slave_address),     //                  .address
		.av_read_n      (~mm_interconnect_0_jtagslave1_avalon_jtag_slave_read),       //                  .read_n
		.av_readdata    (mm_interconnect_0_jtagslave1_avalon_jtag_slave_readdata),    //                  .readdata
		.av_write_n     (~mm_interconnect_0_jtagslave1_avalon_jtag_slave_write),      //                  .write_n
		.av_writedata   (mm_interconnect_0_jtagslave1_avalon_jtag_slave_writedata),   //                  .writedata
		.av_waitrequest (mm_interconnect_0_jtagslave1_avalon_jtag_slave_waitrequest), //                  .waitrequest
		.av_irq         (irq_mapper_001_receiver0_irq)                                //               irq.irq
	);

	Embedded_JTAGMaster jtagslave2 (
		.clk            (clk_clk),                                                    //               clk.clk
		.rst_n          (~rst_controller_reset_out_reset),                            //             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtagslave2_avalon_jtag_slave_chipselect),  // avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtagslave2_avalon_jtag_slave_address),     //                  .address
		.av_read_n      (~mm_interconnect_0_jtagslave2_avalon_jtag_slave_read),       //                  .read_n
		.av_readdata    (mm_interconnect_0_jtagslave2_avalon_jtag_slave_readdata),    //                  .readdata
		.av_write_n     (~mm_interconnect_0_jtagslave2_avalon_jtag_slave_write),      //                  .write_n
		.av_writedata   (mm_interconnect_0_jtagslave2_avalon_jtag_slave_writedata),   //                  .writedata
		.av_waitrequest (mm_interconnect_0_jtagslave2_avalon_jtag_slave_waitrequest), //                  .waitrequest
		.av_irq         (irq_mapper_002_receiver0_irq)                                //               irq.irq
	);

	Embedded_LEDGSlave1 ledgslave1 (
		.clk        (clk_clk),                                    //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),            //               reset.reset_n
		.address    (mm_interconnect_0_ledgslave1_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_ledgslave1_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_ledgslave1_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_ledgslave1_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_ledgslave1_s1_readdata),   //                    .readdata
		.out_port   (ledgslave1_external_connection_export)       // external_connection.export
	);

	Embedded_LEDGSlave1 ledrslave2 (
		.clk        (clk_clk),                                    //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),            //               reset.reset_n
		.address    (mm_interconnect_0_ledrslave2_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_ledrslave2_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_ledrslave2_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_ledrslave2_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_ledrslave2_s1_readdata),   //                    .readdata
		.out_port   (ledrslave2_external_connection_export)       // external_connection.export
	);

	Embedded_MEMMaster memmaster (
		.clk        (clk_clk),                                   //   clk1.clk
		.address    (mm_interconnect_0_memmaster_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_memmaster_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_memmaster_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_memmaster_s1_write),      //       .write
		.readdata   (mm_interconnect_0_memmaster_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_memmaster_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_memmaster_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),            // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req)         //       .reset_req
	);

	Embedded_MEMSlave1 memslave1 (
		.clk        (clk_clk),                                   //   clk1.clk
		.address    (mm_interconnect_0_memslave1_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_memslave1_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_memslave1_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_memslave1_s1_write),      //       .write
		.readdata   (mm_interconnect_0_memslave1_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_memslave1_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_memslave1_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),            // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req)         //       .reset_req
	);

	Embedded_MEMSlave2 memslave2 (
		.clk        (clk_clk),                                   //   clk1.clk
		.address    (mm_interconnect_0_memslave2_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_memslave2_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_memslave2_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_memslave2_s1_write),      //       .write
		.readdata   (mm_interconnect_0_memslave2_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_memslave2_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_memslave2_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),            // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req)         //       .reset_req
	);

	Embedded_PIOSlave1 pioslave1 (
		.clk      (clk_clk),                                 //                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),         //               reset.reset_n
		.address  (mm_interconnect_0_pioslave1_s1_address),  //                  s1.address
		.readdata (mm_interconnect_0_pioslave1_s1_readdata), //                    .readdata
		.in_port  (pioslave1_external_connection_export)     // external_connection.export
	);

	Embedded_PIOSlave1 pioslave2 (
		.clk      (clk_clk),                                 //                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),         //               reset.reset_n
		.address  (mm_interconnect_0_pioslave2_s1_address),  //                  s1.address
		.readdata (mm_interconnect_0_pioslave2_s1_readdata), //                    .readdata
		.in_port  (pioslave2_external_connection_export)     // external_connection.export
	);

	Embedded_mutex_0 mutex_0 (
		.reset_n       (~rst_controller_reset_out_reset),         // reset.reset_n
		.clk           (clk_clk),                                 //   clk.clk
		.chipselect    (mm_interconnect_0_mutex_0_s1_chipselect), //    s1.chipselect
		.data_from_cpu (mm_interconnect_0_mutex_0_s1_writedata),  //      .writedata
		.read          (mm_interconnect_0_mutex_0_s1_read),       //      .read
		.write         (mm_interconnect_0_mutex_0_s1_write),      //      .write
		.data_to_cpu   (mm_interconnect_0_mutex_0_s1_readdata),   //      .readdata
		.address       (mm_interconnect_0_mutex_0_s1_address)     //      .address
	);

	reg16_avalon_interface reg16_0 (
		.writedata  (mm_interconnect_0_reg16_0_avalon_slave_0_writedata),  // avalon_slave_0.writedata
		.readdata   (mm_interconnect_0_reg16_0_avalon_slave_0_readdata),   //               .readdata
		.write      (mm_interconnect_0_reg16_0_avalon_slave_0_write),      //               .write
		.read       (mm_interconnect_0_reg16_0_avalon_slave_0_read),       //               .read
		.byteenable (mm_interconnect_0_reg16_0_avalon_slave_0_byteenable), //               .byteenable
		.chipselect (mm_interconnect_0_reg16_0_avalon_slave_0_chipselect), //               .chipselect
		.resetn     (~rst_controller_reset_out_reset),                     //          reset.reset_n
		.clock      (clk_clk),                                             //          clock.clk
		.Q_export   (reg16_0_conduit_end_readdata)                         //    conduit_end.readdata
	);

	Embedded_uart_0 uart_0 (
		.clk           (clk_clk),                                   //                 clk.clk
		.reset_n       (~rst_controller_reset_out_reset),           //               reset.reset_n
		.address       (mm_interconnect_0_uart_0_s1_address),       //                  s1.address
		.begintransfer (mm_interconnect_0_uart_0_s1_begintransfer), //                    .begintransfer
		.chipselect    (mm_interconnect_0_uart_0_s1_chipselect),    //                    .chipselect
		.read_n        (~mm_interconnect_0_uart_0_s1_read),         //                    .read_n
		.write_n       (~mm_interconnect_0_uart_0_s1_write),        //                    .write_n
		.writedata     (mm_interconnect_0_uart_0_s1_writedata),     //                    .writedata
		.readdata      (mm_interconnect_0_uart_0_s1_readdata),      //                    .readdata
		.dataavailable (),                                          //                    .dataavailable
		.readyfordata  (),                                          //                    .readyfordata
		.rxd           (uart_0_external_connection_rxd),            // external_connection.export
		.txd           (uart_0_external_connection_txd),            //                    .export
		.irq           (irq_mapper_receiver1_irq)                   //                 irq.irq
	);

	Embedded_video_character_buffer_with_dma_0 video_character_buffer_with_dma_0 (
		.clk                  (clk_clk),                                                                                  //                       clk.clk
		.reset                (rst_controller_reset_out_reset),                                                           //                     reset.reset
		.ctrl_address         (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_control_slave_address),    // avalon_char_control_slave.address
		.ctrl_byteenable      (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_control_slave_byteenable), //                          .byteenable
		.ctrl_chipselect      (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_control_slave_chipselect), //                          .chipselect
		.ctrl_read            (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_control_slave_read),       //                          .read
		.ctrl_write           (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_control_slave_write),      //                          .write
		.ctrl_writedata       (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_control_slave_writedata),  //                          .writedata
		.ctrl_readdata        (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_control_slave_readdata),   //                          .readdata
		.buf_byteenable       (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_byteenable),  //  avalon_char_buffer_slave.byteenable
		.buf_chipselect       (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_chipselect),  //                          .chipselect
		.buf_read             (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_read),        //                          .read
		.buf_write            (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_write),       //                          .write
		.buf_writedata        (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_writedata),   //                          .writedata
		.buf_readdata         (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_readdata),    //                          .readdata
		.buf_waitrequest      (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_waitrequest), //                          .waitrequest
		.buf_address          (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_address),     //                          .address
		.stream_ready         (video_character_buffer_with_dma_0_avalon_char_source_ready),                               //        avalon_char_source.ready
		.stream_startofpacket (video_character_buffer_with_dma_0_avalon_char_source_startofpacket),                       //                          .startofpacket
		.stream_endofpacket   (video_character_buffer_with_dma_0_avalon_char_source_endofpacket),                         //                          .endofpacket
		.stream_valid         (video_character_buffer_with_dma_0_avalon_char_source_valid),                               //                          .valid
		.stream_data          (video_character_buffer_with_dma_0_avalon_char_source_data)                                 //                          .data
	);

	Embedded_video_dual_clock_buffer_0 video_dual_clock_buffer_0 (
		.clk_stream_in            (clk_clk),                                                            //         clock_stream_in.clk
		.reset_stream_in          (rst_controller_reset_out_reset),                                     //         reset_stream_in.reset
		.clk_stream_out           (video_pll_0_vga_clk_clk),                                            //        clock_stream_out.clk
		.reset_stream_out         (rst_controller_001_reset_out_reset),                                 //        reset_stream_out.reset
		.stream_in_ready          (video_character_buffer_with_dma_0_avalon_char_source_ready),         //   avalon_dc_buffer_sink.ready
		.stream_in_startofpacket  (video_character_buffer_with_dma_0_avalon_char_source_startofpacket), //                        .startofpacket
		.stream_in_endofpacket    (video_character_buffer_with_dma_0_avalon_char_source_endofpacket),   //                        .endofpacket
		.stream_in_valid          (video_character_buffer_with_dma_0_avalon_char_source_valid),         //                        .valid
		.stream_in_data           (video_character_buffer_with_dma_0_avalon_char_source_data),          //                        .data
		.stream_out_ready         (video_dual_clock_buffer_0_avalon_dc_buffer_source_ready),            // avalon_dc_buffer_source.ready
		.stream_out_startofpacket (video_dual_clock_buffer_0_avalon_dc_buffer_source_startofpacket),    //                        .startofpacket
		.stream_out_endofpacket   (video_dual_clock_buffer_0_avalon_dc_buffer_source_endofpacket),      //                        .endofpacket
		.stream_out_valid         (video_dual_clock_buffer_0_avalon_dc_buffer_source_valid),            //                        .valid
		.stream_out_data          (video_dual_clock_buffer_0_avalon_dc_buffer_source_data)              //                        .data
	);

	Embedded_video_pll_0 video_pll_0 (
		.ref_clk_clk        (clk_clk),                        //      ref_clk.clk
		.ref_reset_reset    (rst_controller_reset_out_reset), //    ref_reset.reset
		.vga_clk_clk        (video_pll_0_vga_clk_clk),        //      vga_clk.clk
		.reset_source_reset ()                                // reset_source.reset
	);

	Embedded_video_vga_controller_0 video_vga_controller_0 (
		.clk           (video_pll_0_vga_clk_clk),                                         //                clk.clk
		.reset         (rst_controller_001_reset_out_reset),                              //              reset.reset
		.data          (video_dual_clock_buffer_0_avalon_dc_buffer_source_data),          //    avalon_vga_sink.data
		.startofpacket (video_dual_clock_buffer_0_avalon_dc_buffer_source_startofpacket), //                   .startofpacket
		.endofpacket   (video_dual_clock_buffer_0_avalon_dc_buffer_source_endofpacket),   //                   .endofpacket
		.valid         (video_dual_clock_buffer_0_avalon_dc_buffer_source_valid),         //                   .valid
		.ready         (video_dual_clock_buffer_0_avalon_dc_buffer_source_ready),         //                   .ready
		.VGA_CLK       (video_vga_controller_0_external_interface_CLK),                   // external_interface.export
		.VGA_HS        (video_vga_controller_0_external_interface_HS),                    //                   .export
		.VGA_VS        (video_vga_controller_0_external_interface_VS),                    //                   .export
		.VGA_BLANK     (video_vga_controller_0_external_interface_BLANK),                 //                   .export
		.VGA_SYNC      (video_vga_controller_0_external_interface_SYNC),                  //                   .export
		.VGA_R         (video_vga_controller_0_external_interface_R),                     //                   .export
		.VGA_G         (video_vga_controller_0_external_interface_G),                     //                   .export
		.VGA_B         (video_vga_controller_0_external_interface_B)                      //                   .export
	);

	Embedded_mm_interconnect_0 mm_interconnect_0 (
		.clk_0_clk_clk                                                          (clk_clk),                                                                                  //                                                   clk_0_clk.clk
		.CPUMaster_reset_reset_bridge_in_reset_reset                            (rst_controller_reset_out_reset),                                                           //                       CPUMaster_reset_reset_bridge_in_reset.reset
		.CPUMaster_data_master_address                                          (cpumaster_data_master_address),                                                            //                                       CPUMaster_data_master.address
		.CPUMaster_data_master_waitrequest                                      (cpumaster_data_master_waitrequest),                                                        //                                                            .waitrequest
		.CPUMaster_data_master_byteenable                                       (cpumaster_data_master_byteenable),                                                         //                                                            .byteenable
		.CPUMaster_data_master_read                                             (cpumaster_data_master_read),                                                               //                                                            .read
		.CPUMaster_data_master_readdata                                         (cpumaster_data_master_readdata),                                                           //                                                            .readdata
		.CPUMaster_data_master_readdatavalid                                    (cpumaster_data_master_readdatavalid),                                                      //                                                            .readdatavalid
		.CPUMaster_data_master_write                                            (cpumaster_data_master_write),                                                              //                                                            .write
		.CPUMaster_data_master_writedata                                        (cpumaster_data_master_writedata),                                                          //                                                            .writedata
		.CPUMaster_data_master_debugaccess                                      (cpumaster_data_master_debugaccess),                                                        //                                                            .debugaccess
		.CPUMaster_instruction_master_address                                   (cpumaster_instruction_master_address),                                                     //                                CPUMaster_instruction_master.address
		.CPUMaster_instruction_master_waitrequest                               (cpumaster_instruction_master_waitrequest),                                                 //                                                            .waitrequest
		.CPUMaster_instruction_master_read                                      (cpumaster_instruction_master_read),                                                        //                                                            .read
		.CPUMaster_instruction_master_readdata                                  (cpumaster_instruction_master_readdata),                                                    //                                                            .readdata
		.CPUMaster_instruction_master_readdatavalid                             (cpumaster_instruction_master_readdatavalid),                                               //                                                            .readdatavalid
		.CPUSlave1_data_master_address                                          (cpuslave1_data_master_address),                                                            //                                       CPUSlave1_data_master.address
		.CPUSlave1_data_master_waitrequest                                      (cpuslave1_data_master_waitrequest),                                                        //                                                            .waitrequest
		.CPUSlave1_data_master_byteenable                                       (cpuslave1_data_master_byteenable),                                                         //                                                            .byteenable
		.CPUSlave1_data_master_read                                             (cpuslave1_data_master_read),                                                               //                                                            .read
		.CPUSlave1_data_master_readdata                                         (cpuslave1_data_master_readdata),                                                           //                                                            .readdata
		.CPUSlave1_data_master_readdatavalid                                    (cpuslave1_data_master_readdatavalid),                                                      //                                                            .readdatavalid
		.CPUSlave1_data_master_write                                            (cpuslave1_data_master_write),                                                              //                                                            .write
		.CPUSlave1_data_master_writedata                                        (cpuslave1_data_master_writedata),                                                          //                                                            .writedata
		.CPUSlave1_data_master_debugaccess                                      (cpuslave1_data_master_debugaccess),                                                        //                                                            .debugaccess
		.CPUSlave1_instruction_master_address                                   (cpuslave1_instruction_master_address),                                                     //                                CPUSlave1_instruction_master.address
		.CPUSlave1_instruction_master_waitrequest                               (cpuslave1_instruction_master_waitrequest),                                                 //                                                            .waitrequest
		.CPUSlave1_instruction_master_read                                      (cpuslave1_instruction_master_read),                                                        //                                                            .read
		.CPUSlave1_instruction_master_readdata                                  (cpuslave1_instruction_master_readdata),                                                    //                                                            .readdata
		.CPUSlave1_instruction_master_readdatavalid                             (cpuslave1_instruction_master_readdatavalid),                                               //                                                            .readdatavalid
		.CPUSlave2_data_master_address                                          (cpuslave2_data_master_address),                                                            //                                       CPUSlave2_data_master.address
		.CPUSlave2_data_master_waitrequest                                      (cpuslave2_data_master_waitrequest),                                                        //                                                            .waitrequest
		.CPUSlave2_data_master_byteenable                                       (cpuslave2_data_master_byteenable),                                                         //                                                            .byteenable
		.CPUSlave2_data_master_read                                             (cpuslave2_data_master_read),                                                               //                                                            .read
		.CPUSlave2_data_master_readdata                                         (cpuslave2_data_master_readdata),                                                           //                                                            .readdata
		.CPUSlave2_data_master_readdatavalid                                    (cpuslave2_data_master_readdatavalid),                                                      //                                                            .readdatavalid
		.CPUSlave2_data_master_write                                            (cpuslave2_data_master_write),                                                              //                                                            .write
		.CPUSlave2_data_master_writedata                                        (cpuslave2_data_master_writedata),                                                          //                                                            .writedata
		.CPUSlave2_data_master_debugaccess                                      (cpuslave2_data_master_debugaccess),                                                        //                                                            .debugaccess
		.CPUSlave2_instruction_master_address                                   (cpuslave2_instruction_master_address),                                                     //                                CPUSlave2_instruction_master.address
		.CPUSlave2_instruction_master_waitrequest                               (cpuslave2_instruction_master_waitrequest),                                                 //                                                            .waitrequest
		.CPUSlave2_instruction_master_read                                      (cpuslave2_instruction_master_read),                                                        //                                                            .read
		.CPUSlave2_instruction_master_readdata                                  (cpuslave2_instruction_master_readdata),                                                    //                                                            .readdata
		.CPUSlave2_instruction_master_readdatavalid                             (cpuslave2_instruction_master_readdatavalid),                                               //                                                            .readdatavalid
		.CPUMaster_debug_mem_slave_address                                      (mm_interconnect_0_cpumaster_debug_mem_slave_address),                                      //                                   CPUMaster_debug_mem_slave.address
		.CPUMaster_debug_mem_slave_write                                        (mm_interconnect_0_cpumaster_debug_mem_slave_write),                                        //                                                            .write
		.CPUMaster_debug_mem_slave_read                                         (mm_interconnect_0_cpumaster_debug_mem_slave_read),                                         //                                                            .read
		.CPUMaster_debug_mem_slave_readdata                                     (mm_interconnect_0_cpumaster_debug_mem_slave_readdata),                                     //                                                            .readdata
		.CPUMaster_debug_mem_slave_writedata                                    (mm_interconnect_0_cpumaster_debug_mem_slave_writedata),                                    //                                                            .writedata
		.CPUMaster_debug_mem_slave_byteenable                                   (mm_interconnect_0_cpumaster_debug_mem_slave_byteenable),                                   //                                                            .byteenable
		.CPUMaster_debug_mem_slave_waitrequest                                  (mm_interconnect_0_cpumaster_debug_mem_slave_waitrequest),                                  //                                                            .waitrequest
		.CPUMaster_debug_mem_slave_debugaccess                                  (mm_interconnect_0_cpumaster_debug_mem_slave_debugaccess),                                  //                                                            .debugaccess
		.CPUSlave1_debug_mem_slave_address                                      (mm_interconnect_0_cpuslave1_debug_mem_slave_address),                                      //                                   CPUSlave1_debug_mem_slave.address
		.CPUSlave1_debug_mem_slave_write                                        (mm_interconnect_0_cpuslave1_debug_mem_slave_write),                                        //                                                            .write
		.CPUSlave1_debug_mem_slave_read                                         (mm_interconnect_0_cpuslave1_debug_mem_slave_read),                                         //                                                            .read
		.CPUSlave1_debug_mem_slave_readdata                                     (mm_interconnect_0_cpuslave1_debug_mem_slave_readdata),                                     //                                                            .readdata
		.CPUSlave1_debug_mem_slave_writedata                                    (mm_interconnect_0_cpuslave1_debug_mem_slave_writedata),                                    //                                                            .writedata
		.CPUSlave1_debug_mem_slave_byteenable                                   (mm_interconnect_0_cpuslave1_debug_mem_slave_byteenable),                                   //                                                            .byteenable
		.CPUSlave1_debug_mem_slave_waitrequest                                  (mm_interconnect_0_cpuslave1_debug_mem_slave_waitrequest),                                  //                                                            .waitrequest
		.CPUSlave1_debug_mem_slave_debugaccess                                  (mm_interconnect_0_cpuslave1_debug_mem_slave_debugaccess),                                  //                                                            .debugaccess
		.CPUSlave2_debug_mem_slave_address                                      (mm_interconnect_0_cpuslave2_debug_mem_slave_address),                                      //                                   CPUSlave2_debug_mem_slave.address
		.CPUSlave2_debug_mem_slave_write                                        (mm_interconnect_0_cpuslave2_debug_mem_slave_write),                                        //                                                            .write
		.CPUSlave2_debug_mem_slave_read                                         (mm_interconnect_0_cpuslave2_debug_mem_slave_read),                                         //                                                            .read
		.CPUSlave2_debug_mem_slave_readdata                                     (mm_interconnect_0_cpuslave2_debug_mem_slave_readdata),                                     //                                                            .readdata
		.CPUSlave2_debug_mem_slave_writedata                                    (mm_interconnect_0_cpuslave2_debug_mem_slave_writedata),                                    //                                                            .writedata
		.CPUSlave2_debug_mem_slave_byteenable                                   (mm_interconnect_0_cpuslave2_debug_mem_slave_byteenable),                                   //                                                            .byteenable
		.CPUSlave2_debug_mem_slave_waitrequest                                  (mm_interconnect_0_cpuslave2_debug_mem_slave_waitrequest),                                  //                                                            .waitrequest
		.CPUSlave2_debug_mem_slave_debugaccess                                  (mm_interconnect_0_cpuslave2_debug_mem_slave_debugaccess),                                  //                                                            .debugaccess
		.JTAGMaster_avalon_jtag_slave_address                                   (mm_interconnect_0_jtagmaster_avalon_jtag_slave_address),                                   //                                JTAGMaster_avalon_jtag_slave.address
		.JTAGMaster_avalon_jtag_slave_write                                     (mm_interconnect_0_jtagmaster_avalon_jtag_slave_write),                                     //                                                            .write
		.JTAGMaster_avalon_jtag_slave_read                                      (mm_interconnect_0_jtagmaster_avalon_jtag_slave_read),                                      //                                                            .read
		.JTAGMaster_avalon_jtag_slave_readdata                                  (mm_interconnect_0_jtagmaster_avalon_jtag_slave_readdata),                                  //                                                            .readdata
		.JTAGMaster_avalon_jtag_slave_writedata                                 (mm_interconnect_0_jtagmaster_avalon_jtag_slave_writedata),                                 //                                                            .writedata
		.JTAGMaster_avalon_jtag_slave_waitrequest                               (mm_interconnect_0_jtagmaster_avalon_jtag_slave_waitrequest),                               //                                                            .waitrequest
		.JTAGMaster_avalon_jtag_slave_chipselect                                (mm_interconnect_0_jtagmaster_avalon_jtag_slave_chipselect),                                //                                                            .chipselect
		.JTAGSlave1_avalon_jtag_slave_address                                   (mm_interconnect_0_jtagslave1_avalon_jtag_slave_address),                                   //                                JTAGSlave1_avalon_jtag_slave.address
		.JTAGSlave1_avalon_jtag_slave_write                                     (mm_interconnect_0_jtagslave1_avalon_jtag_slave_write),                                     //                                                            .write
		.JTAGSlave1_avalon_jtag_slave_read                                      (mm_interconnect_0_jtagslave1_avalon_jtag_slave_read),                                      //                                                            .read
		.JTAGSlave1_avalon_jtag_slave_readdata                                  (mm_interconnect_0_jtagslave1_avalon_jtag_slave_readdata),                                  //                                                            .readdata
		.JTAGSlave1_avalon_jtag_slave_writedata                                 (mm_interconnect_0_jtagslave1_avalon_jtag_slave_writedata),                                 //                                                            .writedata
		.JTAGSlave1_avalon_jtag_slave_waitrequest                               (mm_interconnect_0_jtagslave1_avalon_jtag_slave_waitrequest),                               //                                                            .waitrequest
		.JTAGSlave1_avalon_jtag_slave_chipselect                                (mm_interconnect_0_jtagslave1_avalon_jtag_slave_chipselect),                                //                                                            .chipselect
		.JTAGSlave2_avalon_jtag_slave_address                                   (mm_interconnect_0_jtagslave2_avalon_jtag_slave_address),                                   //                                JTAGSlave2_avalon_jtag_slave.address
		.JTAGSlave2_avalon_jtag_slave_write                                     (mm_interconnect_0_jtagslave2_avalon_jtag_slave_write),                                     //                                                            .write
		.JTAGSlave2_avalon_jtag_slave_read                                      (mm_interconnect_0_jtagslave2_avalon_jtag_slave_read),                                      //                                                            .read
		.JTAGSlave2_avalon_jtag_slave_readdata                                  (mm_interconnect_0_jtagslave2_avalon_jtag_slave_readdata),                                  //                                                            .readdata
		.JTAGSlave2_avalon_jtag_slave_writedata                                 (mm_interconnect_0_jtagslave2_avalon_jtag_slave_writedata),                                 //                                                            .writedata
		.JTAGSlave2_avalon_jtag_slave_waitrequest                               (mm_interconnect_0_jtagslave2_avalon_jtag_slave_waitrequest),                               //                                                            .waitrequest
		.JTAGSlave2_avalon_jtag_slave_chipselect                                (mm_interconnect_0_jtagslave2_avalon_jtag_slave_chipselect),                                //                                                            .chipselect
		.LEDGSlave1_s1_address                                                  (mm_interconnect_0_ledgslave1_s1_address),                                                  //                                               LEDGSlave1_s1.address
		.LEDGSlave1_s1_write                                                    (mm_interconnect_0_ledgslave1_s1_write),                                                    //                                                            .write
		.LEDGSlave1_s1_readdata                                                 (mm_interconnect_0_ledgslave1_s1_readdata),                                                 //                                                            .readdata
		.LEDGSlave1_s1_writedata                                                (mm_interconnect_0_ledgslave1_s1_writedata),                                                //                                                            .writedata
		.LEDGSlave1_s1_chipselect                                               (mm_interconnect_0_ledgslave1_s1_chipselect),                                               //                                                            .chipselect
		.LEDRSlave2_s1_address                                                  (mm_interconnect_0_ledrslave2_s1_address),                                                  //                                               LEDRSlave2_s1.address
		.LEDRSlave2_s1_write                                                    (mm_interconnect_0_ledrslave2_s1_write),                                                    //                                                            .write
		.LEDRSlave2_s1_readdata                                                 (mm_interconnect_0_ledrslave2_s1_readdata),                                                 //                                                            .readdata
		.LEDRSlave2_s1_writedata                                                (mm_interconnect_0_ledrslave2_s1_writedata),                                                //                                                            .writedata
		.LEDRSlave2_s1_chipselect                                               (mm_interconnect_0_ledrslave2_s1_chipselect),                                               //                                                            .chipselect
		.MEMMaster_s1_address                                                   (mm_interconnect_0_memmaster_s1_address),                                                   //                                                MEMMaster_s1.address
		.MEMMaster_s1_write                                                     (mm_interconnect_0_memmaster_s1_write),                                                     //                                                            .write
		.MEMMaster_s1_readdata                                                  (mm_interconnect_0_memmaster_s1_readdata),                                                  //                                                            .readdata
		.MEMMaster_s1_writedata                                                 (mm_interconnect_0_memmaster_s1_writedata),                                                 //                                                            .writedata
		.MEMMaster_s1_byteenable                                                (mm_interconnect_0_memmaster_s1_byteenable),                                                //                                                            .byteenable
		.MEMMaster_s1_chipselect                                                (mm_interconnect_0_memmaster_s1_chipselect),                                                //                                                            .chipselect
		.MEMMaster_s1_clken                                                     (mm_interconnect_0_memmaster_s1_clken),                                                     //                                                            .clken
		.MEMSlave1_s1_address                                                   (mm_interconnect_0_memslave1_s1_address),                                                   //                                                MEMSlave1_s1.address
		.MEMSlave1_s1_write                                                     (mm_interconnect_0_memslave1_s1_write),                                                     //                                                            .write
		.MEMSlave1_s1_readdata                                                  (mm_interconnect_0_memslave1_s1_readdata),                                                  //                                                            .readdata
		.MEMSlave1_s1_writedata                                                 (mm_interconnect_0_memslave1_s1_writedata),                                                 //                                                            .writedata
		.MEMSlave1_s1_byteenable                                                (mm_interconnect_0_memslave1_s1_byteenable),                                                //                                                            .byteenable
		.MEMSlave1_s1_chipselect                                                (mm_interconnect_0_memslave1_s1_chipselect),                                                //                                                            .chipselect
		.MEMSlave1_s1_clken                                                     (mm_interconnect_0_memslave1_s1_clken),                                                     //                                                            .clken
		.MEMSlave2_s1_address                                                   (mm_interconnect_0_memslave2_s1_address),                                                   //                                                MEMSlave2_s1.address
		.MEMSlave2_s1_write                                                     (mm_interconnect_0_memslave2_s1_write),                                                     //                                                            .write
		.MEMSlave2_s1_readdata                                                  (mm_interconnect_0_memslave2_s1_readdata),                                                  //                                                            .readdata
		.MEMSlave2_s1_writedata                                                 (mm_interconnect_0_memslave2_s1_writedata),                                                 //                                                            .writedata
		.MEMSlave2_s1_byteenable                                                (mm_interconnect_0_memslave2_s1_byteenable),                                                //                                                            .byteenable
		.MEMSlave2_s1_chipselect                                                (mm_interconnect_0_memslave2_s1_chipselect),                                                //                                                            .chipselect
		.MEMSlave2_s1_clken                                                     (mm_interconnect_0_memslave2_s1_clken),                                                     //                                                            .clken
		.mutex_0_s1_address                                                     (mm_interconnect_0_mutex_0_s1_address),                                                     //                                                  mutex_0_s1.address
		.mutex_0_s1_write                                                       (mm_interconnect_0_mutex_0_s1_write),                                                       //                                                            .write
		.mutex_0_s1_read                                                        (mm_interconnect_0_mutex_0_s1_read),                                                        //                                                            .read
		.mutex_0_s1_readdata                                                    (mm_interconnect_0_mutex_0_s1_readdata),                                                    //                                                            .readdata
		.mutex_0_s1_writedata                                                   (mm_interconnect_0_mutex_0_s1_writedata),                                                   //                                                            .writedata
		.mutex_0_s1_chipselect                                                  (mm_interconnect_0_mutex_0_s1_chipselect),                                                  //                                                            .chipselect
		.PIOSlave1_s1_address                                                   (mm_interconnect_0_pioslave1_s1_address),                                                   //                                                PIOSlave1_s1.address
		.PIOSlave1_s1_readdata                                                  (mm_interconnect_0_pioslave1_s1_readdata),                                                  //                                                            .readdata
		.PIOSlave2_s1_address                                                   (mm_interconnect_0_pioslave2_s1_address),                                                   //                                                PIOSlave2_s1.address
		.PIOSlave2_s1_readdata                                                  (mm_interconnect_0_pioslave2_s1_readdata),                                                  //                                                            .readdata
		.reg16_0_avalon_slave_0_write                                           (mm_interconnect_0_reg16_0_avalon_slave_0_write),                                           //                                      reg16_0_avalon_slave_0.write
		.reg16_0_avalon_slave_0_read                                            (mm_interconnect_0_reg16_0_avalon_slave_0_read),                                            //                                                            .read
		.reg16_0_avalon_slave_0_readdata                                        (mm_interconnect_0_reg16_0_avalon_slave_0_readdata),                                        //                                                            .readdata
		.reg16_0_avalon_slave_0_writedata                                       (mm_interconnect_0_reg16_0_avalon_slave_0_writedata),                                       //                                                            .writedata
		.reg16_0_avalon_slave_0_byteenable                                      (mm_interconnect_0_reg16_0_avalon_slave_0_byteenable),                                      //                                                            .byteenable
		.reg16_0_avalon_slave_0_chipselect                                      (mm_interconnect_0_reg16_0_avalon_slave_0_chipselect),                                      //                                                            .chipselect
		.uart_0_s1_address                                                      (mm_interconnect_0_uart_0_s1_address),                                                      //                                                   uart_0_s1.address
		.uart_0_s1_write                                                        (mm_interconnect_0_uart_0_s1_write),                                                        //                                                            .write
		.uart_0_s1_read                                                         (mm_interconnect_0_uart_0_s1_read),                                                         //                                                            .read
		.uart_0_s1_readdata                                                     (mm_interconnect_0_uart_0_s1_readdata),                                                     //                                                            .readdata
		.uart_0_s1_writedata                                                    (mm_interconnect_0_uart_0_s1_writedata),                                                    //                                                            .writedata
		.uart_0_s1_begintransfer                                                (mm_interconnect_0_uart_0_s1_begintransfer),                                                //                                                            .begintransfer
		.uart_0_s1_chipselect                                                   (mm_interconnect_0_uart_0_s1_chipselect),                                                   //                                                            .chipselect
		.video_character_buffer_with_dma_0_avalon_char_buffer_slave_address     (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_address),     //  video_character_buffer_with_dma_0_avalon_char_buffer_slave.address
		.video_character_buffer_with_dma_0_avalon_char_buffer_slave_write       (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_write),       //                                                            .write
		.video_character_buffer_with_dma_0_avalon_char_buffer_slave_read        (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_read),        //                                                            .read
		.video_character_buffer_with_dma_0_avalon_char_buffer_slave_readdata    (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_readdata),    //                                                            .readdata
		.video_character_buffer_with_dma_0_avalon_char_buffer_slave_writedata   (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_writedata),   //                                                            .writedata
		.video_character_buffer_with_dma_0_avalon_char_buffer_slave_byteenable  (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_byteenable),  //                                                            .byteenable
		.video_character_buffer_with_dma_0_avalon_char_buffer_slave_waitrequest (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_waitrequest), //                                                            .waitrequest
		.video_character_buffer_with_dma_0_avalon_char_buffer_slave_chipselect  (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_buffer_slave_chipselect),  //                                                            .chipselect
		.video_character_buffer_with_dma_0_avalon_char_control_slave_address    (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_control_slave_address),    // video_character_buffer_with_dma_0_avalon_char_control_slave.address
		.video_character_buffer_with_dma_0_avalon_char_control_slave_write      (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_control_slave_write),      //                                                            .write
		.video_character_buffer_with_dma_0_avalon_char_control_slave_read       (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_control_slave_read),       //                                                            .read
		.video_character_buffer_with_dma_0_avalon_char_control_slave_readdata   (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_control_slave_readdata),   //                                                            .readdata
		.video_character_buffer_with_dma_0_avalon_char_control_slave_writedata  (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_control_slave_writedata),  //                                                            .writedata
		.video_character_buffer_with_dma_0_avalon_char_control_slave_byteenable (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_control_slave_byteenable), //                                                            .byteenable
		.video_character_buffer_with_dma_0_avalon_char_control_slave_chipselect (mm_interconnect_0_video_character_buffer_with_dma_0_avalon_char_control_slave_chipselect)  //                                                            .chipselect
	);

	Embedded_irq_mapper irq_mapper (
		.clk           (clk_clk),                        //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       // receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),       // receiver1.irq
		.sender_irq    (cpumaster_irq_irq)               //    sender.irq
	);

	Embedded_irq_mapper_001 irq_mapper_001 (
		.clk           (clk_clk),                        //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_001_receiver0_irq),   // receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),       // receiver1.irq
		.sender_irq    (cpuslave1_irq_irq)               //    sender.irq
	);

	Embedded_irq_mapper_002 irq_mapper_002 (
		.clk           (clk_clk),                        //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_002_receiver0_irq),   // receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),       // receiver1.irq
		.sender_irq    (cpuslave2_irq_irq)               //    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.clk            (clk_clk),                            //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.clk            (video_pll_0_vga_clk_clk),            //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule

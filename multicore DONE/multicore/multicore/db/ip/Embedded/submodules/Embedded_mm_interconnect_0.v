// Embedded_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.0 145

`timescale 1 ps / 1 ps
module Embedded_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                                          //                                                   clk_0_clk.clk
		input  wire        CPUMaster_reset_reset_bridge_in_reset_reset,                            //                       CPUMaster_reset_reset_bridge_in_reset.reset
		input  wire [25:0] CPUMaster_data_master_address,                                          //                                       CPUMaster_data_master.address
		output wire        CPUMaster_data_master_waitrequest,                                      //                                                            .waitrequest
		input  wire [3:0]  CPUMaster_data_master_byteenable,                                       //                                                            .byteenable
		input  wire        CPUMaster_data_master_read,                                             //                                                            .read
		output wire [31:0] CPUMaster_data_master_readdata,                                         //                                                            .readdata
		output wire        CPUMaster_data_master_readdatavalid,                                    //                                                            .readdatavalid
		input  wire        CPUMaster_data_master_write,                                            //                                                            .write
		input  wire [31:0] CPUMaster_data_master_writedata,                                        //                                                            .writedata
		input  wire        CPUMaster_data_master_debugaccess,                                      //                                                            .debugaccess
		input  wire [18:0] CPUMaster_instruction_master_address,                                   //                                CPUMaster_instruction_master.address
		output wire        CPUMaster_instruction_master_waitrequest,                               //                                                            .waitrequest
		input  wire        CPUMaster_instruction_master_read,                                      //                                                            .read
		output wire [31:0] CPUMaster_instruction_master_readdata,                                  //                                                            .readdata
		output wire        CPUMaster_instruction_master_readdatavalid,                             //                                                            .readdatavalid
		input  wire [25:0] CPUSlave1_data_master_address,                                          //                                       CPUSlave1_data_master.address
		output wire        CPUSlave1_data_master_waitrequest,                                      //                                                            .waitrequest
		input  wire [3:0]  CPUSlave1_data_master_byteenable,                                       //                                                            .byteenable
		input  wire        CPUSlave1_data_master_read,                                             //                                                            .read
		output wire [31:0] CPUSlave1_data_master_readdata,                                         //                                                            .readdata
		output wire        CPUSlave1_data_master_readdatavalid,                                    //                                                            .readdatavalid
		input  wire        CPUSlave1_data_master_write,                                            //                                                            .write
		input  wire [31:0] CPUSlave1_data_master_writedata,                                        //                                                            .writedata
		input  wire        CPUSlave1_data_master_debugaccess,                                      //                                                            .debugaccess
		input  wire [20:0] CPUSlave1_instruction_master_address,                                   //                                CPUSlave1_instruction_master.address
		output wire        CPUSlave1_instruction_master_waitrequest,                               //                                                            .waitrequest
		input  wire        CPUSlave1_instruction_master_read,                                      //                                                            .read
		output wire [31:0] CPUSlave1_instruction_master_readdata,                                  //                                                            .readdata
		output wire        CPUSlave1_instruction_master_readdatavalid,                             //                                                            .readdatavalid
		input  wire [25:0] CPUSlave2_data_master_address,                                          //                                       CPUSlave2_data_master.address
		output wire        CPUSlave2_data_master_waitrequest,                                      //                                                            .waitrequest
		input  wire [3:0]  CPUSlave2_data_master_byteenable,                                       //                                                            .byteenable
		input  wire        CPUSlave2_data_master_read,                                             //                                                            .read
		output wire [31:0] CPUSlave2_data_master_readdata,                                         //                                                            .readdata
		output wire        CPUSlave2_data_master_readdatavalid,                                    //                                                            .readdatavalid
		input  wire        CPUSlave2_data_master_write,                                            //                                                            .write
		input  wire [31:0] CPUSlave2_data_master_writedata,                                        //                                                            .writedata
		input  wire        CPUSlave2_data_master_debugaccess,                                      //                                                            .debugaccess
		input  wire [21:0] CPUSlave2_instruction_master_address,                                   //                                CPUSlave2_instruction_master.address
		output wire        CPUSlave2_instruction_master_waitrequest,                               //                                                            .waitrequest
		input  wire        CPUSlave2_instruction_master_read,                                      //                                                            .read
		output wire [31:0] CPUSlave2_instruction_master_readdata,                                  //                                                            .readdata
		output wire        CPUSlave2_instruction_master_readdatavalid,                             //                                                            .readdatavalid
		output wire [8:0]  CPUMaster_debug_mem_slave_address,                                      //                                   CPUMaster_debug_mem_slave.address
		output wire        CPUMaster_debug_mem_slave_write,                                        //                                                            .write
		output wire        CPUMaster_debug_mem_slave_read,                                         //                                                            .read
		input  wire [31:0] CPUMaster_debug_mem_slave_readdata,                                     //                                                            .readdata
		output wire [31:0] CPUMaster_debug_mem_slave_writedata,                                    //                                                            .writedata
		output wire [3:0]  CPUMaster_debug_mem_slave_byteenable,                                   //                                                            .byteenable
		input  wire        CPUMaster_debug_mem_slave_waitrequest,                                  //                                                            .waitrequest
		output wire        CPUMaster_debug_mem_slave_debugaccess,                                  //                                                            .debugaccess
		output wire [8:0]  CPUSlave1_debug_mem_slave_address,                                      //                                   CPUSlave1_debug_mem_slave.address
		output wire        CPUSlave1_debug_mem_slave_write,                                        //                                                            .write
		output wire        CPUSlave1_debug_mem_slave_read,                                         //                                                            .read
		input  wire [31:0] CPUSlave1_debug_mem_slave_readdata,                                     //                                                            .readdata
		output wire [31:0] CPUSlave1_debug_mem_slave_writedata,                                    //                                                            .writedata
		output wire [3:0]  CPUSlave1_debug_mem_slave_byteenable,                                   //                                                            .byteenable
		input  wire        CPUSlave1_debug_mem_slave_waitrequest,                                  //                                                            .waitrequest
		output wire        CPUSlave1_debug_mem_slave_debugaccess,                                  //                                                            .debugaccess
		output wire [8:0]  CPUSlave2_debug_mem_slave_address,                                      //                                   CPUSlave2_debug_mem_slave.address
		output wire        CPUSlave2_debug_mem_slave_write,                                        //                                                            .write
		output wire        CPUSlave2_debug_mem_slave_read,                                         //                                                            .read
		input  wire [31:0] CPUSlave2_debug_mem_slave_readdata,                                     //                                                            .readdata
		output wire [31:0] CPUSlave2_debug_mem_slave_writedata,                                    //                                                            .writedata
		output wire [3:0]  CPUSlave2_debug_mem_slave_byteenable,                                   //                                                            .byteenable
		input  wire        CPUSlave2_debug_mem_slave_waitrequest,                                  //                                                            .waitrequest
		output wire        CPUSlave2_debug_mem_slave_debugaccess,                                  //                                                            .debugaccess
		output wire [0:0]  JTAGMaster_avalon_jtag_slave_address,                                   //                                JTAGMaster_avalon_jtag_slave.address
		output wire        JTAGMaster_avalon_jtag_slave_write,                                     //                                                            .write
		output wire        JTAGMaster_avalon_jtag_slave_read,                                      //                                                            .read
		input  wire [31:0] JTAGMaster_avalon_jtag_slave_readdata,                                  //                                                            .readdata
		output wire [31:0] JTAGMaster_avalon_jtag_slave_writedata,                                 //                                                            .writedata
		input  wire        JTAGMaster_avalon_jtag_slave_waitrequest,                               //                                                            .waitrequest
		output wire        JTAGMaster_avalon_jtag_slave_chipselect,                                //                                                            .chipselect
		output wire [0:0]  JTAGSlave1_avalon_jtag_slave_address,                                   //                                JTAGSlave1_avalon_jtag_slave.address
		output wire        JTAGSlave1_avalon_jtag_slave_write,                                     //                                                            .write
		output wire        JTAGSlave1_avalon_jtag_slave_read,                                      //                                                            .read
		input  wire [31:0] JTAGSlave1_avalon_jtag_slave_readdata,                                  //                                                            .readdata
		output wire [31:0] JTAGSlave1_avalon_jtag_slave_writedata,                                 //                                                            .writedata
		input  wire        JTAGSlave1_avalon_jtag_slave_waitrequest,                               //                                                            .waitrequest
		output wire        JTAGSlave1_avalon_jtag_slave_chipselect,                                //                                                            .chipselect
		output wire [0:0]  JTAGSlave2_avalon_jtag_slave_address,                                   //                                JTAGSlave2_avalon_jtag_slave.address
		output wire        JTAGSlave2_avalon_jtag_slave_write,                                     //                                                            .write
		output wire        JTAGSlave2_avalon_jtag_slave_read,                                      //                                                            .read
		input  wire [31:0] JTAGSlave2_avalon_jtag_slave_readdata,                                  //                                                            .readdata
		output wire [31:0] JTAGSlave2_avalon_jtag_slave_writedata,                                 //                                                            .writedata
		input  wire        JTAGSlave2_avalon_jtag_slave_waitrequest,                               //                                                            .waitrequest
		output wire        JTAGSlave2_avalon_jtag_slave_chipselect,                                //                                                            .chipselect
		output wire [1:0]  LEDGSlave1_s1_address,                                                  //                                               LEDGSlave1_s1.address
		output wire        LEDGSlave1_s1_write,                                                    //                                                            .write
		input  wire [31:0] LEDGSlave1_s1_readdata,                                                 //                                                            .readdata
		output wire [31:0] LEDGSlave1_s1_writedata,                                                //                                                            .writedata
		output wire        LEDGSlave1_s1_chipselect,                                               //                                                            .chipselect
		output wire [1:0]  LEDRSlave2_s1_address,                                                  //                                               LEDRSlave2_s1.address
		output wire        LEDRSlave2_s1_write,                                                    //                                                            .write
		input  wire [31:0] LEDRSlave2_s1_readdata,                                                 //                                                            .readdata
		output wire [31:0] LEDRSlave2_s1_writedata,                                                //                                                            .writedata
		output wire        LEDRSlave2_s1_chipselect,                                               //                                                            .chipselect
		output wire [14:0] MEMMaster_s1_address,                                                   //                                                MEMMaster_s1.address
		output wire        MEMMaster_s1_write,                                                     //                                                            .write
		input  wire [31:0] MEMMaster_s1_readdata,                                                  //                                                            .readdata
		output wire [31:0] MEMMaster_s1_writedata,                                                 //                                                            .writedata
		output wire [3:0]  MEMMaster_s1_byteenable,                                                //                                                            .byteenable
		output wire        MEMMaster_s1_chipselect,                                                //                                                            .chipselect
		output wire        MEMMaster_s1_clken,                                                     //                                                            .clken
		output wire [14:0] MEMSlave1_s1_address,                                                   //                                                MEMSlave1_s1.address
		output wire        MEMSlave1_s1_write,                                                     //                                                            .write
		input  wire [31:0] MEMSlave1_s1_readdata,                                                  //                                                            .readdata
		output wire [31:0] MEMSlave1_s1_writedata,                                                 //                                                            .writedata
		output wire [3:0]  MEMSlave1_s1_byteenable,                                                //                                                            .byteenable
		output wire        MEMSlave1_s1_chipselect,                                                //                                                            .chipselect
		output wire        MEMSlave1_s1_clken,                                                     //                                                            .clken
		output wire [14:0] MEMSlave2_s1_address,                                                   //                                                MEMSlave2_s1.address
		output wire        MEMSlave2_s1_write,                                                     //                                                            .write
		input  wire [31:0] MEMSlave2_s1_readdata,                                                  //                                                            .readdata
		output wire [31:0] MEMSlave2_s1_writedata,                                                 //                                                            .writedata
		output wire [3:0]  MEMSlave2_s1_byteenable,                                                //                                                            .byteenable
		output wire        MEMSlave2_s1_chipselect,                                                //                                                            .chipselect
		output wire        MEMSlave2_s1_clken,                                                     //                                                            .clken
		output wire [0:0]  mutex_0_s1_address,                                                     //                                                  mutex_0_s1.address
		output wire        mutex_0_s1_write,                                                       //                                                            .write
		output wire        mutex_0_s1_read,                                                        //                                                            .read
		input  wire [31:0] mutex_0_s1_readdata,                                                    //                                                            .readdata
		output wire [31:0] mutex_0_s1_writedata,                                                   //                                                            .writedata
		output wire        mutex_0_s1_chipselect,                                                  //                                                            .chipselect
		output wire [1:0]  PIOSlave1_s1_address,                                                   //                                                PIOSlave1_s1.address
		input  wire [31:0] PIOSlave1_s1_readdata,                                                  //                                                            .readdata
		output wire [1:0]  PIOSlave2_s1_address,                                                   //                                                PIOSlave2_s1.address
		input  wire [31:0] PIOSlave2_s1_readdata,                                                  //                                                            .readdata
		output wire        reg16_0_avalon_slave_0_write,                                           //                                      reg16_0_avalon_slave_0.write
		output wire        reg16_0_avalon_slave_0_read,                                            //                                                            .read
		input  wire [15:0] reg16_0_avalon_slave_0_readdata,                                        //                                                            .readdata
		output wire [15:0] reg16_0_avalon_slave_0_writedata,                                       //                                                            .writedata
		output wire [1:0]  reg16_0_avalon_slave_0_byteenable,                                      //                                                            .byteenable
		output wire        reg16_0_avalon_slave_0_chipselect,                                      //                                                            .chipselect
		output wire [2:0]  uart_0_s1_address,                                                      //                                                   uart_0_s1.address
		output wire        uart_0_s1_write,                                                        //                                                            .write
		output wire        uart_0_s1_read,                                                         //                                                            .read
		input  wire [15:0] uart_0_s1_readdata,                                                     //                                                            .readdata
		output wire [15:0] uart_0_s1_writedata,                                                    //                                                            .writedata
		output wire        uart_0_s1_begintransfer,                                                //                                                            .begintransfer
		output wire        uart_0_s1_chipselect,                                                   //                                                            .chipselect
		output wire [12:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_address,     //  video_character_buffer_with_dma_0_avalon_char_buffer_slave.address
		output wire        video_character_buffer_with_dma_0_avalon_char_buffer_slave_write,       //                                                            .write
		output wire        video_character_buffer_with_dma_0_avalon_char_buffer_slave_read,        //                                                            .read
		input  wire [7:0]  video_character_buffer_with_dma_0_avalon_char_buffer_slave_readdata,    //                                                            .readdata
		output wire [7:0]  video_character_buffer_with_dma_0_avalon_char_buffer_slave_writedata,   //                                                            .writedata
		output wire [0:0]  video_character_buffer_with_dma_0_avalon_char_buffer_slave_byteenable,  //                                                            .byteenable
		input  wire        video_character_buffer_with_dma_0_avalon_char_buffer_slave_waitrequest, //                                                            .waitrequest
		output wire        video_character_buffer_with_dma_0_avalon_char_buffer_slave_chipselect,  //                                                            .chipselect
		output wire [0:0]  video_character_buffer_with_dma_0_avalon_char_control_slave_address,    // video_character_buffer_with_dma_0_avalon_char_control_slave.address
		output wire        video_character_buffer_with_dma_0_avalon_char_control_slave_write,      //                                                            .write
		output wire        video_character_buffer_with_dma_0_avalon_char_control_slave_read,       //                                                            .read
		input  wire [31:0] video_character_buffer_with_dma_0_avalon_char_control_slave_readdata,   //                                                            .readdata
		output wire [31:0] video_character_buffer_with_dma_0_avalon_char_control_slave_writedata,  //                                                            .writedata
		output wire [3:0]  video_character_buffer_with_dma_0_avalon_char_control_slave_byteenable, //                                                            .byteenable
		output wire        video_character_buffer_with_dma_0_avalon_char_control_slave_chipselect  //                                                            .chipselect
	);

	wire          cpumaster_data_master_translator_avalon_universal_master_0_waitrequest;                         // CPUMaster_data_master_agent:av_waitrequest -> CPUMaster_data_master_translator:uav_waitrequest
	wire   [31:0] cpumaster_data_master_translator_avalon_universal_master_0_readdata;                            // CPUMaster_data_master_agent:av_readdata -> CPUMaster_data_master_translator:uav_readdata
	wire          cpumaster_data_master_translator_avalon_universal_master_0_debugaccess;                         // CPUMaster_data_master_translator:uav_debugaccess -> CPUMaster_data_master_agent:av_debugaccess
	wire   [25:0] cpumaster_data_master_translator_avalon_universal_master_0_address;                             // CPUMaster_data_master_translator:uav_address -> CPUMaster_data_master_agent:av_address
	wire          cpumaster_data_master_translator_avalon_universal_master_0_read;                                // CPUMaster_data_master_translator:uav_read -> CPUMaster_data_master_agent:av_read
	wire    [3:0] cpumaster_data_master_translator_avalon_universal_master_0_byteenable;                          // CPUMaster_data_master_translator:uav_byteenable -> CPUMaster_data_master_agent:av_byteenable
	wire          cpumaster_data_master_translator_avalon_universal_master_0_readdatavalid;                       // CPUMaster_data_master_agent:av_readdatavalid -> CPUMaster_data_master_translator:uav_readdatavalid
	wire          cpumaster_data_master_translator_avalon_universal_master_0_lock;                                // CPUMaster_data_master_translator:uav_lock -> CPUMaster_data_master_agent:av_lock
	wire          cpumaster_data_master_translator_avalon_universal_master_0_write;                               // CPUMaster_data_master_translator:uav_write -> CPUMaster_data_master_agent:av_write
	wire   [31:0] cpumaster_data_master_translator_avalon_universal_master_0_writedata;                           // CPUMaster_data_master_translator:uav_writedata -> CPUMaster_data_master_agent:av_writedata
	wire    [2:0] cpumaster_data_master_translator_avalon_universal_master_0_burstcount;                          // CPUMaster_data_master_translator:uav_burstcount -> CPUMaster_data_master_agent:av_burstcount
	wire          cpuslave1_data_master_translator_avalon_universal_master_0_waitrequest;                         // CPUSlave1_data_master_agent:av_waitrequest -> CPUSlave1_data_master_translator:uav_waitrequest
	wire   [31:0] cpuslave1_data_master_translator_avalon_universal_master_0_readdata;                            // CPUSlave1_data_master_agent:av_readdata -> CPUSlave1_data_master_translator:uav_readdata
	wire          cpuslave1_data_master_translator_avalon_universal_master_0_debugaccess;                         // CPUSlave1_data_master_translator:uav_debugaccess -> CPUSlave1_data_master_agent:av_debugaccess
	wire   [25:0] cpuslave1_data_master_translator_avalon_universal_master_0_address;                             // CPUSlave1_data_master_translator:uav_address -> CPUSlave1_data_master_agent:av_address
	wire          cpuslave1_data_master_translator_avalon_universal_master_0_read;                                // CPUSlave1_data_master_translator:uav_read -> CPUSlave1_data_master_agent:av_read
	wire    [3:0] cpuslave1_data_master_translator_avalon_universal_master_0_byteenable;                          // CPUSlave1_data_master_translator:uav_byteenable -> CPUSlave1_data_master_agent:av_byteenable
	wire          cpuslave1_data_master_translator_avalon_universal_master_0_readdatavalid;                       // CPUSlave1_data_master_agent:av_readdatavalid -> CPUSlave1_data_master_translator:uav_readdatavalid
	wire          cpuslave1_data_master_translator_avalon_universal_master_0_lock;                                // CPUSlave1_data_master_translator:uav_lock -> CPUSlave1_data_master_agent:av_lock
	wire          cpuslave1_data_master_translator_avalon_universal_master_0_write;                               // CPUSlave1_data_master_translator:uav_write -> CPUSlave1_data_master_agent:av_write
	wire   [31:0] cpuslave1_data_master_translator_avalon_universal_master_0_writedata;                           // CPUSlave1_data_master_translator:uav_writedata -> CPUSlave1_data_master_agent:av_writedata
	wire    [2:0] cpuslave1_data_master_translator_avalon_universal_master_0_burstcount;                          // CPUSlave1_data_master_translator:uav_burstcount -> CPUSlave1_data_master_agent:av_burstcount
	wire          cpuslave2_data_master_translator_avalon_universal_master_0_waitrequest;                         // CPUSlave2_data_master_agent:av_waitrequest -> CPUSlave2_data_master_translator:uav_waitrequest
	wire   [31:0] cpuslave2_data_master_translator_avalon_universal_master_0_readdata;                            // CPUSlave2_data_master_agent:av_readdata -> CPUSlave2_data_master_translator:uav_readdata
	wire          cpuslave2_data_master_translator_avalon_universal_master_0_debugaccess;                         // CPUSlave2_data_master_translator:uav_debugaccess -> CPUSlave2_data_master_agent:av_debugaccess
	wire   [25:0] cpuslave2_data_master_translator_avalon_universal_master_0_address;                             // CPUSlave2_data_master_translator:uav_address -> CPUSlave2_data_master_agent:av_address
	wire          cpuslave2_data_master_translator_avalon_universal_master_0_read;                                // CPUSlave2_data_master_translator:uav_read -> CPUSlave2_data_master_agent:av_read
	wire    [3:0] cpuslave2_data_master_translator_avalon_universal_master_0_byteenable;                          // CPUSlave2_data_master_translator:uav_byteenable -> CPUSlave2_data_master_agent:av_byteenable
	wire          cpuslave2_data_master_translator_avalon_universal_master_0_readdatavalid;                       // CPUSlave2_data_master_agent:av_readdatavalid -> CPUSlave2_data_master_translator:uav_readdatavalid
	wire          cpuslave2_data_master_translator_avalon_universal_master_0_lock;                                // CPUSlave2_data_master_translator:uav_lock -> CPUSlave2_data_master_agent:av_lock
	wire          cpuslave2_data_master_translator_avalon_universal_master_0_write;                               // CPUSlave2_data_master_translator:uav_write -> CPUSlave2_data_master_agent:av_write
	wire   [31:0] cpuslave2_data_master_translator_avalon_universal_master_0_writedata;                           // CPUSlave2_data_master_translator:uav_writedata -> CPUSlave2_data_master_agent:av_writedata
	wire    [2:0] cpuslave2_data_master_translator_avalon_universal_master_0_burstcount;                          // CPUSlave2_data_master_translator:uav_burstcount -> CPUSlave2_data_master_agent:av_burstcount
	wire          cpuslave2_instruction_master_translator_avalon_universal_master_0_waitrequest;                  // CPUSlave2_instruction_master_agent:av_waitrequest -> CPUSlave2_instruction_master_translator:uav_waitrequest
	wire   [31:0] cpuslave2_instruction_master_translator_avalon_universal_master_0_readdata;                     // CPUSlave2_instruction_master_agent:av_readdata -> CPUSlave2_instruction_master_translator:uav_readdata
	wire          cpuslave2_instruction_master_translator_avalon_universal_master_0_debugaccess;                  // CPUSlave2_instruction_master_translator:uav_debugaccess -> CPUSlave2_instruction_master_agent:av_debugaccess
	wire   [25:0] cpuslave2_instruction_master_translator_avalon_universal_master_0_address;                      // CPUSlave2_instruction_master_translator:uav_address -> CPUSlave2_instruction_master_agent:av_address
	wire          cpuslave2_instruction_master_translator_avalon_universal_master_0_read;                         // CPUSlave2_instruction_master_translator:uav_read -> CPUSlave2_instruction_master_agent:av_read
	wire    [3:0] cpuslave2_instruction_master_translator_avalon_universal_master_0_byteenable;                   // CPUSlave2_instruction_master_translator:uav_byteenable -> CPUSlave2_instruction_master_agent:av_byteenable
	wire          cpuslave2_instruction_master_translator_avalon_universal_master_0_readdatavalid;                // CPUSlave2_instruction_master_agent:av_readdatavalid -> CPUSlave2_instruction_master_translator:uav_readdatavalid
	wire          cpuslave2_instruction_master_translator_avalon_universal_master_0_lock;                         // CPUSlave2_instruction_master_translator:uav_lock -> CPUSlave2_instruction_master_agent:av_lock
	wire          cpuslave2_instruction_master_translator_avalon_universal_master_0_write;                        // CPUSlave2_instruction_master_translator:uav_write -> CPUSlave2_instruction_master_agent:av_write
	wire   [31:0] cpuslave2_instruction_master_translator_avalon_universal_master_0_writedata;                    // CPUSlave2_instruction_master_translator:uav_writedata -> CPUSlave2_instruction_master_agent:av_writedata
	wire    [2:0] cpuslave2_instruction_master_translator_avalon_universal_master_0_burstcount;                   // CPUSlave2_instruction_master_translator:uav_burstcount -> CPUSlave2_instruction_master_agent:av_burstcount
	wire          cpuslave1_instruction_master_translator_avalon_universal_master_0_waitrequest;                  // CPUSlave1_instruction_master_agent:av_waitrequest -> CPUSlave1_instruction_master_translator:uav_waitrequest
	wire   [31:0] cpuslave1_instruction_master_translator_avalon_universal_master_0_readdata;                     // CPUSlave1_instruction_master_agent:av_readdata -> CPUSlave1_instruction_master_translator:uav_readdata
	wire          cpuslave1_instruction_master_translator_avalon_universal_master_0_debugaccess;                  // CPUSlave1_instruction_master_translator:uav_debugaccess -> CPUSlave1_instruction_master_agent:av_debugaccess
	wire   [25:0] cpuslave1_instruction_master_translator_avalon_universal_master_0_address;                      // CPUSlave1_instruction_master_translator:uav_address -> CPUSlave1_instruction_master_agent:av_address
	wire          cpuslave1_instruction_master_translator_avalon_universal_master_0_read;                         // CPUSlave1_instruction_master_translator:uav_read -> CPUSlave1_instruction_master_agent:av_read
	wire    [3:0] cpuslave1_instruction_master_translator_avalon_universal_master_0_byteenable;                   // CPUSlave1_instruction_master_translator:uav_byteenable -> CPUSlave1_instruction_master_agent:av_byteenable
	wire          cpuslave1_instruction_master_translator_avalon_universal_master_0_readdatavalid;                // CPUSlave1_instruction_master_agent:av_readdatavalid -> CPUSlave1_instruction_master_translator:uav_readdatavalid
	wire          cpuslave1_instruction_master_translator_avalon_universal_master_0_lock;                         // CPUSlave1_instruction_master_translator:uav_lock -> CPUSlave1_instruction_master_agent:av_lock
	wire          cpuslave1_instruction_master_translator_avalon_universal_master_0_write;                        // CPUSlave1_instruction_master_translator:uav_write -> CPUSlave1_instruction_master_agent:av_write
	wire   [31:0] cpuslave1_instruction_master_translator_avalon_universal_master_0_writedata;                    // CPUSlave1_instruction_master_translator:uav_writedata -> CPUSlave1_instruction_master_agent:av_writedata
	wire    [2:0] cpuslave1_instruction_master_translator_avalon_universal_master_0_burstcount;                   // CPUSlave1_instruction_master_translator:uav_burstcount -> CPUSlave1_instruction_master_agent:av_burstcount
	wire          cpumaster_instruction_master_translator_avalon_universal_master_0_waitrequest;                  // CPUMaster_instruction_master_agent:av_waitrequest -> CPUMaster_instruction_master_translator:uav_waitrequest
	wire   [31:0] cpumaster_instruction_master_translator_avalon_universal_master_0_readdata;                     // CPUMaster_instruction_master_agent:av_readdata -> CPUMaster_instruction_master_translator:uav_readdata
	wire          cpumaster_instruction_master_translator_avalon_universal_master_0_debugaccess;                  // CPUMaster_instruction_master_translator:uav_debugaccess -> CPUMaster_instruction_master_agent:av_debugaccess
	wire   [25:0] cpumaster_instruction_master_translator_avalon_universal_master_0_address;                      // CPUMaster_instruction_master_translator:uav_address -> CPUMaster_instruction_master_agent:av_address
	wire          cpumaster_instruction_master_translator_avalon_universal_master_0_read;                         // CPUMaster_instruction_master_translator:uav_read -> CPUMaster_instruction_master_agent:av_read
	wire    [3:0] cpumaster_instruction_master_translator_avalon_universal_master_0_byteenable;                   // CPUMaster_instruction_master_translator:uav_byteenable -> CPUMaster_instruction_master_agent:av_byteenable
	wire          cpumaster_instruction_master_translator_avalon_universal_master_0_readdatavalid;                // CPUMaster_instruction_master_agent:av_readdatavalid -> CPUMaster_instruction_master_translator:uav_readdatavalid
	wire          cpumaster_instruction_master_translator_avalon_universal_master_0_lock;                         // CPUMaster_instruction_master_translator:uav_lock -> CPUMaster_instruction_master_agent:av_lock
	wire          cpumaster_instruction_master_translator_avalon_universal_master_0_write;                        // CPUMaster_instruction_master_translator:uav_write -> CPUMaster_instruction_master_agent:av_write
	wire   [31:0] cpumaster_instruction_master_translator_avalon_universal_master_0_writedata;                    // CPUMaster_instruction_master_translator:uav_writedata -> CPUMaster_instruction_master_agent:av_writedata
	wire    [2:0] cpumaster_instruction_master_translator_avalon_universal_master_0_burstcount;                   // CPUMaster_instruction_master_translator:uav_burstcount -> CPUMaster_instruction_master_agent:av_burstcount
	wire    [7:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdata;                   // video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_readdata -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_readdata
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_waitrequest;                // video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_waitrequest -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_waitrequest
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_debugaccess;                // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_debugaccess -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_debugaccess
	wire   [25:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_address;                    // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_address -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_address
	wire    [0:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_byteenable;                 // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_byteenable -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_byteenable
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_read;                       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_read -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_read
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdatavalid;              // video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_readdatavalid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_readdatavalid
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_lock;                       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_lock -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_lock
	wire    [7:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_writedata;                  // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_writedata -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_writedata
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_write;                      // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_write -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_write
	wire    [0:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_burstcount;                 // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_burstcount -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_burstcount
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_valid;               // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_source_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:in_valid
	wire   [79:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_data;                // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_source_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:in_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_ready;               // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:in_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_source_ready
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_startofpacket;       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_source_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:in_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_endofpacket;         // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_source_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:in_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_valid;            // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:out_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_sink_valid
	wire   [79:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_data;             // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:out_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_sink_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_ready;            // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_sink_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:out_ready
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_startofpacket;    // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:out_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_sink_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_endofpacket;      // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:out_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_sink_endofpacket
	wire   [31:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdata;                  // video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_readdata -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_readdata
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_waitrequest;               // video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_waitrequest -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_waitrequest
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_debugaccess;               // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_debugaccess -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_debugaccess
	wire   [25:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_address;                   // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_address -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_address
	wire    [3:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_byteenable;                // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_byteenable -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_byteenable
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_read;                      // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_read -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_read
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdatavalid;             // video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_readdatavalid -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_readdatavalid
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_lock;                      // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_lock -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_lock
	wire   [31:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_writedata;                 // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_writedata -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_writedata
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_write;                     // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_write -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_write
	wire    [2:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_burstcount;                // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_burstcount -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_burstcount
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_valid;              // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_source_valid -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:in_valid
	wire  [106:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_data;               // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_source_data -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:in_data
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_ready;              // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:in_ready -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_source_ready
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_startofpacket;      // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_source_startofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:in_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_endofpacket;        // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_source_endofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:in_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_valid;           // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:out_valid -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_sink_valid
	wire  [106:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_data;            // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:out_data -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_sink_data
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_ready;           // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_sink_ready -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:out_ready
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_startofpacket;   // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:out_startofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_sink_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_endofpacket;     // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:out_endofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                                          // cmd_mux_001:src_valid -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_valid
	wire  [105:0] cmd_mux_001_src_data;                                                                           // cmd_mux_001:src_data -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                          // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [17:0] cmd_mux_001_src_channel;                                                                        // cmd_mux_001:src_channel -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                                  // cmd_mux_001:src_startofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                    // cmd_mux_001:src_endofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_endofpacket
	wire   [31:0] jtagmaster_avalon_jtag_slave_agent_m0_readdata;                                                 // JTAGMaster_avalon_jtag_slave_translator:uav_readdata -> JTAGMaster_avalon_jtag_slave_agent:m0_readdata
	wire          jtagmaster_avalon_jtag_slave_agent_m0_waitrequest;                                              // JTAGMaster_avalon_jtag_slave_translator:uav_waitrequest -> JTAGMaster_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtagmaster_avalon_jtag_slave_agent_m0_debugaccess;                                              // JTAGMaster_avalon_jtag_slave_agent:m0_debugaccess -> JTAGMaster_avalon_jtag_slave_translator:uav_debugaccess
	wire   [25:0] jtagmaster_avalon_jtag_slave_agent_m0_address;                                                  // JTAGMaster_avalon_jtag_slave_agent:m0_address -> JTAGMaster_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtagmaster_avalon_jtag_slave_agent_m0_byteenable;                                               // JTAGMaster_avalon_jtag_slave_agent:m0_byteenable -> JTAGMaster_avalon_jtag_slave_translator:uav_byteenable
	wire          jtagmaster_avalon_jtag_slave_agent_m0_read;                                                     // JTAGMaster_avalon_jtag_slave_agent:m0_read -> JTAGMaster_avalon_jtag_slave_translator:uav_read
	wire          jtagmaster_avalon_jtag_slave_agent_m0_readdatavalid;                                            // JTAGMaster_avalon_jtag_slave_translator:uav_readdatavalid -> JTAGMaster_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtagmaster_avalon_jtag_slave_agent_m0_lock;                                                     // JTAGMaster_avalon_jtag_slave_agent:m0_lock -> JTAGMaster_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtagmaster_avalon_jtag_slave_agent_m0_writedata;                                                // JTAGMaster_avalon_jtag_slave_agent:m0_writedata -> JTAGMaster_avalon_jtag_slave_translator:uav_writedata
	wire          jtagmaster_avalon_jtag_slave_agent_m0_write;                                                    // JTAGMaster_avalon_jtag_slave_agent:m0_write -> JTAGMaster_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtagmaster_avalon_jtag_slave_agent_m0_burstcount;                                               // JTAGMaster_avalon_jtag_slave_agent:m0_burstcount -> JTAGMaster_avalon_jtag_slave_translator:uav_burstcount
	wire          jtagmaster_avalon_jtag_slave_agent_rf_source_valid;                                             // JTAGMaster_avalon_jtag_slave_agent:rf_source_valid -> JTAGMaster_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [106:0] jtagmaster_avalon_jtag_slave_agent_rf_source_data;                                              // JTAGMaster_avalon_jtag_slave_agent:rf_source_data -> JTAGMaster_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtagmaster_avalon_jtag_slave_agent_rf_source_ready;                                             // JTAGMaster_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAGMaster_avalon_jtag_slave_agent:rf_source_ready
	wire          jtagmaster_avalon_jtag_slave_agent_rf_source_startofpacket;                                     // JTAGMaster_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAGMaster_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtagmaster_avalon_jtag_slave_agent_rf_source_endofpacket;                                       // JTAGMaster_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAGMaster_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtagmaster_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                          // JTAGMaster_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAGMaster_avalon_jtag_slave_agent:rf_sink_valid
	wire  [106:0] jtagmaster_avalon_jtag_slave_agent_rsp_fifo_out_data;                                           // JTAGMaster_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAGMaster_avalon_jtag_slave_agent:rf_sink_data
	wire          jtagmaster_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                          // JTAGMaster_avalon_jtag_slave_agent:rf_sink_ready -> JTAGMaster_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtagmaster_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                                  // JTAGMaster_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAGMaster_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtagmaster_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                    // JTAGMaster_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAGMaster_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                                          // cmd_mux_002:src_valid -> JTAGMaster_avalon_jtag_slave_agent:cp_valid
	wire  [105:0] cmd_mux_002_src_data;                                                                           // cmd_mux_002:src_data -> JTAGMaster_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                          // JTAGMaster_avalon_jtag_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [17:0] cmd_mux_002_src_channel;                                                                        // cmd_mux_002:src_channel -> JTAGMaster_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                                  // cmd_mux_002:src_startofpacket -> JTAGMaster_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                    // cmd_mux_002:src_endofpacket -> JTAGMaster_avalon_jtag_slave_agent:cp_endofpacket
	wire   [15:0] reg16_0_avalon_slave_0_agent_m0_readdata;                                                       // reg16_0_avalon_slave_0_translator:uav_readdata -> reg16_0_avalon_slave_0_agent:m0_readdata
	wire          reg16_0_avalon_slave_0_agent_m0_waitrequest;                                                    // reg16_0_avalon_slave_0_translator:uav_waitrequest -> reg16_0_avalon_slave_0_agent:m0_waitrequest
	wire          reg16_0_avalon_slave_0_agent_m0_debugaccess;                                                    // reg16_0_avalon_slave_0_agent:m0_debugaccess -> reg16_0_avalon_slave_0_translator:uav_debugaccess
	wire   [25:0] reg16_0_avalon_slave_0_agent_m0_address;                                                        // reg16_0_avalon_slave_0_agent:m0_address -> reg16_0_avalon_slave_0_translator:uav_address
	wire    [1:0] reg16_0_avalon_slave_0_agent_m0_byteenable;                                                     // reg16_0_avalon_slave_0_agent:m0_byteenable -> reg16_0_avalon_slave_0_translator:uav_byteenable
	wire          reg16_0_avalon_slave_0_agent_m0_read;                                                           // reg16_0_avalon_slave_0_agent:m0_read -> reg16_0_avalon_slave_0_translator:uav_read
	wire          reg16_0_avalon_slave_0_agent_m0_readdatavalid;                                                  // reg16_0_avalon_slave_0_translator:uav_readdatavalid -> reg16_0_avalon_slave_0_agent:m0_readdatavalid
	wire          reg16_0_avalon_slave_0_agent_m0_lock;                                                           // reg16_0_avalon_slave_0_agent:m0_lock -> reg16_0_avalon_slave_0_translator:uav_lock
	wire   [15:0] reg16_0_avalon_slave_0_agent_m0_writedata;                                                      // reg16_0_avalon_slave_0_agent:m0_writedata -> reg16_0_avalon_slave_0_translator:uav_writedata
	wire          reg16_0_avalon_slave_0_agent_m0_write;                                                          // reg16_0_avalon_slave_0_agent:m0_write -> reg16_0_avalon_slave_0_translator:uav_write
	wire    [1:0] reg16_0_avalon_slave_0_agent_m0_burstcount;                                                     // reg16_0_avalon_slave_0_agent:m0_burstcount -> reg16_0_avalon_slave_0_translator:uav_burstcount
	wire          reg16_0_avalon_slave_0_agent_rf_source_valid;                                                   // reg16_0_avalon_slave_0_agent:rf_source_valid -> reg16_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire   [88:0] reg16_0_avalon_slave_0_agent_rf_source_data;                                                    // reg16_0_avalon_slave_0_agent:rf_source_data -> reg16_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          reg16_0_avalon_slave_0_agent_rf_source_ready;                                                   // reg16_0_avalon_slave_0_agent_rsp_fifo:in_ready -> reg16_0_avalon_slave_0_agent:rf_source_ready
	wire          reg16_0_avalon_slave_0_agent_rf_source_startofpacket;                                           // reg16_0_avalon_slave_0_agent:rf_source_startofpacket -> reg16_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          reg16_0_avalon_slave_0_agent_rf_source_endofpacket;                                             // reg16_0_avalon_slave_0_agent:rf_source_endofpacket -> reg16_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          reg16_0_avalon_slave_0_agent_rsp_fifo_out_valid;                                                // reg16_0_avalon_slave_0_agent_rsp_fifo:out_valid -> reg16_0_avalon_slave_0_agent:rf_sink_valid
	wire   [88:0] reg16_0_avalon_slave_0_agent_rsp_fifo_out_data;                                                 // reg16_0_avalon_slave_0_agent_rsp_fifo:out_data -> reg16_0_avalon_slave_0_agent:rf_sink_data
	wire          reg16_0_avalon_slave_0_agent_rsp_fifo_out_ready;                                                // reg16_0_avalon_slave_0_agent:rf_sink_ready -> reg16_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          reg16_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                                        // reg16_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> reg16_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire          reg16_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                                          // reg16_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> reg16_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire   [31:0] cpumaster_debug_mem_slave_agent_m0_readdata;                                                    // CPUMaster_debug_mem_slave_translator:uav_readdata -> CPUMaster_debug_mem_slave_agent:m0_readdata
	wire          cpumaster_debug_mem_slave_agent_m0_waitrequest;                                                 // CPUMaster_debug_mem_slave_translator:uav_waitrequest -> CPUMaster_debug_mem_slave_agent:m0_waitrequest
	wire          cpumaster_debug_mem_slave_agent_m0_debugaccess;                                                 // CPUMaster_debug_mem_slave_agent:m0_debugaccess -> CPUMaster_debug_mem_slave_translator:uav_debugaccess
	wire   [25:0] cpumaster_debug_mem_slave_agent_m0_address;                                                     // CPUMaster_debug_mem_slave_agent:m0_address -> CPUMaster_debug_mem_slave_translator:uav_address
	wire    [3:0] cpumaster_debug_mem_slave_agent_m0_byteenable;                                                  // CPUMaster_debug_mem_slave_agent:m0_byteenable -> CPUMaster_debug_mem_slave_translator:uav_byteenable
	wire          cpumaster_debug_mem_slave_agent_m0_read;                                                        // CPUMaster_debug_mem_slave_agent:m0_read -> CPUMaster_debug_mem_slave_translator:uav_read
	wire          cpumaster_debug_mem_slave_agent_m0_readdatavalid;                                               // CPUMaster_debug_mem_slave_translator:uav_readdatavalid -> CPUMaster_debug_mem_slave_agent:m0_readdatavalid
	wire          cpumaster_debug_mem_slave_agent_m0_lock;                                                        // CPUMaster_debug_mem_slave_agent:m0_lock -> CPUMaster_debug_mem_slave_translator:uav_lock
	wire   [31:0] cpumaster_debug_mem_slave_agent_m0_writedata;                                                   // CPUMaster_debug_mem_slave_agent:m0_writedata -> CPUMaster_debug_mem_slave_translator:uav_writedata
	wire          cpumaster_debug_mem_slave_agent_m0_write;                                                       // CPUMaster_debug_mem_slave_agent:m0_write -> CPUMaster_debug_mem_slave_translator:uav_write
	wire    [2:0] cpumaster_debug_mem_slave_agent_m0_burstcount;                                                  // CPUMaster_debug_mem_slave_agent:m0_burstcount -> CPUMaster_debug_mem_slave_translator:uav_burstcount
	wire          cpumaster_debug_mem_slave_agent_rf_source_valid;                                                // CPUMaster_debug_mem_slave_agent:rf_source_valid -> CPUMaster_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [106:0] cpumaster_debug_mem_slave_agent_rf_source_data;                                                 // CPUMaster_debug_mem_slave_agent:rf_source_data -> CPUMaster_debug_mem_slave_agent_rsp_fifo:in_data
	wire          cpumaster_debug_mem_slave_agent_rf_source_ready;                                                // CPUMaster_debug_mem_slave_agent_rsp_fifo:in_ready -> CPUMaster_debug_mem_slave_agent:rf_source_ready
	wire          cpumaster_debug_mem_slave_agent_rf_source_startofpacket;                                        // CPUMaster_debug_mem_slave_agent:rf_source_startofpacket -> CPUMaster_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          cpumaster_debug_mem_slave_agent_rf_source_endofpacket;                                          // CPUMaster_debug_mem_slave_agent:rf_source_endofpacket -> CPUMaster_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          cpumaster_debug_mem_slave_agent_rsp_fifo_out_valid;                                             // CPUMaster_debug_mem_slave_agent_rsp_fifo:out_valid -> CPUMaster_debug_mem_slave_agent:rf_sink_valid
	wire  [106:0] cpumaster_debug_mem_slave_agent_rsp_fifo_out_data;                                              // CPUMaster_debug_mem_slave_agent_rsp_fifo:out_data -> CPUMaster_debug_mem_slave_agent:rf_sink_data
	wire          cpumaster_debug_mem_slave_agent_rsp_fifo_out_ready;                                             // CPUMaster_debug_mem_slave_agent:rf_sink_ready -> CPUMaster_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          cpumaster_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                                     // CPUMaster_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> CPUMaster_debug_mem_slave_agent:rf_sink_startofpacket
	wire          cpumaster_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                                       // CPUMaster_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> CPUMaster_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                                          // cmd_mux_004:src_valid -> CPUMaster_debug_mem_slave_agent:cp_valid
	wire  [105:0] cmd_mux_004_src_data;                                                                           // cmd_mux_004:src_data -> CPUMaster_debug_mem_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                          // CPUMaster_debug_mem_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [17:0] cmd_mux_004_src_channel;                                                                        // cmd_mux_004:src_channel -> CPUMaster_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                                  // cmd_mux_004:src_startofpacket -> CPUMaster_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                    // cmd_mux_004:src_endofpacket -> CPUMaster_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] memmaster_s1_agent_m0_readdata;                                                                 // MEMMaster_s1_translator:uav_readdata -> MEMMaster_s1_agent:m0_readdata
	wire          memmaster_s1_agent_m0_waitrequest;                                                              // MEMMaster_s1_translator:uav_waitrequest -> MEMMaster_s1_agent:m0_waitrequest
	wire          memmaster_s1_agent_m0_debugaccess;                                                              // MEMMaster_s1_agent:m0_debugaccess -> MEMMaster_s1_translator:uav_debugaccess
	wire   [25:0] memmaster_s1_agent_m0_address;                                                                  // MEMMaster_s1_agent:m0_address -> MEMMaster_s1_translator:uav_address
	wire    [3:0] memmaster_s1_agent_m0_byteenable;                                                               // MEMMaster_s1_agent:m0_byteenable -> MEMMaster_s1_translator:uav_byteenable
	wire          memmaster_s1_agent_m0_read;                                                                     // MEMMaster_s1_agent:m0_read -> MEMMaster_s1_translator:uav_read
	wire          memmaster_s1_agent_m0_readdatavalid;                                                            // MEMMaster_s1_translator:uav_readdatavalid -> MEMMaster_s1_agent:m0_readdatavalid
	wire          memmaster_s1_agent_m0_lock;                                                                     // MEMMaster_s1_agent:m0_lock -> MEMMaster_s1_translator:uav_lock
	wire   [31:0] memmaster_s1_agent_m0_writedata;                                                                // MEMMaster_s1_agent:m0_writedata -> MEMMaster_s1_translator:uav_writedata
	wire          memmaster_s1_agent_m0_write;                                                                    // MEMMaster_s1_agent:m0_write -> MEMMaster_s1_translator:uav_write
	wire    [2:0] memmaster_s1_agent_m0_burstcount;                                                               // MEMMaster_s1_agent:m0_burstcount -> MEMMaster_s1_translator:uav_burstcount
	wire          memmaster_s1_agent_rf_source_valid;                                                             // MEMMaster_s1_agent:rf_source_valid -> MEMMaster_s1_agent_rsp_fifo:in_valid
	wire  [106:0] memmaster_s1_agent_rf_source_data;                                                              // MEMMaster_s1_agent:rf_source_data -> MEMMaster_s1_agent_rsp_fifo:in_data
	wire          memmaster_s1_agent_rf_source_ready;                                                             // MEMMaster_s1_agent_rsp_fifo:in_ready -> MEMMaster_s1_agent:rf_source_ready
	wire          memmaster_s1_agent_rf_source_startofpacket;                                                     // MEMMaster_s1_agent:rf_source_startofpacket -> MEMMaster_s1_agent_rsp_fifo:in_startofpacket
	wire          memmaster_s1_agent_rf_source_endofpacket;                                                       // MEMMaster_s1_agent:rf_source_endofpacket -> MEMMaster_s1_agent_rsp_fifo:in_endofpacket
	wire          memmaster_s1_agent_rsp_fifo_out_valid;                                                          // MEMMaster_s1_agent_rsp_fifo:out_valid -> MEMMaster_s1_agent:rf_sink_valid
	wire  [106:0] memmaster_s1_agent_rsp_fifo_out_data;                                                           // MEMMaster_s1_agent_rsp_fifo:out_data -> MEMMaster_s1_agent:rf_sink_data
	wire          memmaster_s1_agent_rsp_fifo_out_ready;                                                          // MEMMaster_s1_agent:rf_sink_ready -> MEMMaster_s1_agent_rsp_fifo:out_ready
	wire          memmaster_s1_agent_rsp_fifo_out_startofpacket;                                                  // MEMMaster_s1_agent_rsp_fifo:out_startofpacket -> MEMMaster_s1_agent:rf_sink_startofpacket
	wire          memmaster_s1_agent_rsp_fifo_out_endofpacket;                                                    // MEMMaster_s1_agent_rsp_fifo:out_endofpacket -> MEMMaster_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                                          // cmd_mux_005:src_valid -> MEMMaster_s1_agent:cp_valid
	wire  [105:0] cmd_mux_005_src_data;                                                                           // cmd_mux_005:src_data -> MEMMaster_s1_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                                          // MEMMaster_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [17:0] cmd_mux_005_src_channel;                                                                        // cmd_mux_005:src_channel -> MEMMaster_s1_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                                  // cmd_mux_005:src_startofpacket -> MEMMaster_s1_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                                    // cmd_mux_005:src_endofpacket -> MEMMaster_s1_agent:cp_endofpacket
	wire   [31:0] mutex_0_s1_agent_m0_readdata;                                                                   // mutex_0_s1_translator:uav_readdata -> mutex_0_s1_agent:m0_readdata
	wire          mutex_0_s1_agent_m0_waitrequest;                                                                // mutex_0_s1_translator:uav_waitrequest -> mutex_0_s1_agent:m0_waitrequest
	wire          mutex_0_s1_agent_m0_debugaccess;                                                                // mutex_0_s1_agent:m0_debugaccess -> mutex_0_s1_translator:uav_debugaccess
	wire   [25:0] mutex_0_s1_agent_m0_address;                                                                    // mutex_0_s1_agent:m0_address -> mutex_0_s1_translator:uav_address
	wire    [3:0] mutex_0_s1_agent_m0_byteenable;                                                                 // mutex_0_s1_agent:m0_byteenable -> mutex_0_s1_translator:uav_byteenable
	wire          mutex_0_s1_agent_m0_read;                                                                       // mutex_0_s1_agent:m0_read -> mutex_0_s1_translator:uav_read
	wire          mutex_0_s1_agent_m0_readdatavalid;                                                              // mutex_0_s1_translator:uav_readdatavalid -> mutex_0_s1_agent:m0_readdatavalid
	wire          mutex_0_s1_agent_m0_lock;                                                                       // mutex_0_s1_agent:m0_lock -> mutex_0_s1_translator:uav_lock
	wire   [31:0] mutex_0_s1_agent_m0_writedata;                                                                  // mutex_0_s1_agent:m0_writedata -> mutex_0_s1_translator:uav_writedata
	wire          mutex_0_s1_agent_m0_write;                                                                      // mutex_0_s1_agent:m0_write -> mutex_0_s1_translator:uav_write
	wire    [2:0] mutex_0_s1_agent_m0_burstcount;                                                                 // mutex_0_s1_agent:m0_burstcount -> mutex_0_s1_translator:uav_burstcount
	wire          mutex_0_s1_agent_rf_source_valid;                                                               // mutex_0_s1_agent:rf_source_valid -> mutex_0_s1_agent_rsp_fifo:in_valid
	wire  [106:0] mutex_0_s1_agent_rf_source_data;                                                                // mutex_0_s1_agent:rf_source_data -> mutex_0_s1_agent_rsp_fifo:in_data
	wire          mutex_0_s1_agent_rf_source_ready;                                                               // mutex_0_s1_agent_rsp_fifo:in_ready -> mutex_0_s1_agent:rf_source_ready
	wire          mutex_0_s1_agent_rf_source_startofpacket;                                                       // mutex_0_s1_agent:rf_source_startofpacket -> mutex_0_s1_agent_rsp_fifo:in_startofpacket
	wire          mutex_0_s1_agent_rf_source_endofpacket;                                                         // mutex_0_s1_agent:rf_source_endofpacket -> mutex_0_s1_agent_rsp_fifo:in_endofpacket
	wire          mutex_0_s1_agent_rsp_fifo_out_valid;                                                            // mutex_0_s1_agent_rsp_fifo:out_valid -> mutex_0_s1_agent:rf_sink_valid
	wire  [106:0] mutex_0_s1_agent_rsp_fifo_out_data;                                                             // mutex_0_s1_agent_rsp_fifo:out_data -> mutex_0_s1_agent:rf_sink_data
	wire          mutex_0_s1_agent_rsp_fifo_out_ready;                                                            // mutex_0_s1_agent:rf_sink_ready -> mutex_0_s1_agent_rsp_fifo:out_ready
	wire          mutex_0_s1_agent_rsp_fifo_out_startofpacket;                                                    // mutex_0_s1_agent_rsp_fifo:out_startofpacket -> mutex_0_s1_agent:rf_sink_startofpacket
	wire          mutex_0_s1_agent_rsp_fifo_out_endofpacket;                                                      // mutex_0_s1_agent_rsp_fifo:out_endofpacket -> mutex_0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                                          // cmd_mux_006:src_valid -> mutex_0_s1_agent:cp_valid
	wire  [105:0] cmd_mux_006_src_data;                                                                           // cmd_mux_006:src_data -> mutex_0_s1_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                          // mutex_0_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [17:0] cmd_mux_006_src_channel;                                                                        // cmd_mux_006:src_channel -> mutex_0_s1_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                                  // cmd_mux_006:src_startofpacket -> mutex_0_s1_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                                    // cmd_mux_006:src_endofpacket -> mutex_0_s1_agent:cp_endofpacket
	wire   [31:0] ledgslave1_s1_agent_m0_readdata;                                                                // LEDGSlave1_s1_translator:uav_readdata -> LEDGSlave1_s1_agent:m0_readdata
	wire          ledgslave1_s1_agent_m0_waitrequest;                                                             // LEDGSlave1_s1_translator:uav_waitrequest -> LEDGSlave1_s1_agent:m0_waitrequest
	wire          ledgslave1_s1_agent_m0_debugaccess;                                                             // LEDGSlave1_s1_agent:m0_debugaccess -> LEDGSlave1_s1_translator:uav_debugaccess
	wire   [25:0] ledgslave1_s1_agent_m0_address;                                                                 // LEDGSlave1_s1_agent:m0_address -> LEDGSlave1_s1_translator:uav_address
	wire    [3:0] ledgslave1_s1_agent_m0_byteenable;                                                              // LEDGSlave1_s1_agent:m0_byteenable -> LEDGSlave1_s1_translator:uav_byteenable
	wire          ledgslave1_s1_agent_m0_read;                                                                    // LEDGSlave1_s1_agent:m0_read -> LEDGSlave1_s1_translator:uav_read
	wire          ledgslave1_s1_agent_m0_readdatavalid;                                                           // LEDGSlave1_s1_translator:uav_readdatavalid -> LEDGSlave1_s1_agent:m0_readdatavalid
	wire          ledgslave1_s1_agent_m0_lock;                                                                    // LEDGSlave1_s1_agent:m0_lock -> LEDGSlave1_s1_translator:uav_lock
	wire   [31:0] ledgslave1_s1_agent_m0_writedata;                                                               // LEDGSlave1_s1_agent:m0_writedata -> LEDGSlave1_s1_translator:uav_writedata
	wire          ledgslave1_s1_agent_m0_write;                                                                   // LEDGSlave1_s1_agent:m0_write -> LEDGSlave1_s1_translator:uav_write
	wire    [2:0] ledgslave1_s1_agent_m0_burstcount;                                                              // LEDGSlave1_s1_agent:m0_burstcount -> LEDGSlave1_s1_translator:uav_burstcount
	wire          ledgslave1_s1_agent_rf_source_valid;                                                            // LEDGSlave1_s1_agent:rf_source_valid -> LEDGSlave1_s1_agent_rsp_fifo:in_valid
	wire  [106:0] ledgslave1_s1_agent_rf_source_data;                                                             // LEDGSlave1_s1_agent:rf_source_data -> LEDGSlave1_s1_agent_rsp_fifo:in_data
	wire          ledgslave1_s1_agent_rf_source_ready;                                                            // LEDGSlave1_s1_agent_rsp_fifo:in_ready -> LEDGSlave1_s1_agent:rf_source_ready
	wire          ledgslave1_s1_agent_rf_source_startofpacket;                                                    // LEDGSlave1_s1_agent:rf_source_startofpacket -> LEDGSlave1_s1_agent_rsp_fifo:in_startofpacket
	wire          ledgslave1_s1_agent_rf_source_endofpacket;                                                      // LEDGSlave1_s1_agent:rf_source_endofpacket -> LEDGSlave1_s1_agent_rsp_fifo:in_endofpacket
	wire          ledgslave1_s1_agent_rsp_fifo_out_valid;                                                         // LEDGSlave1_s1_agent_rsp_fifo:out_valid -> LEDGSlave1_s1_agent:rf_sink_valid
	wire  [106:0] ledgslave1_s1_agent_rsp_fifo_out_data;                                                          // LEDGSlave1_s1_agent_rsp_fifo:out_data -> LEDGSlave1_s1_agent:rf_sink_data
	wire          ledgslave1_s1_agent_rsp_fifo_out_ready;                                                         // LEDGSlave1_s1_agent:rf_sink_ready -> LEDGSlave1_s1_agent_rsp_fifo:out_ready
	wire          ledgslave1_s1_agent_rsp_fifo_out_startofpacket;                                                 // LEDGSlave1_s1_agent_rsp_fifo:out_startofpacket -> LEDGSlave1_s1_agent:rf_sink_startofpacket
	wire          ledgslave1_s1_agent_rsp_fifo_out_endofpacket;                                                   // LEDGSlave1_s1_agent_rsp_fifo:out_endofpacket -> LEDGSlave1_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                                          // cmd_mux_007:src_valid -> LEDGSlave1_s1_agent:cp_valid
	wire  [105:0] cmd_mux_007_src_data;                                                                           // cmd_mux_007:src_data -> LEDGSlave1_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                                          // LEDGSlave1_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [17:0] cmd_mux_007_src_channel;                                                                        // cmd_mux_007:src_channel -> LEDGSlave1_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                                  // cmd_mux_007:src_startofpacket -> LEDGSlave1_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                                    // cmd_mux_007:src_endofpacket -> LEDGSlave1_s1_agent:cp_endofpacket
	wire   [31:0] ledrslave2_s1_agent_m0_readdata;                                                                // LEDRSlave2_s1_translator:uav_readdata -> LEDRSlave2_s1_agent:m0_readdata
	wire          ledrslave2_s1_agent_m0_waitrequest;                                                             // LEDRSlave2_s1_translator:uav_waitrequest -> LEDRSlave2_s1_agent:m0_waitrequest
	wire          ledrslave2_s1_agent_m0_debugaccess;                                                             // LEDRSlave2_s1_agent:m0_debugaccess -> LEDRSlave2_s1_translator:uav_debugaccess
	wire   [25:0] ledrslave2_s1_agent_m0_address;                                                                 // LEDRSlave2_s1_agent:m0_address -> LEDRSlave2_s1_translator:uav_address
	wire    [3:0] ledrslave2_s1_agent_m0_byteenable;                                                              // LEDRSlave2_s1_agent:m0_byteenable -> LEDRSlave2_s1_translator:uav_byteenable
	wire          ledrslave2_s1_agent_m0_read;                                                                    // LEDRSlave2_s1_agent:m0_read -> LEDRSlave2_s1_translator:uav_read
	wire          ledrslave2_s1_agent_m0_readdatavalid;                                                           // LEDRSlave2_s1_translator:uav_readdatavalid -> LEDRSlave2_s1_agent:m0_readdatavalid
	wire          ledrslave2_s1_agent_m0_lock;                                                                    // LEDRSlave2_s1_agent:m0_lock -> LEDRSlave2_s1_translator:uav_lock
	wire   [31:0] ledrslave2_s1_agent_m0_writedata;                                                               // LEDRSlave2_s1_agent:m0_writedata -> LEDRSlave2_s1_translator:uav_writedata
	wire          ledrslave2_s1_agent_m0_write;                                                                   // LEDRSlave2_s1_agent:m0_write -> LEDRSlave2_s1_translator:uav_write
	wire    [2:0] ledrslave2_s1_agent_m0_burstcount;                                                              // LEDRSlave2_s1_agent:m0_burstcount -> LEDRSlave2_s1_translator:uav_burstcount
	wire          ledrslave2_s1_agent_rf_source_valid;                                                            // LEDRSlave2_s1_agent:rf_source_valid -> LEDRSlave2_s1_agent_rsp_fifo:in_valid
	wire  [106:0] ledrslave2_s1_agent_rf_source_data;                                                             // LEDRSlave2_s1_agent:rf_source_data -> LEDRSlave2_s1_agent_rsp_fifo:in_data
	wire          ledrslave2_s1_agent_rf_source_ready;                                                            // LEDRSlave2_s1_agent_rsp_fifo:in_ready -> LEDRSlave2_s1_agent:rf_source_ready
	wire          ledrslave2_s1_agent_rf_source_startofpacket;                                                    // LEDRSlave2_s1_agent:rf_source_startofpacket -> LEDRSlave2_s1_agent_rsp_fifo:in_startofpacket
	wire          ledrslave2_s1_agent_rf_source_endofpacket;                                                      // LEDRSlave2_s1_agent:rf_source_endofpacket -> LEDRSlave2_s1_agent_rsp_fifo:in_endofpacket
	wire          ledrslave2_s1_agent_rsp_fifo_out_valid;                                                         // LEDRSlave2_s1_agent_rsp_fifo:out_valid -> LEDRSlave2_s1_agent:rf_sink_valid
	wire  [106:0] ledrslave2_s1_agent_rsp_fifo_out_data;                                                          // LEDRSlave2_s1_agent_rsp_fifo:out_data -> LEDRSlave2_s1_agent:rf_sink_data
	wire          ledrslave2_s1_agent_rsp_fifo_out_ready;                                                         // LEDRSlave2_s1_agent:rf_sink_ready -> LEDRSlave2_s1_agent_rsp_fifo:out_ready
	wire          ledrslave2_s1_agent_rsp_fifo_out_startofpacket;                                                 // LEDRSlave2_s1_agent_rsp_fifo:out_startofpacket -> LEDRSlave2_s1_agent:rf_sink_startofpacket
	wire          ledrslave2_s1_agent_rsp_fifo_out_endofpacket;                                                   // LEDRSlave2_s1_agent_rsp_fifo:out_endofpacket -> LEDRSlave2_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                                          // cmd_mux_008:src_valid -> LEDRSlave2_s1_agent:cp_valid
	wire  [105:0] cmd_mux_008_src_data;                                                                           // cmd_mux_008:src_data -> LEDRSlave2_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                                          // LEDRSlave2_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [17:0] cmd_mux_008_src_channel;                                                                        // cmd_mux_008:src_channel -> LEDRSlave2_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                                  // cmd_mux_008:src_startofpacket -> LEDRSlave2_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                                    // cmd_mux_008:src_endofpacket -> LEDRSlave2_s1_agent:cp_endofpacket
	wire   [31:0] uart_0_s1_agent_m0_readdata;                                                                    // uart_0_s1_translator:uav_readdata -> uart_0_s1_agent:m0_readdata
	wire          uart_0_s1_agent_m0_waitrequest;                                                                 // uart_0_s1_translator:uav_waitrequest -> uart_0_s1_agent:m0_waitrequest
	wire          uart_0_s1_agent_m0_debugaccess;                                                                 // uart_0_s1_agent:m0_debugaccess -> uart_0_s1_translator:uav_debugaccess
	wire   [25:0] uart_0_s1_agent_m0_address;                                                                     // uart_0_s1_agent:m0_address -> uart_0_s1_translator:uav_address
	wire    [3:0] uart_0_s1_agent_m0_byteenable;                                                                  // uart_0_s1_agent:m0_byteenable -> uart_0_s1_translator:uav_byteenable
	wire          uart_0_s1_agent_m0_read;                                                                        // uart_0_s1_agent:m0_read -> uart_0_s1_translator:uav_read
	wire          uart_0_s1_agent_m0_readdatavalid;                                                               // uart_0_s1_translator:uav_readdatavalid -> uart_0_s1_agent:m0_readdatavalid
	wire          uart_0_s1_agent_m0_lock;                                                                        // uart_0_s1_agent:m0_lock -> uart_0_s1_translator:uav_lock
	wire   [31:0] uart_0_s1_agent_m0_writedata;                                                                   // uart_0_s1_agent:m0_writedata -> uart_0_s1_translator:uav_writedata
	wire          uart_0_s1_agent_m0_write;                                                                       // uart_0_s1_agent:m0_write -> uart_0_s1_translator:uav_write
	wire    [2:0] uart_0_s1_agent_m0_burstcount;                                                                  // uart_0_s1_agent:m0_burstcount -> uart_0_s1_translator:uav_burstcount
	wire          uart_0_s1_agent_rf_source_valid;                                                                // uart_0_s1_agent:rf_source_valid -> uart_0_s1_agent_rsp_fifo:in_valid
	wire  [106:0] uart_0_s1_agent_rf_source_data;                                                                 // uart_0_s1_agent:rf_source_data -> uart_0_s1_agent_rsp_fifo:in_data
	wire          uart_0_s1_agent_rf_source_ready;                                                                // uart_0_s1_agent_rsp_fifo:in_ready -> uart_0_s1_agent:rf_source_ready
	wire          uart_0_s1_agent_rf_source_startofpacket;                                                        // uart_0_s1_agent:rf_source_startofpacket -> uart_0_s1_agent_rsp_fifo:in_startofpacket
	wire          uart_0_s1_agent_rf_source_endofpacket;                                                          // uart_0_s1_agent:rf_source_endofpacket -> uart_0_s1_agent_rsp_fifo:in_endofpacket
	wire          uart_0_s1_agent_rsp_fifo_out_valid;                                                             // uart_0_s1_agent_rsp_fifo:out_valid -> uart_0_s1_agent:rf_sink_valid
	wire  [106:0] uart_0_s1_agent_rsp_fifo_out_data;                                                              // uart_0_s1_agent_rsp_fifo:out_data -> uart_0_s1_agent:rf_sink_data
	wire          uart_0_s1_agent_rsp_fifo_out_ready;                                                             // uart_0_s1_agent:rf_sink_ready -> uart_0_s1_agent_rsp_fifo:out_ready
	wire          uart_0_s1_agent_rsp_fifo_out_startofpacket;                                                     // uart_0_s1_agent_rsp_fifo:out_startofpacket -> uart_0_s1_agent:rf_sink_startofpacket
	wire          uart_0_s1_agent_rsp_fifo_out_endofpacket;                                                       // uart_0_s1_agent_rsp_fifo:out_endofpacket -> uart_0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                                          // cmd_mux_009:src_valid -> uart_0_s1_agent:cp_valid
	wire  [105:0] cmd_mux_009_src_data;                                                                           // cmd_mux_009:src_data -> uart_0_s1_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                                          // uart_0_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [17:0] cmd_mux_009_src_channel;                                                                        // cmd_mux_009:src_channel -> uart_0_s1_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                                  // cmd_mux_009:src_startofpacket -> uart_0_s1_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                                    // cmd_mux_009:src_endofpacket -> uart_0_s1_agent:cp_endofpacket
	wire   [31:0] jtagslave2_avalon_jtag_slave_agent_m0_readdata;                                                 // JTAGSlave2_avalon_jtag_slave_translator:uav_readdata -> JTAGSlave2_avalon_jtag_slave_agent:m0_readdata
	wire          jtagslave2_avalon_jtag_slave_agent_m0_waitrequest;                                              // JTAGSlave2_avalon_jtag_slave_translator:uav_waitrequest -> JTAGSlave2_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtagslave2_avalon_jtag_slave_agent_m0_debugaccess;                                              // JTAGSlave2_avalon_jtag_slave_agent:m0_debugaccess -> JTAGSlave2_avalon_jtag_slave_translator:uav_debugaccess
	wire   [25:0] jtagslave2_avalon_jtag_slave_agent_m0_address;                                                  // JTAGSlave2_avalon_jtag_slave_agent:m0_address -> JTAGSlave2_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtagslave2_avalon_jtag_slave_agent_m0_byteenable;                                               // JTAGSlave2_avalon_jtag_slave_agent:m0_byteenable -> JTAGSlave2_avalon_jtag_slave_translator:uav_byteenable
	wire          jtagslave2_avalon_jtag_slave_agent_m0_read;                                                     // JTAGSlave2_avalon_jtag_slave_agent:m0_read -> JTAGSlave2_avalon_jtag_slave_translator:uav_read
	wire          jtagslave2_avalon_jtag_slave_agent_m0_readdatavalid;                                            // JTAGSlave2_avalon_jtag_slave_translator:uav_readdatavalid -> JTAGSlave2_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtagslave2_avalon_jtag_slave_agent_m0_lock;                                                     // JTAGSlave2_avalon_jtag_slave_agent:m0_lock -> JTAGSlave2_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtagslave2_avalon_jtag_slave_agent_m0_writedata;                                                // JTAGSlave2_avalon_jtag_slave_agent:m0_writedata -> JTAGSlave2_avalon_jtag_slave_translator:uav_writedata
	wire          jtagslave2_avalon_jtag_slave_agent_m0_write;                                                    // JTAGSlave2_avalon_jtag_slave_agent:m0_write -> JTAGSlave2_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtagslave2_avalon_jtag_slave_agent_m0_burstcount;                                               // JTAGSlave2_avalon_jtag_slave_agent:m0_burstcount -> JTAGSlave2_avalon_jtag_slave_translator:uav_burstcount
	wire          jtagslave2_avalon_jtag_slave_agent_rf_source_valid;                                             // JTAGSlave2_avalon_jtag_slave_agent:rf_source_valid -> JTAGSlave2_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [106:0] jtagslave2_avalon_jtag_slave_agent_rf_source_data;                                              // JTAGSlave2_avalon_jtag_slave_agent:rf_source_data -> JTAGSlave2_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtagslave2_avalon_jtag_slave_agent_rf_source_ready;                                             // JTAGSlave2_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAGSlave2_avalon_jtag_slave_agent:rf_source_ready
	wire          jtagslave2_avalon_jtag_slave_agent_rf_source_startofpacket;                                     // JTAGSlave2_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAGSlave2_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtagslave2_avalon_jtag_slave_agent_rf_source_endofpacket;                                       // JTAGSlave2_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAGSlave2_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtagslave2_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                          // JTAGSlave2_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAGSlave2_avalon_jtag_slave_agent:rf_sink_valid
	wire  [106:0] jtagslave2_avalon_jtag_slave_agent_rsp_fifo_out_data;                                           // JTAGSlave2_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAGSlave2_avalon_jtag_slave_agent:rf_sink_data
	wire          jtagslave2_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                          // JTAGSlave2_avalon_jtag_slave_agent:rf_sink_ready -> JTAGSlave2_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtagslave2_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                                  // JTAGSlave2_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAGSlave2_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtagslave2_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                    // JTAGSlave2_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAGSlave2_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                                          // cmd_mux_010:src_valid -> JTAGSlave2_avalon_jtag_slave_agent:cp_valid
	wire  [105:0] cmd_mux_010_src_data;                                                                           // cmd_mux_010:src_data -> JTAGSlave2_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                                          // JTAGSlave2_avalon_jtag_slave_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [17:0] cmd_mux_010_src_channel;                                                                        // cmd_mux_010:src_channel -> JTAGSlave2_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                                  // cmd_mux_010:src_startofpacket -> JTAGSlave2_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                                    // cmd_mux_010:src_endofpacket -> JTAGSlave2_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] cpuslave2_debug_mem_slave_agent_m0_readdata;                                                    // CPUSlave2_debug_mem_slave_translator:uav_readdata -> CPUSlave2_debug_mem_slave_agent:m0_readdata
	wire          cpuslave2_debug_mem_slave_agent_m0_waitrequest;                                                 // CPUSlave2_debug_mem_slave_translator:uav_waitrequest -> CPUSlave2_debug_mem_slave_agent:m0_waitrequest
	wire          cpuslave2_debug_mem_slave_agent_m0_debugaccess;                                                 // CPUSlave2_debug_mem_slave_agent:m0_debugaccess -> CPUSlave2_debug_mem_slave_translator:uav_debugaccess
	wire   [25:0] cpuslave2_debug_mem_slave_agent_m0_address;                                                     // CPUSlave2_debug_mem_slave_agent:m0_address -> CPUSlave2_debug_mem_slave_translator:uav_address
	wire    [3:0] cpuslave2_debug_mem_slave_agent_m0_byteenable;                                                  // CPUSlave2_debug_mem_slave_agent:m0_byteenable -> CPUSlave2_debug_mem_slave_translator:uav_byteenable
	wire          cpuslave2_debug_mem_slave_agent_m0_read;                                                        // CPUSlave2_debug_mem_slave_agent:m0_read -> CPUSlave2_debug_mem_slave_translator:uav_read
	wire          cpuslave2_debug_mem_slave_agent_m0_readdatavalid;                                               // CPUSlave2_debug_mem_slave_translator:uav_readdatavalid -> CPUSlave2_debug_mem_slave_agent:m0_readdatavalid
	wire          cpuslave2_debug_mem_slave_agent_m0_lock;                                                        // CPUSlave2_debug_mem_slave_agent:m0_lock -> CPUSlave2_debug_mem_slave_translator:uav_lock
	wire   [31:0] cpuslave2_debug_mem_slave_agent_m0_writedata;                                                   // CPUSlave2_debug_mem_slave_agent:m0_writedata -> CPUSlave2_debug_mem_slave_translator:uav_writedata
	wire          cpuslave2_debug_mem_slave_agent_m0_write;                                                       // CPUSlave2_debug_mem_slave_agent:m0_write -> CPUSlave2_debug_mem_slave_translator:uav_write
	wire    [2:0] cpuslave2_debug_mem_slave_agent_m0_burstcount;                                                  // CPUSlave2_debug_mem_slave_agent:m0_burstcount -> CPUSlave2_debug_mem_slave_translator:uav_burstcount
	wire          cpuslave2_debug_mem_slave_agent_rf_source_valid;                                                // CPUSlave2_debug_mem_slave_agent:rf_source_valid -> CPUSlave2_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [106:0] cpuslave2_debug_mem_slave_agent_rf_source_data;                                                 // CPUSlave2_debug_mem_slave_agent:rf_source_data -> CPUSlave2_debug_mem_slave_agent_rsp_fifo:in_data
	wire          cpuslave2_debug_mem_slave_agent_rf_source_ready;                                                // CPUSlave2_debug_mem_slave_agent_rsp_fifo:in_ready -> CPUSlave2_debug_mem_slave_agent:rf_source_ready
	wire          cpuslave2_debug_mem_slave_agent_rf_source_startofpacket;                                        // CPUSlave2_debug_mem_slave_agent:rf_source_startofpacket -> CPUSlave2_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          cpuslave2_debug_mem_slave_agent_rf_source_endofpacket;                                          // CPUSlave2_debug_mem_slave_agent:rf_source_endofpacket -> CPUSlave2_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          cpuslave2_debug_mem_slave_agent_rsp_fifo_out_valid;                                             // CPUSlave2_debug_mem_slave_agent_rsp_fifo:out_valid -> CPUSlave2_debug_mem_slave_agent:rf_sink_valid
	wire  [106:0] cpuslave2_debug_mem_slave_agent_rsp_fifo_out_data;                                              // CPUSlave2_debug_mem_slave_agent_rsp_fifo:out_data -> CPUSlave2_debug_mem_slave_agent:rf_sink_data
	wire          cpuslave2_debug_mem_slave_agent_rsp_fifo_out_ready;                                             // CPUSlave2_debug_mem_slave_agent:rf_sink_ready -> CPUSlave2_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          cpuslave2_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                                     // CPUSlave2_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> CPUSlave2_debug_mem_slave_agent:rf_sink_startofpacket
	wire          cpuslave2_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                                       // CPUSlave2_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> CPUSlave2_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                                          // cmd_mux_011:src_valid -> CPUSlave2_debug_mem_slave_agent:cp_valid
	wire  [105:0] cmd_mux_011_src_data;                                                                           // cmd_mux_011:src_data -> CPUSlave2_debug_mem_slave_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                                          // CPUSlave2_debug_mem_slave_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [17:0] cmd_mux_011_src_channel;                                                                        // cmd_mux_011:src_channel -> CPUSlave2_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                                  // cmd_mux_011:src_startofpacket -> CPUSlave2_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                                    // cmd_mux_011:src_endofpacket -> CPUSlave2_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] memslave2_s1_agent_m0_readdata;                                                                 // MEMSlave2_s1_translator:uav_readdata -> MEMSlave2_s1_agent:m0_readdata
	wire          memslave2_s1_agent_m0_waitrequest;                                                              // MEMSlave2_s1_translator:uav_waitrequest -> MEMSlave2_s1_agent:m0_waitrequest
	wire          memslave2_s1_agent_m0_debugaccess;                                                              // MEMSlave2_s1_agent:m0_debugaccess -> MEMSlave2_s1_translator:uav_debugaccess
	wire   [25:0] memslave2_s1_agent_m0_address;                                                                  // MEMSlave2_s1_agent:m0_address -> MEMSlave2_s1_translator:uav_address
	wire    [3:0] memslave2_s1_agent_m0_byteenable;                                                               // MEMSlave2_s1_agent:m0_byteenable -> MEMSlave2_s1_translator:uav_byteenable
	wire          memslave2_s1_agent_m0_read;                                                                     // MEMSlave2_s1_agent:m0_read -> MEMSlave2_s1_translator:uav_read
	wire          memslave2_s1_agent_m0_readdatavalid;                                                            // MEMSlave2_s1_translator:uav_readdatavalid -> MEMSlave2_s1_agent:m0_readdatavalid
	wire          memslave2_s1_agent_m0_lock;                                                                     // MEMSlave2_s1_agent:m0_lock -> MEMSlave2_s1_translator:uav_lock
	wire   [31:0] memslave2_s1_agent_m0_writedata;                                                                // MEMSlave2_s1_agent:m0_writedata -> MEMSlave2_s1_translator:uav_writedata
	wire          memslave2_s1_agent_m0_write;                                                                    // MEMSlave2_s1_agent:m0_write -> MEMSlave2_s1_translator:uav_write
	wire    [2:0] memslave2_s1_agent_m0_burstcount;                                                               // MEMSlave2_s1_agent:m0_burstcount -> MEMSlave2_s1_translator:uav_burstcount
	wire          memslave2_s1_agent_rf_source_valid;                                                             // MEMSlave2_s1_agent:rf_source_valid -> MEMSlave2_s1_agent_rsp_fifo:in_valid
	wire  [106:0] memslave2_s1_agent_rf_source_data;                                                              // MEMSlave2_s1_agent:rf_source_data -> MEMSlave2_s1_agent_rsp_fifo:in_data
	wire          memslave2_s1_agent_rf_source_ready;                                                             // MEMSlave2_s1_agent_rsp_fifo:in_ready -> MEMSlave2_s1_agent:rf_source_ready
	wire          memslave2_s1_agent_rf_source_startofpacket;                                                     // MEMSlave2_s1_agent:rf_source_startofpacket -> MEMSlave2_s1_agent_rsp_fifo:in_startofpacket
	wire          memslave2_s1_agent_rf_source_endofpacket;                                                       // MEMSlave2_s1_agent:rf_source_endofpacket -> MEMSlave2_s1_agent_rsp_fifo:in_endofpacket
	wire          memslave2_s1_agent_rsp_fifo_out_valid;                                                          // MEMSlave2_s1_agent_rsp_fifo:out_valid -> MEMSlave2_s1_agent:rf_sink_valid
	wire  [106:0] memslave2_s1_agent_rsp_fifo_out_data;                                                           // MEMSlave2_s1_agent_rsp_fifo:out_data -> MEMSlave2_s1_agent:rf_sink_data
	wire          memslave2_s1_agent_rsp_fifo_out_ready;                                                          // MEMSlave2_s1_agent:rf_sink_ready -> MEMSlave2_s1_agent_rsp_fifo:out_ready
	wire          memslave2_s1_agent_rsp_fifo_out_startofpacket;                                                  // MEMSlave2_s1_agent_rsp_fifo:out_startofpacket -> MEMSlave2_s1_agent:rf_sink_startofpacket
	wire          memslave2_s1_agent_rsp_fifo_out_endofpacket;                                                    // MEMSlave2_s1_agent_rsp_fifo:out_endofpacket -> MEMSlave2_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                                          // cmd_mux_012:src_valid -> MEMSlave2_s1_agent:cp_valid
	wire  [105:0] cmd_mux_012_src_data;                                                                           // cmd_mux_012:src_data -> MEMSlave2_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                                          // MEMSlave2_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [17:0] cmd_mux_012_src_channel;                                                                        // cmd_mux_012:src_channel -> MEMSlave2_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                                  // cmd_mux_012:src_startofpacket -> MEMSlave2_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                                    // cmd_mux_012:src_endofpacket -> MEMSlave2_s1_agent:cp_endofpacket
	wire   [31:0] pioslave2_s1_agent_m0_readdata;                                                                 // PIOSlave2_s1_translator:uav_readdata -> PIOSlave2_s1_agent:m0_readdata
	wire          pioslave2_s1_agent_m0_waitrequest;                                                              // PIOSlave2_s1_translator:uav_waitrequest -> PIOSlave2_s1_agent:m0_waitrequest
	wire          pioslave2_s1_agent_m0_debugaccess;                                                              // PIOSlave2_s1_agent:m0_debugaccess -> PIOSlave2_s1_translator:uav_debugaccess
	wire   [25:0] pioslave2_s1_agent_m0_address;                                                                  // PIOSlave2_s1_agent:m0_address -> PIOSlave2_s1_translator:uav_address
	wire    [3:0] pioslave2_s1_agent_m0_byteenable;                                                               // PIOSlave2_s1_agent:m0_byteenable -> PIOSlave2_s1_translator:uav_byteenable
	wire          pioslave2_s1_agent_m0_read;                                                                     // PIOSlave2_s1_agent:m0_read -> PIOSlave2_s1_translator:uav_read
	wire          pioslave2_s1_agent_m0_readdatavalid;                                                            // PIOSlave2_s1_translator:uav_readdatavalid -> PIOSlave2_s1_agent:m0_readdatavalid
	wire          pioslave2_s1_agent_m0_lock;                                                                     // PIOSlave2_s1_agent:m0_lock -> PIOSlave2_s1_translator:uav_lock
	wire   [31:0] pioslave2_s1_agent_m0_writedata;                                                                // PIOSlave2_s1_agent:m0_writedata -> PIOSlave2_s1_translator:uav_writedata
	wire          pioslave2_s1_agent_m0_write;                                                                    // PIOSlave2_s1_agent:m0_write -> PIOSlave2_s1_translator:uav_write
	wire    [2:0] pioslave2_s1_agent_m0_burstcount;                                                               // PIOSlave2_s1_agent:m0_burstcount -> PIOSlave2_s1_translator:uav_burstcount
	wire          pioslave2_s1_agent_rf_source_valid;                                                             // PIOSlave2_s1_agent:rf_source_valid -> PIOSlave2_s1_agent_rsp_fifo:in_valid
	wire  [106:0] pioslave2_s1_agent_rf_source_data;                                                              // PIOSlave2_s1_agent:rf_source_data -> PIOSlave2_s1_agent_rsp_fifo:in_data
	wire          pioslave2_s1_agent_rf_source_ready;                                                             // PIOSlave2_s1_agent_rsp_fifo:in_ready -> PIOSlave2_s1_agent:rf_source_ready
	wire          pioslave2_s1_agent_rf_source_startofpacket;                                                     // PIOSlave2_s1_agent:rf_source_startofpacket -> PIOSlave2_s1_agent_rsp_fifo:in_startofpacket
	wire          pioslave2_s1_agent_rf_source_endofpacket;                                                       // PIOSlave2_s1_agent:rf_source_endofpacket -> PIOSlave2_s1_agent_rsp_fifo:in_endofpacket
	wire          pioslave2_s1_agent_rsp_fifo_out_valid;                                                          // PIOSlave2_s1_agent_rsp_fifo:out_valid -> PIOSlave2_s1_agent:rf_sink_valid
	wire  [106:0] pioslave2_s1_agent_rsp_fifo_out_data;                                                           // PIOSlave2_s1_agent_rsp_fifo:out_data -> PIOSlave2_s1_agent:rf_sink_data
	wire          pioslave2_s1_agent_rsp_fifo_out_ready;                                                          // PIOSlave2_s1_agent:rf_sink_ready -> PIOSlave2_s1_agent_rsp_fifo:out_ready
	wire          pioslave2_s1_agent_rsp_fifo_out_startofpacket;                                                  // PIOSlave2_s1_agent_rsp_fifo:out_startofpacket -> PIOSlave2_s1_agent:rf_sink_startofpacket
	wire          pioslave2_s1_agent_rsp_fifo_out_endofpacket;                                                    // PIOSlave2_s1_agent_rsp_fifo:out_endofpacket -> PIOSlave2_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                                          // cmd_mux_013:src_valid -> PIOSlave2_s1_agent:cp_valid
	wire  [105:0] cmd_mux_013_src_data;                                                                           // cmd_mux_013:src_data -> PIOSlave2_s1_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                                          // PIOSlave2_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [17:0] cmd_mux_013_src_channel;                                                                        // cmd_mux_013:src_channel -> PIOSlave2_s1_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                                  // cmd_mux_013:src_startofpacket -> PIOSlave2_s1_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                                    // cmd_mux_013:src_endofpacket -> PIOSlave2_s1_agent:cp_endofpacket
	wire   [31:0] jtagslave1_avalon_jtag_slave_agent_m0_readdata;                                                 // JTAGSlave1_avalon_jtag_slave_translator:uav_readdata -> JTAGSlave1_avalon_jtag_slave_agent:m0_readdata
	wire          jtagslave1_avalon_jtag_slave_agent_m0_waitrequest;                                              // JTAGSlave1_avalon_jtag_slave_translator:uav_waitrequest -> JTAGSlave1_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtagslave1_avalon_jtag_slave_agent_m0_debugaccess;                                              // JTAGSlave1_avalon_jtag_slave_agent:m0_debugaccess -> JTAGSlave1_avalon_jtag_slave_translator:uav_debugaccess
	wire   [25:0] jtagslave1_avalon_jtag_slave_agent_m0_address;                                                  // JTAGSlave1_avalon_jtag_slave_agent:m0_address -> JTAGSlave1_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtagslave1_avalon_jtag_slave_agent_m0_byteenable;                                               // JTAGSlave1_avalon_jtag_slave_agent:m0_byteenable -> JTAGSlave1_avalon_jtag_slave_translator:uav_byteenable
	wire          jtagslave1_avalon_jtag_slave_agent_m0_read;                                                     // JTAGSlave1_avalon_jtag_slave_agent:m0_read -> JTAGSlave1_avalon_jtag_slave_translator:uav_read
	wire          jtagslave1_avalon_jtag_slave_agent_m0_readdatavalid;                                            // JTAGSlave1_avalon_jtag_slave_translator:uav_readdatavalid -> JTAGSlave1_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtagslave1_avalon_jtag_slave_agent_m0_lock;                                                     // JTAGSlave1_avalon_jtag_slave_agent:m0_lock -> JTAGSlave1_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtagslave1_avalon_jtag_slave_agent_m0_writedata;                                                // JTAGSlave1_avalon_jtag_slave_agent:m0_writedata -> JTAGSlave1_avalon_jtag_slave_translator:uav_writedata
	wire          jtagslave1_avalon_jtag_slave_agent_m0_write;                                                    // JTAGSlave1_avalon_jtag_slave_agent:m0_write -> JTAGSlave1_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtagslave1_avalon_jtag_slave_agent_m0_burstcount;                                               // JTAGSlave1_avalon_jtag_slave_agent:m0_burstcount -> JTAGSlave1_avalon_jtag_slave_translator:uav_burstcount
	wire          jtagslave1_avalon_jtag_slave_agent_rf_source_valid;                                             // JTAGSlave1_avalon_jtag_slave_agent:rf_source_valid -> JTAGSlave1_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [106:0] jtagslave1_avalon_jtag_slave_agent_rf_source_data;                                              // JTAGSlave1_avalon_jtag_slave_agent:rf_source_data -> JTAGSlave1_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtagslave1_avalon_jtag_slave_agent_rf_source_ready;                                             // JTAGSlave1_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAGSlave1_avalon_jtag_slave_agent:rf_source_ready
	wire          jtagslave1_avalon_jtag_slave_agent_rf_source_startofpacket;                                     // JTAGSlave1_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAGSlave1_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtagslave1_avalon_jtag_slave_agent_rf_source_endofpacket;                                       // JTAGSlave1_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAGSlave1_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtagslave1_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                          // JTAGSlave1_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAGSlave1_avalon_jtag_slave_agent:rf_sink_valid
	wire  [106:0] jtagslave1_avalon_jtag_slave_agent_rsp_fifo_out_data;                                           // JTAGSlave1_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAGSlave1_avalon_jtag_slave_agent:rf_sink_data
	wire          jtagslave1_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                          // JTAGSlave1_avalon_jtag_slave_agent:rf_sink_ready -> JTAGSlave1_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtagslave1_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                                  // JTAGSlave1_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAGSlave1_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtagslave1_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                    // JTAGSlave1_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAGSlave1_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                                          // cmd_mux_014:src_valid -> JTAGSlave1_avalon_jtag_slave_agent:cp_valid
	wire  [105:0] cmd_mux_014_src_data;                                                                           // cmd_mux_014:src_data -> JTAGSlave1_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                                          // JTAGSlave1_avalon_jtag_slave_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [17:0] cmd_mux_014_src_channel;                                                                        // cmd_mux_014:src_channel -> JTAGSlave1_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                                  // cmd_mux_014:src_startofpacket -> JTAGSlave1_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                                    // cmd_mux_014:src_endofpacket -> JTAGSlave1_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] cpuslave1_debug_mem_slave_agent_m0_readdata;                                                    // CPUSlave1_debug_mem_slave_translator:uav_readdata -> CPUSlave1_debug_mem_slave_agent:m0_readdata
	wire          cpuslave1_debug_mem_slave_agent_m0_waitrequest;                                                 // CPUSlave1_debug_mem_slave_translator:uav_waitrequest -> CPUSlave1_debug_mem_slave_agent:m0_waitrequest
	wire          cpuslave1_debug_mem_slave_agent_m0_debugaccess;                                                 // CPUSlave1_debug_mem_slave_agent:m0_debugaccess -> CPUSlave1_debug_mem_slave_translator:uav_debugaccess
	wire   [25:0] cpuslave1_debug_mem_slave_agent_m0_address;                                                     // CPUSlave1_debug_mem_slave_agent:m0_address -> CPUSlave1_debug_mem_slave_translator:uav_address
	wire    [3:0] cpuslave1_debug_mem_slave_agent_m0_byteenable;                                                  // CPUSlave1_debug_mem_slave_agent:m0_byteenable -> CPUSlave1_debug_mem_slave_translator:uav_byteenable
	wire          cpuslave1_debug_mem_slave_agent_m0_read;                                                        // CPUSlave1_debug_mem_slave_agent:m0_read -> CPUSlave1_debug_mem_slave_translator:uav_read
	wire          cpuslave1_debug_mem_slave_agent_m0_readdatavalid;                                               // CPUSlave1_debug_mem_slave_translator:uav_readdatavalid -> CPUSlave1_debug_mem_slave_agent:m0_readdatavalid
	wire          cpuslave1_debug_mem_slave_agent_m0_lock;                                                        // CPUSlave1_debug_mem_slave_agent:m0_lock -> CPUSlave1_debug_mem_slave_translator:uav_lock
	wire   [31:0] cpuslave1_debug_mem_slave_agent_m0_writedata;                                                   // CPUSlave1_debug_mem_slave_agent:m0_writedata -> CPUSlave1_debug_mem_slave_translator:uav_writedata
	wire          cpuslave1_debug_mem_slave_agent_m0_write;                                                       // CPUSlave1_debug_mem_slave_agent:m0_write -> CPUSlave1_debug_mem_slave_translator:uav_write
	wire    [2:0] cpuslave1_debug_mem_slave_agent_m0_burstcount;                                                  // CPUSlave1_debug_mem_slave_agent:m0_burstcount -> CPUSlave1_debug_mem_slave_translator:uav_burstcount
	wire          cpuslave1_debug_mem_slave_agent_rf_source_valid;                                                // CPUSlave1_debug_mem_slave_agent:rf_source_valid -> CPUSlave1_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [106:0] cpuslave1_debug_mem_slave_agent_rf_source_data;                                                 // CPUSlave1_debug_mem_slave_agent:rf_source_data -> CPUSlave1_debug_mem_slave_agent_rsp_fifo:in_data
	wire          cpuslave1_debug_mem_slave_agent_rf_source_ready;                                                // CPUSlave1_debug_mem_slave_agent_rsp_fifo:in_ready -> CPUSlave1_debug_mem_slave_agent:rf_source_ready
	wire          cpuslave1_debug_mem_slave_agent_rf_source_startofpacket;                                        // CPUSlave1_debug_mem_slave_agent:rf_source_startofpacket -> CPUSlave1_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          cpuslave1_debug_mem_slave_agent_rf_source_endofpacket;                                          // CPUSlave1_debug_mem_slave_agent:rf_source_endofpacket -> CPUSlave1_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          cpuslave1_debug_mem_slave_agent_rsp_fifo_out_valid;                                             // CPUSlave1_debug_mem_slave_agent_rsp_fifo:out_valid -> CPUSlave1_debug_mem_slave_agent:rf_sink_valid
	wire  [106:0] cpuslave1_debug_mem_slave_agent_rsp_fifo_out_data;                                              // CPUSlave1_debug_mem_slave_agent_rsp_fifo:out_data -> CPUSlave1_debug_mem_slave_agent:rf_sink_data
	wire          cpuslave1_debug_mem_slave_agent_rsp_fifo_out_ready;                                             // CPUSlave1_debug_mem_slave_agent:rf_sink_ready -> CPUSlave1_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          cpuslave1_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                                     // CPUSlave1_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> CPUSlave1_debug_mem_slave_agent:rf_sink_startofpacket
	wire          cpuslave1_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                                       // CPUSlave1_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> CPUSlave1_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                                          // cmd_mux_015:src_valid -> CPUSlave1_debug_mem_slave_agent:cp_valid
	wire  [105:0] cmd_mux_015_src_data;                                                                           // cmd_mux_015:src_data -> CPUSlave1_debug_mem_slave_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                                          // CPUSlave1_debug_mem_slave_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [17:0] cmd_mux_015_src_channel;                                                                        // cmd_mux_015:src_channel -> CPUSlave1_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                                  // cmd_mux_015:src_startofpacket -> CPUSlave1_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                                    // cmd_mux_015:src_endofpacket -> CPUSlave1_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] pioslave1_s1_agent_m0_readdata;                                                                 // PIOSlave1_s1_translator:uav_readdata -> PIOSlave1_s1_agent:m0_readdata
	wire          pioslave1_s1_agent_m0_waitrequest;                                                              // PIOSlave1_s1_translator:uav_waitrequest -> PIOSlave1_s1_agent:m0_waitrequest
	wire          pioslave1_s1_agent_m0_debugaccess;                                                              // PIOSlave1_s1_agent:m0_debugaccess -> PIOSlave1_s1_translator:uav_debugaccess
	wire   [25:0] pioslave1_s1_agent_m0_address;                                                                  // PIOSlave1_s1_agent:m0_address -> PIOSlave1_s1_translator:uav_address
	wire    [3:0] pioslave1_s1_agent_m0_byteenable;                                                               // PIOSlave1_s1_agent:m0_byteenable -> PIOSlave1_s1_translator:uav_byteenable
	wire          pioslave1_s1_agent_m0_read;                                                                     // PIOSlave1_s1_agent:m0_read -> PIOSlave1_s1_translator:uav_read
	wire          pioslave1_s1_agent_m0_readdatavalid;                                                            // PIOSlave1_s1_translator:uav_readdatavalid -> PIOSlave1_s1_agent:m0_readdatavalid
	wire          pioslave1_s1_agent_m0_lock;                                                                     // PIOSlave1_s1_agent:m0_lock -> PIOSlave1_s1_translator:uav_lock
	wire   [31:0] pioslave1_s1_agent_m0_writedata;                                                                // PIOSlave1_s1_agent:m0_writedata -> PIOSlave1_s1_translator:uav_writedata
	wire          pioslave1_s1_agent_m0_write;                                                                    // PIOSlave1_s1_agent:m0_write -> PIOSlave1_s1_translator:uav_write
	wire    [2:0] pioslave1_s1_agent_m0_burstcount;                                                               // PIOSlave1_s1_agent:m0_burstcount -> PIOSlave1_s1_translator:uav_burstcount
	wire          pioslave1_s1_agent_rf_source_valid;                                                             // PIOSlave1_s1_agent:rf_source_valid -> PIOSlave1_s1_agent_rsp_fifo:in_valid
	wire  [106:0] pioslave1_s1_agent_rf_source_data;                                                              // PIOSlave1_s1_agent:rf_source_data -> PIOSlave1_s1_agent_rsp_fifo:in_data
	wire          pioslave1_s1_agent_rf_source_ready;                                                             // PIOSlave1_s1_agent_rsp_fifo:in_ready -> PIOSlave1_s1_agent:rf_source_ready
	wire          pioslave1_s1_agent_rf_source_startofpacket;                                                     // PIOSlave1_s1_agent:rf_source_startofpacket -> PIOSlave1_s1_agent_rsp_fifo:in_startofpacket
	wire          pioslave1_s1_agent_rf_source_endofpacket;                                                       // PIOSlave1_s1_agent:rf_source_endofpacket -> PIOSlave1_s1_agent_rsp_fifo:in_endofpacket
	wire          pioslave1_s1_agent_rsp_fifo_out_valid;                                                          // PIOSlave1_s1_agent_rsp_fifo:out_valid -> PIOSlave1_s1_agent:rf_sink_valid
	wire  [106:0] pioslave1_s1_agent_rsp_fifo_out_data;                                                           // PIOSlave1_s1_agent_rsp_fifo:out_data -> PIOSlave1_s1_agent:rf_sink_data
	wire          pioslave1_s1_agent_rsp_fifo_out_ready;                                                          // PIOSlave1_s1_agent:rf_sink_ready -> PIOSlave1_s1_agent_rsp_fifo:out_ready
	wire          pioslave1_s1_agent_rsp_fifo_out_startofpacket;                                                  // PIOSlave1_s1_agent_rsp_fifo:out_startofpacket -> PIOSlave1_s1_agent:rf_sink_startofpacket
	wire          pioslave1_s1_agent_rsp_fifo_out_endofpacket;                                                    // PIOSlave1_s1_agent_rsp_fifo:out_endofpacket -> PIOSlave1_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_016_src_valid;                                                                          // cmd_mux_016:src_valid -> PIOSlave1_s1_agent:cp_valid
	wire  [105:0] cmd_mux_016_src_data;                                                                           // cmd_mux_016:src_data -> PIOSlave1_s1_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                                          // PIOSlave1_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [17:0] cmd_mux_016_src_channel;                                                                        // cmd_mux_016:src_channel -> PIOSlave1_s1_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                                  // cmd_mux_016:src_startofpacket -> PIOSlave1_s1_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                                    // cmd_mux_016:src_endofpacket -> PIOSlave1_s1_agent:cp_endofpacket
	wire   [31:0] memslave1_s1_agent_m0_readdata;                                                                 // MEMSlave1_s1_translator:uav_readdata -> MEMSlave1_s1_agent:m0_readdata
	wire          memslave1_s1_agent_m0_waitrequest;                                                              // MEMSlave1_s1_translator:uav_waitrequest -> MEMSlave1_s1_agent:m0_waitrequest
	wire          memslave1_s1_agent_m0_debugaccess;                                                              // MEMSlave1_s1_agent:m0_debugaccess -> MEMSlave1_s1_translator:uav_debugaccess
	wire   [25:0] memslave1_s1_agent_m0_address;                                                                  // MEMSlave1_s1_agent:m0_address -> MEMSlave1_s1_translator:uav_address
	wire    [3:0] memslave1_s1_agent_m0_byteenable;                                                               // MEMSlave1_s1_agent:m0_byteenable -> MEMSlave1_s1_translator:uav_byteenable
	wire          memslave1_s1_agent_m0_read;                                                                     // MEMSlave1_s1_agent:m0_read -> MEMSlave1_s1_translator:uav_read
	wire          memslave1_s1_agent_m0_readdatavalid;                                                            // MEMSlave1_s1_translator:uav_readdatavalid -> MEMSlave1_s1_agent:m0_readdatavalid
	wire          memslave1_s1_agent_m0_lock;                                                                     // MEMSlave1_s1_agent:m0_lock -> MEMSlave1_s1_translator:uav_lock
	wire   [31:0] memslave1_s1_agent_m0_writedata;                                                                // MEMSlave1_s1_agent:m0_writedata -> MEMSlave1_s1_translator:uav_writedata
	wire          memslave1_s1_agent_m0_write;                                                                    // MEMSlave1_s1_agent:m0_write -> MEMSlave1_s1_translator:uav_write
	wire    [2:0] memslave1_s1_agent_m0_burstcount;                                                               // MEMSlave1_s1_agent:m0_burstcount -> MEMSlave1_s1_translator:uav_burstcount
	wire          memslave1_s1_agent_rf_source_valid;                                                             // MEMSlave1_s1_agent:rf_source_valid -> MEMSlave1_s1_agent_rsp_fifo:in_valid
	wire  [106:0] memslave1_s1_agent_rf_source_data;                                                              // MEMSlave1_s1_agent:rf_source_data -> MEMSlave1_s1_agent_rsp_fifo:in_data
	wire          memslave1_s1_agent_rf_source_ready;                                                             // MEMSlave1_s1_agent_rsp_fifo:in_ready -> MEMSlave1_s1_agent:rf_source_ready
	wire          memslave1_s1_agent_rf_source_startofpacket;                                                     // MEMSlave1_s1_agent:rf_source_startofpacket -> MEMSlave1_s1_agent_rsp_fifo:in_startofpacket
	wire          memslave1_s1_agent_rf_source_endofpacket;                                                       // MEMSlave1_s1_agent:rf_source_endofpacket -> MEMSlave1_s1_agent_rsp_fifo:in_endofpacket
	wire          memslave1_s1_agent_rsp_fifo_out_valid;                                                          // MEMSlave1_s1_agent_rsp_fifo:out_valid -> MEMSlave1_s1_agent:rf_sink_valid
	wire  [106:0] memslave1_s1_agent_rsp_fifo_out_data;                                                           // MEMSlave1_s1_agent_rsp_fifo:out_data -> MEMSlave1_s1_agent:rf_sink_data
	wire          memslave1_s1_agent_rsp_fifo_out_ready;                                                          // MEMSlave1_s1_agent:rf_sink_ready -> MEMSlave1_s1_agent_rsp_fifo:out_ready
	wire          memslave1_s1_agent_rsp_fifo_out_startofpacket;                                                  // MEMSlave1_s1_agent_rsp_fifo:out_startofpacket -> MEMSlave1_s1_agent:rf_sink_startofpacket
	wire          memslave1_s1_agent_rsp_fifo_out_endofpacket;                                                    // MEMSlave1_s1_agent_rsp_fifo:out_endofpacket -> MEMSlave1_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_017_src_valid;                                                                          // cmd_mux_017:src_valid -> MEMSlave1_s1_agent:cp_valid
	wire  [105:0] cmd_mux_017_src_data;                                                                           // cmd_mux_017:src_data -> MEMSlave1_s1_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                                          // MEMSlave1_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [17:0] cmd_mux_017_src_channel;                                                                        // cmd_mux_017:src_channel -> MEMSlave1_s1_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                                  // cmd_mux_017:src_startofpacket -> MEMSlave1_s1_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                                    // cmd_mux_017:src_endofpacket -> MEMSlave1_s1_agent:cp_endofpacket
	wire          cpumaster_data_master_agent_cp_valid;                                                           // CPUMaster_data_master_agent:cp_valid -> router:sink_valid
	wire  [105:0] cpumaster_data_master_agent_cp_data;                                                            // CPUMaster_data_master_agent:cp_data -> router:sink_data
	wire          cpumaster_data_master_agent_cp_ready;                                                           // router:sink_ready -> CPUMaster_data_master_agent:cp_ready
	wire          cpumaster_data_master_agent_cp_startofpacket;                                                   // CPUMaster_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          cpumaster_data_master_agent_cp_endofpacket;                                                     // CPUMaster_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          cpuslave1_data_master_agent_cp_valid;                                                           // CPUSlave1_data_master_agent:cp_valid -> router_001:sink_valid
	wire  [105:0] cpuslave1_data_master_agent_cp_data;                                                            // CPUSlave1_data_master_agent:cp_data -> router_001:sink_data
	wire          cpuslave1_data_master_agent_cp_ready;                                                           // router_001:sink_ready -> CPUSlave1_data_master_agent:cp_ready
	wire          cpuslave1_data_master_agent_cp_startofpacket;                                                   // CPUSlave1_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          cpuslave1_data_master_agent_cp_endofpacket;                                                     // CPUSlave1_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          cpuslave2_data_master_agent_cp_valid;                                                           // CPUSlave2_data_master_agent:cp_valid -> router_002:sink_valid
	wire  [105:0] cpuslave2_data_master_agent_cp_data;                                                            // CPUSlave2_data_master_agent:cp_data -> router_002:sink_data
	wire          cpuslave2_data_master_agent_cp_ready;                                                           // router_002:sink_ready -> CPUSlave2_data_master_agent:cp_ready
	wire          cpuslave2_data_master_agent_cp_startofpacket;                                                   // CPUSlave2_data_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          cpuslave2_data_master_agent_cp_endofpacket;                                                     // CPUSlave2_data_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          cpuslave2_instruction_master_agent_cp_valid;                                                    // CPUSlave2_instruction_master_agent:cp_valid -> router_003:sink_valid
	wire  [105:0] cpuslave2_instruction_master_agent_cp_data;                                                     // CPUSlave2_instruction_master_agent:cp_data -> router_003:sink_data
	wire          cpuslave2_instruction_master_agent_cp_ready;                                                    // router_003:sink_ready -> CPUSlave2_instruction_master_agent:cp_ready
	wire          cpuslave2_instruction_master_agent_cp_startofpacket;                                            // CPUSlave2_instruction_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          cpuslave2_instruction_master_agent_cp_endofpacket;                                              // CPUSlave2_instruction_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          cpuslave1_instruction_master_agent_cp_valid;                                                    // CPUSlave1_instruction_master_agent:cp_valid -> router_004:sink_valid
	wire  [105:0] cpuslave1_instruction_master_agent_cp_data;                                                     // CPUSlave1_instruction_master_agent:cp_data -> router_004:sink_data
	wire          cpuslave1_instruction_master_agent_cp_ready;                                                    // router_004:sink_ready -> CPUSlave1_instruction_master_agent:cp_ready
	wire          cpuslave1_instruction_master_agent_cp_startofpacket;                                            // CPUSlave1_instruction_master_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          cpuslave1_instruction_master_agent_cp_endofpacket;                                              // CPUSlave1_instruction_master_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          cpumaster_instruction_master_agent_cp_valid;                                                    // CPUMaster_instruction_master_agent:cp_valid -> router_005:sink_valid
	wire  [105:0] cpumaster_instruction_master_agent_cp_data;                                                     // CPUMaster_instruction_master_agent:cp_data -> router_005:sink_data
	wire          cpumaster_instruction_master_agent_cp_ready;                                                    // router_005:sink_ready -> CPUMaster_instruction_master_agent:cp_ready
	wire          cpumaster_instruction_master_agent_cp_startofpacket;                                            // CPUMaster_instruction_master_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire          cpumaster_instruction_master_agent_cp_endofpacket;                                              // CPUMaster_instruction_master_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_valid;                      // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rp_valid -> router_006:sink_valid
	wire   [78:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_data;                       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rp_data -> router_006:sink_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_ready;                      // router_006:sink_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rp_ready
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_startofpacket;              // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_endofpacket;                // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_valid;                     // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rp_valid -> router_007:sink_valid
	wire  [105:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_data;                      // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rp_data -> router_007:sink_data
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_ready;                     // router_007:sink_ready -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rp_ready
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_startofpacket;             // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_endofpacket;               // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                           // router_007:src_valid -> rsp_demux_001:sink_valid
	wire  [105:0] router_007_src_data;                                                                            // router_007:src_data -> rsp_demux_001:sink_data
	wire          router_007_src_ready;                                                                           // rsp_demux_001:sink_ready -> router_007:src_ready
	wire   [17:0] router_007_src_channel;                                                                         // router_007:src_channel -> rsp_demux_001:sink_channel
	wire          router_007_src_startofpacket;                                                                   // router_007:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                     // router_007:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          jtagmaster_avalon_jtag_slave_agent_rp_valid;                                                    // JTAGMaster_avalon_jtag_slave_agent:rp_valid -> router_008:sink_valid
	wire  [105:0] jtagmaster_avalon_jtag_slave_agent_rp_data;                                                     // JTAGMaster_avalon_jtag_slave_agent:rp_data -> router_008:sink_data
	wire          jtagmaster_avalon_jtag_slave_agent_rp_ready;                                                    // router_008:sink_ready -> JTAGMaster_avalon_jtag_slave_agent:rp_ready
	wire          jtagmaster_avalon_jtag_slave_agent_rp_startofpacket;                                            // JTAGMaster_avalon_jtag_slave_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          jtagmaster_avalon_jtag_slave_agent_rp_endofpacket;                                              // JTAGMaster_avalon_jtag_slave_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                           // router_008:src_valid -> rsp_demux_002:sink_valid
	wire  [105:0] router_008_src_data;                                                                            // router_008:src_data -> rsp_demux_002:sink_data
	wire          router_008_src_ready;                                                                           // rsp_demux_002:sink_ready -> router_008:src_ready
	wire   [17:0] router_008_src_channel;                                                                         // router_008:src_channel -> rsp_demux_002:sink_channel
	wire          router_008_src_startofpacket;                                                                   // router_008:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                     // router_008:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          reg16_0_avalon_slave_0_agent_rp_valid;                                                          // reg16_0_avalon_slave_0_agent:rp_valid -> router_009:sink_valid
	wire   [87:0] reg16_0_avalon_slave_0_agent_rp_data;                                                           // reg16_0_avalon_slave_0_agent:rp_data -> router_009:sink_data
	wire          reg16_0_avalon_slave_0_agent_rp_ready;                                                          // router_009:sink_ready -> reg16_0_avalon_slave_0_agent:rp_ready
	wire          reg16_0_avalon_slave_0_agent_rp_startofpacket;                                                  // reg16_0_avalon_slave_0_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          reg16_0_avalon_slave_0_agent_rp_endofpacket;                                                    // reg16_0_avalon_slave_0_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          cpumaster_debug_mem_slave_agent_rp_valid;                                                       // CPUMaster_debug_mem_slave_agent:rp_valid -> router_010:sink_valid
	wire  [105:0] cpumaster_debug_mem_slave_agent_rp_data;                                                        // CPUMaster_debug_mem_slave_agent:rp_data -> router_010:sink_data
	wire          cpumaster_debug_mem_slave_agent_rp_ready;                                                       // router_010:sink_ready -> CPUMaster_debug_mem_slave_agent:rp_ready
	wire          cpumaster_debug_mem_slave_agent_rp_startofpacket;                                               // CPUMaster_debug_mem_slave_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          cpumaster_debug_mem_slave_agent_rp_endofpacket;                                                 // CPUMaster_debug_mem_slave_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                           // router_010:src_valid -> rsp_demux_004:sink_valid
	wire  [105:0] router_010_src_data;                                                                            // router_010:src_data -> rsp_demux_004:sink_data
	wire          router_010_src_ready;                                                                           // rsp_demux_004:sink_ready -> router_010:src_ready
	wire   [17:0] router_010_src_channel;                                                                         // router_010:src_channel -> rsp_demux_004:sink_channel
	wire          router_010_src_startofpacket;                                                                   // router_010:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                     // router_010:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          memmaster_s1_agent_rp_valid;                                                                    // MEMMaster_s1_agent:rp_valid -> router_011:sink_valid
	wire  [105:0] memmaster_s1_agent_rp_data;                                                                     // MEMMaster_s1_agent:rp_data -> router_011:sink_data
	wire          memmaster_s1_agent_rp_ready;                                                                    // router_011:sink_ready -> MEMMaster_s1_agent:rp_ready
	wire          memmaster_s1_agent_rp_startofpacket;                                                            // MEMMaster_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          memmaster_s1_agent_rp_endofpacket;                                                              // MEMMaster_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                           // router_011:src_valid -> rsp_demux_005:sink_valid
	wire  [105:0] router_011_src_data;                                                                            // router_011:src_data -> rsp_demux_005:sink_data
	wire          router_011_src_ready;                                                                           // rsp_demux_005:sink_ready -> router_011:src_ready
	wire   [17:0] router_011_src_channel;                                                                         // router_011:src_channel -> rsp_demux_005:sink_channel
	wire          router_011_src_startofpacket;                                                                   // router_011:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                     // router_011:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          mutex_0_s1_agent_rp_valid;                                                                      // mutex_0_s1_agent:rp_valid -> router_012:sink_valid
	wire  [105:0] mutex_0_s1_agent_rp_data;                                                                       // mutex_0_s1_agent:rp_data -> router_012:sink_data
	wire          mutex_0_s1_agent_rp_ready;                                                                      // router_012:sink_ready -> mutex_0_s1_agent:rp_ready
	wire          mutex_0_s1_agent_rp_startofpacket;                                                              // mutex_0_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          mutex_0_s1_agent_rp_endofpacket;                                                                // mutex_0_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                           // router_012:src_valid -> rsp_demux_006:sink_valid
	wire  [105:0] router_012_src_data;                                                                            // router_012:src_data -> rsp_demux_006:sink_data
	wire          router_012_src_ready;                                                                           // rsp_demux_006:sink_ready -> router_012:src_ready
	wire   [17:0] router_012_src_channel;                                                                         // router_012:src_channel -> rsp_demux_006:sink_channel
	wire          router_012_src_startofpacket;                                                                   // router_012:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_012_src_endofpacket;                                                                     // router_012:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          ledgslave1_s1_agent_rp_valid;                                                                   // LEDGSlave1_s1_agent:rp_valid -> router_013:sink_valid
	wire  [105:0] ledgslave1_s1_agent_rp_data;                                                                    // LEDGSlave1_s1_agent:rp_data -> router_013:sink_data
	wire          ledgslave1_s1_agent_rp_ready;                                                                   // router_013:sink_ready -> LEDGSlave1_s1_agent:rp_ready
	wire          ledgslave1_s1_agent_rp_startofpacket;                                                           // LEDGSlave1_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          ledgslave1_s1_agent_rp_endofpacket;                                                             // LEDGSlave1_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                           // router_013:src_valid -> rsp_demux_007:sink_valid
	wire  [105:0] router_013_src_data;                                                                            // router_013:src_data -> rsp_demux_007:sink_data
	wire          router_013_src_ready;                                                                           // rsp_demux_007:sink_ready -> router_013:src_ready
	wire   [17:0] router_013_src_channel;                                                                         // router_013:src_channel -> rsp_demux_007:sink_channel
	wire          router_013_src_startofpacket;                                                                   // router_013:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                     // router_013:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          ledrslave2_s1_agent_rp_valid;                                                                   // LEDRSlave2_s1_agent:rp_valid -> router_014:sink_valid
	wire  [105:0] ledrslave2_s1_agent_rp_data;                                                                    // LEDRSlave2_s1_agent:rp_data -> router_014:sink_data
	wire          ledrslave2_s1_agent_rp_ready;                                                                   // router_014:sink_ready -> LEDRSlave2_s1_agent:rp_ready
	wire          ledrslave2_s1_agent_rp_startofpacket;                                                           // LEDRSlave2_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          ledrslave2_s1_agent_rp_endofpacket;                                                             // LEDRSlave2_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                           // router_014:src_valid -> rsp_demux_008:sink_valid
	wire  [105:0] router_014_src_data;                                                                            // router_014:src_data -> rsp_demux_008:sink_data
	wire          router_014_src_ready;                                                                           // rsp_demux_008:sink_ready -> router_014:src_ready
	wire   [17:0] router_014_src_channel;                                                                         // router_014:src_channel -> rsp_demux_008:sink_channel
	wire          router_014_src_startofpacket;                                                                   // router_014:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                     // router_014:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          uart_0_s1_agent_rp_valid;                                                                       // uart_0_s1_agent:rp_valid -> router_015:sink_valid
	wire  [105:0] uart_0_s1_agent_rp_data;                                                                        // uart_0_s1_agent:rp_data -> router_015:sink_data
	wire          uart_0_s1_agent_rp_ready;                                                                       // router_015:sink_ready -> uart_0_s1_agent:rp_ready
	wire          uart_0_s1_agent_rp_startofpacket;                                                               // uart_0_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          uart_0_s1_agent_rp_endofpacket;                                                                 // uart_0_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                           // router_015:src_valid -> rsp_demux_009:sink_valid
	wire  [105:0] router_015_src_data;                                                                            // router_015:src_data -> rsp_demux_009:sink_data
	wire          router_015_src_ready;                                                                           // rsp_demux_009:sink_ready -> router_015:src_ready
	wire   [17:0] router_015_src_channel;                                                                         // router_015:src_channel -> rsp_demux_009:sink_channel
	wire          router_015_src_startofpacket;                                                                   // router_015:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_015_src_endofpacket;                                                                     // router_015:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          jtagslave2_avalon_jtag_slave_agent_rp_valid;                                                    // JTAGSlave2_avalon_jtag_slave_agent:rp_valid -> router_016:sink_valid
	wire  [105:0] jtagslave2_avalon_jtag_slave_agent_rp_data;                                                     // JTAGSlave2_avalon_jtag_slave_agent:rp_data -> router_016:sink_data
	wire          jtagslave2_avalon_jtag_slave_agent_rp_ready;                                                    // router_016:sink_ready -> JTAGSlave2_avalon_jtag_slave_agent:rp_ready
	wire          jtagslave2_avalon_jtag_slave_agent_rp_startofpacket;                                            // JTAGSlave2_avalon_jtag_slave_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          jtagslave2_avalon_jtag_slave_agent_rp_endofpacket;                                              // JTAGSlave2_avalon_jtag_slave_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                           // router_016:src_valid -> rsp_demux_010:sink_valid
	wire  [105:0] router_016_src_data;                                                                            // router_016:src_data -> rsp_demux_010:sink_data
	wire          router_016_src_ready;                                                                           // rsp_demux_010:sink_ready -> router_016:src_ready
	wire   [17:0] router_016_src_channel;                                                                         // router_016:src_channel -> rsp_demux_010:sink_channel
	wire          router_016_src_startofpacket;                                                                   // router_016:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_016_src_endofpacket;                                                                     // router_016:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          cpuslave2_debug_mem_slave_agent_rp_valid;                                                       // CPUSlave2_debug_mem_slave_agent:rp_valid -> router_017:sink_valid
	wire  [105:0] cpuslave2_debug_mem_slave_agent_rp_data;                                                        // CPUSlave2_debug_mem_slave_agent:rp_data -> router_017:sink_data
	wire          cpuslave2_debug_mem_slave_agent_rp_ready;                                                       // router_017:sink_ready -> CPUSlave2_debug_mem_slave_agent:rp_ready
	wire          cpuslave2_debug_mem_slave_agent_rp_startofpacket;                                               // CPUSlave2_debug_mem_slave_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          cpuslave2_debug_mem_slave_agent_rp_endofpacket;                                                 // CPUSlave2_debug_mem_slave_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                           // router_017:src_valid -> rsp_demux_011:sink_valid
	wire  [105:0] router_017_src_data;                                                                            // router_017:src_data -> rsp_demux_011:sink_data
	wire          router_017_src_ready;                                                                           // rsp_demux_011:sink_ready -> router_017:src_ready
	wire   [17:0] router_017_src_channel;                                                                         // router_017:src_channel -> rsp_demux_011:sink_channel
	wire          router_017_src_startofpacket;                                                                   // router_017:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_017_src_endofpacket;                                                                     // router_017:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          memslave2_s1_agent_rp_valid;                                                                    // MEMSlave2_s1_agent:rp_valid -> router_018:sink_valid
	wire  [105:0] memslave2_s1_agent_rp_data;                                                                     // MEMSlave2_s1_agent:rp_data -> router_018:sink_data
	wire          memslave2_s1_agent_rp_ready;                                                                    // router_018:sink_ready -> MEMSlave2_s1_agent:rp_ready
	wire          memslave2_s1_agent_rp_startofpacket;                                                            // MEMSlave2_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          memslave2_s1_agent_rp_endofpacket;                                                              // MEMSlave2_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                           // router_018:src_valid -> rsp_demux_012:sink_valid
	wire  [105:0] router_018_src_data;                                                                            // router_018:src_data -> rsp_demux_012:sink_data
	wire          router_018_src_ready;                                                                           // rsp_demux_012:sink_ready -> router_018:src_ready
	wire   [17:0] router_018_src_channel;                                                                         // router_018:src_channel -> rsp_demux_012:sink_channel
	wire          router_018_src_startofpacket;                                                                   // router_018:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_018_src_endofpacket;                                                                     // router_018:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          pioslave2_s1_agent_rp_valid;                                                                    // PIOSlave2_s1_agent:rp_valid -> router_019:sink_valid
	wire  [105:0] pioslave2_s1_agent_rp_data;                                                                     // PIOSlave2_s1_agent:rp_data -> router_019:sink_data
	wire          pioslave2_s1_agent_rp_ready;                                                                    // router_019:sink_ready -> PIOSlave2_s1_agent:rp_ready
	wire          pioslave2_s1_agent_rp_startofpacket;                                                            // PIOSlave2_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          pioslave2_s1_agent_rp_endofpacket;                                                              // PIOSlave2_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                                           // router_019:src_valid -> rsp_demux_013:sink_valid
	wire  [105:0] router_019_src_data;                                                                            // router_019:src_data -> rsp_demux_013:sink_data
	wire          router_019_src_ready;                                                                           // rsp_demux_013:sink_ready -> router_019:src_ready
	wire   [17:0] router_019_src_channel;                                                                         // router_019:src_channel -> rsp_demux_013:sink_channel
	wire          router_019_src_startofpacket;                                                                   // router_019:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_019_src_endofpacket;                                                                     // router_019:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          jtagslave1_avalon_jtag_slave_agent_rp_valid;                                                    // JTAGSlave1_avalon_jtag_slave_agent:rp_valid -> router_020:sink_valid
	wire  [105:0] jtagslave1_avalon_jtag_slave_agent_rp_data;                                                     // JTAGSlave1_avalon_jtag_slave_agent:rp_data -> router_020:sink_data
	wire          jtagslave1_avalon_jtag_slave_agent_rp_ready;                                                    // router_020:sink_ready -> JTAGSlave1_avalon_jtag_slave_agent:rp_ready
	wire          jtagslave1_avalon_jtag_slave_agent_rp_startofpacket;                                            // JTAGSlave1_avalon_jtag_slave_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          jtagslave1_avalon_jtag_slave_agent_rp_endofpacket;                                              // JTAGSlave1_avalon_jtag_slave_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                                           // router_020:src_valid -> rsp_demux_014:sink_valid
	wire  [105:0] router_020_src_data;                                                                            // router_020:src_data -> rsp_demux_014:sink_data
	wire          router_020_src_ready;                                                                           // rsp_demux_014:sink_ready -> router_020:src_ready
	wire   [17:0] router_020_src_channel;                                                                         // router_020:src_channel -> rsp_demux_014:sink_channel
	wire          router_020_src_startofpacket;                                                                   // router_020:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_020_src_endofpacket;                                                                     // router_020:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          cpuslave1_debug_mem_slave_agent_rp_valid;                                                       // CPUSlave1_debug_mem_slave_agent:rp_valid -> router_021:sink_valid
	wire  [105:0] cpuslave1_debug_mem_slave_agent_rp_data;                                                        // CPUSlave1_debug_mem_slave_agent:rp_data -> router_021:sink_data
	wire          cpuslave1_debug_mem_slave_agent_rp_ready;                                                       // router_021:sink_ready -> CPUSlave1_debug_mem_slave_agent:rp_ready
	wire          cpuslave1_debug_mem_slave_agent_rp_startofpacket;                                               // CPUSlave1_debug_mem_slave_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          cpuslave1_debug_mem_slave_agent_rp_endofpacket;                                                 // CPUSlave1_debug_mem_slave_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                                           // router_021:src_valid -> rsp_demux_015:sink_valid
	wire  [105:0] router_021_src_data;                                                                            // router_021:src_data -> rsp_demux_015:sink_data
	wire          router_021_src_ready;                                                                           // rsp_demux_015:sink_ready -> router_021:src_ready
	wire   [17:0] router_021_src_channel;                                                                         // router_021:src_channel -> rsp_demux_015:sink_channel
	wire          router_021_src_startofpacket;                                                                   // router_021:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_021_src_endofpacket;                                                                     // router_021:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          pioslave1_s1_agent_rp_valid;                                                                    // PIOSlave1_s1_agent:rp_valid -> router_022:sink_valid
	wire  [105:0] pioslave1_s1_agent_rp_data;                                                                     // PIOSlave1_s1_agent:rp_data -> router_022:sink_data
	wire          pioslave1_s1_agent_rp_ready;                                                                    // router_022:sink_ready -> PIOSlave1_s1_agent:rp_ready
	wire          pioslave1_s1_agent_rp_startofpacket;                                                            // PIOSlave1_s1_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          pioslave1_s1_agent_rp_endofpacket;                                                              // PIOSlave1_s1_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                                           // router_022:src_valid -> rsp_demux_016:sink_valid
	wire  [105:0] router_022_src_data;                                                                            // router_022:src_data -> rsp_demux_016:sink_data
	wire          router_022_src_ready;                                                                           // rsp_demux_016:sink_ready -> router_022:src_ready
	wire   [17:0] router_022_src_channel;                                                                         // router_022:src_channel -> rsp_demux_016:sink_channel
	wire          router_022_src_startofpacket;                                                                   // router_022:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_022_src_endofpacket;                                                                     // router_022:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          memslave1_s1_agent_rp_valid;                                                                    // MEMSlave1_s1_agent:rp_valid -> router_023:sink_valid
	wire  [105:0] memslave1_s1_agent_rp_data;                                                                     // MEMSlave1_s1_agent:rp_data -> router_023:sink_data
	wire          memslave1_s1_agent_rp_ready;                                                                    // router_023:sink_ready -> MEMSlave1_s1_agent:rp_ready
	wire          memslave1_s1_agent_rp_startofpacket;                                                            // MEMSlave1_s1_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          memslave1_s1_agent_rp_endofpacket;                                                              // MEMSlave1_s1_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                                           // router_023:src_valid -> rsp_demux_017:sink_valid
	wire  [105:0] router_023_src_data;                                                                            // router_023:src_data -> rsp_demux_017:sink_data
	wire          router_023_src_ready;                                                                           // rsp_demux_017:sink_ready -> router_023:src_ready
	wire   [17:0] router_023_src_channel;                                                                         // router_023:src_channel -> rsp_demux_017:sink_channel
	wire          router_023_src_startofpacket;                                                                   // router_023:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_023_src_endofpacket;                                                                     // router_023:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          router_src_valid;                                                                               // router:src_valid -> CPUMaster_data_master_limiter:cmd_sink_valid
	wire  [105:0] router_src_data;                                                                                // router:src_data -> CPUMaster_data_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                                               // CPUMaster_data_master_limiter:cmd_sink_ready -> router:src_ready
	wire   [17:0] router_src_channel;                                                                             // router:src_channel -> CPUMaster_data_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                                       // router:src_startofpacket -> CPUMaster_data_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                                         // router:src_endofpacket -> CPUMaster_data_master_limiter:cmd_sink_endofpacket
	wire  [105:0] cpumaster_data_master_limiter_cmd_src_data;                                                     // CPUMaster_data_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          cpumaster_data_master_limiter_cmd_src_ready;                                                    // cmd_demux:sink_ready -> CPUMaster_data_master_limiter:cmd_src_ready
	wire   [17:0] cpumaster_data_master_limiter_cmd_src_channel;                                                  // CPUMaster_data_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          cpumaster_data_master_limiter_cmd_src_startofpacket;                                            // CPUMaster_data_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          cpumaster_data_master_limiter_cmd_src_endofpacket;                                              // CPUMaster_data_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                              // rsp_mux:src_valid -> CPUMaster_data_master_limiter:rsp_sink_valid
	wire  [105:0] rsp_mux_src_data;                                                                               // rsp_mux:src_data -> CPUMaster_data_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                              // CPUMaster_data_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [17:0] rsp_mux_src_channel;                                                                            // rsp_mux:src_channel -> CPUMaster_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                                      // rsp_mux:src_startofpacket -> CPUMaster_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                        // rsp_mux:src_endofpacket -> CPUMaster_data_master_limiter:rsp_sink_endofpacket
	wire          cpumaster_data_master_limiter_rsp_src_valid;                                                    // CPUMaster_data_master_limiter:rsp_src_valid -> CPUMaster_data_master_agent:rp_valid
	wire  [105:0] cpumaster_data_master_limiter_rsp_src_data;                                                     // CPUMaster_data_master_limiter:rsp_src_data -> CPUMaster_data_master_agent:rp_data
	wire          cpumaster_data_master_limiter_rsp_src_ready;                                                    // CPUMaster_data_master_agent:rp_ready -> CPUMaster_data_master_limiter:rsp_src_ready
	wire   [17:0] cpumaster_data_master_limiter_rsp_src_channel;                                                  // CPUMaster_data_master_limiter:rsp_src_channel -> CPUMaster_data_master_agent:rp_channel
	wire          cpumaster_data_master_limiter_rsp_src_startofpacket;                                            // CPUMaster_data_master_limiter:rsp_src_startofpacket -> CPUMaster_data_master_agent:rp_startofpacket
	wire          cpumaster_data_master_limiter_rsp_src_endofpacket;                                              // CPUMaster_data_master_limiter:rsp_src_endofpacket -> CPUMaster_data_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                                           // router_001:src_valid -> CPUSlave1_data_master_limiter:cmd_sink_valid
	wire  [105:0] router_001_src_data;                                                                            // router_001:src_data -> CPUSlave1_data_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                           // CPUSlave1_data_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [17:0] router_001_src_channel;                                                                         // router_001:src_channel -> CPUSlave1_data_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                                   // router_001:src_startofpacket -> CPUSlave1_data_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                                     // router_001:src_endofpacket -> CPUSlave1_data_master_limiter:cmd_sink_endofpacket
	wire  [105:0] cpuslave1_data_master_limiter_cmd_src_data;                                                     // CPUSlave1_data_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          cpuslave1_data_master_limiter_cmd_src_ready;                                                    // cmd_demux_001:sink_ready -> CPUSlave1_data_master_limiter:cmd_src_ready
	wire   [17:0] cpuslave1_data_master_limiter_cmd_src_channel;                                                  // CPUSlave1_data_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          cpuslave1_data_master_limiter_cmd_src_startofpacket;                                            // CPUSlave1_data_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          cpuslave1_data_master_limiter_cmd_src_endofpacket;                                              // CPUSlave1_data_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                          // rsp_mux_001:src_valid -> CPUSlave1_data_master_limiter:rsp_sink_valid
	wire  [105:0] rsp_mux_001_src_data;                                                                           // rsp_mux_001:src_data -> CPUSlave1_data_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                                          // CPUSlave1_data_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [17:0] rsp_mux_001_src_channel;                                                                        // rsp_mux_001:src_channel -> CPUSlave1_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                                  // rsp_mux_001:src_startofpacket -> CPUSlave1_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                    // rsp_mux_001:src_endofpacket -> CPUSlave1_data_master_limiter:rsp_sink_endofpacket
	wire          cpuslave1_data_master_limiter_rsp_src_valid;                                                    // CPUSlave1_data_master_limiter:rsp_src_valid -> CPUSlave1_data_master_agent:rp_valid
	wire  [105:0] cpuslave1_data_master_limiter_rsp_src_data;                                                     // CPUSlave1_data_master_limiter:rsp_src_data -> CPUSlave1_data_master_agent:rp_data
	wire          cpuslave1_data_master_limiter_rsp_src_ready;                                                    // CPUSlave1_data_master_agent:rp_ready -> CPUSlave1_data_master_limiter:rsp_src_ready
	wire   [17:0] cpuslave1_data_master_limiter_rsp_src_channel;                                                  // CPUSlave1_data_master_limiter:rsp_src_channel -> CPUSlave1_data_master_agent:rp_channel
	wire          cpuslave1_data_master_limiter_rsp_src_startofpacket;                                            // CPUSlave1_data_master_limiter:rsp_src_startofpacket -> CPUSlave1_data_master_agent:rp_startofpacket
	wire          cpuslave1_data_master_limiter_rsp_src_endofpacket;                                              // CPUSlave1_data_master_limiter:rsp_src_endofpacket -> CPUSlave1_data_master_agent:rp_endofpacket
	wire          router_002_src_valid;                                                                           // router_002:src_valid -> CPUSlave2_data_master_limiter:cmd_sink_valid
	wire  [105:0] router_002_src_data;                                                                            // router_002:src_data -> CPUSlave2_data_master_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                                           // CPUSlave2_data_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire   [17:0] router_002_src_channel;                                                                         // router_002:src_channel -> CPUSlave2_data_master_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                                   // router_002:src_startofpacket -> CPUSlave2_data_master_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                                     // router_002:src_endofpacket -> CPUSlave2_data_master_limiter:cmd_sink_endofpacket
	wire  [105:0] cpuslave2_data_master_limiter_cmd_src_data;                                                     // CPUSlave2_data_master_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          cpuslave2_data_master_limiter_cmd_src_ready;                                                    // cmd_demux_002:sink_ready -> CPUSlave2_data_master_limiter:cmd_src_ready
	wire   [17:0] cpuslave2_data_master_limiter_cmd_src_channel;                                                  // CPUSlave2_data_master_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          cpuslave2_data_master_limiter_cmd_src_startofpacket;                                            // CPUSlave2_data_master_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          cpuslave2_data_master_limiter_cmd_src_endofpacket;                                              // CPUSlave2_data_master_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                                          // rsp_mux_002:src_valid -> CPUSlave2_data_master_limiter:rsp_sink_valid
	wire  [105:0] rsp_mux_002_src_data;                                                                           // rsp_mux_002:src_data -> CPUSlave2_data_master_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                                          // CPUSlave2_data_master_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire   [17:0] rsp_mux_002_src_channel;                                                                        // rsp_mux_002:src_channel -> CPUSlave2_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                                  // rsp_mux_002:src_startofpacket -> CPUSlave2_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                                    // rsp_mux_002:src_endofpacket -> CPUSlave2_data_master_limiter:rsp_sink_endofpacket
	wire          cpuslave2_data_master_limiter_rsp_src_valid;                                                    // CPUSlave2_data_master_limiter:rsp_src_valid -> CPUSlave2_data_master_agent:rp_valid
	wire  [105:0] cpuslave2_data_master_limiter_rsp_src_data;                                                     // CPUSlave2_data_master_limiter:rsp_src_data -> CPUSlave2_data_master_agent:rp_data
	wire          cpuslave2_data_master_limiter_rsp_src_ready;                                                    // CPUSlave2_data_master_agent:rp_ready -> CPUSlave2_data_master_limiter:rsp_src_ready
	wire   [17:0] cpuslave2_data_master_limiter_rsp_src_channel;                                                  // CPUSlave2_data_master_limiter:rsp_src_channel -> CPUSlave2_data_master_agent:rp_channel
	wire          cpuslave2_data_master_limiter_rsp_src_startofpacket;                                            // CPUSlave2_data_master_limiter:rsp_src_startofpacket -> CPUSlave2_data_master_agent:rp_startofpacket
	wire          cpuslave2_data_master_limiter_rsp_src_endofpacket;                                              // CPUSlave2_data_master_limiter:rsp_src_endofpacket -> CPUSlave2_data_master_agent:rp_endofpacket
	wire          router_003_src_valid;                                                                           // router_003:src_valid -> CPUSlave2_instruction_master_limiter:cmd_sink_valid
	wire  [105:0] router_003_src_data;                                                                            // router_003:src_data -> CPUSlave2_instruction_master_limiter:cmd_sink_data
	wire          router_003_src_ready;                                                                           // CPUSlave2_instruction_master_limiter:cmd_sink_ready -> router_003:src_ready
	wire   [17:0] router_003_src_channel;                                                                         // router_003:src_channel -> CPUSlave2_instruction_master_limiter:cmd_sink_channel
	wire          router_003_src_startofpacket;                                                                   // router_003:src_startofpacket -> CPUSlave2_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_003_src_endofpacket;                                                                     // router_003:src_endofpacket -> CPUSlave2_instruction_master_limiter:cmd_sink_endofpacket
	wire  [105:0] cpuslave2_instruction_master_limiter_cmd_src_data;                                              // CPUSlave2_instruction_master_limiter:cmd_src_data -> cmd_demux_003:sink_data
	wire          cpuslave2_instruction_master_limiter_cmd_src_ready;                                             // cmd_demux_003:sink_ready -> CPUSlave2_instruction_master_limiter:cmd_src_ready
	wire   [17:0] cpuslave2_instruction_master_limiter_cmd_src_channel;                                           // CPUSlave2_instruction_master_limiter:cmd_src_channel -> cmd_demux_003:sink_channel
	wire          cpuslave2_instruction_master_limiter_cmd_src_startofpacket;                                     // CPUSlave2_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          cpuslave2_instruction_master_limiter_cmd_src_endofpacket;                                       // CPUSlave2_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          rsp_mux_003_src_valid;                                                                          // rsp_mux_003:src_valid -> CPUSlave2_instruction_master_limiter:rsp_sink_valid
	wire  [105:0] rsp_mux_003_src_data;                                                                           // rsp_mux_003:src_data -> CPUSlave2_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_003_src_ready;                                                                          // CPUSlave2_instruction_master_limiter:rsp_sink_ready -> rsp_mux_003:src_ready
	wire   [17:0] rsp_mux_003_src_channel;                                                                        // rsp_mux_003:src_channel -> CPUSlave2_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_003_src_startofpacket;                                                                  // rsp_mux_003:src_startofpacket -> CPUSlave2_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                                    // rsp_mux_003:src_endofpacket -> CPUSlave2_instruction_master_limiter:rsp_sink_endofpacket
	wire          cpuslave2_instruction_master_limiter_rsp_src_valid;                                             // CPUSlave2_instruction_master_limiter:rsp_src_valid -> CPUSlave2_instruction_master_agent:rp_valid
	wire  [105:0] cpuslave2_instruction_master_limiter_rsp_src_data;                                              // CPUSlave2_instruction_master_limiter:rsp_src_data -> CPUSlave2_instruction_master_agent:rp_data
	wire          cpuslave2_instruction_master_limiter_rsp_src_ready;                                             // CPUSlave2_instruction_master_agent:rp_ready -> CPUSlave2_instruction_master_limiter:rsp_src_ready
	wire   [17:0] cpuslave2_instruction_master_limiter_rsp_src_channel;                                           // CPUSlave2_instruction_master_limiter:rsp_src_channel -> CPUSlave2_instruction_master_agent:rp_channel
	wire          cpuslave2_instruction_master_limiter_rsp_src_startofpacket;                                     // CPUSlave2_instruction_master_limiter:rsp_src_startofpacket -> CPUSlave2_instruction_master_agent:rp_startofpacket
	wire          cpuslave2_instruction_master_limiter_rsp_src_endofpacket;                                       // CPUSlave2_instruction_master_limiter:rsp_src_endofpacket -> CPUSlave2_instruction_master_agent:rp_endofpacket
	wire          router_004_src_valid;                                                                           // router_004:src_valid -> CPUSlave1_instruction_master_limiter:cmd_sink_valid
	wire  [105:0] router_004_src_data;                                                                            // router_004:src_data -> CPUSlave1_instruction_master_limiter:cmd_sink_data
	wire          router_004_src_ready;                                                                           // CPUSlave1_instruction_master_limiter:cmd_sink_ready -> router_004:src_ready
	wire   [17:0] router_004_src_channel;                                                                         // router_004:src_channel -> CPUSlave1_instruction_master_limiter:cmd_sink_channel
	wire          router_004_src_startofpacket;                                                                   // router_004:src_startofpacket -> CPUSlave1_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_004_src_endofpacket;                                                                     // router_004:src_endofpacket -> CPUSlave1_instruction_master_limiter:cmd_sink_endofpacket
	wire  [105:0] cpuslave1_instruction_master_limiter_cmd_src_data;                                              // CPUSlave1_instruction_master_limiter:cmd_src_data -> cmd_demux_004:sink_data
	wire          cpuslave1_instruction_master_limiter_cmd_src_ready;                                             // cmd_demux_004:sink_ready -> CPUSlave1_instruction_master_limiter:cmd_src_ready
	wire   [17:0] cpuslave1_instruction_master_limiter_cmd_src_channel;                                           // CPUSlave1_instruction_master_limiter:cmd_src_channel -> cmd_demux_004:sink_channel
	wire          cpuslave1_instruction_master_limiter_cmd_src_startofpacket;                                     // CPUSlave1_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          cpuslave1_instruction_master_limiter_cmd_src_endofpacket;                                       // CPUSlave1_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          rsp_mux_004_src_valid;                                                                          // rsp_mux_004:src_valid -> CPUSlave1_instruction_master_limiter:rsp_sink_valid
	wire  [105:0] rsp_mux_004_src_data;                                                                           // rsp_mux_004:src_data -> CPUSlave1_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_004_src_ready;                                                                          // CPUSlave1_instruction_master_limiter:rsp_sink_ready -> rsp_mux_004:src_ready
	wire   [17:0] rsp_mux_004_src_channel;                                                                        // rsp_mux_004:src_channel -> CPUSlave1_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_004_src_startofpacket;                                                                  // rsp_mux_004:src_startofpacket -> CPUSlave1_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                                    // rsp_mux_004:src_endofpacket -> CPUSlave1_instruction_master_limiter:rsp_sink_endofpacket
	wire          cpuslave1_instruction_master_limiter_rsp_src_valid;                                             // CPUSlave1_instruction_master_limiter:rsp_src_valid -> CPUSlave1_instruction_master_agent:rp_valid
	wire  [105:0] cpuslave1_instruction_master_limiter_rsp_src_data;                                              // CPUSlave1_instruction_master_limiter:rsp_src_data -> CPUSlave1_instruction_master_agent:rp_data
	wire          cpuslave1_instruction_master_limiter_rsp_src_ready;                                             // CPUSlave1_instruction_master_agent:rp_ready -> CPUSlave1_instruction_master_limiter:rsp_src_ready
	wire   [17:0] cpuslave1_instruction_master_limiter_rsp_src_channel;                                           // CPUSlave1_instruction_master_limiter:rsp_src_channel -> CPUSlave1_instruction_master_agent:rp_channel
	wire          cpuslave1_instruction_master_limiter_rsp_src_startofpacket;                                     // CPUSlave1_instruction_master_limiter:rsp_src_startofpacket -> CPUSlave1_instruction_master_agent:rp_startofpacket
	wire          cpuslave1_instruction_master_limiter_rsp_src_endofpacket;                                       // CPUSlave1_instruction_master_limiter:rsp_src_endofpacket -> CPUSlave1_instruction_master_agent:rp_endofpacket
	wire          router_005_src_valid;                                                                           // router_005:src_valid -> CPUMaster_instruction_master_limiter:cmd_sink_valid
	wire  [105:0] router_005_src_data;                                                                            // router_005:src_data -> CPUMaster_instruction_master_limiter:cmd_sink_data
	wire          router_005_src_ready;                                                                           // CPUMaster_instruction_master_limiter:cmd_sink_ready -> router_005:src_ready
	wire   [17:0] router_005_src_channel;                                                                         // router_005:src_channel -> CPUMaster_instruction_master_limiter:cmd_sink_channel
	wire          router_005_src_startofpacket;                                                                   // router_005:src_startofpacket -> CPUMaster_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_005_src_endofpacket;                                                                     // router_005:src_endofpacket -> CPUMaster_instruction_master_limiter:cmd_sink_endofpacket
	wire  [105:0] cpumaster_instruction_master_limiter_cmd_src_data;                                              // CPUMaster_instruction_master_limiter:cmd_src_data -> cmd_demux_005:sink_data
	wire          cpumaster_instruction_master_limiter_cmd_src_ready;                                             // cmd_demux_005:sink_ready -> CPUMaster_instruction_master_limiter:cmd_src_ready
	wire   [17:0] cpumaster_instruction_master_limiter_cmd_src_channel;                                           // CPUMaster_instruction_master_limiter:cmd_src_channel -> cmd_demux_005:sink_channel
	wire          cpumaster_instruction_master_limiter_cmd_src_startofpacket;                                     // CPUMaster_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          cpumaster_instruction_master_limiter_cmd_src_endofpacket;                                       // CPUMaster_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          rsp_mux_005_src_valid;                                                                          // rsp_mux_005:src_valid -> CPUMaster_instruction_master_limiter:rsp_sink_valid
	wire  [105:0] rsp_mux_005_src_data;                                                                           // rsp_mux_005:src_data -> CPUMaster_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_005_src_ready;                                                                          // CPUMaster_instruction_master_limiter:rsp_sink_ready -> rsp_mux_005:src_ready
	wire   [17:0] rsp_mux_005_src_channel;                                                                        // rsp_mux_005:src_channel -> CPUMaster_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_005_src_startofpacket;                                                                  // rsp_mux_005:src_startofpacket -> CPUMaster_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                                    // rsp_mux_005:src_endofpacket -> CPUMaster_instruction_master_limiter:rsp_sink_endofpacket
	wire          cpumaster_instruction_master_limiter_rsp_src_valid;                                             // CPUMaster_instruction_master_limiter:rsp_src_valid -> CPUMaster_instruction_master_agent:rp_valid
	wire  [105:0] cpumaster_instruction_master_limiter_rsp_src_data;                                              // CPUMaster_instruction_master_limiter:rsp_src_data -> CPUMaster_instruction_master_agent:rp_data
	wire          cpumaster_instruction_master_limiter_rsp_src_ready;                                             // CPUMaster_instruction_master_agent:rp_ready -> CPUMaster_instruction_master_limiter:rsp_src_ready
	wire   [17:0] cpumaster_instruction_master_limiter_rsp_src_channel;                                           // CPUMaster_instruction_master_limiter:rsp_src_channel -> CPUMaster_instruction_master_agent:rp_channel
	wire          cpumaster_instruction_master_limiter_rsp_src_startofpacket;                                     // CPUMaster_instruction_master_limiter:rsp_src_startofpacket -> CPUMaster_instruction_master_agent:rp_startofpacket
	wire          cpumaster_instruction_master_limiter_rsp_src_endofpacket;                                       // CPUMaster_instruction_master_limiter:rsp_src_endofpacket -> CPUMaster_instruction_master_agent:rp_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_valid;         // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_valid
	wire   [78:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_data;          // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_ready;         // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_ready
	wire   [17:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_channel;       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_channel -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_channel
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_startofpacket; // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_endofpacket;   // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_endofpacket
	wire          reg16_0_avalon_slave_0_burst_adapter_source0_valid;                                             // reg16_0_avalon_slave_0_burst_adapter:source0_valid -> reg16_0_avalon_slave_0_agent:cp_valid
	wire   [87:0] reg16_0_avalon_slave_0_burst_adapter_source0_data;                                              // reg16_0_avalon_slave_0_burst_adapter:source0_data -> reg16_0_avalon_slave_0_agent:cp_data
	wire          reg16_0_avalon_slave_0_burst_adapter_source0_ready;                                             // reg16_0_avalon_slave_0_agent:cp_ready -> reg16_0_avalon_slave_0_burst_adapter:source0_ready
	wire   [17:0] reg16_0_avalon_slave_0_burst_adapter_source0_channel;                                           // reg16_0_avalon_slave_0_burst_adapter:source0_channel -> reg16_0_avalon_slave_0_agent:cp_channel
	wire          reg16_0_avalon_slave_0_burst_adapter_source0_startofpacket;                                     // reg16_0_avalon_slave_0_burst_adapter:source0_startofpacket -> reg16_0_avalon_slave_0_agent:cp_startofpacket
	wire          reg16_0_avalon_slave_0_burst_adapter_source0_endofpacket;                                       // reg16_0_avalon_slave_0_burst_adapter:source0_endofpacket -> reg16_0_avalon_slave_0_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                           // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [105:0] cmd_demux_src0_data;                                                                            // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                           // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [17:0] cmd_demux_src0_channel;                                                                         // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                                   // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                     // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                           // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [105:0] cmd_demux_src1_data;                                                                            // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                           // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [17:0] cmd_demux_src1_channel;                                                                         // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                                   // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                     // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                           // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [105:0] cmd_demux_src2_data;                                                                            // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                                           // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [17:0] cmd_demux_src2_channel;                                                                         // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                                   // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                                     // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                           // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [105:0] cmd_demux_src3_data;                                                                            // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                                           // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [17:0] cmd_demux_src3_channel;                                                                         // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                                   // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                                     // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                           // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [105:0] cmd_demux_src4_data;                                                                            // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                                           // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [17:0] cmd_demux_src4_channel;                                                                         // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                                   // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                                     // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                           // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [105:0] cmd_demux_src5_data;                                                                            // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                                           // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [17:0] cmd_demux_src5_channel;                                                                         // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                                   // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                                     // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                                           // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [105:0] cmd_demux_src6_data;                                                                            // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                                           // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [17:0] cmd_demux_src6_channel;                                                                         // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                                   // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                                     // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                                           // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [105:0] cmd_demux_src7_data;                                                                            // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                                           // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [17:0] cmd_demux_src7_channel;                                                                         // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                                   // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                                     // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                                           // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [105:0] cmd_demux_src8_data;                                                                            // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                                           // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [17:0] cmd_demux_src8_channel;                                                                         // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                                   // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                                     // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                                           // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [105:0] cmd_demux_src9_data;                                                                            // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                                           // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [17:0] cmd_demux_src9_channel;                                                                         // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                                   // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                                     // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                       // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [105:0] cmd_demux_001_src0_data;                                                                        // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                                       // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [17:0] cmd_demux_001_src0_channel;                                                                     // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                               // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                                 // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                       // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [105:0] cmd_demux_001_src1_data;                                                                        // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                                                       // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire   [17:0] cmd_demux_001_src1_channel;                                                                     // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                               // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                                 // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                                       // cmd_demux_001:src2_valid -> cmd_mux_003:sink1_valid
	wire  [105:0] cmd_demux_001_src2_data;                                                                        // cmd_demux_001:src2_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src2_ready;                                                                       // cmd_mux_003:sink1_ready -> cmd_demux_001:src2_ready
	wire   [17:0] cmd_demux_001_src2_channel;                                                                     // cmd_demux_001:src2_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                               // cmd_demux_001:src2_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                                 // cmd_demux_001:src2_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                                       // cmd_demux_001:src3_valid -> cmd_mux_006:sink1_valid
	wire  [105:0] cmd_demux_001_src3_data;                                                                        // cmd_demux_001:src3_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src3_ready;                                                                       // cmd_mux_006:sink1_ready -> cmd_demux_001:src3_ready
	wire   [17:0] cmd_demux_001_src3_channel;                                                                     // cmd_demux_001:src3_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                                               // cmd_demux_001:src3_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                                 // cmd_demux_001:src3_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                                       // cmd_demux_001:src4_valid -> cmd_mux_007:sink1_valid
	wire  [105:0] cmd_demux_001_src4_data;                                                                        // cmd_demux_001:src4_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src4_ready;                                                                       // cmd_mux_007:sink1_ready -> cmd_demux_001:src4_ready
	wire   [17:0] cmd_demux_001_src4_channel;                                                                     // cmd_demux_001:src4_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                                               // cmd_demux_001:src4_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                                 // cmd_demux_001:src4_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                                                       // cmd_demux_001:src5_valid -> cmd_mux_008:sink1_valid
	wire  [105:0] cmd_demux_001_src5_data;                                                                        // cmd_demux_001:src5_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src5_ready;                                                                       // cmd_mux_008:sink1_ready -> cmd_demux_001:src5_ready
	wire   [17:0] cmd_demux_001_src5_channel;                                                                     // cmd_demux_001:src5_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                                                               // cmd_demux_001:src5_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                                 // cmd_demux_001:src5_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                                                       // cmd_demux_001:src6_valid -> cmd_mux_009:sink1_valid
	wire  [105:0] cmd_demux_001_src6_data;                                                                        // cmd_demux_001:src6_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_001_src6_ready;                                                                       // cmd_mux_009:sink1_ready -> cmd_demux_001:src6_ready
	wire   [17:0] cmd_demux_001_src6_channel;                                                                     // cmd_demux_001:src6_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                                                               // cmd_demux_001:src6_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                                 // cmd_demux_001:src6_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                                                       // cmd_demux_001:src7_valid -> cmd_mux_014:sink0_valid
	wire  [105:0] cmd_demux_001_src7_data;                                                                        // cmd_demux_001:src7_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_001_src7_ready;                                                                       // cmd_mux_014:sink0_ready -> cmd_demux_001:src7_ready
	wire   [17:0] cmd_demux_001_src7_channel;                                                                     // cmd_demux_001:src7_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_001_src7_startofpacket;                                                               // cmd_demux_001:src7_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                                 // cmd_demux_001:src7_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_001_src8_valid;                                                                       // cmd_demux_001:src8_valid -> cmd_mux_015:sink0_valid
	wire  [105:0] cmd_demux_001_src8_data;                                                                        // cmd_demux_001:src8_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_001_src8_ready;                                                                       // cmd_mux_015:sink0_ready -> cmd_demux_001:src8_ready
	wire   [17:0] cmd_demux_001_src8_channel;                                                                     // cmd_demux_001:src8_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_001_src8_startofpacket;                                                               // cmd_demux_001:src8_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                                                 // cmd_demux_001:src8_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_001_src9_valid;                                                                       // cmd_demux_001:src9_valid -> cmd_mux_016:sink0_valid
	wire  [105:0] cmd_demux_001_src9_data;                                                                        // cmd_demux_001:src9_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_001_src9_ready;                                                                       // cmd_mux_016:sink0_ready -> cmd_demux_001:src9_ready
	wire   [17:0] cmd_demux_001_src9_channel;                                                                     // cmd_demux_001:src9_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_001_src9_startofpacket;                                                               // cmd_demux_001:src9_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                                                 // cmd_demux_001:src9_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_001_src10_valid;                                                                      // cmd_demux_001:src10_valid -> cmd_mux_017:sink0_valid
	wire  [105:0] cmd_demux_001_src10_data;                                                                       // cmd_demux_001:src10_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_001_src10_ready;                                                                      // cmd_mux_017:sink0_ready -> cmd_demux_001:src10_ready
	wire   [17:0] cmd_demux_001_src10_channel;                                                                    // cmd_demux_001:src10_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_001_src10_startofpacket;                                                              // cmd_demux_001:src10_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                                                // cmd_demux_001:src10_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                       // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire  [105:0] cmd_demux_002_src0_data;                                                                        // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire          cmd_demux_002_src0_ready;                                                                       // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire   [17:0] cmd_demux_002_src0_channel;                                                                     // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                                               // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                                 // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_002_src1_valid;                                                                       // cmd_demux_002:src1_valid -> cmd_mux_001:sink2_valid
	wire  [105:0] cmd_demux_002_src1_data;                                                                        // cmd_demux_002:src1_data -> cmd_mux_001:sink2_data
	wire          cmd_demux_002_src1_ready;                                                                       // cmd_mux_001:sink2_ready -> cmd_demux_002:src1_ready
	wire   [17:0] cmd_demux_002_src1_channel;                                                                     // cmd_demux_002:src1_channel -> cmd_mux_001:sink2_channel
	wire          cmd_demux_002_src1_startofpacket;                                                               // cmd_demux_002:src1_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                                 // cmd_demux_002:src1_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          cmd_demux_002_src2_valid;                                                                       // cmd_demux_002:src2_valid -> cmd_mux_003:sink2_valid
	wire  [105:0] cmd_demux_002_src2_data;                                                                        // cmd_demux_002:src2_data -> cmd_mux_003:sink2_data
	wire          cmd_demux_002_src2_ready;                                                                       // cmd_mux_003:sink2_ready -> cmd_demux_002:src2_ready
	wire   [17:0] cmd_demux_002_src2_channel;                                                                     // cmd_demux_002:src2_channel -> cmd_mux_003:sink2_channel
	wire          cmd_demux_002_src2_startofpacket;                                                               // cmd_demux_002:src2_startofpacket -> cmd_mux_003:sink2_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                                 // cmd_demux_002:src2_endofpacket -> cmd_mux_003:sink2_endofpacket
	wire          cmd_demux_002_src3_valid;                                                                       // cmd_demux_002:src3_valid -> cmd_mux_006:sink2_valid
	wire  [105:0] cmd_demux_002_src3_data;                                                                        // cmd_demux_002:src3_data -> cmd_mux_006:sink2_data
	wire          cmd_demux_002_src3_ready;                                                                       // cmd_mux_006:sink2_ready -> cmd_demux_002:src3_ready
	wire   [17:0] cmd_demux_002_src3_channel;                                                                     // cmd_demux_002:src3_channel -> cmd_mux_006:sink2_channel
	wire          cmd_demux_002_src3_startofpacket;                                                               // cmd_demux_002:src3_startofpacket -> cmd_mux_006:sink2_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                                                 // cmd_demux_002:src3_endofpacket -> cmd_mux_006:sink2_endofpacket
	wire          cmd_demux_002_src4_valid;                                                                       // cmd_demux_002:src4_valid -> cmd_mux_007:sink2_valid
	wire  [105:0] cmd_demux_002_src4_data;                                                                        // cmd_demux_002:src4_data -> cmd_mux_007:sink2_data
	wire          cmd_demux_002_src4_ready;                                                                       // cmd_mux_007:sink2_ready -> cmd_demux_002:src4_ready
	wire   [17:0] cmd_demux_002_src4_channel;                                                                     // cmd_demux_002:src4_channel -> cmd_mux_007:sink2_channel
	wire          cmd_demux_002_src4_startofpacket;                                                               // cmd_demux_002:src4_startofpacket -> cmd_mux_007:sink2_startofpacket
	wire          cmd_demux_002_src4_endofpacket;                                                                 // cmd_demux_002:src4_endofpacket -> cmd_mux_007:sink2_endofpacket
	wire          cmd_demux_002_src5_valid;                                                                       // cmd_demux_002:src5_valid -> cmd_mux_008:sink2_valid
	wire  [105:0] cmd_demux_002_src5_data;                                                                        // cmd_demux_002:src5_data -> cmd_mux_008:sink2_data
	wire          cmd_demux_002_src5_ready;                                                                       // cmd_mux_008:sink2_ready -> cmd_demux_002:src5_ready
	wire   [17:0] cmd_demux_002_src5_channel;                                                                     // cmd_demux_002:src5_channel -> cmd_mux_008:sink2_channel
	wire          cmd_demux_002_src5_startofpacket;                                                               // cmd_demux_002:src5_startofpacket -> cmd_mux_008:sink2_startofpacket
	wire          cmd_demux_002_src5_endofpacket;                                                                 // cmd_demux_002:src5_endofpacket -> cmd_mux_008:sink2_endofpacket
	wire          cmd_demux_002_src6_valid;                                                                       // cmd_demux_002:src6_valid -> cmd_mux_009:sink2_valid
	wire  [105:0] cmd_demux_002_src6_data;                                                                        // cmd_demux_002:src6_data -> cmd_mux_009:sink2_data
	wire          cmd_demux_002_src6_ready;                                                                       // cmd_mux_009:sink2_ready -> cmd_demux_002:src6_ready
	wire   [17:0] cmd_demux_002_src6_channel;                                                                     // cmd_demux_002:src6_channel -> cmd_mux_009:sink2_channel
	wire          cmd_demux_002_src6_startofpacket;                                                               // cmd_demux_002:src6_startofpacket -> cmd_mux_009:sink2_startofpacket
	wire          cmd_demux_002_src6_endofpacket;                                                                 // cmd_demux_002:src6_endofpacket -> cmd_mux_009:sink2_endofpacket
	wire          cmd_demux_002_src7_valid;                                                                       // cmd_demux_002:src7_valid -> cmd_mux_010:sink0_valid
	wire  [105:0] cmd_demux_002_src7_data;                                                                        // cmd_demux_002:src7_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_002_src7_ready;                                                                       // cmd_mux_010:sink0_ready -> cmd_demux_002:src7_ready
	wire   [17:0] cmd_demux_002_src7_channel;                                                                     // cmd_demux_002:src7_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_002_src7_startofpacket;                                                               // cmd_demux_002:src7_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_002_src7_endofpacket;                                                                 // cmd_demux_002:src7_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_002_src8_valid;                                                                       // cmd_demux_002:src8_valid -> cmd_mux_011:sink0_valid
	wire  [105:0] cmd_demux_002_src8_data;                                                                        // cmd_demux_002:src8_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_002_src8_ready;                                                                       // cmd_mux_011:sink0_ready -> cmd_demux_002:src8_ready
	wire   [17:0] cmd_demux_002_src8_channel;                                                                     // cmd_demux_002:src8_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_002_src8_startofpacket;                                                               // cmd_demux_002:src8_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_002_src8_endofpacket;                                                                 // cmd_demux_002:src8_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_002_src9_valid;                                                                       // cmd_demux_002:src9_valid -> cmd_mux_012:sink0_valid
	wire  [105:0] cmd_demux_002_src9_data;                                                                        // cmd_demux_002:src9_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_002_src9_ready;                                                                       // cmd_mux_012:sink0_ready -> cmd_demux_002:src9_ready
	wire   [17:0] cmd_demux_002_src9_channel;                                                                     // cmd_demux_002:src9_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_002_src9_startofpacket;                                                               // cmd_demux_002:src9_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_002_src9_endofpacket;                                                                 // cmd_demux_002:src9_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_002_src10_valid;                                                                      // cmd_demux_002:src10_valid -> cmd_mux_013:sink0_valid
	wire  [105:0] cmd_demux_002_src10_data;                                                                       // cmd_demux_002:src10_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_002_src10_ready;                                                                      // cmd_mux_013:sink0_ready -> cmd_demux_002:src10_ready
	wire   [17:0] cmd_demux_002_src10_channel;                                                                    // cmd_demux_002:src10_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_002_src10_startofpacket;                                                              // cmd_demux_002:src10_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_002_src10_endofpacket;                                                                // cmd_demux_002:src10_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                                       // cmd_demux_003:src0_valid -> cmd_mux_011:sink1_valid
	wire  [105:0] cmd_demux_003_src0_data;                                                                        // cmd_demux_003:src0_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_003_src0_ready;                                                                       // cmd_mux_011:sink1_ready -> cmd_demux_003:src0_ready
	wire   [17:0] cmd_demux_003_src0_channel;                                                                     // cmd_demux_003:src0_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_003_src0_startofpacket;                                                               // cmd_demux_003:src0_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                                 // cmd_demux_003:src0_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_003_src1_valid;                                                                       // cmd_demux_003:src1_valid -> cmd_mux_012:sink1_valid
	wire  [105:0] cmd_demux_003_src1_data;                                                                        // cmd_demux_003:src1_data -> cmd_mux_012:sink1_data
	wire          cmd_demux_003_src1_ready;                                                                       // cmd_mux_012:sink1_ready -> cmd_demux_003:src1_ready
	wire   [17:0] cmd_demux_003_src1_channel;                                                                     // cmd_demux_003:src1_channel -> cmd_mux_012:sink1_channel
	wire          cmd_demux_003_src1_startofpacket;                                                               // cmd_demux_003:src1_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                                 // cmd_demux_003:src1_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_004_src0_valid;                                                                       // cmd_demux_004:src0_valid -> cmd_mux_015:sink1_valid
	wire  [105:0] cmd_demux_004_src0_data;                                                                        // cmd_demux_004:src0_data -> cmd_mux_015:sink1_data
	wire          cmd_demux_004_src0_ready;                                                                       // cmd_mux_015:sink1_ready -> cmd_demux_004:src0_ready
	wire   [17:0] cmd_demux_004_src0_channel;                                                                     // cmd_demux_004:src0_channel -> cmd_mux_015:sink1_channel
	wire          cmd_demux_004_src0_startofpacket;                                                               // cmd_demux_004:src0_startofpacket -> cmd_mux_015:sink1_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                                 // cmd_demux_004:src0_endofpacket -> cmd_mux_015:sink1_endofpacket
	wire          cmd_demux_004_src1_valid;                                                                       // cmd_demux_004:src1_valid -> cmd_mux_017:sink1_valid
	wire  [105:0] cmd_demux_004_src1_data;                                                                        // cmd_demux_004:src1_data -> cmd_mux_017:sink1_data
	wire          cmd_demux_004_src1_ready;                                                                       // cmd_mux_017:sink1_ready -> cmd_demux_004:src1_ready
	wire   [17:0] cmd_demux_004_src1_channel;                                                                     // cmd_demux_004:src1_channel -> cmd_mux_017:sink1_channel
	wire          cmd_demux_004_src1_startofpacket;                                                               // cmd_demux_004:src1_startofpacket -> cmd_mux_017:sink1_startofpacket
	wire          cmd_demux_004_src1_endofpacket;                                                                 // cmd_demux_004:src1_endofpacket -> cmd_mux_017:sink1_endofpacket
	wire          cmd_demux_005_src0_valid;                                                                       // cmd_demux_005:src0_valid -> cmd_mux_004:sink1_valid
	wire  [105:0] cmd_demux_005_src0_data;                                                                        // cmd_demux_005:src0_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_005_src0_ready;                                                                       // cmd_mux_004:sink1_ready -> cmd_demux_005:src0_ready
	wire   [17:0] cmd_demux_005_src0_channel;                                                                     // cmd_demux_005:src0_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_005_src0_startofpacket;                                                               // cmd_demux_005:src0_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                                                 // cmd_demux_005:src0_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_005_src1_valid;                                                                       // cmd_demux_005:src1_valid -> cmd_mux_005:sink1_valid
	wire  [105:0] cmd_demux_005_src1_data;                                                                        // cmd_demux_005:src1_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_005_src1_ready;                                                                       // cmd_mux_005:sink1_ready -> cmd_demux_005:src1_ready
	wire   [17:0] cmd_demux_005_src1_channel;                                                                     // cmd_demux_005:src1_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_005_src1_startofpacket;                                                               // cmd_demux_005:src1_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_005_src1_endofpacket;                                                                 // cmd_demux_005:src1_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                                           // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [105:0] rsp_demux_src0_data;                                                                            // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                           // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [17:0] rsp_demux_src0_channel;                                                                         // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                                   // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                     // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                           // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [105:0] rsp_demux_src1_data;                                                                            // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                                           // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [17:0] rsp_demux_src1_channel;                                                                         // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                                   // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                                     // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                                           // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire  [105:0] rsp_demux_src2_data;                                                                            // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_src2_ready;                                                                           // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire   [17:0] rsp_demux_src2_channel;                                                                         // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src2_startofpacket;                                                                   // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                                     // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                       // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [105:0] rsp_demux_001_src0_data;                                                                        // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                                       // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [17:0] rsp_demux_001_src0_channel;                                                                     // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                               // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                                 // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                                       // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [105:0] rsp_demux_001_src1_data;                                                                        // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                                                       // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire   [17:0] rsp_demux_001_src1_channel;                                                                     // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                                               // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                                 // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_001_src2_valid;                                                                       // rsp_demux_001:src2_valid -> rsp_mux_002:sink1_valid
	wire  [105:0] rsp_demux_001_src2_data;                                                                        // rsp_demux_001:src2_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_001_src2_ready;                                                                       // rsp_mux_002:sink1_ready -> rsp_demux_001:src2_ready
	wire   [17:0] rsp_demux_001_src2_channel;                                                                     // rsp_demux_001:src2_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_001_src2_startofpacket;                                                               // rsp_demux_001:src2_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_001_src2_endofpacket;                                                                 // rsp_demux_001:src2_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                       // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [105:0] rsp_demux_002_src0_data;                                                                        // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                       // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [17:0] rsp_demux_002_src0_channel;                                                                     // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                               // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                                 // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                       // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [105:0] rsp_demux_003_src0_data;                                                                        // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                                       // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [17:0] rsp_demux_003_src0_channel;                                                                     // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                               // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                                 // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                                       // rsp_demux_003:src1_valid -> rsp_mux_001:sink2_valid
	wire  [105:0] rsp_demux_003_src1_data;                                                                        // rsp_demux_003:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_003_src1_ready;                                                                       // rsp_mux_001:sink2_ready -> rsp_demux_003:src1_ready
	wire   [17:0] rsp_demux_003_src1_channel;                                                                     // rsp_demux_003:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_003_src1_startofpacket;                                                               // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                                 // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src2_valid;                                                                       // rsp_demux_003:src2_valid -> rsp_mux_002:sink2_valid
	wire  [105:0] rsp_demux_003_src2_data;                                                                        // rsp_demux_003:src2_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_003_src2_ready;                                                                       // rsp_mux_002:sink2_ready -> rsp_demux_003:src2_ready
	wire   [17:0] rsp_demux_003_src2_channel;                                                                     // rsp_demux_003:src2_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_003_src2_startofpacket;                                                               // rsp_demux_003:src2_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_003_src2_endofpacket;                                                                 // rsp_demux_003:src2_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                       // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [105:0] rsp_demux_004_src0_data;                                                                        // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                                       // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [17:0] rsp_demux_004_src0_channel;                                                                     // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                               // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                                 // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                                       // rsp_demux_004:src1_valid -> rsp_mux_005:sink0_valid
	wire  [105:0] rsp_demux_004_src1_data;                                                                        // rsp_demux_004:src1_data -> rsp_mux_005:sink0_data
	wire          rsp_demux_004_src1_ready;                                                                       // rsp_mux_005:sink0_ready -> rsp_demux_004:src1_ready
	wire   [17:0] rsp_demux_004_src1_channel;                                                                     // rsp_demux_004:src1_channel -> rsp_mux_005:sink0_channel
	wire          rsp_demux_004_src1_startofpacket;                                                               // rsp_demux_004:src1_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                                 // rsp_demux_004:src1_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                       // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [105:0] rsp_demux_005_src0_data;                                                                        // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                       // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [17:0] rsp_demux_005_src0_channel;                                                                     // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                               // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                                 // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                                       // rsp_demux_005:src1_valid -> rsp_mux_005:sink1_valid
	wire  [105:0] rsp_demux_005_src1_data;                                                                        // rsp_demux_005:src1_data -> rsp_mux_005:sink1_data
	wire          rsp_demux_005_src1_ready;                                                                       // rsp_mux_005:sink1_ready -> rsp_demux_005:src1_ready
	wire   [17:0] rsp_demux_005_src1_channel;                                                                     // rsp_demux_005:src1_channel -> rsp_mux_005:sink1_channel
	wire          rsp_demux_005_src1_startofpacket;                                                               // rsp_demux_005:src1_startofpacket -> rsp_mux_005:sink1_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                                 // rsp_demux_005:src1_endofpacket -> rsp_mux_005:sink1_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                       // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [105:0] rsp_demux_006_src0_data;                                                                        // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                       // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [17:0] rsp_demux_006_src0_channel;                                                                     // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                               // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                                 // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                                       // rsp_demux_006:src1_valid -> rsp_mux_001:sink3_valid
	wire  [105:0] rsp_demux_006_src1_data;                                                                        // rsp_demux_006:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_006_src1_ready;                                                                       // rsp_mux_001:sink3_ready -> rsp_demux_006:src1_ready
	wire   [17:0] rsp_demux_006_src1_channel;                                                                     // rsp_demux_006:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_006_src1_startofpacket;                                                               // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                                 // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_006_src2_valid;                                                                       // rsp_demux_006:src2_valid -> rsp_mux_002:sink3_valid
	wire  [105:0] rsp_demux_006_src2_data;                                                                        // rsp_demux_006:src2_data -> rsp_mux_002:sink3_data
	wire          rsp_demux_006_src2_ready;                                                                       // rsp_mux_002:sink3_ready -> rsp_demux_006:src2_ready
	wire   [17:0] rsp_demux_006_src2_channel;                                                                     // rsp_demux_006:src2_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_006_src2_startofpacket;                                                               // rsp_demux_006:src2_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          rsp_demux_006_src2_endofpacket;                                                                 // rsp_demux_006:src2_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                       // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [105:0] rsp_demux_007_src0_data;                                                                        // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                       // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [17:0] rsp_demux_007_src0_channel;                                                                     // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                               // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                                 // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                                       // rsp_demux_007:src1_valid -> rsp_mux_001:sink4_valid
	wire  [105:0] rsp_demux_007_src1_data;                                                                        // rsp_demux_007:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_007_src1_ready;                                                                       // rsp_mux_001:sink4_ready -> rsp_demux_007:src1_ready
	wire   [17:0] rsp_demux_007_src1_channel;                                                                     // rsp_demux_007:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_007_src1_startofpacket;                                                               // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                                 // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_007_src2_valid;                                                                       // rsp_demux_007:src2_valid -> rsp_mux_002:sink4_valid
	wire  [105:0] rsp_demux_007_src2_data;                                                                        // rsp_demux_007:src2_data -> rsp_mux_002:sink4_data
	wire          rsp_demux_007_src2_ready;                                                                       // rsp_mux_002:sink4_ready -> rsp_demux_007:src2_ready
	wire   [17:0] rsp_demux_007_src2_channel;                                                                     // rsp_demux_007:src2_channel -> rsp_mux_002:sink4_channel
	wire          rsp_demux_007_src2_startofpacket;                                                               // rsp_demux_007:src2_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire          rsp_demux_007_src2_endofpacket;                                                                 // rsp_demux_007:src2_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                       // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [105:0] rsp_demux_008_src0_data;                                                                        // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                                       // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [17:0] rsp_demux_008_src0_channel;                                                                     // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                               // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                                 // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                                       // rsp_demux_008:src1_valid -> rsp_mux_001:sink5_valid
	wire  [105:0] rsp_demux_008_src1_data;                                                                        // rsp_demux_008:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_008_src1_ready;                                                                       // rsp_mux_001:sink5_ready -> rsp_demux_008:src1_ready
	wire   [17:0] rsp_demux_008_src1_channel;                                                                     // rsp_demux_008:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_008_src1_startofpacket;                                                               // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                                 // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_008_src2_valid;                                                                       // rsp_demux_008:src2_valid -> rsp_mux_002:sink5_valid
	wire  [105:0] rsp_demux_008_src2_data;                                                                        // rsp_demux_008:src2_data -> rsp_mux_002:sink5_data
	wire          rsp_demux_008_src2_ready;                                                                       // rsp_mux_002:sink5_ready -> rsp_demux_008:src2_ready
	wire   [17:0] rsp_demux_008_src2_channel;                                                                     // rsp_demux_008:src2_channel -> rsp_mux_002:sink5_channel
	wire          rsp_demux_008_src2_startofpacket;                                                               // rsp_demux_008:src2_startofpacket -> rsp_mux_002:sink5_startofpacket
	wire          rsp_demux_008_src2_endofpacket;                                                                 // rsp_demux_008:src2_endofpacket -> rsp_mux_002:sink5_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                       // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [105:0] rsp_demux_009_src0_data;                                                                        // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                                       // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [17:0] rsp_demux_009_src0_channel;                                                                     // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                               // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                                 // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                                                       // rsp_demux_009:src1_valid -> rsp_mux_001:sink6_valid
	wire  [105:0] rsp_demux_009_src1_data;                                                                        // rsp_demux_009:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_009_src1_ready;                                                                       // rsp_mux_001:sink6_ready -> rsp_demux_009:src1_ready
	wire   [17:0] rsp_demux_009_src1_channel;                                                                     // rsp_demux_009:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_009_src1_startofpacket;                                                               // rsp_demux_009:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                                 // rsp_demux_009:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_009_src2_valid;                                                                       // rsp_demux_009:src2_valid -> rsp_mux_002:sink6_valid
	wire  [105:0] rsp_demux_009_src2_data;                                                                        // rsp_demux_009:src2_data -> rsp_mux_002:sink6_data
	wire          rsp_demux_009_src2_ready;                                                                       // rsp_mux_002:sink6_ready -> rsp_demux_009:src2_ready
	wire   [17:0] rsp_demux_009_src2_channel;                                                                     // rsp_demux_009:src2_channel -> rsp_mux_002:sink6_channel
	wire          rsp_demux_009_src2_startofpacket;                                                               // rsp_demux_009:src2_startofpacket -> rsp_mux_002:sink6_startofpacket
	wire          rsp_demux_009_src2_endofpacket;                                                                 // rsp_demux_009:src2_endofpacket -> rsp_mux_002:sink6_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                       // rsp_demux_010:src0_valid -> rsp_mux_002:sink7_valid
	wire  [105:0] rsp_demux_010_src0_data;                                                                        // rsp_demux_010:src0_data -> rsp_mux_002:sink7_data
	wire          rsp_demux_010_src0_ready;                                                                       // rsp_mux_002:sink7_ready -> rsp_demux_010:src0_ready
	wire   [17:0] rsp_demux_010_src0_channel;                                                                     // rsp_demux_010:src0_channel -> rsp_mux_002:sink7_channel
	wire          rsp_demux_010_src0_startofpacket;                                                               // rsp_demux_010:src0_startofpacket -> rsp_mux_002:sink7_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                                 // rsp_demux_010:src0_endofpacket -> rsp_mux_002:sink7_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                       // rsp_demux_011:src0_valid -> rsp_mux_002:sink8_valid
	wire  [105:0] rsp_demux_011_src0_data;                                                                        // rsp_demux_011:src0_data -> rsp_mux_002:sink8_data
	wire          rsp_demux_011_src0_ready;                                                                       // rsp_mux_002:sink8_ready -> rsp_demux_011:src0_ready
	wire   [17:0] rsp_demux_011_src0_channel;                                                                     // rsp_demux_011:src0_channel -> rsp_mux_002:sink8_channel
	wire          rsp_demux_011_src0_startofpacket;                                                               // rsp_demux_011:src0_startofpacket -> rsp_mux_002:sink8_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                                 // rsp_demux_011:src0_endofpacket -> rsp_mux_002:sink8_endofpacket
	wire          rsp_demux_011_src1_valid;                                                                       // rsp_demux_011:src1_valid -> rsp_mux_003:sink0_valid
	wire  [105:0] rsp_demux_011_src1_data;                                                                        // rsp_demux_011:src1_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_011_src1_ready;                                                                       // rsp_mux_003:sink0_ready -> rsp_demux_011:src1_ready
	wire   [17:0] rsp_demux_011_src1_channel;                                                                     // rsp_demux_011:src1_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_011_src1_startofpacket;                                                               // rsp_demux_011:src1_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                                                 // rsp_demux_011:src1_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_012_src0_valid;                                                                       // rsp_demux_012:src0_valid -> rsp_mux_002:sink9_valid
	wire  [105:0] rsp_demux_012_src0_data;                                                                        // rsp_demux_012:src0_data -> rsp_mux_002:sink9_data
	wire          rsp_demux_012_src0_ready;                                                                       // rsp_mux_002:sink9_ready -> rsp_demux_012:src0_ready
	wire   [17:0] rsp_demux_012_src0_channel;                                                                     // rsp_demux_012:src0_channel -> rsp_mux_002:sink9_channel
	wire          rsp_demux_012_src0_startofpacket;                                                               // rsp_demux_012:src0_startofpacket -> rsp_mux_002:sink9_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                                 // rsp_demux_012:src0_endofpacket -> rsp_mux_002:sink9_endofpacket
	wire          rsp_demux_012_src1_valid;                                                                       // rsp_demux_012:src1_valid -> rsp_mux_003:sink1_valid
	wire  [105:0] rsp_demux_012_src1_data;                                                                        // rsp_demux_012:src1_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_012_src1_ready;                                                                       // rsp_mux_003:sink1_ready -> rsp_demux_012:src1_ready
	wire   [17:0] rsp_demux_012_src1_channel;                                                                     // rsp_demux_012:src1_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_012_src1_startofpacket;                                                               // rsp_demux_012:src1_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                                                                 // rsp_demux_012:src1_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_013_src0_valid;                                                                       // rsp_demux_013:src0_valid -> rsp_mux_002:sink10_valid
	wire  [105:0] rsp_demux_013_src0_data;                                                                        // rsp_demux_013:src0_data -> rsp_mux_002:sink10_data
	wire          rsp_demux_013_src0_ready;                                                                       // rsp_mux_002:sink10_ready -> rsp_demux_013:src0_ready
	wire   [17:0] rsp_demux_013_src0_channel;                                                                     // rsp_demux_013:src0_channel -> rsp_mux_002:sink10_channel
	wire          rsp_demux_013_src0_startofpacket;                                                               // rsp_demux_013:src0_startofpacket -> rsp_mux_002:sink10_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                                 // rsp_demux_013:src0_endofpacket -> rsp_mux_002:sink10_endofpacket
	wire          rsp_demux_014_src0_valid;                                                                       // rsp_demux_014:src0_valid -> rsp_mux_001:sink7_valid
	wire  [105:0] rsp_demux_014_src0_data;                                                                        // rsp_demux_014:src0_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_014_src0_ready;                                                                       // rsp_mux_001:sink7_ready -> rsp_demux_014:src0_ready
	wire   [17:0] rsp_demux_014_src0_channel;                                                                     // rsp_demux_014:src0_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_014_src0_startofpacket;                                                               // rsp_demux_014:src0_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                                 // rsp_demux_014:src0_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_015_src0_valid;                                                                       // rsp_demux_015:src0_valid -> rsp_mux_001:sink8_valid
	wire  [105:0] rsp_demux_015_src0_data;                                                                        // rsp_demux_015:src0_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_015_src0_ready;                                                                       // rsp_mux_001:sink8_ready -> rsp_demux_015:src0_ready
	wire   [17:0] rsp_demux_015_src0_channel;                                                                     // rsp_demux_015:src0_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_015_src0_startofpacket;                                                               // rsp_demux_015:src0_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                                 // rsp_demux_015:src0_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_015_src1_valid;                                                                       // rsp_demux_015:src1_valid -> rsp_mux_004:sink0_valid
	wire  [105:0] rsp_demux_015_src1_data;                                                                        // rsp_demux_015:src1_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_015_src1_ready;                                                                       // rsp_mux_004:sink0_ready -> rsp_demux_015:src1_ready
	wire   [17:0] rsp_demux_015_src1_channel;                                                                     // rsp_demux_015:src1_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_015_src1_startofpacket;                                                               // rsp_demux_015:src1_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_015_src1_endofpacket;                                                                 // rsp_demux_015:src1_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_016_src0_valid;                                                                       // rsp_demux_016:src0_valid -> rsp_mux_001:sink9_valid
	wire  [105:0] rsp_demux_016_src0_data;                                                                        // rsp_demux_016:src0_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_016_src0_ready;                                                                       // rsp_mux_001:sink9_ready -> rsp_demux_016:src0_ready
	wire   [17:0] rsp_demux_016_src0_channel;                                                                     // rsp_demux_016:src0_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_016_src0_startofpacket;                                                               // rsp_demux_016:src0_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                                 // rsp_demux_016:src0_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_017_src0_valid;                                                                       // rsp_demux_017:src0_valid -> rsp_mux_001:sink10_valid
	wire  [105:0] rsp_demux_017_src0_data;                                                                        // rsp_demux_017:src0_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_017_src0_ready;                                                                       // rsp_mux_001:sink10_ready -> rsp_demux_017:src0_ready
	wire   [17:0] rsp_demux_017_src0_channel;                                                                     // rsp_demux_017:src0_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_017_src0_startofpacket;                                                               // rsp_demux_017:src0_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                                 // rsp_demux_017:src0_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_017_src1_valid;                                                                       // rsp_demux_017:src1_valid -> rsp_mux_004:sink1_valid
	wire  [105:0] rsp_demux_017_src1_data;                                                                        // rsp_demux_017:src1_data -> rsp_mux_004:sink1_data
	wire          rsp_demux_017_src1_ready;                                                                       // rsp_mux_004:sink1_ready -> rsp_demux_017:src1_ready
	wire   [17:0] rsp_demux_017_src1_channel;                                                                     // rsp_demux_017:src1_channel -> rsp_mux_004:sink1_channel
	wire          rsp_demux_017_src1_startofpacket;                                                               // rsp_demux_017:src1_startofpacket -> rsp_mux_004:sink1_startofpacket
	wire          rsp_demux_017_src1_endofpacket;                                                                 // rsp_demux_017:src1_endofpacket -> rsp_mux_004:sink1_endofpacket
	wire          router_006_src_valid;                                                                           // router_006:src_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:in_valid
	wire   [78:0] router_006_src_data;                                                                            // router_006:src_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:in_data
	wire          router_006_src_ready;                                                                           // video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:in_ready -> router_006:src_ready
	wire   [17:0] router_006_src_channel;                                                                         // router_006:src_channel -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:in_channel
	wire          router_006_src_startofpacket;                                                                   // router_006:src_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:in_startofpacket
	wire          router_006_src_endofpacket;                                                                     // router_006:src_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:in_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_valid;         // video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [105:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_data;          // video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_ready;         // rsp_demux:sink_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:out_ready
	wire   [17:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_channel;       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_startofpacket; // video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_endofpacket;   // video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_009_src_valid;                                                                           // router_009:src_valid -> reg16_0_avalon_slave_0_rsp_width_adapter:in_valid
	wire   [87:0] router_009_src_data;                                                                            // router_009:src_data -> reg16_0_avalon_slave_0_rsp_width_adapter:in_data
	wire          router_009_src_ready;                                                                           // reg16_0_avalon_slave_0_rsp_width_adapter:in_ready -> router_009:src_ready
	wire   [17:0] router_009_src_channel;                                                                         // router_009:src_channel -> reg16_0_avalon_slave_0_rsp_width_adapter:in_channel
	wire          router_009_src_startofpacket;                                                                   // router_009:src_startofpacket -> reg16_0_avalon_slave_0_rsp_width_adapter:in_startofpacket
	wire          router_009_src_endofpacket;                                                                     // router_009:src_endofpacket -> reg16_0_avalon_slave_0_rsp_width_adapter:in_endofpacket
	wire          reg16_0_avalon_slave_0_rsp_width_adapter_src_valid;                                             // reg16_0_avalon_slave_0_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire  [105:0] reg16_0_avalon_slave_0_rsp_width_adapter_src_data;                                              // reg16_0_avalon_slave_0_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire          reg16_0_avalon_slave_0_rsp_width_adapter_src_ready;                                             // rsp_demux_003:sink_ready -> reg16_0_avalon_slave_0_rsp_width_adapter:out_ready
	wire   [17:0] reg16_0_avalon_slave_0_rsp_width_adapter_src_channel;                                           // reg16_0_avalon_slave_0_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire          reg16_0_avalon_slave_0_rsp_width_adapter_src_startofpacket;                                     // reg16_0_avalon_slave_0_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          reg16_0_avalon_slave_0_rsp_width_adapter_src_endofpacket;                                       // reg16_0_avalon_slave_0_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          cmd_mux_src_valid;                                                                              // cmd_mux:src_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_valid
	wire  [105:0] cmd_mux_src_data;                                                                               // cmd_mux:src_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                                              // video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire   [17:0] cmd_mux_src_channel;                                                                            // cmd_mux:src_channel -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                                      // cmd_mux:src_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                        // cmd_mux:src_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_valid;         // video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_valid
	wire   [78:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_data;          // video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_ready;         // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_ready
	wire   [17:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_channel;       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_channel -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_channel
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_startofpacket; // video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_endofpacket;   // video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                                                          // cmd_mux_003:src_valid -> reg16_0_avalon_slave_0_cmd_width_adapter:in_valid
	wire  [105:0] cmd_mux_003_src_data;                                                                           // cmd_mux_003:src_data -> reg16_0_avalon_slave_0_cmd_width_adapter:in_data
	wire          cmd_mux_003_src_ready;                                                                          // reg16_0_avalon_slave_0_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire   [17:0] cmd_mux_003_src_channel;                                                                        // cmd_mux_003:src_channel -> reg16_0_avalon_slave_0_cmd_width_adapter:in_channel
	wire          cmd_mux_003_src_startofpacket;                                                                  // cmd_mux_003:src_startofpacket -> reg16_0_avalon_slave_0_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                    // cmd_mux_003:src_endofpacket -> reg16_0_avalon_slave_0_cmd_width_adapter:in_endofpacket
	wire          reg16_0_avalon_slave_0_cmd_width_adapter_src_valid;                                             // reg16_0_avalon_slave_0_cmd_width_adapter:out_valid -> reg16_0_avalon_slave_0_burst_adapter:sink0_valid
	wire   [87:0] reg16_0_avalon_slave_0_cmd_width_adapter_src_data;                                              // reg16_0_avalon_slave_0_cmd_width_adapter:out_data -> reg16_0_avalon_slave_0_burst_adapter:sink0_data
	wire          reg16_0_avalon_slave_0_cmd_width_adapter_src_ready;                                             // reg16_0_avalon_slave_0_burst_adapter:sink0_ready -> reg16_0_avalon_slave_0_cmd_width_adapter:out_ready
	wire   [17:0] reg16_0_avalon_slave_0_cmd_width_adapter_src_channel;                                           // reg16_0_avalon_slave_0_cmd_width_adapter:out_channel -> reg16_0_avalon_slave_0_burst_adapter:sink0_channel
	wire          reg16_0_avalon_slave_0_cmd_width_adapter_src_startofpacket;                                     // reg16_0_avalon_slave_0_cmd_width_adapter:out_startofpacket -> reg16_0_avalon_slave_0_burst_adapter:sink0_startofpacket
	wire          reg16_0_avalon_slave_0_cmd_width_adapter_src_endofpacket;                                       // reg16_0_avalon_slave_0_cmd_width_adapter:out_endofpacket -> reg16_0_avalon_slave_0_burst_adapter:sink0_endofpacket
	wire   [17:0] cpumaster_data_master_limiter_cmd_valid_data;                                                   // CPUMaster_data_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [17:0] cpuslave1_data_master_limiter_cmd_valid_data;                                                   // CPUSlave1_data_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire   [17:0] cpuslave2_data_master_limiter_cmd_valid_data;                                                   // CPUSlave2_data_master_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire   [17:0] cpuslave2_instruction_master_limiter_cmd_valid_data;                                            // CPUSlave2_instruction_master_limiter:cmd_src_valid -> cmd_demux_003:sink_valid
	wire   [17:0] cpuslave1_instruction_master_limiter_cmd_valid_data;                                            // CPUSlave1_instruction_master_limiter:cmd_src_valid -> cmd_demux_004:sink_valid
	wire   [17:0] cpumaster_instruction_master_limiter_cmd_valid_data;                                            // CPUMaster_instruction_master_limiter:cmd_src_valid -> cmd_demux_005:sink_valid
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_valid;          // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire    [9:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_data;           // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_ready;          // avalon_st_adapter:in_0_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                                  // avalon_st_adapter:out_0_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_out_0_data;                                                                   // avalon_st_adapter:out_0_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                                  // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                                  // avalon_st_adapter:out_0_error -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_sink_error
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_valid;         // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_data;          // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_ready;         // avalon_st_adapter_001:in_0_ready -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                              // avalon_st_adapter_001:out_0_valid -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                               // avalon_st_adapter_001:out_0_data -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                              // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                              // avalon_st_adapter_001:out_0_error -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_sink_error
	wire          jtagmaster_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                        // JTAGMaster_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] jtagmaster_avalon_jtag_slave_agent_rdata_fifo_src_data;                                         // JTAGMaster_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          jtagmaster_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_002:in_0_ready -> JTAGMaster_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                              // avalon_st_adapter_002:out_0_valid -> JTAGMaster_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                               // avalon_st_adapter_002:out_0_data -> JTAGMaster_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                              // JTAGMaster_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                              // avalon_st_adapter_002:out_0_error -> JTAGMaster_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          reg16_0_avalon_slave_0_agent_rdata_fifo_src_valid;                                              // reg16_0_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [17:0] reg16_0_avalon_slave_0_agent_rdata_fifo_src_data;                                               // reg16_0_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          reg16_0_avalon_slave_0_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_003:in_0_ready -> reg16_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                              // avalon_st_adapter_003:out_0_valid -> reg16_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_003_out_0_data;                                                               // avalon_st_adapter_003:out_0_data -> reg16_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                              // reg16_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                              // avalon_st_adapter_003:out_0_error -> reg16_0_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          cpumaster_debug_mem_slave_agent_rdata_fifo_src_valid;                                           // CPUMaster_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] cpumaster_debug_mem_slave_agent_rdata_fifo_src_data;                                            // CPUMaster_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          cpumaster_debug_mem_slave_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_004:in_0_ready -> CPUMaster_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                              // avalon_st_adapter_004:out_0_valid -> CPUMaster_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                               // avalon_st_adapter_004:out_0_data -> CPUMaster_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                              // CPUMaster_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                              // avalon_st_adapter_004:out_0_error -> CPUMaster_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          memmaster_s1_agent_rdata_fifo_src_valid;                                                        // MEMMaster_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] memmaster_s1_agent_rdata_fifo_src_data;                                                         // MEMMaster_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          memmaster_s1_agent_rdata_fifo_src_ready;                                                        // avalon_st_adapter_005:in_0_ready -> MEMMaster_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                              // avalon_st_adapter_005:out_0_valid -> MEMMaster_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                               // avalon_st_adapter_005:out_0_data -> MEMMaster_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                              // MEMMaster_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                              // avalon_st_adapter_005:out_0_error -> MEMMaster_s1_agent:rdata_fifo_sink_error
	wire          mutex_0_s1_agent_rdata_fifo_src_valid;                                                          // mutex_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] mutex_0_s1_agent_rdata_fifo_src_data;                                                           // mutex_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          mutex_0_s1_agent_rdata_fifo_src_ready;                                                          // avalon_st_adapter_006:in_0_ready -> mutex_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                              // avalon_st_adapter_006:out_0_valid -> mutex_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                               // avalon_st_adapter_006:out_0_data -> mutex_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                              // mutex_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                              // avalon_st_adapter_006:out_0_error -> mutex_0_s1_agent:rdata_fifo_sink_error
	wire          ledgslave1_s1_agent_rdata_fifo_src_valid;                                                       // LEDGSlave1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] ledgslave1_s1_agent_rdata_fifo_src_data;                                                        // LEDGSlave1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          ledgslave1_s1_agent_rdata_fifo_src_ready;                                                       // avalon_st_adapter_007:in_0_ready -> LEDGSlave1_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                              // avalon_st_adapter_007:out_0_valid -> LEDGSlave1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                               // avalon_st_adapter_007:out_0_data -> LEDGSlave1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                              // LEDGSlave1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                              // avalon_st_adapter_007:out_0_error -> LEDGSlave1_s1_agent:rdata_fifo_sink_error
	wire          ledrslave2_s1_agent_rdata_fifo_src_valid;                                                       // LEDRSlave2_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] ledrslave2_s1_agent_rdata_fifo_src_data;                                                        // LEDRSlave2_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          ledrslave2_s1_agent_rdata_fifo_src_ready;                                                       // avalon_st_adapter_008:in_0_ready -> LEDRSlave2_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                              // avalon_st_adapter_008:out_0_valid -> LEDRSlave2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                               // avalon_st_adapter_008:out_0_data -> LEDRSlave2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                              // LEDRSlave2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                              // avalon_st_adapter_008:out_0_error -> LEDRSlave2_s1_agent:rdata_fifo_sink_error
	wire          uart_0_s1_agent_rdata_fifo_src_valid;                                                           // uart_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] uart_0_s1_agent_rdata_fifo_src_data;                                                            // uart_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          uart_0_s1_agent_rdata_fifo_src_ready;                                                           // avalon_st_adapter_009:in_0_ready -> uart_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                              // avalon_st_adapter_009:out_0_valid -> uart_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                               // avalon_st_adapter_009:out_0_data -> uart_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                              // uart_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                              // avalon_st_adapter_009:out_0_error -> uart_0_s1_agent:rdata_fifo_sink_error
	wire          jtagslave2_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                        // JTAGSlave2_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] jtagslave2_avalon_jtag_slave_agent_rdata_fifo_src_data;                                         // JTAGSlave2_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          jtagslave2_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_010:in_0_ready -> JTAGSlave2_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                              // avalon_st_adapter_010:out_0_valid -> JTAGSlave2_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                               // avalon_st_adapter_010:out_0_data -> JTAGSlave2_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                              // JTAGSlave2_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                              // avalon_st_adapter_010:out_0_error -> JTAGSlave2_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          cpuslave2_debug_mem_slave_agent_rdata_fifo_src_valid;                                           // CPUSlave2_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] cpuslave2_debug_mem_slave_agent_rdata_fifo_src_data;                                            // CPUSlave2_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          cpuslave2_debug_mem_slave_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_011:in_0_ready -> CPUSlave2_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                              // avalon_st_adapter_011:out_0_valid -> CPUSlave2_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                               // avalon_st_adapter_011:out_0_data -> CPUSlave2_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                              // CPUSlave2_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                              // avalon_st_adapter_011:out_0_error -> CPUSlave2_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          memslave2_s1_agent_rdata_fifo_src_valid;                                                        // MEMSlave2_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] memslave2_s1_agent_rdata_fifo_src_data;                                                         // MEMSlave2_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          memslave2_s1_agent_rdata_fifo_src_ready;                                                        // avalon_st_adapter_012:in_0_ready -> MEMSlave2_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                              // avalon_st_adapter_012:out_0_valid -> MEMSlave2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                               // avalon_st_adapter_012:out_0_data -> MEMSlave2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                              // MEMSlave2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                              // avalon_st_adapter_012:out_0_error -> MEMSlave2_s1_agent:rdata_fifo_sink_error
	wire          pioslave2_s1_agent_rdata_fifo_src_valid;                                                        // PIOSlave2_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] pioslave2_s1_agent_rdata_fifo_src_data;                                                         // PIOSlave2_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          pioslave2_s1_agent_rdata_fifo_src_ready;                                                        // avalon_st_adapter_013:in_0_ready -> PIOSlave2_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                              // avalon_st_adapter_013:out_0_valid -> PIOSlave2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                               // avalon_st_adapter_013:out_0_data -> PIOSlave2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                              // PIOSlave2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                              // avalon_st_adapter_013:out_0_error -> PIOSlave2_s1_agent:rdata_fifo_sink_error
	wire          jtagslave1_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                        // JTAGSlave1_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] jtagslave1_avalon_jtag_slave_agent_rdata_fifo_src_data;                                         // JTAGSlave1_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          jtagslave1_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_014:in_0_ready -> JTAGSlave1_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                              // avalon_st_adapter_014:out_0_valid -> JTAGSlave1_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                               // avalon_st_adapter_014:out_0_data -> JTAGSlave1_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                              // JTAGSlave1_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                              // avalon_st_adapter_014:out_0_error -> JTAGSlave1_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          cpuslave1_debug_mem_slave_agent_rdata_fifo_src_valid;                                           // CPUSlave1_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] cpuslave1_debug_mem_slave_agent_rdata_fifo_src_data;                                            // CPUSlave1_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          cpuslave1_debug_mem_slave_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_015:in_0_ready -> CPUSlave1_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                              // avalon_st_adapter_015:out_0_valid -> CPUSlave1_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                               // avalon_st_adapter_015:out_0_data -> CPUSlave1_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                              // CPUSlave1_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                              // avalon_st_adapter_015:out_0_error -> CPUSlave1_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          pioslave1_s1_agent_rdata_fifo_src_valid;                                                        // PIOSlave1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] pioslave1_s1_agent_rdata_fifo_src_data;                                                         // PIOSlave1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire          pioslave1_s1_agent_rdata_fifo_src_ready;                                                        // avalon_st_adapter_016:in_0_ready -> PIOSlave1_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                              // avalon_st_adapter_016:out_0_valid -> PIOSlave1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                               // avalon_st_adapter_016:out_0_data -> PIOSlave1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                              // PIOSlave1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                              // avalon_st_adapter_016:out_0_error -> PIOSlave1_s1_agent:rdata_fifo_sink_error
	wire          memslave1_s1_agent_rdata_fifo_src_valid;                                                        // MEMSlave1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] memslave1_s1_agent_rdata_fifo_src_data;                                                         // MEMSlave1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire          memslave1_s1_agent_rdata_fifo_src_ready;                                                        // avalon_st_adapter_017:in_0_ready -> MEMSlave1_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                              // avalon_st_adapter_017:out_0_valid -> MEMSlave1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                               // avalon_st_adapter_017:out_0_data -> MEMSlave1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                              // MEMSlave1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                              // avalon_st_adapter_017:out_0_error -> MEMSlave1_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (26),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpumaster_data_master_translator (
		.clk                    (clk_0_clk_clk),                                                            //                       clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (cpumaster_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpumaster_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpumaster_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpumaster_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpumaster_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpumaster_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpumaster_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpumaster_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpumaster_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpumaster_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpumaster_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CPUMaster_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CPUMaster_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (CPUMaster_data_master_byteenable),                                         //                          .byteenable
		.av_read                (CPUMaster_data_master_read),                                               //                          .read
		.av_readdata            (CPUMaster_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (CPUMaster_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (CPUMaster_data_master_write),                                              //                          .write
		.av_writedata           (CPUMaster_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (CPUMaster_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                     //               (terminated)
		.av_begintransfer       (1'b0),                                                                     //               (terminated)
		.av_chipselect          (1'b0),                                                                     //               (terminated)
		.av_lock                (1'b0),                                                                     //               (terminated)
		.uav_clken              (),                                                                         //               (terminated)
		.av_clken               (1'b1),                                                                     //               (terminated)
		.uav_response           (2'b00),                                                                    //               (terminated)
		.av_response            (),                                                                         //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid  ()                                                                          //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (26),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpuslave1_data_master_translator (
		.clk                    (clk_0_clk_clk),                                                            //                       clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (cpuslave1_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpuslave1_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpuslave1_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpuslave1_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpuslave1_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpuslave1_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpuslave1_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpuslave1_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpuslave1_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpuslave1_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpuslave1_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CPUSlave1_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CPUSlave1_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (CPUSlave1_data_master_byteenable),                                         //                          .byteenable
		.av_read                (CPUSlave1_data_master_read),                                               //                          .read
		.av_readdata            (CPUSlave1_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (CPUSlave1_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (CPUSlave1_data_master_write),                                              //                          .write
		.av_writedata           (CPUSlave1_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (CPUSlave1_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                     //               (terminated)
		.av_begintransfer       (1'b0),                                                                     //               (terminated)
		.av_chipselect          (1'b0),                                                                     //               (terminated)
		.av_lock                (1'b0),                                                                     //               (terminated)
		.uav_clken              (),                                                                         //               (terminated)
		.av_clken               (1'b1),                                                                     //               (terminated)
		.uav_response           (2'b00),                                                                    //               (terminated)
		.av_response            (),                                                                         //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid  ()                                                                          //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (26),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpuslave2_data_master_translator (
		.clk                    (clk_0_clk_clk),                                                            //                       clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (cpuslave2_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpuslave2_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpuslave2_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpuslave2_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpuslave2_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpuslave2_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpuslave2_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpuslave2_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpuslave2_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpuslave2_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpuslave2_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CPUSlave2_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CPUSlave2_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (CPUSlave2_data_master_byteenable),                                         //                          .byteenable
		.av_read                (CPUSlave2_data_master_read),                                               //                          .read
		.av_readdata            (CPUSlave2_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (CPUSlave2_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (CPUSlave2_data_master_write),                                              //                          .write
		.av_writedata           (CPUSlave2_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (CPUSlave2_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                     //               (terminated)
		.av_begintransfer       (1'b0),                                                                     //               (terminated)
		.av_chipselect          (1'b0),                                                                     //               (terminated)
		.av_lock                (1'b0),                                                                     //               (terminated)
		.uav_clken              (),                                                                         //               (terminated)
		.av_clken               (1'b1),                                                                     //               (terminated)
		.uav_response           (2'b00),                                                                    //               (terminated)
		.av_response            (),                                                                         //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid  ()                                                                          //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (21),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (26),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpuslave1_instruction_master_translator (
		.clk                    (clk_0_clk_clk),                                                                   //                       clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (cpuslave1_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpuslave1_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpuslave1_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpuslave1_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpuslave1_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpuslave1_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpuslave1_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpuslave1_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpuslave1_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpuslave1_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpuslave1_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CPUSlave1_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CPUSlave1_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (CPUSlave1_instruction_master_read),                                               //                          .read
		.av_readdata            (CPUSlave1_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (CPUSlave1_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                            //               (terminated)
		.av_byteenable          (4'b1111),                                                                         //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                                            //               (terminated)
		.av_write               (1'b0),                                                                            //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                            //               (terminated)
		.av_lock                (1'b0),                                                                            //               (terminated)
		.av_debugaccess         (1'b0),                                                                            //               (terminated)
		.uav_clken              (),                                                                                //               (terminated)
		.av_clken               (1'b1),                                                                            //               (terminated)
		.uav_response           (2'b00),                                                                           //               (terminated)
		.av_response            (),                                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                                 //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (22),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (26),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpuslave2_instruction_master_translator (
		.clk                    (clk_0_clk_clk),                                                                   //                       clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (cpuslave2_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpuslave2_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpuslave2_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpuslave2_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpuslave2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpuslave2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpuslave2_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpuslave2_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpuslave2_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpuslave2_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpuslave2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CPUSlave2_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CPUSlave2_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (CPUSlave2_instruction_master_read),                                               //                          .read
		.av_readdata            (CPUSlave2_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (CPUSlave2_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                            //               (terminated)
		.av_byteenable          (4'b1111),                                                                         //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                                            //               (terminated)
		.av_write               (1'b0),                                                                            //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                            //               (terminated)
		.av_lock                (1'b0),                                                                            //               (terminated)
		.av_debugaccess         (1'b0),                                                                            //               (terminated)
		.uav_clken              (),                                                                                //               (terminated)
		.av_clken               (1'b1),                                                                            //               (terminated)
		.uav_response           (2'b00),                                                                           //               (terminated)
		.av_response            (),                                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                                 //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (19),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (26),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpumaster_instruction_master_translator (
		.clk                    (clk_0_clk_clk),                                                                   //                       clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (cpumaster_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpumaster_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpumaster_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpumaster_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpumaster_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpumaster_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpumaster_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpumaster_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpumaster_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpumaster_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpumaster_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CPUMaster_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CPUMaster_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (CPUMaster_instruction_master_read),                                               //                          .read
		.av_readdata            (CPUMaster_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (CPUMaster_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                            //               (terminated)
		.av_byteenable          (4'b1111),                                                                         //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                                            //               (terminated)
		.av_write               (1'b0),                                                                            //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                            //               (terminated)
		.av_lock                (1'b0),                                                                            //               (terminated)
		.av_debugaccess         (1'b0),                                                                            //               (terminated)
		.uav_clken              (),                                                                                //               (terminated)
		.av_clken               (1'b1),                                                                            //               (terminated)
		.uav_response           (2'b00),                                                                           //               (terminated)
		.av_response            (),                                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                                 //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator (
		.clk                    (clk_0_clk_clk),                                                                     //                      clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset),                                       //                    reset.reset
		.uav_address            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_read),          //                         .read
		.uav_write              (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (video_character_buffer_with_dma_0_avalon_char_buffer_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (video_character_buffer_with_dma_0_avalon_char_buffer_slave_write),                  //                         .write
		.av_read                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_read),                   //                         .read
		.av_readdata            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_readdata),               //                         .readdata
		.av_writedata           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_writedata),              //                         .writedata
		.av_byteenable          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                                                  //              (terminated)
		.av_burstcount          (),                                                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                                                              //              (terminated)
		.av_writebyteenable     (),                                                                                  //              (terminated)
		.av_lock                (),                                                                                  //              (terminated)
		.av_clken               (),                                                                                  //              (terminated)
		.uav_clken              (1'b0),                                                                              //              (terminated)
		.av_debugaccess         (),                                                                                  //              (terminated)
		.av_outputenable        (),                                                                                  //              (terminated)
		.uav_response           (),                                                                                  //              (terminated)
		.av_response            (2'b00),                                                                             //              (terminated)
		.uav_writeresponsevalid (),                                                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_character_buffer_with_dma_0_avalon_char_control_slave_translator (
		.clk                    (clk_0_clk_clk),                                                                      //                      clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset),                                        //                    reset.reset
		.uav_address            (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_read),          //                         .read
		.uav_write              (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (video_character_buffer_with_dma_0_avalon_char_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (video_character_buffer_with_dma_0_avalon_char_control_slave_write),                  //                         .write
		.av_read                (video_character_buffer_with_dma_0_avalon_char_control_slave_read),                   //                         .read
		.av_readdata            (video_character_buffer_with_dma_0_avalon_char_control_slave_readdata),               //                         .readdata
		.av_writedata           (video_character_buffer_with_dma_0_avalon_char_control_slave_writedata),              //                         .writedata
		.av_byteenable          (video_character_buffer_with_dma_0_avalon_char_control_slave_byteenable),             //                         .byteenable
		.av_chipselect          (video_character_buffer_with_dma_0_avalon_char_control_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                                                   //              (terminated)
		.av_burstcount          (),                                                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                                                               //              (terminated)
		.av_waitrequest         (1'b0),                                                                               //              (terminated)
		.av_writebyteenable     (),                                                                                   //              (terminated)
		.av_lock                (),                                                                                   //              (terminated)
		.av_clken               (),                                                                                   //              (terminated)
		.uav_clken              (1'b0),                                                                               //              (terminated)
		.av_debugaccess         (),                                                                                   //              (terminated)
		.av_outputenable        (),                                                                                   //              (terminated)
		.uav_response           (),                                                                                   //              (terminated)
		.av_response            (2'b00),                                                                              //              (terminated)
		.uav_writeresponsevalid (),                                                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtagmaster_avalon_jtag_slave_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (jtagmaster_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtagmaster_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtagmaster_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtagmaster_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtagmaster_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtagmaster_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtagmaster_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtagmaster_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtagmaster_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtagmaster_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtagmaster_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (JTAGMaster_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (JTAGMaster_avalon_jtag_slave_write),                  //                         .write
		.av_read                (JTAGMaster_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (JTAGMaster_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (JTAGMaster_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (JTAGMaster_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (JTAGMaster_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) reg16_0_avalon_slave_0_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (reg16_0_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (reg16_0_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (reg16_0_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (reg16_0_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (reg16_0_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (reg16_0_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (reg16_0_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (reg16_0_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (reg16_0_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (reg16_0_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (reg16_0_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_write               (reg16_0_avalon_slave_0_write),                  //      avalon_anti_slave_0.write
		.av_read                (reg16_0_avalon_slave_0_read),                   //                         .read
		.av_readdata            (reg16_0_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata           (reg16_0_avalon_slave_0_writedata),              //                         .writedata
		.av_byteenable          (reg16_0_avalon_slave_0_byteenable),             //                         .byteenable
		.av_chipselect          (reg16_0_avalon_slave_0_chipselect),             //                         .chipselect
		.av_address             (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpumaster_debug_mem_slave_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (cpumaster_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cpumaster_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cpumaster_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (cpumaster_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (cpumaster_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cpumaster_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cpumaster_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cpumaster_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cpumaster_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cpumaster_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cpumaster_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (CPUMaster_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (CPUMaster_debug_mem_slave_write),                  //                         .write
		.av_read                (CPUMaster_debug_mem_slave_read),                   //                         .read
		.av_readdata            (CPUMaster_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (CPUMaster_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (CPUMaster_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (CPUMaster_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (CPUMaster_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) memmaster_s1_translator (
		.clk                    (clk_0_clk_clk),                               //                      clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (memmaster_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (memmaster_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (memmaster_s1_agent_m0_read),                  //                         .read
		.uav_write              (memmaster_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (memmaster_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (memmaster_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (memmaster_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (memmaster_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (memmaster_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (memmaster_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (memmaster_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (MEMMaster_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (MEMMaster_s1_write),                          //                         .write
		.av_readdata            (MEMMaster_s1_readdata),                       //                         .readdata
		.av_writedata           (MEMMaster_s1_writedata),                      //                         .writedata
		.av_byteenable          (MEMMaster_s1_byteenable),                     //                         .byteenable
		.av_chipselect          (MEMMaster_s1_chipselect),                     //                         .chipselect
		.av_clken               (MEMMaster_s1_clken),                          //                         .clken
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mutex_0_s1_translator (
		.clk                    (clk_0_clk_clk),                               //                      clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mutex_0_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (mutex_0_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (mutex_0_s1_agent_m0_read),                    //                         .read
		.uav_write              (mutex_0_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (mutex_0_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (mutex_0_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (mutex_0_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (mutex_0_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (mutex_0_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (mutex_0_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (mutex_0_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (mutex_0_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (mutex_0_s1_write),                            //                         .write
		.av_read                (mutex_0_s1_read),                             //                         .read
		.av_readdata            (mutex_0_s1_readdata),                         //                         .readdata
		.av_writedata           (mutex_0_s1_writedata),                        //                         .writedata
		.av_chipselect          (mutex_0_s1_chipselect),                       //                         .chipselect
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ledgslave1_s1_translator (
		.clk                    (clk_0_clk_clk),                               //                      clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ledgslave1_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (ledgslave1_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (ledgslave1_s1_agent_m0_read),                 //                         .read
		.uav_write              (ledgslave1_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (ledgslave1_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (ledgslave1_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (ledgslave1_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (ledgslave1_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (ledgslave1_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (ledgslave1_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (ledgslave1_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (LEDGSlave1_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (LEDGSlave1_s1_write),                         //                         .write
		.av_readdata            (LEDGSlave1_s1_readdata),                      //                         .readdata
		.av_writedata           (LEDGSlave1_s1_writedata),                     //                         .writedata
		.av_chipselect          (LEDGSlave1_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ledrslave2_s1_translator (
		.clk                    (clk_0_clk_clk),                               //                      clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ledrslave2_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (ledrslave2_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (ledrslave2_s1_agent_m0_read),                 //                         .read
		.uav_write              (ledrslave2_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (ledrslave2_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (ledrslave2_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (ledrslave2_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (ledrslave2_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (ledrslave2_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (ledrslave2_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (ledrslave2_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (LEDRSlave2_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (LEDRSlave2_s1_write),                         //                         .write
		.av_readdata            (LEDRSlave2_s1_readdata),                      //                         .readdata
		.av_writedata           (LEDRSlave2_s1_writedata),                     //                         .writedata
		.av_chipselect          (LEDRSlave2_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) uart_0_s1_translator (
		.clk                    (clk_0_clk_clk),                               //                      clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (uart_0_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (uart_0_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (uart_0_s1_agent_m0_read),                     //                         .read
		.uav_write              (uart_0_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (uart_0_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (uart_0_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (uart_0_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (uart_0_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (uart_0_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (uart_0_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (uart_0_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (uart_0_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (uart_0_s1_write),                             //                         .write
		.av_read                (uart_0_s1_read),                              //                         .read
		.av_readdata            (uart_0_s1_readdata),                          //                         .readdata
		.av_writedata           (uart_0_s1_writedata),                         //                         .writedata
		.av_begintransfer       (uart_0_s1_begintransfer),                     //                         .begintransfer
		.av_chipselect          (uart_0_s1_chipselect),                        //                         .chipselect
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtagslave2_avalon_jtag_slave_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (jtagslave2_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtagslave2_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtagslave2_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtagslave2_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtagslave2_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtagslave2_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtagslave2_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtagslave2_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtagslave2_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtagslave2_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtagslave2_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (JTAGSlave2_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (JTAGSlave2_avalon_jtag_slave_write),                  //                         .write
		.av_read                (JTAGSlave2_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (JTAGSlave2_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (JTAGSlave2_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (JTAGSlave2_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (JTAGSlave2_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpuslave2_debug_mem_slave_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (cpuslave2_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cpuslave2_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cpuslave2_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (cpuslave2_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (cpuslave2_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cpuslave2_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cpuslave2_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cpuslave2_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cpuslave2_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cpuslave2_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cpuslave2_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (CPUSlave2_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (CPUSlave2_debug_mem_slave_write),                  //                         .write
		.av_read                (CPUSlave2_debug_mem_slave_read),                   //                         .read
		.av_readdata            (CPUSlave2_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (CPUSlave2_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (CPUSlave2_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (CPUSlave2_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (CPUSlave2_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) memslave2_s1_translator (
		.clk                    (clk_0_clk_clk),                               //                      clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (memslave2_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (memslave2_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (memslave2_s1_agent_m0_read),                  //                         .read
		.uav_write              (memslave2_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (memslave2_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (memslave2_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (memslave2_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (memslave2_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (memslave2_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (memslave2_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (memslave2_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (MEMSlave2_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (MEMSlave2_s1_write),                          //                         .write
		.av_readdata            (MEMSlave2_s1_readdata),                       //                         .readdata
		.av_writedata           (MEMSlave2_s1_writedata),                      //                         .writedata
		.av_byteenable          (MEMSlave2_s1_byteenable),                     //                         .byteenable
		.av_chipselect          (MEMSlave2_s1_chipselect),                     //                         .chipselect
		.av_clken               (MEMSlave2_s1_clken),                          //                         .clken
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pioslave2_s1_translator (
		.clk                    (clk_0_clk_clk),                               //                      clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pioslave2_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (pioslave2_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (pioslave2_s1_agent_m0_read),                  //                         .read
		.uav_write              (pioslave2_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (pioslave2_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (pioslave2_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (pioslave2_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (pioslave2_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (pioslave2_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (pioslave2_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (pioslave2_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (PIOSlave2_s1_address),                        //      avalon_anti_slave_0.address
		.av_readdata            (PIOSlave2_s1_readdata),                       //                         .readdata
		.av_write               (),                                            //              (terminated)
		.av_read                (),                                            //              (terminated)
		.av_writedata           (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtagslave1_avalon_jtag_slave_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (jtagslave1_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtagslave1_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtagslave1_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtagslave1_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtagslave1_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtagslave1_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtagslave1_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtagslave1_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtagslave1_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtagslave1_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtagslave1_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (JTAGSlave1_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (JTAGSlave1_avalon_jtag_slave_write),                  //                         .write
		.av_read                (JTAGSlave1_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (JTAGSlave1_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (JTAGSlave1_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (JTAGSlave1_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (JTAGSlave1_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpuslave1_debug_mem_slave_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (cpuslave1_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cpuslave1_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cpuslave1_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (cpuslave1_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (cpuslave1_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cpuslave1_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cpuslave1_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cpuslave1_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cpuslave1_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cpuslave1_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cpuslave1_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (CPUSlave1_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (CPUSlave1_debug_mem_slave_write),                  //                         .write
		.av_read                (CPUSlave1_debug_mem_slave_read),                   //                         .read
		.av_readdata            (CPUSlave1_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (CPUSlave1_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (CPUSlave1_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (CPUSlave1_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (CPUSlave1_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pioslave1_s1_translator (
		.clk                    (clk_0_clk_clk),                               //                      clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pioslave1_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (pioslave1_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (pioslave1_s1_agent_m0_read),                  //                         .read
		.uav_write              (pioslave1_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (pioslave1_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (pioslave1_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (pioslave1_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (pioslave1_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (pioslave1_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (pioslave1_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (pioslave1_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (PIOSlave1_s1_address),                        //      avalon_anti_slave_0.address
		.av_readdata            (PIOSlave1_s1_readdata),                       //                         .readdata
		.av_write               (),                                            //              (terminated)
		.av_read                (),                                            //              (terminated)
		.av_writedata           (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) memslave1_s1_translator (
		.clk                    (clk_0_clk_clk),                               //                      clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (memslave1_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (memslave1_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (memslave1_s1_agent_m0_read),                  //                         .read
		.uav_write              (memslave1_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (memslave1_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (memslave1_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (memslave1_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (memslave1_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (memslave1_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (memslave1_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (memslave1_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (MEMSlave1_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (MEMSlave1_s1_write),                          //                         .write
		.av_readdata            (MEMSlave1_s1_readdata),                       //                         .readdata
		.av_writedata           (MEMSlave1_s1_writedata),                      //                         .writedata
		.av_byteenable          (MEMSlave1_s1_byteenable),                     //                         .byteenable
		.av_chipselect          (MEMSlave1_s1_chipselect),                     //                         .chipselect
		.av_clken               (MEMSlave1_s1_clken),                          //                         .clken
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_QOS_H                 (82),
		.PKT_QOS_L                 (82),
		.PKT_DATA_SIDEBAND_H       (80),
		.PKT_DATA_SIDEBAND_L       (80),
		.PKT_ADDR_SIDEBAND_H       (79),
		.PKT_ADDR_SIDEBAND_L       (79),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_EXCLUSIVE       (67),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (18),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpumaster_data_master_agent (
		.clk                   (clk_0_clk_clk),                                                            //       clk.clk
		.reset                 (CPUMaster_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (cpumaster_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpumaster_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpumaster_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpumaster_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpumaster_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpumaster_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpumaster_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpumaster_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpumaster_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpumaster_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpumaster_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpumaster_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpumaster_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpumaster_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpumaster_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpumaster_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpumaster_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpumaster_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpumaster_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpumaster_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpumaster_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpumaster_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                         // (terminated)
		.av_writeresponsevalid ()                                                                          // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_QOS_H                 (82),
		.PKT_QOS_L                 (82),
		.PKT_DATA_SIDEBAND_H       (80),
		.PKT_DATA_SIDEBAND_L       (80),
		.PKT_ADDR_SIDEBAND_H       (79),
		.PKT_ADDR_SIDEBAND_L       (79),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_EXCLUSIVE       (67),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (18),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpuslave1_data_master_agent (
		.clk                   (clk_0_clk_clk),                                                            //       clk.clk
		.reset                 (CPUMaster_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (cpuslave1_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpuslave1_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpuslave1_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpuslave1_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpuslave1_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpuslave1_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpuslave1_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpuslave1_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpuslave1_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpuslave1_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpuslave1_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpuslave1_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpuslave1_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpuslave1_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpuslave1_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpuslave1_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpuslave1_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpuslave1_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpuslave1_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpuslave1_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpuslave1_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpuslave1_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                         // (terminated)
		.av_writeresponsevalid ()                                                                          // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_QOS_H                 (82),
		.PKT_QOS_L                 (82),
		.PKT_DATA_SIDEBAND_H       (80),
		.PKT_DATA_SIDEBAND_L       (80),
		.PKT_ADDR_SIDEBAND_H       (79),
		.PKT_ADDR_SIDEBAND_L       (79),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_EXCLUSIVE       (67),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (18),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpuslave2_data_master_agent (
		.clk                   (clk_0_clk_clk),                                                            //       clk.clk
		.reset                 (CPUMaster_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (cpuslave2_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpuslave2_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpuslave2_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpuslave2_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpuslave2_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpuslave2_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpuslave2_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpuslave2_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpuslave2_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpuslave2_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpuslave2_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpuslave2_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpuslave2_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpuslave2_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpuslave2_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpuslave2_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpuslave2_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpuslave2_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpuslave2_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpuslave2_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpuslave2_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpuslave2_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                         // (terminated)
		.av_writeresponsevalid ()                                                                          // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_QOS_H                 (82),
		.PKT_QOS_L                 (82),
		.PKT_DATA_SIDEBAND_H       (80),
		.PKT_DATA_SIDEBAND_L       (80),
		.PKT_ADDR_SIDEBAND_H       (79),
		.PKT_ADDR_SIDEBAND_L       (79),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_EXCLUSIVE       (67),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (18),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (5),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpuslave2_instruction_master_agent (
		.clk                   (clk_0_clk_clk),                                                                   //       clk.clk
		.reset                 (CPUMaster_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (cpuslave2_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpuslave2_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpuslave2_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpuslave2_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpuslave2_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpuslave2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpuslave2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpuslave2_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpuslave2_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpuslave2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpuslave2_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpuslave2_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpuslave2_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpuslave2_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpuslave2_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpuslave2_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpuslave2_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpuslave2_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpuslave2_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpuslave2_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpuslave2_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpuslave2_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                // (terminated)
		.av_writeresponsevalid ()                                                                                 // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_QOS_H                 (82),
		.PKT_QOS_L                 (82),
		.PKT_DATA_SIDEBAND_H       (80),
		.PKT_DATA_SIDEBAND_L       (80),
		.PKT_ADDR_SIDEBAND_H       (79),
		.PKT_ADDR_SIDEBAND_L       (79),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_EXCLUSIVE       (67),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (18),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpuslave1_instruction_master_agent (
		.clk                   (clk_0_clk_clk),                                                                   //       clk.clk
		.reset                 (CPUMaster_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (cpuslave1_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpuslave1_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpuslave1_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpuslave1_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpuslave1_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpuslave1_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpuslave1_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpuslave1_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpuslave1_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpuslave1_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpuslave1_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpuslave1_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpuslave1_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpuslave1_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpuslave1_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpuslave1_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpuslave1_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpuslave1_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpuslave1_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpuslave1_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpuslave1_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpuslave1_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                // (terminated)
		.av_writeresponsevalid ()                                                                                 // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_QOS_H                 (82),
		.PKT_QOS_L                 (82),
		.PKT_DATA_SIDEBAND_H       (80),
		.PKT_DATA_SIDEBAND_L       (80),
		.PKT_ADDR_SIDEBAND_H       (79),
		.PKT_ADDR_SIDEBAND_L       (79),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_EXCLUSIVE       (67),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (18),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpumaster_instruction_master_agent (
		.clk                   (clk_0_clk_clk),                                                                   //       clk.clk
		.reset                 (CPUMaster_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (cpumaster_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpumaster_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpumaster_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpumaster_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpumaster_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpumaster_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpumaster_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpumaster_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpumaster_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpumaster_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpumaster_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpumaster_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpumaster_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpumaster_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpumaster_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpumaster_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpumaster_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpumaster_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpumaster_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpumaster_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpumaster_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpumaster_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                // (terminated)
		.av_writeresponsevalid ()                                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (78),
		.PKT_ORI_BURST_SIZE_L      (76),
		.PKT_RESPONSE_STATUS_H     (75),
		.PKT_RESPONSE_STATUS_L     (74),
		.PKT_BURST_SIZE_H          (49),
		.PKT_BURST_SIZE_L          (47),
		.PKT_TRANS_LOCK            (39),
		.PKT_BEGIN_BURST           (54),
		.PKT_PROTECTION_H          (69),
		.PKT_PROTECTION_L          (67),
		.PKT_BURSTWRAP_H           (46),
		.PKT_BURSTWRAP_L           (44),
		.PKT_BYTE_CNT_H            (43),
		.PKT_BYTE_CNT_L            (41),
		.PKT_ADDR_H                (34),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (35),
		.PKT_TRANS_POSTED          (36),
		.PKT_TRANS_WRITE           (37),
		.PKT_TRANS_READ            (38),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (60),
		.PKT_SRC_ID_L              (56),
		.PKT_DEST_ID_H             (65),
		.PKT_DEST_ID_L             (61),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (79),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent (
		.clk                     (clk_0_clk_clk),                                                                                  //             clk.clk
		.reset                   (CPUMaster_reset_reset_bridge_in_reset_reset),                                                    //       clk_reset.reset
		.m0_address              (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                                                  //                .error
		.rdata_fifo_src_ready    (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (80),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                               //       clk.clk
		.reset             (CPUMaster_reset_reset_bridge_in_reset_reset),                                                 // clk_reset.reset
		.in_data           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_data),             //        in.data
		.in_valid          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                       // (terminated)
		.csr_read          (1'b0),                                                                                        // (terminated)
		.csr_write         (1'b0),                                                                                        // (terminated)
		.csr_readdata      (),                                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                        // (terminated)
		.almost_full_data  (),                                                                                            // (terminated)
		.almost_empty_data (),                                                                                            // (terminated)
		.in_empty          (1'b0),                                                                                        // (terminated)
		.out_empty         (),                                                                                            // (terminated)
		.in_error          (1'b0),                                                                                        // (terminated)
		.out_error         (),                                                                                            // (terminated)
		.in_channel        (1'b0),                                                                                        // (terminated)
		.out_channel       ()                                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_character_buffer_with_dma_0_avalon_char_control_slave_agent (
		.clk                     (clk_0_clk_clk),                                                                                //             clk.clk
		.reset                   (CPUMaster_reset_reset_bridge_in_reset_reset),                                                  //       clk_reset.reset
		.m0_address              (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                                                        //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                                                        //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                                                         //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                                                  //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                                                      //                .channel
		.rf_sink_ready           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                                            //                .error
		.rdata_fifo_src_ready    (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                                //       clk.clk
		.reset             (CPUMaster_reset_reset_bridge_in_reset_reset),                                                  // clk_reset.reset
		.in_data           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                        // (terminated)
		.csr_read          (1'b0),                                                                                         // (terminated)
		.csr_write         (1'b0),                                                                                         // (terminated)
		.csr_readdata      (),                                                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                         // (terminated)
		.almost_full_data  (),                                                                                             // (terminated)
		.almost_empty_data (),                                                                                             // (terminated)
		.in_empty          (1'b0),                                                                                         // (terminated)
		.out_empty         (),                                                                                             // (terminated)
		.in_error          (1'b0),                                                                                         // (terminated)
		.out_error         (),                                                                                             // (terminated)
		.in_channel        (1'b0),                                                                                         // (terminated)
		.out_channel       ()                                                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtagmaster_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                 //             clk.clk
		.reset                   (CPUMaster_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (jtagmaster_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtagmaster_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtagmaster_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtagmaster_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtagmaster_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtagmaster_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtagmaster_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtagmaster_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtagmaster_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtagmaster_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtagmaster_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtagmaster_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtagmaster_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtagmaster_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtagmaster_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtagmaster_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                       //                .channel
		.rf_sink_ready           (jtagmaster_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtagmaster_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtagmaster_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtagmaster_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtagmaster_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtagmaster_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtagmaster_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtagmaster_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtagmaster_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtagmaster_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (jtagmaster_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtagmaster_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtagmaster_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtagmaster_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (CPUMaster_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (jtagmaster_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtagmaster_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtagmaster_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtagmaster_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtagmaster_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtagmaster_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtagmaster_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtagmaster_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtagmaster_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtagmaster_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (87),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_LOCK            (48),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (53),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (50),
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_POSTED          (45),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (70),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) reg16_0_avalon_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (CPUMaster_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (reg16_0_avalon_slave_0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (reg16_0_avalon_slave_0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (reg16_0_avalon_slave_0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (reg16_0_avalon_slave_0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (reg16_0_avalon_slave_0_agent_m0_lock),                       //                .lock
		.m0_readdata             (reg16_0_avalon_slave_0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (reg16_0_avalon_slave_0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (reg16_0_avalon_slave_0_agent_m0_read),                       //                .read
		.m0_waitrequest          (reg16_0_avalon_slave_0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (reg16_0_avalon_slave_0_agent_m0_writedata),                  //                .writedata
		.m0_write                (reg16_0_avalon_slave_0_agent_m0_write),                      //                .write
		.rp_endofpacket          (reg16_0_avalon_slave_0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (reg16_0_avalon_slave_0_agent_rp_ready),                      //                .ready
		.rp_valid                (reg16_0_avalon_slave_0_agent_rp_valid),                      //                .valid
		.rp_data                 (reg16_0_avalon_slave_0_agent_rp_data),                       //                .data
		.rp_startofpacket        (reg16_0_avalon_slave_0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (reg16_0_avalon_slave_0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (reg16_0_avalon_slave_0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (reg16_0_avalon_slave_0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (reg16_0_avalon_slave_0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (reg16_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (reg16_0_avalon_slave_0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (reg16_0_avalon_slave_0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (reg16_0_avalon_slave_0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (reg16_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (reg16_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (reg16_0_avalon_slave_0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (reg16_0_avalon_slave_0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (reg16_0_avalon_slave_0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (reg16_0_avalon_slave_0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (reg16_0_avalon_slave_0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (reg16_0_avalon_slave_0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (reg16_0_avalon_slave_0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (reg16_0_avalon_slave_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (reg16_0_avalon_slave_0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) reg16_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (CPUMaster_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (reg16_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (reg16_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (reg16_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (reg16_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (reg16_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (reg16_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (reg16_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (reg16_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (reg16_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (reg16_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cpumaster_debug_mem_slave_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (CPUMaster_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpumaster_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpumaster_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpumaster_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpumaster_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpumaster_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpumaster_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpumaster_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpumaster_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpumaster_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpumaster_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (cpumaster_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpumaster_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpumaster_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (cpumaster_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (cpumaster_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpumaster_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                    //                .channel
		.rf_sink_ready           (cpumaster_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpumaster_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpumaster_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpumaster_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpumaster_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpumaster_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpumaster_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpumaster_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpumaster_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpumaster_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (cpumaster_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpumaster_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpumaster_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpumaster_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (CPUMaster_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpumaster_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (cpumaster_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (cpumaster_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpumaster_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpumaster_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpumaster_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpumaster_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpumaster_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpumaster_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpumaster_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) memmaster_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (CPUMaster_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (memmaster_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (memmaster_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (memmaster_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (memmaster_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (memmaster_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (memmaster_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (memmaster_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (memmaster_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (memmaster_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (memmaster_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (memmaster_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (memmaster_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (memmaster_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (memmaster_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (memmaster_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (memmaster_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_005_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                       //                .channel
		.rf_sink_ready           (memmaster_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (memmaster_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (memmaster_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (memmaster_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (memmaster_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (memmaster_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (memmaster_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (memmaster_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (memmaster_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (memmaster_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),             //                .error
		.rdata_fifo_src_ready    (memmaster_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (memmaster_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (memmaster_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) memmaster_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (CPUMaster_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (memmaster_s1_agent_rf_source_data),             //        in.data
		.in_valid          (memmaster_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (memmaster_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (memmaster_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (memmaster_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (memmaster_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (memmaster_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (memmaster_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (memmaster_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (memmaster_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mutex_0_s1_agent (
		.clk                     (clk_0_clk_clk),                               //             clk.clk
		.reset                   (CPUMaster_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mutex_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mutex_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mutex_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mutex_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mutex_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (mutex_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mutex_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mutex_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (mutex_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mutex_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (mutex_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (mutex_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mutex_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (mutex_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (mutex_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (mutex_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_006_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                     //                .channel
		.rf_sink_ready           (mutex_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mutex_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mutex_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mutex_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mutex_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mutex_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mutex_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mutex_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mutex_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mutex_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),           //                .error
		.rdata_fifo_src_ready    (mutex_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mutex_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mutex_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mutex_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                               //       clk.clk
		.reset             (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mutex_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (mutex_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (mutex_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mutex_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mutex_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mutex_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mutex_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mutex_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mutex_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mutex_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ledgslave1_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (CPUMaster_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (ledgslave1_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ledgslave1_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ledgslave1_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ledgslave1_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ledgslave1_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (ledgslave1_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ledgslave1_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ledgslave1_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (ledgslave1_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ledgslave1_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (ledgslave1_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (ledgslave1_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ledgslave1_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (ledgslave1_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (ledgslave1_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (ledgslave1_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_007_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                        //                .channel
		.rf_sink_ready           (ledgslave1_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ledgslave1_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ledgslave1_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ledgslave1_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ledgslave1_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ledgslave1_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ledgslave1_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ledgslave1_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ledgslave1_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ledgslave1_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),              //                .error
		.rdata_fifo_src_ready    (ledgslave1_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ledgslave1_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ledgslave1_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ledgslave1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (CPUMaster_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (ledgslave1_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ledgslave1_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ledgslave1_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ledgslave1_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ledgslave1_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ledgslave1_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ledgslave1_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ledgslave1_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ledgslave1_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ledgslave1_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ledrslave2_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (CPUMaster_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (ledrslave2_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ledrslave2_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ledrslave2_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ledrslave2_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ledrslave2_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (ledrslave2_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ledrslave2_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ledrslave2_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (ledrslave2_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ledrslave2_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (ledrslave2_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (ledrslave2_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ledrslave2_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (ledrslave2_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (ledrslave2_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (ledrslave2_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_008_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                        //                .channel
		.rf_sink_ready           (ledrslave2_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ledrslave2_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ledrslave2_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ledrslave2_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ledrslave2_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ledrslave2_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ledrslave2_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ledrslave2_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ledrslave2_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ledrslave2_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),              //                .error
		.rdata_fifo_src_ready    (ledrslave2_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ledrslave2_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ledrslave2_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ledrslave2_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (CPUMaster_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (ledrslave2_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ledrslave2_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ledrslave2_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ledrslave2_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ledrslave2_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ledrslave2_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ledrslave2_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ledrslave2_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ledrslave2_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ledrslave2_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) uart_0_s1_agent (
		.clk                     (clk_0_clk_clk),                               //             clk.clk
		.reset                   (CPUMaster_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (uart_0_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (uart_0_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (uart_0_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (uart_0_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (uart_0_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (uart_0_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (uart_0_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (uart_0_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (uart_0_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (uart_0_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (uart_0_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (uart_0_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (uart_0_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (uart_0_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (uart_0_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (uart_0_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_009_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                     //                .channel
		.rf_sink_ready           (uart_0_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (uart_0_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (uart_0_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (uart_0_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (uart_0_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (uart_0_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (uart_0_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (uart_0_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (uart_0_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (uart_0_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),           //                .error
		.rdata_fifo_src_ready    (uart_0_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (uart_0_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (uart_0_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) uart_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                               //       clk.clk
		.reset             (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (uart_0_s1_agent_rf_source_data),              //        in.data
		.in_valid          (uart_0_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (uart_0_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (uart_0_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (uart_0_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (uart_0_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (uart_0_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (uart_0_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (uart_0_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (uart_0_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtagslave2_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                 //             clk.clk
		.reset                   (CPUMaster_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (jtagslave2_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtagslave2_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtagslave2_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtagslave2_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtagslave2_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtagslave2_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtagslave2_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtagslave2_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtagslave2_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtagslave2_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtagslave2_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtagslave2_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtagslave2_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtagslave2_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtagslave2_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtagslave2_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                                       //                .channel
		.rf_sink_ready           (jtagslave2_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtagslave2_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtagslave2_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtagslave2_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtagslave2_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtagslave2_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtagslave2_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtagslave2_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtagslave2_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtagslave2_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (jtagslave2_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtagslave2_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtagslave2_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtagslave2_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (CPUMaster_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (jtagslave2_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtagslave2_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtagslave2_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtagslave2_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtagslave2_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtagslave2_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtagslave2_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtagslave2_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtagslave2_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtagslave2_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cpuslave2_debug_mem_slave_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (CPUMaster_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpuslave2_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpuslave2_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpuslave2_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpuslave2_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpuslave2_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpuslave2_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpuslave2_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpuslave2_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpuslave2_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpuslave2_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (cpuslave2_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpuslave2_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpuslave2_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (cpuslave2_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (cpuslave2_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpuslave2_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                                    //                .channel
		.rf_sink_ready           (cpuslave2_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpuslave2_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpuslave2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpuslave2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpuslave2_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpuslave2_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpuslave2_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpuslave2_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpuslave2_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpuslave2_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (cpuslave2_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpuslave2_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpuslave2_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpuslave2_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (CPUMaster_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpuslave2_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (cpuslave2_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (cpuslave2_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpuslave2_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpuslave2_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpuslave2_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpuslave2_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpuslave2_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpuslave2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpuslave2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) memslave2_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (CPUMaster_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (memslave2_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (memslave2_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (memslave2_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (memslave2_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (memslave2_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (memslave2_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (memslave2_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (memslave2_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (memslave2_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (memslave2_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (memslave2_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (memslave2_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (memslave2_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (memslave2_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (memslave2_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (memslave2_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_012_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                       //                .channel
		.rf_sink_ready           (memslave2_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (memslave2_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (memslave2_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (memslave2_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (memslave2_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (memslave2_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (memslave2_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (memslave2_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (memslave2_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (memslave2_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),             //                .error
		.rdata_fifo_src_ready    (memslave2_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (memslave2_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (memslave2_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) memslave2_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (CPUMaster_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (memslave2_s1_agent_rf_source_data),             //        in.data
		.in_valid          (memslave2_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (memslave2_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (memslave2_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (memslave2_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (memslave2_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (memslave2_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (memslave2_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (memslave2_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (memslave2_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pioslave2_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (CPUMaster_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (pioslave2_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pioslave2_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pioslave2_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pioslave2_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pioslave2_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pioslave2_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pioslave2_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pioslave2_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pioslave2_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pioslave2_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pioslave2_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pioslave2_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pioslave2_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pioslave2_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pioslave2_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pioslave2_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_013_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                       //                .channel
		.rf_sink_ready           (pioslave2_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pioslave2_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pioslave2_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pioslave2_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pioslave2_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pioslave2_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pioslave2_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pioslave2_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pioslave2_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pioslave2_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),             //                .error
		.rdata_fifo_src_ready    (pioslave2_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pioslave2_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pioslave2_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pioslave2_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (CPUMaster_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (pioslave2_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pioslave2_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pioslave2_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pioslave2_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pioslave2_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pioslave2_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pioslave2_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pioslave2_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pioslave2_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pioslave2_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtagslave1_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                 //             clk.clk
		.reset                   (CPUMaster_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (jtagslave1_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtagslave1_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtagslave1_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtagslave1_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtagslave1_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtagslave1_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtagslave1_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtagslave1_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtagslave1_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtagslave1_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtagslave1_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtagslave1_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtagslave1_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtagslave1_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtagslave1_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtagslave1_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_014_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                                       //                .channel
		.rf_sink_ready           (jtagslave1_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtagslave1_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtagslave1_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtagslave1_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtagslave1_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtagslave1_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtagslave1_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtagslave1_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtagslave1_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtagslave1_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (jtagslave1_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtagslave1_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtagslave1_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtagslave1_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (CPUMaster_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (jtagslave1_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtagslave1_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtagslave1_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtagslave1_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtagslave1_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtagslave1_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtagslave1_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtagslave1_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtagslave1_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtagslave1_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cpuslave1_debug_mem_slave_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (CPUMaster_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpuslave1_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpuslave1_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpuslave1_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpuslave1_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpuslave1_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpuslave1_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpuslave1_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpuslave1_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpuslave1_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpuslave1_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (cpuslave1_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpuslave1_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpuslave1_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (cpuslave1_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (cpuslave1_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpuslave1_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_015_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                                    //                .channel
		.rf_sink_ready           (cpuslave1_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpuslave1_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpuslave1_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpuslave1_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpuslave1_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpuslave1_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpuslave1_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpuslave1_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpuslave1_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpuslave1_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (cpuslave1_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpuslave1_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpuslave1_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpuslave1_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (CPUMaster_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpuslave1_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (cpuslave1_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (cpuslave1_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpuslave1_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpuslave1_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpuslave1_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpuslave1_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpuslave1_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpuslave1_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpuslave1_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pioslave1_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (CPUMaster_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (pioslave1_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pioslave1_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pioslave1_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pioslave1_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pioslave1_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pioslave1_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pioslave1_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pioslave1_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pioslave1_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pioslave1_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pioslave1_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pioslave1_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pioslave1_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pioslave1_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pioslave1_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pioslave1_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_016_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                       //                .channel
		.rf_sink_ready           (pioslave1_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pioslave1_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pioslave1_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pioslave1_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pioslave1_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pioslave1_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pioslave1_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pioslave1_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pioslave1_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pioslave1_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),             //                .error
		.rdata_fifo_src_ready    (pioslave1_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pioslave1_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pioslave1_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pioslave1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (CPUMaster_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (pioslave1_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pioslave1_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pioslave1_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pioslave1_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pioslave1_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pioslave1_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pioslave1_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pioslave1_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pioslave1_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pioslave1_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) memslave1_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (CPUMaster_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (memslave1_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (memslave1_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (memslave1_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (memslave1_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (memslave1_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (memslave1_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (memslave1_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (memslave1_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (memslave1_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (memslave1_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (memslave1_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (memslave1_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (memslave1_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (memslave1_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (memslave1_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (memslave1_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_017_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                       //                .channel
		.rf_sink_ready           (memslave1_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (memslave1_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (memslave1_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (memslave1_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (memslave1_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (memslave1_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (memslave1_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (memslave1_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (memslave1_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (memslave1_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),             //                .error
		.rdata_fifo_src_ready    (memslave1_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (memslave1_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (memslave1_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) memslave1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (CPUMaster_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (memslave1_s1_agent_rf_source_data),             //        in.data
		.in_valid          (memslave1_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (memslave1_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (memslave1_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (memslave1_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (memslave1_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (memslave1_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (memslave1_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (memslave1_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (memslave1_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	Embedded_mm_interconnect_0_router router (
		.sink_ready         (cpumaster_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpumaster_data_master_agent_cp_valid),         //          .valid
		.sink_data          (cpumaster_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpumaster_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpumaster_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                             //       src.ready
		.src_valid          (router_src_valid),                             //          .valid
		.src_data           (router_src_data),                              //          .data
		.src_channel        (router_src_channel),                           //          .channel
		.src_startofpacket  (router_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                        //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (cpuslave1_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpuslave1_data_master_agent_cp_valid),         //          .valid
		.sink_data          (cpuslave1_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpuslave1_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpuslave1_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_001_src_ready),                         //       src.ready
		.src_valid          (router_001_src_valid),                         //          .valid
		.src_data           (router_001_src_data),                          //          .data
		.src_channel        (router_001_src_channel),                       //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                    //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (cpuslave2_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpuslave2_data_master_agent_cp_valid),         //          .valid
		.sink_data          (cpuslave2_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpuslave2_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpuslave2_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_002_src_ready),                         //       src.ready
		.src_valid          (router_002_src_valid),                         //          .valid
		.src_data           (router_002_src_data),                          //          .data
		.src_channel        (router_002_src_channel),                       //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                    //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (cpuslave2_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpuslave2_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpuslave2_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpuslave2_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpuslave2_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_003_src_ready),                                //       src.ready
		.src_valid          (router_003_src_valid),                                //          .valid
		.src_data           (router_003_src_data),                                 //          .data
		.src_channel        (router_003_src_channel),                              //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                           //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (cpuslave1_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpuslave1_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpuslave1_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpuslave1_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpuslave1_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_004_src_ready),                                //       src.ready
		.src_valid          (router_004_src_valid),                                //          .valid
		.src_data           (router_004_src_data),                                 //          .data
		.src_channel        (router_004_src_channel),                              //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                           //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (cpumaster_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpumaster_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpumaster_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpumaster_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpumaster_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_005_src_ready),                                //       src.ready
		.src_valid          (router_005_src_valid),                                //          .valid
		.src_data           (router_005_src_data),                                 //          .data
		.src_channel        (router_005_src_channel),                              //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                           //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_valid),         //          .valid
		.sink_data          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_data),          //          .data
		.sink_startofpacket (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                     //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.src_ready          (router_006_src_ready),                                                              //       src.ready
		.src_valid          (router_006_src_valid),                                                              //          .valid
		.src_data           (router_006_src_data),                                                               //          .data
		.src_channel        (router_006_src_channel),                                                            //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                                      //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                                         //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_007 router_007 (
		.sink_ready         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                      //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.src_ready          (router_007_src_ready),                                                               //       src.ready
		.src_valid          (router_007_src_valid),                                                               //          .valid
		.src_data           (router_007_src_data),                                                                //          .data
		.src_channel        (router_007_src_channel),                                                             //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                                       //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                                          //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (jtagmaster_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtagmaster_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtagmaster_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtagmaster_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtagmaster_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_008_src_ready),                                //       src.ready
		.src_valid          (router_008_src_valid),                                //          .valid
		.src_data           (router_008_src_data),                                 //          .data
		.src_channel        (router_008_src_channel),                              //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                           //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_009 router_009 (
		.sink_ready         (reg16_0_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (reg16_0_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (reg16_0_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (reg16_0_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (reg16_0_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_009_src_ready),                          //       src.ready
		.src_valid          (router_009_src_valid),                          //          .valid
		.src_data           (router_009_src_data),                           //          .data
		.src_channel        (router_009_src_channel),                        //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                     //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_010 router_010 (
		.sink_ready         (cpumaster_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (cpumaster_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (cpumaster_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (cpumaster_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpumaster_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_010_src_ready),                             //       src.ready
		.src_valid          (router_010_src_valid),                             //          .valid
		.src_data           (router_010_src_data),                              //          .data
		.src_channel        (router_010_src_channel),                           //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                        //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_010 router_011 (
		.sink_ready         (memmaster_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (memmaster_s1_agent_rp_valid),                 //          .valid
		.sink_data          (memmaster_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (memmaster_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (memmaster_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                        //       src.ready
		.src_valid          (router_011_src_valid),                        //          .valid
		.src_data           (router_011_src_data),                         //          .data
		.src_channel        (router_011_src_channel),                      //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                   //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_007 router_012 (
		.sink_ready         (mutex_0_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (mutex_0_s1_agent_rp_valid),                   //          .valid
		.sink_data          (mutex_0_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (mutex_0_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (mutex_0_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                        //       src.ready
		.src_valid          (router_012_src_valid),                        //          .valid
		.src_data           (router_012_src_data),                         //          .data
		.src_channel        (router_012_src_channel),                      //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                   //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_007 router_013 (
		.sink_ready         (ledgslave1_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (ledgslave1_s1_agent_rp_valid),                //          .valid
		.sink_data          (ledgslave1_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (ledgslave1_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (ledgslave1_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                        //       src.ready
		.src_valid          (router_013_src_valid),                        //          .valid
		.src_data           (router_013_src_data),                         //          .data
		.src_channel        (router_013_src_channel),                      //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                   //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_007 router_014 (
		.sink_ready         (ledrslave2_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (ledrslave2_s1_agent_rp_valid),                //          .valid
		.sink_data          (ledrslave2_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (ledrslave2_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (ledrslave2_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                        //       src.ready
		.src_valid          (router_014_src_valid),                        //          .valid
		.src_data           (router_014_src_data),                         //          .data
		.src_channel        (router_014_src_channel),                      //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                   //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_007 router_015 (
		.sink_ready         (uart_0_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (uart_0_s1_agent_rp_valid),                    //          .valid
		.sink_data          (uart_0_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (uart_0_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (uart_0_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                        //       src.ready
		.src_valid          (router_015_src_valid),                        //          .valid
		.src_data           (router_015_src_data),                         //          .data
		.src_channel        (router_015_src_channel),                      //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                   //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_016 router_016 (
		.sink_ready         (jtagslave2_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtagslave2_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtagslave2_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtagslave2_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtagslave2_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_016_src_ready),                                //       src.ready
		.src_valid          (router_016_src_valid),                                //          .valid
		.src_data           (router_016_src_data),                                 //          .data
		.src_channel        (router_016_src_channel),                              //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                           //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_017 router_017 (
		.sink_ready         (cpuslave2_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (cpuslave2_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (cpuslave2_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (cpuslave2_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpuslave2_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_017_src_ready),                             //       src.ready
		.src_valid          (router_017_src_valid),                             //          .valid
		.src_data           (router_017_src_data),                              //          .data
		.src_channel        (router_017_src_channel),                           //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                        //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_017 router_018 (
		.sink_ready         (memslave2_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (memslave2_s1_agent_rp_valid),                 //          .valid
		.sink_data          (memslave2_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (memslave2_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (memslave2_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                        //       src.ready
		.src_valid          (router_018_src_valid),                        //          .valid
		.src_data           (router_018_src_data),                         //          .data
		.src_channel        (router_018_src_channel),                      //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                   //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_016 router_019 (
		.sink_ready         (pioslave2_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (pioslave2_s1_agent_rp_valid),                 //          .valid
		.sink_data          (pioslave2_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (pioslave2_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (pioslave2_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                        //       src.ready
		.src_valid          (router_019_src_valid),                        //          .valid
		.src_data           (router_019_src_data),                         //          .data
		.src_channel        (router_019_src_channel),                      //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                   //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_020 router_020 (
		.sink_ready         (jtagslave1_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtagslave1_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtagslave1_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtagslave1_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtagslave1_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_020_src_ready),                                //       src.ready
		.src_valid          (router_020_src_valid),                                //          .valid
		.src_data           (router_020_src_data),                                 //          .data
		.src_channel        (router_020_src_channel),                              //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                           //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_021 router_021 (
		.sink_ready         (cpuslave1_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (cpuslave1_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (cpuslave1_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (cpuslave1_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpuslave1_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_021_src_ready),                             //       src.ready
		.src_valid          (router_021_src_valid),                             //          .valid
		.src_data           (router_021_src_data),                              //          .data
		.src_channel        (router_021_src_channel),                           //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                        //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_020 router_022 (
		.sink_ready         (pioslave1_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (pioslave1_s1_agent_rp_valid),                 //          .valid
		.sink_data          (pioslave1_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (pioslave1_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (pioslave1_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                        //       src.ready
		.src_valid          (router_022_src_valid),                        //          .valid
		.src_data           (router_022_src_data),                         //          .data
		.src_channel        (router_022_src_channel),                      //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                   //          .endofpacket
	);

	Embedded_mm_interconnect_0_router_021 router_023 (
		.sink_ready         (memslave1_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (memslave1_s1_agent_rp_valid),                 //          .valid
		.sink_data          (memslave1_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (memslave1_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (memslave1_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                        //       src.ready
		.src_valid          (router_023_src_valid),                        //          .valid
		.src_data           (router_023_src_data),                         //          .data
		.src_channel        (router_023_src_channel),                      //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                   //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (18),
		.VALID_WIDTH               (18),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpumaster_data_master_limiter (
		.clk                    (clk_0_clk_clk),                                       //       clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                    //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                    //          .valid
		.cmd_sink_data          (router_src_data),                                     //          .data
		.cmd_sink_channel       (router_src_channel),                                  //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                            //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                              //          .endofpacket
		.cmd_src_ready          (cpumaster_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpumaster_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpumaster_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpumaster_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpumaster_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                   //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                 //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                    //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                             //          .endofpacket
		.rsp_src_ready          (cpumaster_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpumaster_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpumaster_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpumaster_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpumaster_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpumaster_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpumaster_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (18),
		.VALID_WIDTH               (18),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpuslave1_data_master_limiter (
		.clk                    (clk_0_clk_clk),                                       //       clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                //          .valid
		.cmd_sink_data          (router_001_src_data),                                 //          .data
		.cmd_sink_channel       (router_001_src_channel),                              //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                        //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                          //          .endofpacket
		.cmd_src_ready          (cpuslave1_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpuslave1_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpuslave1_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpuslave1_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpuslave1_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                               //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                             //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                         //          .endofpacket
		.rsp_src_ready          (cpuslave1_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpuslave1_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpuslave1_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpuslave1_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpuslave1_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpuslave1_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpuslave1_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (18),
		.VALID_WIDTH               (18),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpuslave2_data_master_limiter (
		.clk                    (clk_0_clk_clk),                                       //       clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                //          .valid
		.cmd_sink_data          (router_002_src_data),                                 //          .data
		.cmd_sink_channel       (router_002_src_channel),                              //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                        //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                          //          .endofpacket
		.cmd_src_ready          (cpuslave2_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpuslave2_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpuslave2_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpuslave2_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpuslave2_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                               //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                             //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                         //          .endofpacket
		.rsp_src_ready          (cpuslave2_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpuslave2_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpuslave2_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpuslave2_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpuslave2_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpuslave2_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpuslave2_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (18),
		.VALID_WIDTH               (18),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpuslave2_instruction_master_limiter (
		.clk                    (clk_0_clk_clk),                                              //       clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                                       //  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                                       //          .valid
		.cmd_sink_data          (router_003_src_data),                                        //          .data
		.cmd_sink_channel       (router_003_src_channel),                                     //          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                               //          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                                 //          .endofpacket
		.cmd_src_ready          (cpuslave2_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpuslave2_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpuslave2_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpuslave2_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpuslave2_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_003_src_ready),                                      //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_003_src_valid),                                      //          .valid
		.rsp_sink_channel       (rsp_mux_003_src_channel),                                    //          .channel
		.rsp_sink_data          (rsp_mux_003_src_data),                                       //          .data
		.rsp_sink_startofpacket (rsp_mux_003_src_startofpacket),                              //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_003_src_endofpacket),                                //          .endofpacket
		.rsp_src_ready          (cpuslave2_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpuslave2_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpuslave2_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpuslave2_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpuslave2_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpuslave2_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpuslave2_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (18),
		.VALID_WIDTH               (18),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpuslave1_instruction_master_limiter (
		.clk                    (clk_0_clk_clk),                                              //       clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_004_src_ready),                                       //  cmd_sink.ready
		.cmd_sink_valid         (router_004_src_valid),                                       //          .valid
		.cmd_sink_data          (router_004_src_data),                                        //          .data
		.cmd_sink_channel       (router_004_src_channel),                                     //          .channel
		.cmd_sink_startofpacket (router_004_src_startofpacket),                               //          .startofpacket
		.cmd_sink_endofpacket   (router_004_src_endofpacket),                                 //          .endofpacket
		.cmd_src_ready          (cpuslave1_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpuslave1_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpuslave1_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpuslave1_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpuslave1_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_004_src_ready),                                      //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_004_src_valid),                                      //          .valid
		.rsp_sink_channel       (rsp_mux_004_src_channel),                                    //          .channel
		.rsp_sink_data          (rsp_mux_004_src_data),                                       //          .data
		.rsp_sink_startofpacket (rsp_mux_004_src_startofpacket),                              //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_004_src_endofpacket),                                //          .endofpacket
		.rsp_src_ready          (cpuslave1_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpuslave1_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpuslave1_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpuslave1_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpuslave1_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpuslave1_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpuslave1_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (18),
		.VALID_WIDTH               (18),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpumaster_instruction_master_limiter (
		.clk                    (clk_0_clk_clk),                                              //       clk.clk
		.reset                  (CPUMaster_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_005_src_ready),                                       //  cmd_sink.ready
		.cmd_sink_valid         (router_005_src_valid),                                       //          .valid
		.cmd_sink_data          (router_005_src_data),                                        //          .data
		.cmd_sink_channel       (router_005_src_channel),                                     //          .channel
		.cmd_sink_startofpacket (router_005_src_startofpacket),                               //          .startofpacket
		.cmd_sink_endofpacket   (router_005_src_endofpacket),                                 //          .endofpacket
		.cmd_src_ready          (cpumaster_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpumaster_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpumaster_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpumaster_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpumaster_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_005_src_ready),                                      //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_005_src_valid),                                      //          .valid
		.rsp_sink_channel       (rsp_mux_005_src_channel),                                    //          .channel
		.rsp_sink_data          (rsp_mux_005_src_data),                                       //          .data
		.rsp_sink_startofpacket (rsp_mux_005_src_startofpacket),                              //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_005_src_endofpacket),                                //          .endofpacket
		.rsp_src_ready          (cpumaster_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpumaster_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpumaster_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpumaster_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpumaster_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpumaster_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpumaster_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (34),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (54),
		.PKT_BYTE_CNT_H            (43),
		.PKT_BYTE_CNT_L            (41),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (49),
		.PKT_BURST_SIZE_L          (47),
		.PKT_BURST_TYPE_H          (51),
		.PKT_BURST_TYPE_L          (50),
		.PKT_BURSTWRAP_H           (46),
		.PKT_BURSTWRAP_L           (44),
		.PKT_TRANS_COMPRESSED_READ (35),
		.PKT_TRANS_WRITE           (37),
		.PKT_TRANS_READ            (38),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (79),
		.ST_CHANNEL_W              (18),
		.OUT_BYTE_CNT_H            (41),
		.OUT_BURSTWRAP_H           (46),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                                                  //       cr0.clk
		.reset                 (CPUMaster_reset_reset_bridge_in_reset_reset),                                                    // cr0_reset.reset
		.sink0_valid           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (63),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (50),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_BURST_TYPE_H          (60),
		.PKT_BURST_TYPE_L          (59),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (53),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (88),
		.ST_CHANNEL_W              (18),
		.OUT_BYTE_CNT_H            (51),
		.OUT_BURSTWRAP_H           (55),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) reg16_0_avalon_slave_0_burst_adapter (
		.clk                   (clk_0_clk_clk),                                              //       cr0.clk
		.reset                 (CPUMaster_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.sink0_valid           (reg16_0_avalon_slave_0_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (reg16_0_avalon_slave_0_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (reg16_0_avalon_slave_0_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (reg16_0_avalon_slave_0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (reg16_0_avalon_slave_0_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (reg16_0_avalon_slave_0_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (reg16_0_avalon_slave_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (reg16_0_avalon_slave_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (reg16_0_avalon_slave_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (reg16_0_avalon_slave_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (reg16_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (reg16_0_avalon_slave_0_burst_adapter_source0_ready)          //          .ready
	);

	Embedded_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                       //        clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready         (cpumaster_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (cpumaster_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (cpumaster_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (cpumaster_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (cpumaster_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (cpumaster_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                //           .valid
		.src0_data          (cmd_demux_src0_data),                                 //           .data
		.src0_channel       (cmd_demux_src0_channel),                              //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                        //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                          //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                //           .valid
		.src1_data          (cmd_demux_src1_data),                                 //           .data
		.src1_channel       (cmd_demux_src1_channel),                              //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                        //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                          //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                //           .valid
		.src2_data          (cmd_demux_src2_data),                                 //           .data
		.src2_channel       (cmd_demux_src2_channel),                              //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                        //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                          //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                //           .valid
		.src3_data          (cmd_demux_src3_data),                                 //           .data
		.src3_channel       (cmd_demux_src3_channel),                              //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                        //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                          //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                //           .valid
		.src4_data          (cmd_demux_src4_data),                                 //           .data
		.src4_channel       (cmd_demux_src4_channel),                              //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                        //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                          //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                //           .valid
		.src5_data          (cmd_demux_src5_data),                                 //           .data
		.src5_channel       (cmd_demux_src5_channel),                              //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                        //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                          //           .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                                //       src6.ready
		.src6_valid         (cmd_demux_src6_valid),                                //           .valid
		.src6_data          (cmd_demux_src6_data),                                 //           .data
		.src6_channel       (cmd_demux_src6_channel),                              //           .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                        //           .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                          //           .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                                //       src7.ready
		.src7_valid         (cmd_demux_src7_valid),                                //           .valid
		.src7_data          (cmd_demux_src7_data),                                 //           .data
		.src7_channel       (cmd_demux_src7_channel),                              //           .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                        //           .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket),                          //           .endofpacket
		.src8_ready         (cmd_demux_src8_ready),                                //       src8.ready
		.src8_valid         (cmd_demux_src8_valid),                                //           .valid
		.src8_data          (cmd_demux_src8_data),                                 //           .data
		.src8_channel       (cmd_demux_src8_channel),                              //           .channel
		.src8_startofpacket (cmd_demux_src8_startofpacket),                        //           .startofpacket
		.src8_endofpacket   (cmd_demux_src8_endofpacket),                          //           .endofpacket
		.src9_ready         (cmd_demux_src9_ready),                                //       src9.ready
		.src9_valid         (cmd_demux_src9_valid),                                //           .valid
		.src9_data          (cmd_demux_src9_data),                                 //           .data
		.src9_channel       (cmd_demux_src9_channel),                              //           .channel
		.src9_startofpacket (cmd_demux_src9_startofpacket),                        //           .startofpacket
		.src9_endofpacket   (cmd_demux_src9_endofpacket)                           //           .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                 (clk_0_clk_clk),                                       //        clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready          (cpuslave1_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (cpuslave1_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (cpuslave1_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (cpuslave1_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (cpuslave1_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (cpuslave1_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                            //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                            //           .valid
		.src0_data           (cmd_demux_001_src0_data),                             //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                          //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),                    //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                      //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                            //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                            //           .valid
		.src1_data           (cmd_demux_001_src1_data),                             //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                          //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),                    //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                      //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                            //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                            //           .valid
		.src2_data           (cmd_demux_001_src2_data),                             //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                          //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),                    //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                      //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                            //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                            //           .valid
		.src3_data           (cmd_demux_001_src3_data),                             //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                          //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),                    //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                      //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                            //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                            //           .valid
		.src4_data           (cmd_demux_001_src4_data),                             //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                          //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),                    //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                      //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                            //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                            //           .valid
		.src5_data           (cmd_demux_001_src5_data),                             //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                          //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),                    //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                      //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                            //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                            //           .valid
		.src6_data           (cmd_demux_001_src6_data),                             //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                          //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),                    //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                      //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                            //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                            //           .valid
		.src7_data           (cmd_demux_001_src7_data),                             //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                          //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),                    //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                      //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                            //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                            //           .valid
		.src8_data           (cmd_demux_001_src8_data),                             //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                          //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),                    //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                      //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                            //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                            //           .valid
		.src9_data           (cmd_demux_001_src9_data),                             //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                          //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),                    //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                      //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                           //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                           //           .valid
		.src10_data          (cmd_demux_001_src10_data),                            //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                         //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),                   //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket)                      //           .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_demux_001 cmd_demux_002 (
		.clk                 (clk_0_clk_clk),                                       //        clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready          (cpuslave2_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (cpuslave2_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (cpuslave2_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (cpuslave2_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (cpuslave2_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (cpuslave2_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_002_src0_ready),                            //       src0.ready
		.src0_valid          (cmd_demux_002_src0_valid),                            //           .valid
		.src0_data           (cmd_demux_002_src0_data),                             //           .data
		.src0_channel        (cmd_demux_002_src0_channel),                          //           .channel
		.src0_startofpacket  (cmd_demux_002_src0_startofpacket),                    //           .startofpacket
		.src0_endofpacket    (cmd_demux_002_src0_endofpacket),                      //           .endofpacket
		.src1_ready          (cmd_demux_002_src1_ready),                            //       src1.ready
		.src1_valid          (cmd_demux_002_src1_valid),                            //           .valid
		.src1_data           (cmd_demux_002_src1_data),                             //           .data
		.src1_channel        (cmd_demux_002_src1_channel),                          //           .channel
		.src1_startofpacket  (cmd_demux_002_src1_startofpacket),                    //           .startofpacket
		.src1_endofpacket    (cmd_demux_002_src1_endofpacket),                      //           .endofpacket
		.src2_ready          (cmd_demux_002_src2_ready),                            //       src2.ready
		.src2_valid          (cmd_demux_002_src2_valid),                            //           .valid
		.src2_data           (cmd_demux_002_src2_data),                             //           .data
		.src2_channel        (cmd_demux_002_src2_channel),                          //           .channel
		.src2_startofpacket  (cmd_demux_002_src2_startofpacket),                    //           .startofpacket
		.src2_endofpacket    (cmd_demux_002_src2_endofpacket),                      //           .endofpacket
		.src3_ready          (cmd_demux_002_src3_ready),                            //       src3.ready
		.src3_valid          (cmd_demux_002_src3_valid),                            //           .valid
		.src3_data           (cmd_demux_002_src3_data),                             //           .data
		.src3_channel        (cmd_demux_002_src3_channel),                          //           .channel
		.src3_startofpacket  (cmd_demux_002_src3_startofpacket),                    //           .startofpacket
		.src3_endofpacket    (cmd_demux_002_src3_endofpacket),                      //           .endofpacket
		.src4_ready          (cmd_demux_002_src4_ready),                            //       src4.ready
		.src4_valid          (cmd_demux_002_src4_valid),                            //           .valid
		.src4_data           (cmd_demux_002_src4_data),                             //           .data
		.src4_channel        (cmd_demux_002_src4_channel),                          //           .channel
		.src4_startofpacket  (cmd_demux_002_src4_startofpacket),                    //           .startofpacket
		.src4_endofpacket    (cmd_demux_002_src4_endofpacket),                      //           .endofpacket
		.src5_ready          (cmd_demux_002_src5_ready),                            //       src5.ready
		.src5_valid          (cmd_demux_002_src5_valid),                            //           .valid
		.src5_data           (cmd_demux_002_src5_data),                             //           .data
		.src5_channel        (cmd_demux_002_src5_channel),                          //           .channel
		.src5_startofpacket  (cmd_demux_002_src5_startofpacket),                    //           .startofpacket
		.src5_endofpacket    (cmd_demux_002_src5_endofpacket),                      //           .endofpacket
		.src6_ready          (cmd_demux_002_src6_ready),                            //       src6.ready
		.src6_valid          (cmd_demux_002_src6_valid),                            //           .valid
		.src6_data           (cmd_demux_002_src6_data),                             //           .data
		.src6_channel        (cmd_demux_002_src6_channel),                          //           .channel
		.src6_startofpacket  (cmd_demux_002_src6_startofpacket),                    //           .startofpacket
		.src6_endofpacket    (cmd_demux_002_src6_endofpacket),                      //           .endofpacket
		.src7_ready          (cmd_demux_002_src7_ready),                            //       src7.ready
		.src7_valid          (cmd_demux_002_src7_valid),                            //           .valid
		.src7_data           (cmd_demux_002_src7_data),                             //           .data
		.src7_channel        (cmd_demux_002_src7_channel),                          //           .channel
		.src7_startofpacket  (cmd_demux_002_src7_startofpacket),                    //           .startofpacket
		.src7_endofpacket    (cmd_demux_002_src7_endofpacket),                      //           .endofpacket
		.src8_ready          (cmd_demux_002_src8_ready),                            //       src8.ready
		.src8_valid          (cmd_demux_002_src8_valid),                            //           .valid
		.src8_data           (cmd_demux_002_src8_data),                             //           .data
		.src8_channel        (cmd_demux_002_src8_channel),                          //           .channel
		.src8_startofpacket  (cmd_demux_002_src8_startofpacket),                    //           .startofpacket
		.src8_endofpacket    (cmd_demux_002_src8_endofpacket),                      //           .endofpacket
		.src9_ready          (cmd_demux_002_src9_ready),                            //       src9.ready
		.src9_valid          (cmd_demux_002_src9_valid),                            //           .valid
		.src9_data           (cmd_demux_002_src9_data),                             //           .data
		.src9_channel        (cmd_demux_002_src9_channel),                          //           .channel
		.src9_startofpacket  (cmd_demux_002_src9_startofpacket),                    //           .startofpacket
		.src9_endofpacket    (cmd_demux_002_src9_endofpacket),                      //           .endofpacket
		.src10_ready         (cmd_demux_002_src10_ready),                           //      src10.ready
		.src10_valid         (cmd_demux_002_src10_valid),                           //           .valid
		.src10_data          (cmd_demux_002_src10_data),                            //           .data
		.src10_channel       (cmd_demux_002_src10_channel),                         //           .channel
		.src10_startofpacket (cmd_demux_002_src10_startofpacket),                   //           .startofpacket
		.src10_endofpacket   (cmd_demux_002_src10_endofpacket)                      //           .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_demux_003 cmd_demux_003 (
		.clk                (clk_0_clk_clk),                                              //        clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (cpuslave2_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (cpuslave2_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (cpuslave2_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (cpuslave2_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (cpuslave2_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (cpuslave2_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_003_src0_ready),                                   //       src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                                   //           .valid
		.src0_data          (cmd_demux_003_src0_data),                                    //           .data
		.src0_channel       (cmd_demux_003_src0_channel),                                 //           .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                           //           .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),                             //           .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                                   //       src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                                   //           .valid
		.src1_data          (cmd_demux_003_src1_data),                                    //           .data
		.src1_channel       (cmd_demux_003_src1_channel),                                 //           .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),                           //           .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket)                              //           .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_demux_003 cmd_demux_004 (
		.clk                (clk_0_clk_clk),                                              //        clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (cpuslave1_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (cpuslave1_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (cpuslave1_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (cpuslave1_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (cpuslave1_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (cpuslave1_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_004_src0_ready),                                   //       src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                                   //           .valid
		.src0_data          (cmd_demux_004_src0_data),                                    //           .data
		.src0_channel       (cmd_demux_004_src0_channel),                                 //           .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),                           //           .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket),                             //           .endofpacket
		.src1_ready         (cmd_demux_004_src1_ready),                                   //       src1.ready
		.src1_valid         (cmd_demux_004_src1_valid),                                   //           .valid
		.src1_data          (cmd_demux_004_src1_data),                                    //           .data
		.src1_channel       (cmd_demux_004_src1_channel),                                 //           .channel
		.src1_startofpacket (cmd_demux_004_src1_startofpacket),                           //           .startofpacket
		.src1_endofpacket   (cmd_demux_004_src1_endofpacket)                              //           .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_demux_003 cmd_demux_005 (
		.clk                (clk_0_clk_clk),                                              //        clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (cpumaster_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (cpumaster_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (cpumaster_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (cpumaster_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (cpumaster_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (cpumaster_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_005_src0_ready),                                   //       src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                                   //           .valid
		.src0_data          (cmd_demux_005_src0_data),                                    //           .data
		.src0_channel       (cmd_demux_005_src0_channel),                                 //           .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),                           //           .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket),                             //           .endofpacket
		.src1_ready         (cmd_demux_005_src1_ready),                                   //       src1.ready
		.src1_valid         (cmd_demux_005_src1_valid),                                   //           .valid
		.src1_data          (cmd_demux_005_src1_data),                                    //           .data
		.src1_channel       (cmd_demux_005_src1_channel),                                 //           .channel
		.src1_startofpacket (cmd_demux_005_src1_startofpacket),                           //           .startofpacket
		.src1_endofpacket   (cmd_demux_005_src1_endofpacket)                              //           .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_src_valid),                           //          .valid
		.src_data            (cmd_mux_src_data),                            //          .data
		.src_channel         (cmd_mux_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                      //          .channel
		.sink0_data          (cmd_demux_src0_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),              //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                    //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                    //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                  //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                     //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),            //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                       //          .valid
		.src_data            (cmd_mux_001_src_data),                        //          .data
		.src_channel         (cmd_mux_001_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                      //          .channel
		.sink0_data          (cmd_demux_src1_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket),              //          .endofpacket
		.sink2_ready         (cmd_demux_002_src1_ready),                    //     sink2.ready
		.sink2_valid         (cmd_demux_002_src1_valid),                    //          .valid
		.sink2_channel       (cmd_demux_002_src1_channel),                  //          .channel
		.sink2_data          (cmd_demux_002_src1_data),                     //          .data
		.sink2_startofpacket (cmd_demux_002_src1_startofpacket),            //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src1_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                       //          .valid
		.src_data            (cmd_mux_002_src_data),                        //          .data
		.src_channel         (cmd_mux_002_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                      //          .channel
		.sink0_data          (cmd_demux_src2_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                   //          .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                       //          .valid
		.src_data            (cmd_mux_003_src_data),                        //          .data
		.src_channel         (cmd_mux_003_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                      //          .channel
		.sink0_data          (cmd_demux_src3_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket),              //          .endofpacket
		.sink2_ready         (cmd_demux_002_src2_ready),                    //     sink2.ready
		.sink2_valid         (cmd_demux_002_src2_valid),                    //          .valid
		.sink2_channel       (cmd_demux_002_src2_channel),                  //          .channel
		.sink2_data          (cmd_demux_002_src2_data),                     //          .data
		.sink2_startofpacket (cmd_demux_002_src2_startofpacket),            //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src2_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_mux_004 cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                       //          .valid
		.src_data            (cmd_mux_004_src_data),                        //          .data
		.src_channel         (cmd_mux_004_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                      //          .channel
		.sink0_data          (cmd_demux_src4_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_005_src0_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_005_src0_valid),                    //          .valid
		.sink1_channel       (cmd_demux_005_src0_channel),                  //          .channel
		.sink1_data          (cmd_demux_005_src0_data),                     //          .data
		.sink1_startofpacket (cmd_demux_005_src0_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_005_src0_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_mux_004 cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                       //          .valid
		.src_data            (cmd_mux_005_src_data),                        //          .data
		.src_channel         (cmd_mux_005_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                      //          .channel
		.sink0_data          (cmd_demux_src5_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_005_src1_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_005_src1_valid),                    //          .valid
		.sink1_channel       (cmd_demux_005_src1_channel),                  //          .channel
		.sink1_data          (cmd_demux_005_src1_data),                     //          .data
		.sink1_startofpacket (cmd_demux_005_src1_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_005_src1_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                       //          .valid
		.src_data            (cmd_mux_006_src_data),                        //          .data
		.src_channel         (cmd_mux_006_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                      //          .channel
		.sink0_data          (cmd_demux_src6_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket),              //          .endofpacket
		.sink2_ready         (cmd_demux_002_src3_ready),                    //     sink2.ready
		.sink2_valid         (cmd_demux_002_src3_valid),                    //          .valid
		.sink2_channel       (cmd_demux_002_src3_channel),                  //          .channel
		.sink2_data          (cmd_demux_002_src3_data),                     //          .data
		.sink2_startofpacket (cmd_demux_002_src3_startofpacket),            //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src3_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                       //          .valid
		.src_data            (cmd_mux_007_src_data),                        //          .data
		.src_channel         (cmd_mux_007_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                      //          .channel
		.sink0_data          (cmd_demux_src7_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket),              //          .endofpacket
		.sink2_ready         (cmd_demux_002_src4_ready),                    //     sink2.ready
		.sink2_valid         (cmd_demux_002_src4_valid),                    //          .valid
		.sink2_channel       (cmd_demux_002_src4_channel),                  //          .channel
		.sink2_data          (cmd_demux_002_src4_data),                     //          .data
		.sink2_startofpacket (cmd_demux_002_src4_startofpacket),            //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src4_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                       //          .valid
		.src_data            (cmd_mux_008_src_data),                        //          .data
		.src_channel         (cmd_mux_008_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                      //          .channel
		.sink0_data          (cmd_demux_src8_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket),              //          .endofpacket
		.sink2_ready         (cmd_demux_002_src5_ready),                    //     sink2.ready
		.sink2_valid         (cmd_demux_002_src5_valid),                    //          .valid
		.sink2_channel       (cmd_demux_002_src5_channel),                  //          .channel
		.sink2_data          (cmd_demux_002_src5_data),                     //          .data
		.sink2_startofpacket (cmd_demux_002_src5_startofpacket),            //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src5_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                       //          .valid
		.src_data            (cmd_mux_009_src_data),                        //          .data
		.src_channel         (cmd_mux_009_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                      //          .channel
		.sink0_data          (cmd_demux_src9_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket),              //          .endofpacket
		.sink2_ready         (cmd_demux_002_src6_ready),                    //     sink2.ready
		.sink2_valid         (cmd_demux_002_src6_valid),                    //          .valid
		.sink2_channel       (cmd_demux_002_src6_channel),                  //          .channel
		.sink2_data          (cmd_demux_002_src6_data),                     //          .data
		.sink2_startofpacket (cmd_demux_002_src6_startofpacket),            //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src6_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_mux_002 cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                       //          .valid
		.src_data            (cmd_mux_010_src_data),                        //          .data
		.src_channel         (cmd_mux_010_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_002_src7_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_002_src7_valid),                    //          .valid
		.sink0_channel       (cmd_demux_002_src7_channel),                  //          .channel
		.sink0_data          (cmd_demux_002_src7_data),                     //          .data
		.sink0_startofpacket (cmd_demux_002_src7_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src7_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_mux_004 cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                       //          .valid
		.src_data            (cmd_mux_011_src_data),                        //          .data
		.src_channel         (cmd_mux_011_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_002_src8_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_002_src8_valid),                    //          .valid
		.sink0_channel       (cmd_demux_002_src8_channel),                  //          .channel
		.sink0_data          (cmd_demux_002_src8_data),                     //          .data
		.sink0_startofpacket (cmd_demux_002_src8_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src8_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_003_src0_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_003_src0_valid),                    //          .valid
		.sink1_channel       (cmd_demux_003_src0_channel),                  //          .channel
		.sink1_data          (cmd_demux_003_src0_data),                     //          .data
		.sink1_startofpacket (cmd_demux_003_src0_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src0_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_mux_004 cmd_mux_012 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                       //          .valid
		.src_data            (cmd_mux_012_src_data),                        //          .data
		.src_channel         (cmd_mux_012_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_002_src9_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_002_src9_valid),                    //          .valid
		.sink0_channel       (cmd_demux_002_src9_channel),                  //          .channel
		.sink0_data          (cmd_demux_002_src9_data),                     //          .data
		.sink0_startofpacket (cmd_demux_002_src9_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src9_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_003_src1_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_003_src1_valid),                    //          .valid
		.sink1_channel       (cmd_demux_003_src1_channel),                  //          .channel
		.sink1_data          (cmd_demux_003_src1_data),                     //          .data
		.sink1_startofpacket (cmd_demux_003_src1_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src1_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_mux_002 cmd_mux_013 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                       //          .valid
		.src_data            (cmd_mux_013_src_data),                        //          .data
		.src_channel         (cmd_mux_013_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_002_src10_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_002_src10_valid),                   //          .valid
		.sink0_channel       (cmd_demux_002_src10_channel),                 //          .channel
		.sink0_data          (cmd_demux_002_src10_data),                    //          .data
		.sink0_startofpacket (cmd_demux_002_src10_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src10_endofpacket)              //          .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_mux_002 cmd_mux_014 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                       //          .valid
		.src_data            (cmd_mux_014_src_data),                        //          .data
		.src_channel         (cmd_mux_014_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_001_src7_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_001_src7_valid),                    //          .valid
		.sink0_channel       (cmd_demux_001_src7_channel),                  //          .channel
		.sink0_data          (cmd_demux_001_src7_data),                     //          .data
		.sink0_startofpacket (cmd_demux_001_src7_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src7_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_mux_004 cmd_mux_015 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                       //          .valid
		.src_data            (cmd_mux_015_src_data),                        //          .data
		.src_channel         (cmd_mux_015_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_001_src8_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_001_src8_valid),                    //          .valid
		.sink0_channel       (cmd_demux_001_src8_channel),                  //          .channel
		.sink0_data          (cmd_demux_001_src8_data),                     //          .data
		.sink0_startofpacket (cmd_demux_001_src8_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src8_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_004_src0_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_004_src0_valid),                    //          .valid
		.sink1_channel       (cmd_demux_004_src0_channel),                  //          .channel
		.sink1_data          (cmd_demux_004_src0_data),                     //          .data
		.sink1_startofpacket (cmd_demux_004_src0_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_004_src0_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_mux_002 cmd_mux_016 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                       //          .valid
		.src_data            (cmd_mux_016_src_data),                        //          .data
		.src_channel         (cmd_mux_016_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_001_src9_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_001_src9_valid),                    //          .valid
		.sink0_channel       (cmd_demux_001_src9_channel),                  //          .channel
		.sink0_data          (cmd_demux_001_src9_data),                     //          .data
		.sink0_startofpacket (cmd_demux_001_src9_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src9_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_cmd_mux_004 cmd_mux_017 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                       //          .valid
		.src_data            (cmd_mux_017_src_data),                        //          .data
		.src_channel         (cmd_mux_017_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_001_src10_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src10_valid),                   //          .valid
		.sink0_channel       (cmd_demux_001_src10_channel),                 //          .channel
		.sink0_data          (cmd_demux_001_src10_data),                    //          .data
		.sink0_startofpacket (cmd_demux_001_src10_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src10_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_004_src1_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_004_src1_valid),                    //          .valid
		.sink1_channel       (cmd_demux_004_src1_channel),                  //          .channel
		.sink1_data          (cmd_demux_004_src1_data),                     //          .data
		.sink1_startofpacket (cmd_demux_004_src1_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_004_src1_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                                                                  //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset),                                                    // clk_reset.reset
		.sink_ready         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                                           //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                                           //          .valid
		.src0_data          (rsp_demux_src0_data),                                                                            //          .data
		.src0_channel       (rsp_demux_src0_channel),                                                                         //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                                                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                                                     //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                                                           //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                                                           //          .valid
		.src1_data          (rsp_demux_src1_data),                                                                            //          .data
		.src1_channel       (rsp_demux_src1_channel),                                                                         //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                                                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                                                                     //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                                                           //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                                                           //          .valid
		.src2_data          (rsp_demux_src2_data),                                                                            //          .data
		.src2_channel       (rsp_demux_src2_channel),                                                                         //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                                                                   //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                                                                      //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                        //      sink.ready
		.sink_channel       (router_007_src_channel),                      //          .channel
		.sink_data          (router_007_src_data),                         //          .data
		.sink_startofpacket (router_007_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_007_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_001_src0_data),                     //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_001_src1_data),                     //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),              //          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),                    //      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),                    //          .valid
		.src2_data          (rsp_demux_001_src2_data),                     //          .data
		.src2_channel       (rsp_demux_001_src2_channel),                  //          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),            //          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_demux_002 rsp_demux_002 (
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                        //      sink.ready
		.sink_channel       (router_008_src_channel),                      //          .channel
		.sink_data          (router_008_src_data),                         //          .data
		.sink_startofpacket (router_008_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_008_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_002_src0_data),                     //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.sink_ready         (reg16_0_avalon_slave_0_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (reg16_0_avalon_slave_0_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (reg16_0_avalon_slave_0_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (reg16_0_avalon_slave_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (reg16_0_avalon_slave_0_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (reg16_0_avalon_slave_0_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                             //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                                   //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                                   //          .valid
		.src1_data          (rsp_demux_003_src1_data),                                    //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                                 //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                           //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket),                             //          .endofpacket
		.src2_ready         (rsp_demux_003_src2_ready),                                   //      src2.ready
		.src2_valid         (rsp_demux_003_src2_valid),                                   //          .valid
		.src2_data          (rsp_demux_003_src2_data),                                    //          .data
		.src2_channel       (rsp_demux_003_src2_channel),                                 //          .channel
		.src2_startofpacket (rsp_demux_003_src2_startofpacket),                           //          .startofpacket
		.src2_endofpacket   (rsp_demux_003_src2_endofpacket)                              //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_demux_004 rsp_demux_004 (
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                        //      sink.ready
		.sink_channel       (router_010_src_channel),                      //          .channel
		.sink_data          (router_010_src_data),                         //          .data
		.sink_startofpacket (router_010_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_010_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_004_src0_data),                     //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_004_src1_data),                     //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_demux_004 rsp_demux_005 (
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                        //      sink.ready
		.sink_channel       (router_011_src_channel),                      //          .channel
		.sink_data          (router_011_src_data),                         //          .data
		.sink_startofpacket (router_011_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_011_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_005_src0_data),                     //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_005_src1_data),                     //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                        //      sink.ready
		.sink_channel       (router_012_src_channel),                      //          .channel
		.sink_data          (router_012_src_data),                         //          .data
		.sink_startofpacket (router_012_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_012_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_006_src0_data),                     //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_006_src1_data),                     //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket),              //          .endofpacket
		.src2_ready         (rsp_demux_006_src2_ready),                    //      src2.ready
		.src2_valid         (rsp_demux_006_src2_valid),                    //          .valid
		.src2_data          (rsp_demux_006_src2_data),                     //          .data
		.src2_channel       (rsp_demux_006_src2_channel),                  //          .channel
		.src2_startofpacket (rsp_demux_006_src2_startofpacket),            //          .startofpacket
		.src2_endofpacket   (rsp_demux_006_src2_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                        //      sink.ready
		.sink_channel       (router_013_src_channel),                      //          .channel
		.sink_data          (router_013_src_data),                         //          .data
		.sink_startofpacket (router_013_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_013_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_007_src0_data),                     //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_007_src1_data),                     //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket),              //          .endofpacket
		.src2_ready         (rsp_demux_007_src2_ready),                    //      src2.ready
		.src2_valid         (rsp_demux_007_src2_valid),                    //          .valid
		.src2_data          (rsp_demux_007_src2_data),                     //          .data
		.src2_channel       (rsp_demux_007_src2_channel),                  //          .channel
		.src2_startofpacket (rsp_demux_007_src2_startofpacket),            //          .startofpacket
		.src2_endofpacket   (rsp_demux_007_src2_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                        //      sink.ready
		.sink_channel       (router_014_src_channel),                      //          .channel
		.sink_data          (router_014_src_data),                         //          .data
		.sink_startofpacket (router_014_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_014_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_008_src0_data),                     //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_008_src1_data),                     //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket),              //          .endofpacket
		.src2_ready         (rsp_demux_008_src2_ready),                    //      src2.ready
		.src2_valid         (rsp_demux_008_src2_valid),                    //          .valid
		.src2_data          (rsp_demux_008_src2_data),                     //          .data
		.src2_channel       (rsp_demux_008_src2_channel),                  //          .channel
		.src2_startofpacket (rsp_demux_008_src2_startofpacket),            //          .startofpacket
		.src2_endofpacket   (rsp_demux_008_src2_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                        //      sink.ready
		.sink_channel       (router_015_src_channel),                      //          .channel
		.sink_data          (router_015_src_data),                         //          .data
		.sink_startofpacket (router_015_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_015_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_009_src0_data),                     //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_009_src1_data),                     //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket),              //          .endofpacket
		.src2_ready         (rsp_demux_009_src2_ready),                    //      src2.ready
		.src2_valid         (rsp_demux_009_src2_valid),                    //          .valid
		.src2_data          (rsp_demux_009_src2_data),                     //          .data
		.src2_channel       (rsp_demux_009_src2_channel),                  //          .channel
		.src2_startofpacket (rsp_demux_009_src2_startofpacket),            //          .startofpacket
		.src2_endofpacket   (rsp_demux_009_src2_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_demux_002 rsp_demux_010 (
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                        //      sink.ready
		.sink_channel       (router_016_src_channel),                      //          .channel
		.sink_data          (router_016_src_data),                         //          .data
		.sink_startofpacket (router_016_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_016_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_010_src0_data),                     //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_demux_004 rsp_demux_011 (
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                        //      sink.ready
		.sink_channel       (router_017_src_channel),                      //          .channel
		.sink_data          (router_017_src_data),                         //          .data
		.sink_startofpacket (router_017_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_017_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_011_src0_data),                     //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_011_src1_data),                     //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_demux_004 rsp_demux_012 (
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                        //      sink.ready
		.sink_channel       (router_018_src_channel),                      //          .channel
		.sink_data          (router_018_src_data),                         //          .data
		.sink_startofpacket (router_018_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_018_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_012_src0_data),                     //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_012_src1_data),                     //          .data
		.src1_channel       (rsp_demux_012_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_demux_002 rsp_demux_013 (
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                        //      sink.ready
		.sink_channel       (router_019_src_channel),                      //          .channel
		.sink_data          (router_019_src_data),                         //          .data
		.sink_startofpacket (router_019_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_019_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_013_src0_data),                     //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_demux_002 rsp_demux_014 (
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                        //      sink.ready
		.sink_channel       (router_020_src_channel),                      //          .channel
		.sink_data          (router_020_src_data),                         //          .data
		.sink_startofpacket (router_020_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_020_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_014_src0_data),                     //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_demux_004 rsp_demux_015 (
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                        //      sink.ready
		.sink_channel       (router_021_src_channel),                      //          .channel
		.sink_data          (router_021_src_data),                         //          .data
		.sink_startofpacket (router_021_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_021_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_015_src0_data),                     //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_015_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_015_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_015_src1_data),                     //          .data
		.src1_channel       (rsp_demux_015_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_015_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_015_src1_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_demux_002 rsp_demux_016 (
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                        //      sink.ready
		.sink_channel       (router_022_src_channel),                      //          .channel
		.sink_data          (router_022_src_data),                         //          .data
		.sink_startofpacket (router_022_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_022_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_016_src0_data),                     //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_demux_004 rsp_demux_017 (
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                        //      sink.ready
		.sink_channel       (router_023_src_channel),                      //          .channel
		.sink_data          (router_023_src_data),                         //          .data
		.sink_startofpacket (router_023_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_023_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_017_src0_data),                     //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_017_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_017_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_017_src1_data),                     //          .data
		.src1_channel       (rsp_demux_017_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_017_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_017_src1_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                           //       src.ready
		.src_valid           (rsp_mux_src_valid),                           //          .valid
		.src_data            (rsp_mux_src_data),                            //          .data
		.src_channel         (rsp_mux_src_channel),                         //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                        //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                        //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                      //          .channel
		.sink0_data          (rsp_demux_src0_data),                         //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                  //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                    //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                    //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                  //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                     //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),              //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                    //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                    //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                  //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                     //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),            //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),              //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                    //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                    //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                  //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                     //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),            //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),              //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                    //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                    //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                  //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                     //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),            //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),              //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                    //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                    //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                  //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                     //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),            //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),              //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                    //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                    //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),                  //          .channel
		.sink6_data          (rsp_demux_006_src0_data),                     //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),            //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket),              //          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),                    //     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),                    //          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),                  //          .channel
		.sink7_data          (rsp_demux_007_src0_data),                     //          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),            //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket),              //          .endofpacket
		.sink8_ready         (rsp_demux_008_src0_ready),                    //     sink8.ready
		.sink8_valid         (rsp_demux_008_src0_valid),                    //          .valid
		.sink8_channel       (rsp_demux_008_src0_channel),                  //          .channel
		.sink8_data          (rsp_demux_008_src0_data),                     //          .data
		.sink8_startofpacket (rsp_demux_008_src0_startofpacket),            //          .startofpacket
		.sink8_endofpacket   (rsp_demux_008_src0_endofpacket),              //          .endofpacket
		.sink9_ready         (rsp_demux_009_src0_ready),                    //     sink9.ready
		.sink9_valid         (rsp_demux_009_src0_valid),                    //          .valid
		.sink9_channel       (rsp_demux_009_src0_channel),                  //          .channel
		.sink9_data          (rsp_demux_009_src0_data),                     //          .data
		.sink9_startofpacket (rsp_demux_009_src0_startofpacket),            //          .startofpacket
		.sink9_endofpacket   (rsp_demux_009_src0_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                  (clk_0_clk_clk),                               //       clk.clk
		.reset                (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                       //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                       //          .valid
		.src_data             (rsp_mux_001_src_data),                        //          .data
		.src_channel          (rsp_mux_001_src_channel),                     //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                 //          .endofpacket
		.sink0_ready          (rsp_demux_src1_ready),                        //     sink0.ready
		.sink0_valid          (rsp_demux_src1_valid),                        //          .valid
		.sink0_channel        (rsp_demux_src1_channel),                      //          .channel
		.sink0_data           (rsp_demux_src1_data),                         //          .data
		.sink0_startofpacket  (rsp_demux_src1_startofpacket),                //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src1_endofpacket),                  //          .endofpacket
		.sink1_ready          (rsp_demux_001_src1_ready),                    //     sink1.ready
		.sink1_valid          (rsp_demux_001_src1_valid),                    //          .valid
		.sink1_channel        (rsp_demux_001_src1_channel),                  //          .channel
		.sink1_data           (rsp_demux_001_src1_data),                     //          .data
		.sink1_startofpacket  (rsp_demux_001_src1_startofpacket),            //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src1_endofpacket),              //          .endofpacket
		.sink2_ready          (rsp_demux_003_src1_ready),                    //     sink2.ready
		.sink2_valid          (rsp_demux_003_src1_valid),                    //          .valid
		.sink2_channel        (rsp_demux_003_src1_channel),                  //          .channel
		.sink2_data           (rsp_demux_003_src1_data),                     //          .data
		.sink2_startofpacket  (rsp_demux_003_src1_startofpacket),            //          .startofpacket
		.sink2_endofpacket    (rsp_demux_003_src1_endofpacket),              //          .endofpacket
		.sink3_ready          (rsp_demux_006_src1_ready),                    //     sink3.ready
		.sink3_valid          (rsp_demux_006_src1_valid),                    //          .valid
		.sink3_channel        (rsp_demux_006_src1_channel),                  //          .channel
		.sink3_data           (rsp_demux_006_src1_data),                     //          .data
		.sink3_startofpacket  (rsp_demux_006_src1_startofpacket),            //          .startofpacket
		.sink3_endofpacket    (rsp_demux_006_src1_endofpacket),              //          .endofpacket
		.sink4_ready          (rsp_demux_007_src1_ready),                    //     sink4.ready
		.sink4_valid          (rsp_demux_007_src1_valid),                    //          .valid
		.sink4_channel        (rsp_demux_007_src1_channel),                  //          .channel
		.sink4_data           (rsp_demux_007_src1_data),                     //          .data
		.sink4_startofpacket  (rsp_demux_007_src1_startofpacket),            //          .startofpacket
		.sink4_endofpacket    (rsp_demux_007_src1_endofpacket),              //          .endofpacket
		.sink5_ready          (rsp_demux_008_src1_ready),                    //     sink5.ready
		.sink5_valid          (rsp_demux_008_src1_valid),                    //          .valid
		.sink5_channel        (rsp_demux_008_src1_channel),                  //          .channel
		.sink5_data           (rsp_demux_008_src1_data),                     //          .data
		.sink5_startofpacket  (rsp_demux_008_src1_startofpacket),            //          .startofpacket
		.sink5_endofpacket    (rsp_demux_008_src1_endofpacket),              //          .endofpacket
		.sink6_ready          (rsp_demux_009_src1_ready),                    //     sink6.ready
		.sink6_valid          (rsp_demux_009_src1_valid),                    //          .valid
		.sink6_channel        (rsp_demux_009_src1_channel),                  //          .channel
		.sink6_data           (rsp_demux_009_src1_data),                     //          .data
		.sink6_startofpacket  (rsp_demux_009_src1_startofpacket),            //          .startofpacket
		.sink6_endofpacket    (rsp_demux_009_src1_endofpacket),              //          .endofpacket
		.sink7_ready          (rsp_demux_014_src0_ready),                    //     sink7.ready
		.sink7_valid          (rsp_demux_014_src0_valid),                    //          .valid
		.sink7_channel        (rsp_demux_014_src0_channel),                  //          .channel
		.sink7_data           (rsp_demux_014_src0_data),                     //          .data
		.sink7_startofpacket  (rsp_demux_014_src0_startofpacket),            //          .startofpacket
		.sink7_endofpacket    (rsp_demux_014_src0_endofpacket),              //          .endofpacket
		.sink8_ready          (rsp_demux_015_src0_ready),                    //     sink8.ready
		.sink8_valid          (rsp_demux_015_src0_valid),                    //          .valid
		.sink8_channel        (rsp_demux_015_src0_channel),                  //          .channel
		.sink8_data           (rsp_demux_015_src0_data),                     //          .data
		.sink8_startofpacket  (rsp_demux_015_src0_startofpacket),            //          .startofpacket
		.sink8_endofpacket    (rsp_demux_015_src0_endofpacket),              //          .endofpacket
		.sink9_ready          (rsp_demux_016_src0_ready),                    //     sink9.ready
		.sink9_valid          (rsp_demux_016_src0_valid),                    //          .valid
		.sink9_channel        (rsp_demux_016_src0_channel),                  //          .channel
		.sink9_data           (rsp_demux_016_src0_data),                     //          .data
		.sink9_startofpacket  (rsp_demux_016_src0_startofpacket),            //          .startofpacket
		.sink9_endofpacket    (rsp_demux_016_src0_endofpacket),              //          .endofpacket
		.sink10_ready         (rsp_demux_017_src0_ready),                    //    sink10.ready
		.sink10_valid         (rsp_demux_017_src0_valid),                    //          .valid
		.sink10_channel       (rsp_demux_017_src0_channel),                  //          .channel
		.sink10_data          (rsp_demux_017_src0_data),                     //          .data
		.sink10_startofpacket (rsp_demux_017_src0_startofpacket),            //          .startofpacket
		.sink10_endofpacket   (rsp_demux_017_src0_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_mux_001 rsp_mux_002 (
		.clk                  (clk_0_clk_clk),                               //       clk.clk
		.reset                (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_002_src_ready),                       //       src.ready
		.src_valid            (rsp_mux_002_src_valid),                       //          .valid
		.src_data             (rsp_mux_002_src_data),                        //          .data
		.src_channel          (rsp_mux_002_src_channel),                     //          .channel
		.src_startofpacket    (rsp_mux_002_src_startofpacket),               //          .startofpacket
		.src_endofpacket      (rsp_mux_002_src_endofpacket),                 //          .endofpacket
		.sink0_ready          (rsp_demux_src2_ready),                        //     sink0.ready
		.sink0_valid          (rsp_demux_src2_valid),                        //          .valid
		.sink0_channel        (rsp_demux_src2_channel),                      //          .channel
		.sink0_data           (rsp_demux_src2_data),                         //          .data
		.sink0_startofpacket  (rsp_demux_src2_startofpacket),                //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src2_endofpacket),                  //          .endofpacket
		.sink1_ready          (rsp_demux_001_src2_ready),                    //     sink1.ready
		.sink1_valid          (rsp_demux_001_src2_valid),                    //          .valid
		.sink1_channel        (rsp_demux_001_src2_channel),                  //          .channel
		.sink1_data           (rsp_demux_001_src2_data),                     //          .data
		.sink1_startofpacket  (rsp_demux_001_src2_startofpacket),            //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src2_endofpacket),              //          .endofpacket
		.sink2_ready          (rsp_demux_003_src2_ready),                    //     sink2.ready
		.sink2_valid          (rsp_demux_003_src2_valid),                    //          .valid
		.sink2_channel        (rsp_demux_003_src2_channel),                  //          .channel
		.sink2_data           (rsp_demux_003_src2_data),                     //          .data
		.sink2_startofpacket  (rsp_demux_003_src2_startofpacket),            //          .startofpacket
		.sink2_endofpacket    (rsp_demux_003_src2_endofpacket),              //          .endofpacket
		.sink3_ready          (rsp_demux_006_src2_ready),                    //     sink3.ready
		.sink3_valid          (rsp_demux_006_src2_valid),                    //          .valid
		.sink3_channel        (rsp_demux_006_src2_channel),                  //          .channel
		.sink3_data           (rsp_demux_006_src2_data),                     //          .data
		.sink3_startofpacket  (rsp_demux_006_src2_startofpacket),            //          .startofpacket
		.sink3_endofpacket    (rsp_demux_006_src2_endofpacket),              //          .endofpacket
		.sink4_ready          (rsp_demux_007_src2_ready),                    //     sink4.ready
		.sink4_valid          (rsp_demux_007_src2_valid),                    //          .valid
		.sink4_channel        (rsp_demux_007_src2_channel),                  //          .channel
		.sink4_data           (rsp_demux_007_src2_data),                     //          .data
		.sink4_startofpacket  (rsp_demux_007_src2_startofpacket),            //          .startofpacket
		.sink4_endofpacket    (rsp_demux_007_src2_endofpacket),              //          .endofpacket
		.sink5_ready          (rsp_demux_008_src2_ready),                    //     sink5.ready
		.sink5_valid          (rsp_demux_008_src2_valid),                    //          .valid
		.sink5_channel        (rsp_demux_008_src2_channel),                  //          .channel
		.sink5_data           (rsp_demux_008_src2_data),                     //          .data
		.sink5_startofpacket  (rsp_demux_008_src2_startofpacket),            //          .startofpacket
		.sink5_endofpacket    (rsp_demux_008_src2_endofpacket),              //          .endofpacket
		.sink6_ready          (rsp_demux_009_src2_ready),                    //     sink6.ready
		.sink6_valid          (rsp_demux_009_src2_valid),                    //          .valid
		.sink6_channel        (rsp_demux_009_src2_channel),                  //          .channel
		.sink6_data           (rsp_demux_009_src2_data),                     //          .data
		.sink6_startofpacket  (rsp_demux_009_src2_startofpacket),            //          .startofpacket
		.sink6_endofpacket    (rsp_demux_009_src2_endofpacket),              //          .endofpacket
		.sink7_ready          (rsp_demux_010_src0_ready),                    //     sink7.ready
		.sink7_valid          (rsp_demux_010_src0_valid),                    //          .valid
		.sink7_channel        (rsp_demux_010_src0_channel),                  //          .channel
		.sink7_data           (rsp_demux_010_src0_data),                     //          .data
		.sink7_startofpacket  (rsp_demux_010_src0_startofpacket),            //          .startofpacket
		.sink7_endofpacket    (rsp_demux_010_src0_endofpacket),              //          .endofpacket
		.sink8_ready          (rsp_demux_011_src0_ready),                    //     sink8.ready
		.sink8_valid          (rsp_demux_011_src0_valid),                    //          .valid
		.sink8_channel        (rsp_demux_011_src0_channel),                  //          .channel
		.sink8_data           (rsp_demux_011_src0_data),                     //          .data
		.sink8_startofpacket  (rsp_demux_011_src0_startofpacket),            //          .startofpacket
		.sink8_endofpacket    (rsp_demux_011_src0_endofpacket),              //          .endofpacket
		.sink9_ready          (rsp_demux_012_src0_ready),                    //     sink9.ready
		.sink9_valid          (rsp_demux_012_src0_valid),                    //          .valid
		.sink9_channel        (rsp_demux_012_src0_channel),                  //          .channel
		.sink9_data           (rsp_demux_012_src0_data),                     //          .data
		.sink9_startofpacket  (rsp_demux_012_src0_startofpacket),            //          .startofpacket
		.sink9_endofpacket    (rsp_demux_012_src0_endofpacket),              //          .endofpacket
		.sink10_ready         (rsp_demux_013_src0_ready),                    //    sink10.ready
		.sink10_valid         (rsp_demux_013_src0_valid),                    //          .valid
		.sink10_channel       (rsp_demux_013_src0_channel),                  //          .channel
		.sink10_data          (rsp_demux_013_src0_data),                     //          .data
		.sink10_startofpacket (rsp_demux_013_src0_startofpacket),            //          .startofpacket
		.sink10_endofpacket   (rsp_demux_013_src0_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_mux_003 rsp_mux_003 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                       //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                       //          .valid
		.src_data            (rsp_mux_003_src_data),                        //          .data
		.src_channel         (rsp_mux_003_src_channel),                     //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (rsp_demux_011_src1_ready),                    //     sink0.ready
		.sink0_valid         (rsp_demux_011_src1_valid),                    //          .valid
		.sink0_channel       (rsp_demux_011_src1_channel),                  //          .channel
		.sink0_data          (rsp_demux_011_src1_data),                     //          .data
		.sink0_startofpacket (rsp_demux_011_src1_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_011_src1_endofpacket),              //          .endofpacket
		.sink1_ready         (rsp_demux_012_src1_ready),                    //     sink1.ready
		.sink1_valid         (rsp_demux_012_src1_valid),                    //          .valid
		.sink1_channel       (rsp_demux_012_src1_channel),                  //          .channel
		.sink1_data          (rsp_demux_012_src1_data),                     //          .data
		.sink1_startofpacket (rsp_demux_012_src1_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (rsp_demux_012_src1_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_mux_003 rsp_mux_004 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                       //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                       //          .valid
		.src_data            (rsp_mux_004_src_data),                        //          .data
		.src_channel         (rsp_mux_004_src_channel),                     //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (rsp_demux_015_src1_ready),                    //     sink0.ready
		.sink0_valid         (rsp_demux_015_src1_valid),                    //          .valid
		.sink0_channel       (rsp_demux_015_src1_channel),                  //          .channel
		.sink0_data          (rsp_demux_015_src1_data),                     //          .data
		.sink0_startofpacket (rsp_demux_015_src1_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_015_src1_endofpacket),              //          .endofpacket
		.sink1_ready         (rsp_demux_017_src1_ready),                    //     sink1.ready
		.sink1_valid         (rsp_demux_017_src1_valid),                    //          .valid
		.sink1_channel       (rsp_demux_017_src1_channel),                  //          .channel
		.sink1_data          (rsp_demux_017_src1_data),                     //          .data
		.sink1_startofpacket (rsp_demux_017_src1_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (rsp_demux_017_src1_endofpacket)               //          .endofpacket
	);

	Embedded_mm_interconnect_0_rsp_mux_003 rsp_mux_005 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (CPUMaster_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                       //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                       //          .valid
		.src_data            (rsp_mux_005_src_data),                        //          .data
		.src_channel         (rsp_mux_005_src_channel),                     //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (rsp_demux_004_src1_ready),                    //     sink0.ready
		.sink0_valid         (rsp_demux_004_src1_valid),                    //          .valid
		.sink0_channel       (rsp_demux_004_src1_channel),                  //          .channel
		.sink0_data          (rsp_demux_004_src1_data),                     //          .data
		.sink0_startofpacket (rsp_demux_004_src1_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_004_src1_endofpacket),              //          .endofpacket
		.sink1_ready         (rsp_demux_005_src1_ready),                    //     sink1.ready
		.sink1_valid         (rsp_demux_005_src1_valid),                    //          .valid
		.sink1_channel       (rsp_demux_005_src1_channel),                  //          .channel
		.sink1_data          (rsp_demux_005_src1_data),                     //          .data
		.sink1_startofpacket (rsp_demux_005_src1_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (rsp_demux_005_src1_endofpacket)               //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (34),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (43),
		.IN_PKT_BYTE_CNT_L             (41),
		.IN_PKT_TRANS_COMPRESSED_READ  (35),
		.IN_PKT_TRANS_WRITE            (37),
		.IN_PKT_BURSTWRAP_H            (46),
		.IN_PKT_BURSTWRAP_L            (44),
		.IN_PKT_BURST_SIZE_H           (49),
		.IN_PKT_BURST_SIZE_L           (47),
		.IN_PKT_RESPONSE_STATUS_H      (75),
		.IN_PKT_RESPONSE_STATUS_L      (74),
		.IN_PKT_TRANS_EXCLUSIVE        (40),
		.IN_PKT_BURST_TYPE_H           (51),
		.IN_PKT_BURST_TYPE_L           (50),
		.IN_PKT_ORI_BURST_SIZE_L       (76),
		.IN_PKT_ORI_BURST_SIZE_H       (78),
		.IN_ST_DATA_W                  (79),
		.OUT_PKT_ADDR_H                (61),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (70),
		.OUT_PKT_BYTE_CNT_L            (68),
		.OUT_PKT_TRANS_COMPRESSED_READ (62),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (102),
		.OUT_PKT_RESPONSE_STATUS_L     (101),
		.OUT_PKT_TRANS_EXCLUSIVE       (67),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (103),
		.OUT_PKT_ORI_BURST_SIZE_H      (105),
		.OUT_ST_DATA_W                 (106),
		.ST_CHANNEL_W                  (18),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                                  //       clk.clk
		.reset                (CPUMaster_reset_reset_bridge_in_reset_reset),                                                    // clk_reset.reset
		.in_valid             (router_006_src_valid),                                                                           //      sink.valid
		.in_channel           (router_006_src_channel),                                                                         //          .channel
		.in_startofpacket     (router_006_src_startofpacket),                                                                   //          .startofpacket
		.in_endofpacket       (router_006_src_endofpacket),                                                                     //          .endofpacket
		.in_ready             (router_006_src_ready),                                                                           //          .ready
		.in_data              (router_006_src_data),                                                                            //          .data
		.out_endofpacket      (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (43),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (52),
		.IN_PKT_BYTE_CNT_L             (50),
		.IN_PKT_TRANS_COMPRESSED_READ  (44),
		.IN_PKT_TRANS_WRITE            (46),
		.IN_PKT_BURSTWRAP_H            (55),
		.IN_PKT_BURSTWRAP_L            (53),
		.IN_PKT_BURST_SIZE_H           (58),
		.IN_PKT_BURST_SIZE_L           (56),
		.IN_PKT_RESPONSE_STATUS_H      (84),
		.IN_PKT_RESPONSE_STATUS_L      (83),
		.IN_PKT_TRANS_EXCLUSIVE        (49),
		.IN_PKT_BURST_TYPE_H           (60),
		.IN_PKT_BURST_TYPE_L           (59),
		.IN_PKT_ORI_BURST_SIZE_L       (85),
		.IN_PKT_ORI_BURST_SIZE_H       (87),
		.IN_ST_DATA_W                  (88),
		.OUT_PKT_ADDR_H                (61),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (70),
		.OUT_PKT_BYTE_CNT_L            (68),
		.OUT_PKT_TRANS_COMPRESSED_READ (62),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (102),
		.OUT_PKT_RESPONSE_STATUS_L     (101),
		.OUT_PKT_TRANS_EXCLUSIVE       (67),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (103),
		.OUT_PKT_ORI_BURST_SIZE_H      (105),
		.OUT_ST_DATA_W                 (106),
		.ST_CHANNEL_W                  (18),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) reg16_0_avalon_slave_0_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                              //       clk.clk
		.reset                (CPUMaster_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_valid             (router_009_src_valid),                                       //      sink.valid
		.in_channel           (router_009_src_channel),                                     //          .channel
		.in_startofpacket     (router_009_src_startofpacket),                               //          .startofpacket
		.in_endofpacket       (router_009_src_endofpacket),                                 //          .endofpacket
		.in_ready             (router_009_src_ready),                                       //          .ready
		.in_data              (router_009_src_data),                                        //          .data
		.out_endofpacket      (reg16_0_avalon_slave_0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (reg16_0_avalon_slave_0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (reg16_0_avalon_slave_0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (reg16_0_avalon_slave_0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (reg16_0_avalon_slave_0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (reg16_0_avalon_slave_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (61),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (70),
		.IN_PKT_BYTE_CNT_L             (68),
		.IN_PKT_TRANS_COMPRESSED_READ  (62),
		.IN_PKT_TRANS_WRITE            (64),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (71),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (102),
		.IN_PKT_RESPONSE_STATUS_L      (101),
		.IN_PKT_TRANS_EXCLUSIVE        (67),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (103),
		.IN_PKT_ORI_BURST_SIZE_H       (105),
		.IN_ST_DATA_W                  (106),
		.OUT_PKT_ADDR_H                (34),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (43),
		.OUT_PKT_BYTE_CNT_L            (41),
		.OUT_PKT_TRANS_COMPRESSED_READ (35),
		.OUT_PKT_BURST_SIZE_H          (49),
		.OUT_PKT_BURST_SIZE_L          (47),
		.OUT_PKT_RESPONSE_STATUS_H     (75),
		.OUT_PKT_RESPONSE_STATUS_L     (74),
		.OUT_PKT_TRANS_EXCLUSIVE       (40),
		.OUT_PKT_BURST_TYPE_H          (51),
		.OUT_PKT_BURST_TYPE_L          (50),
		.OUT_PKT_ORI_BURST_SIZE_L      (76),
		.OUT_PKT_ORI_BURST_SIZE_H      (78),
		.OUT_ST_DATA_W                 (79),
		.ST_CHANNEL_W                  (18),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                                  //       clk.clk
		.reset                (CPUMaster_reset_reset_bridge_in_reset_reset),                                                    // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                                              //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                                            //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                                                      //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                                                        //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                                              //          .ready
		.in_data              (cmd_mux_src_data),                                                                               //          .data
		.out_endofpacket      (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (61),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (70),
		.IN_PKT_BYTE_CNT_L             (68),
		.IN_PKT_TRANS_COMPRESSED_READ  (62),
		.IN_PKT_TRANS_WRITE            (64),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (71),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (102),
		.IN_PKT_RESPONSE_STATUS_L      (101),
		.IN_PKT_TRANS_EXCLUSIVE        (67),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (103),
		.IN_PKT_ORI_BURST_SIZE_H       (105),
		.IN_ST_DATA_W                  (106),
		.OUT_PKT_ADDR_H                (43),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (52),
		.OUT_PKT_BYTE_CNT_L            (50),
		.OUT_PKT_TRANS_COMPRESSED_READ (44),
		.OUT_PKT_BURST_SIZE_H          (58),
		.OUT_PKT_BURST_SIZE_L          (56),
		.OUT_PKT_RESPONSE_STATUS_H     (84),
		.OUT_PKT_RESPONSE_STATUS_L     (83),
		.OUT_PKT_TRANS_EXCLUSIVE       (49),
		.OUT_PKT_BURST_TYPE_H          (60),
		.OUT_PKT_BURST_TYPE_L          (59),
		.OUT_PKT_ORI_BURST_SIZE_L      (85),
		.OUT_PKT_ORI_BURST_SIZE_H      (87),
		.OUT_ST_DATA_W                 (88),
		.ST_CHANNEL_W                  (18),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) reg16_0_avalon_slave_0_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                              //       clk.clk
		.reset                (CPUMaster_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                                      //      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                                    //          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                                //          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                                      //          .ready
		.in_data              (cmd_mux_003_src_data),                                       //          .data
		.out_endofpacket      (reg16_0_avalon_slave_0_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (reg16_0_avalon_slave_0_cmd_width_adapter_src_data),          //          .data
		.out_channel          (reg16_0_avalon_slave_0_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (reg16_0_avalon_slave_0_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (reg16_0_avalon_slave_0_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (reg16_0_avalon_slave_0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	Embedded_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                                                         // in_clk_0.clk
		.in_rst_0_reset (CPUMaster_reset_reset_bridge_in_reset_reset),                                           // in_rst_0.reset
		.in_0_data      (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                                         //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                                         //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                                          //         .error
	);

	Embedded_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                                          // in_clk_0.clk
		.in_rst_0_reset (CPUMaster_reset_reset_bridge_in_reset_reset),                                            // in_rst_0.reset
		.in_0_data      (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                                                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                                                      //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                                                      //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                                                       //         .error
	);

	Embedded_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (CPUMaster_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (jtagmaster_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtagmaster_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtagmaster_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                        //         .error
	);

	Embedded_mm_interconnect_0_avalon_st_adapter_003 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (CPUMaster_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (reg16_0_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (reg16_0_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (reg16_0_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                  //         .error
	);

	Embedded_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (CPUMaster_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (cpumaster_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (cpumaster_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (cpumaster_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                     //         .error
	);

	Embedded_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (CPUMaster_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (memmaster_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (memmaster_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (memmaster_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)            //         .error
	);

	Embedded_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (CPUMaster_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (mutex_0_s1_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (mutex_0_s1_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (mutex_0_s1_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)            //         .error
	);

	Embedded_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (CPUMaster_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ledgslave1_s1_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (ledgslave1_s1_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (ledgslave1_s1_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)            //         .error
	);

	Embedded_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (CPUMaster_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ledrslave2_s1_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (ledrslave2_s1_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (ledrslave2_s1_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)            //         .error
	);

	Embedded_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (CPUMaster_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (uart_0_s1_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (uart_0_s1_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (uart_0_s1_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)            //         .error
	);

	Embedded_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (CPUMaster_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (jtagslave2_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtagslave2_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtagslave2_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                        //         .error
	);

	Embedded_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_0_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (CPUMaster_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (cpuslave2_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (cpuslave2_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (cpuslave2_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                     //         .error
	);

	Embedded_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_0_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (CPUMaster_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (memslave2_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (memslave2_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (memslave2_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)            //         .error
	);

	Embedded_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_0_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (CPUMaster_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pioslave2_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (pioslave2_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (pioslave2_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)            //         .error
	);

	Embedded_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (CPUMaster_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (jtagslave1_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtagslave1_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtagslave1_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                        //         .error
	);

	Embedded_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_0_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (CPUMaster_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (cpuslave1_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (cpuslave1_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (cpuslave1_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                     //         .error
	);

	Embedded_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clk_0_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (CPUMaster_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pioslave1_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (pioslave1_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (pioslave1_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)            //         .error
	);

	Embedded_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (clk_0_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (CPUMaster_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (memslave1_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (memslave1_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (memslave1_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)            //         .error
	);

endmodule

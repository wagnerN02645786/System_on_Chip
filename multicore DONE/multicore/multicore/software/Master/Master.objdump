
Master.elf:     file format elf32-littlenios2
Master.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020240

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000107e4 memsz 0x000107e4 flags r-x
    LOAD off    0x00011804 vaddr 0x00030804 paddr 0x00032414 align 2**12
         filesz 0x00001c10 memsz 0x00001c10 flags rw-
    LOAD off    0x00014024 vaddr 0x00034024 paddr 0x00034024 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010198  00020240  00020240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000042c  000303d8  000303d8  000113d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c10  00030804  00032414  00011804  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00034024  00034024  00014024  2**2
                  ALLOC, SMALL_DATA
  6 .MEMMaster    00000000  00034184  00034184  00013414  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013414  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000df0  00000000  00000000  00013438  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000261ea  00000000  00000000  00014228  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009b69  00000000  00000000  0003a412  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ba58  00000000  00000000  00043f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002548  00000000  00000000  0004f9d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003a5c  00000000  00000000  00051f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016ee9  00000000  00000000  00055978  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006c864  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001380  00000000  00000000  0006c898  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000712c1  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  000712c4  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000712cd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000712ce  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000a  00000000  00000000  000712cf  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000a  00000000  00000000  000712d9  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000a  00000000  00000000  000712e3  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  000712ed  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002d  00000000  00000000  000712f5  2**0
                  CONTENTS, READONLY
 26 .jdi          0000c3ff  00000000  00000000  00071322  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000bcd72  00000000  00000000  0007d721  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020240 l    d  .text	00000000 .text
000303d8 l    d  .rodata	00000000 .rodata
00030804 l    d  .rwdata	00000000 .rwdata
00034024 l    d  .bss	00000000 .bss
00034184 l    d  .MEMMaster	00000000 .MEMMaster
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Master_bsp//obj/HAL/src/crt0.o
00020288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000304da l     O .rodata	00000010 zeroes.4181
000304ea l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00022814 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00024394 l     F .text	00000008 __fp_lock
0002439c l     F .text	00000008 __fp_unlock
000243b0 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00030804 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00030c48 l     O .rwdata	00000020 lc_ctype_charset
00030c28 l     O .rwdata	00000020 lc_message_charset
00030c68 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0003051c l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00027810 l     F .text	000000fc __sprint_r.part.0
00030650 l     O .rodata	00000010 blanks.4125
00030640 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0002a12c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0002c858 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002c978 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002c9a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002caa4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002cb98 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002cc7c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0002d0c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000323fc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0002d320 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002d468 l     F .text	00000038 alt_dev_reg
0002d4a0 l     F .text	00000050 alt_get_errno
0002d4f0 l     F .text	0000006c alt_avalon_mutex_reg
00031250 l     O .rwdata	00001060 JTAGMaster
000322b0 l     O .rwdata	00000010 mutex_0
000322c0 l     O .rwdata	000000c4 uart_0
00032384 l     O .rwdata	00000048 video_character_buffer_with_dma_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002d8e0 l     F .text	00000204 altera_avalon_jtag_uart_irq
0002dae4 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0002e104 l     F .text	00000050 alt_get_errno
0002e154 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0002e594 l     F .text	00000098 altera_avalon_uart_irq
0002e62c l     F .text	000000e0 altera_avalon_uart_rxirq
0002e70c l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0002e8a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0002ead0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002f138 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002f674 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0002f7ac l     F .text	00000050 alt_get_errno
0002f7fc l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00034058 g     O .bss	00000004 alt_instruction_exception_handler
00026e50 g     F .text	00000074 _mprec_log10
00026f3c g     F .text	0000008c __any_on
00029160 g     F .text	00000054 _isatty_r
00030528 g     O .rodata	00000028 __mprec_tinytens
0002cda0 g     F .text	00000078 alt_main
00020560 g     F .text	000000b8 _puts_r
00034084 g     O .bss	00000100 alt_irq
000291b4 g     F .text	0000005c _lseek_r
00032414 g       *ABS*	00000000 __flash_rwdata_start
0002b3c0 g     F .text	00000084 .hidden __eqdf2
00034184 g       *ABS*	00000000 __alt_heap_start
00020524 g     F .text	0000003c printf
000293dc g     F .text	0000009c _wcrtomb_r
00027708 g     F .text	0000005c __sseek
000246e4 g     F .text	00000010 __sinit
0002926c g     F .text	00000154 __swbuf_r
0002ee58 g     F .text	00000100 alt_up_char_buffer_string
0002515c g     F .text	0000007c _setlocale_r
00024550 g     F .text	00000064 __sfmoreglue
0002ce38 g     F .text	00000020 __malloc_unlock
00020000 g       *ABS*	00000000 __alt_mem_MEMMaster
0002ed8c g     F .text	000000cc alt_up_char_buffer_draw
00025dbc g     F .text	0000015c memmove
000246cc g     F .text	00000018 _cleanup
0002e288 g     F .text	00000040 altera_avalon_mutex_trylock
0002603c g     F .text	000000a8 _Balloc
0002b444 g     F .text	000000e0 .hidden __gtdf2
0002fbbc g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000001c __reset
0002e318 g     F .text	00000074 altera_avalon_mutex_is_mine
00020020 g       *ABS*	00000000 __flash_exceptions_start
00029108 g     F .text	00000058 _fstat_r
0003403c g     O .bss	00000004 errno
00027684 g     F .text	00000008 __seofread
00034044 g     O .bss	00000004 alt_argv
0003a3cc g       *ABS*	00000000 _gp
000310d0 g     O .rwdata	00000180 alt_fd_list
000204a0 g     F .text	00000058 delay10ms
0002f2e4 g     F .text	00000090 alt_find_dev
00025c84 g     F .text	00000138 memcpy
0002ef58 g     F .text	0000005c alt_up_char_buffer_clear
000243a4 g     F .text	0000000c _cleanup_r
0002c680 g     F .text	000000d0 .hidden __floatsidf
0002f734 g     F .text	00000078 alt_io_redirect
0002b524 g     F .text	000000e0 .hidden __ltdf2
000303d8 g       *ABS*	00000000 __DTOR_END__
00020618 g     F .text	00000014 puts
0002fe30 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00027568 g     F .text	00000074 __fpclassifyd
00026dac g     F .text	000000a4 __ratio
00028c80 g     F .text	00000024 __vfiprintf_internal
0002dce0 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000204f8 g     F .text	0000002c _printf_r
0002a248 g     F .text	00000008 .hidden __udivsi3
0002caf4 g     F .text	000000a4 isatty
00030578 g     O .rodata	000000c8 __mprec_tens
000251d8 g     F .text	0000000c __locale_charset
0002fda4 g     F .text	0000008c alt_icache_flush
00034038 g     O .bss	00000004 __malloc_top_pad
000323d4 g     O .rwdata	00000004 __mb_cur_max
00025208 g     F .text	0000000c _localeconv_r
0002643c g     F .text	0000003c __i2b
00024b48 g     F .text	000004a4 __sfvwrite_r
000275dc g     F .text	00000054 _sbrk_r
00029210 g     F .text	0000005c _read_r
000323f4 g     O .rwdata	00000004 alt_max_fd
00028e18 g     F .text	00000100 _fclose_r
00024364 g     F .text	00000030 fflush
00034034 g     O .bss	00000004 __malloc_max_sbrked_mem
0002a258 g     F .text	0000089c .hidden __adddf3
00026b54 g     F .text	0000011c __b2d
00029b9c g     F .text	00000590 .hidden __umoddi3
0002cccc g     F .text	000000d4 lseek
0002e38c g     F .text	00000050 altera_avalon_mutex_first_lock
000323cc g     O .rwdata	00000004 _global_impure_ptr
00026fc8 g     F .text	000005a0 _realloc_r
00034184 g       *ABS*	00000000 __bss_end
0002f584 g     F .text	000000f0 alt_iic_isr_register
0002fab8 g     F .text	00000104 alt_tick
000295dc g     F .text	000005c0 .hidden __udivdi3
00028f2c g     F .text	00000184 _fputwc_r
00030550 g     O .rodata	00000028 __mprec_bigtens
00026220 g     F .text	00000104 __s2b
0002c750 g     F .text	000000a4 .hidden __floatunsidf
000268fc g     F .text	00000060 __mcmp
0002e4ec g     F .text	000000a8 altera_avalon_uart_init
00024704 g     F .text	00000018 __fp_lock_all
0002f538 g     F .text	0000004c alt_ic_irq_enabled
0002fa20 g     F .text	00000098 alt_alarm_stop
0003404c g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d0 alt_irq_handler
000310a8 g     O .rwdata	00000028 alt_dev_null
0002e1d0 g     F .text	00000054 altera_avalon_mutex_open
0002f0f4 g     F .text	00000044 alt_dcache_flush_all
00026324 g     F .text	00000068 __hi0bits
0002c5f8 g     F .text	00000088 .hidden __fixdfsi
00032414 g       *ABS*	00000000 __ram_rwdata_end
000323ec g     O .rwdata	00000008 alt_dev_list
0002d370 g     F .text	000000f8 write
0002ff94 g     F .text	000000a0 _putc_r
00032400 g     O .rwdata	00000008 alt_mutex_list
00030804 g       *ABS*	00000000 __ram_rodata_end
0002c9f4 g     F .text	000000b0 fstat
0002b524 g     F .text	000000e0 .hidden __ledf2
00026674 g     F .text	00000140 __pow5mult
00027924 g     F .text	0000135c ___vfiprintf_internal_r
0003402c g     O .bss	00000004 __nlocale_changed
0002a250 g     F .text	00000008 .hidden __umodsi3
00034184 g       *ABS*	00000000 end
0002eccc g     F .text	00000080 alt_up_char_buffer_init
0002eb20 g     F .text	000001ac altera_avalon_uart_write
0002d81c g     F .text	000000c4 altera_avalon_jtag_uart_init
000201cc g     F .exceptions	00000074 alt_instruction_exception_entry
000303d8 g       *ABS*	00000000 __CTOR_LIST__
000386a0 g       *ABS*	00000000 __alt_stack_pointer
0002e43c g     F .text	00000060 altera_avalon_uart_write_fd
0002c7f4 g     F .text	00000064 .hidden __clzsi2
0002e49c g     F .text	00000050 altera_avalon_uart_close_fd
0002deec g     F .text	00000218 altera_avalon_jtag_uart_write
000246f4 g     F .text	00000004 __sfp_lock_acquire
00025b9c g     F .text	000000e8 memchr
000206c4 g     F .text	00001ffc ___vfprintf_internal_r
00024858 g     F .text	000002f0 _free_r
0002ce58 g     F .text	00000228 alt_printf
000251e4 g     F .text	00000010 __locale_mb_cur_max
00030210 g     F .text	00000194 __call_exitprocs
00034028 g     O .bss	00000004 __mlocale_changed
000323d8 g     O .rwdata	00000004 __malloc_sbrk_base
00020240 g     F .text	0000004c _start
00034050 g     O .bss	00000004 _alt_tick_rate
000267b4 g     F .text	00000148 __lshift
00034054 g     O .bss	00000004 _alt_nticks
0002d114 g     F .text	000000fc read
0002d590 g     F .text	00000128 alt_sys_init
000300fc g     F .text	00000114 __register_exitproc
0002e2c8 g     F .text	00000050 altera_avalon_mutex_unlock
00026478 g     F .text	000001fc __multiply
0002db8c g     F .text	00000068 altera_avalon_jtag_uart_close
00030804 g       *ABS*	00000000 __ram_rwdata_start
000303d8 g       *ABS*	00000000 __ram_rodata_start
0003405c g     O .bss	00000028 __malloc_current_mallinfo
00026c70 g     F .text	0000013c __d2b
0002d6b8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002fcf0 g     F .text	000000b4 alt_get_fd
00028d00 g     F .text	00000054 _close_r
0002ff18 g     F .text	0000007c memcmp
0002d778 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00034184 g       *ABS*	00000000 __alt_stack_base
0002d7c8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000226e4 g     F .text	00000130 __swsetup_r
0002aaf4 g     F .text	000008cc .hidden __divdf3
000245b4 g     F .text	00000118 __sfp
00026ec4 g     F .text	00000078 __copybits
00030ca0 g     O .rwdata	00000408 __malloc_av_
00024700 g     F .text	00000004 __sinit_lock_release
0002b604 g     F .text	00000724 .hidden __muldf3
00027630 g     F .text	00000054 __sread
0002fbdc g     F .text	00000114 alt_find_file
0002f188 g     F .text	000000a4 alt_dev_llist_insert
0002ce18 g     F .text	00000020 __malloc_lock
0002d270 g     F .text	000000b0 sbrk
0002413c g     F .text	00000228 _fflush_r
00028d54 g     F .text	000000c4 _calloc_r
00034024 g       *ABS*	00000000 __bss_start
00025f18 g     F .text	00000124 memset
0002028c g     F .text	00000214 main
00034048 g     O .bss	00000004 alt_envp
00034030 g     O .bss	00000004 __malloc_max_total_mem
0002ed4c g     F .text	00000040 alt_up_char_buffer_open_dev
0002d718 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000293c0 g     F .text	0000001c __swbuf
00027764 g     F .text	00000008 __sclose
000386a0 g       *ABS*	00000000 __alt_heap_limit
00028f18 g     F .text	00000014 fclose
0002e248 g     F .text	00000040 altera_avalon_mutex_lock
00022a14 g     F .text	00001728 _dtoa_r
000253f4 g     F .text	000007a8 _malloc_r
00029550 g     F .text	00000030 __ascii_wctomb
000323f8 g     O .rwdata	00000004 alt_errno
00024fec g     F .text	000000b8 _fwalk
00030034 g     F .text	000000c8 putc
0002a198 g     F .text	00000054 .hidden __divsi3
00024734 g     F .text	00000124 _malloc_trim_r
000303d8 g       *ABS*	00000000 __CTOR_END__
0002776c g     F .text	000000a4 strcmp
000303d8 g       *ABS*	00000000 __flash_rodata_start
000303d8 g       *ABS*	00000000 __DTOR_LIST__
0002b3c0 g     F .text	00000084 .hidden __nedf2
0002d55c g     F .text	00000034 alt_irq_init
0002d210 g     F .text	00000060 alt_release_fd
00030660 g     O .rodata	00000100 .hidden __clz_tab
00034024 g     O .bss	00000004 _PathLocale
0002fecc g     F .text	00000014 atexit
00028ca4 g     F .text	0000005c _write_r
00025214 g     F .text	0000001c setlocale
000323d0 g     O .rwdata	00000004 _impure_ptr
00034040 g     O .bss	00000004 alt_argc
0002f288 g     F .text	0000005c _do_dtors
00025200 g     F .text	00000008 __locale_cjk_lang
00020020 g       .exceptions	00000000 alt_irq_entry
00026af4 g     F .text	00000060 __ulp
0002471c g     F .text	00000018 __fp_unlock_all
000323e4 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00025230 g     F .text	0000000c localeconv
0002f3a4 g     F .text	00000050 alt_ic_isr_register
00032414 g       *ABS*	00000000 _edata
0002e3dc g     F .text	00000060 altera_avalon_uart_read_fd
00034184 g       *ABS*	00000000 _end
00020240 g       *ABS*	00000000 __ram_exceptions_end
0002dbf4 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0002f494 g     F .text	000000a4 alt_ic_irq_disable
0002768c g     F .text	0000007c __swrite
000323dc g     O .rwdata	00000004 __malloc_trim_threshold
000251f4 g     F .text	0000000c __locale_msgcharset
0002fee0 g     F .text	00000038 exit
000250a4 g     F .text	000000b8 _fwalk_reent
0002695c g     F .text	00000198 __mdiff
0002a1ec g     F .text	0000005c .hidden __modsi3
000386a0 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000246f8 g     F .text	00000004 __sfp_lock_release
0002e850 g     F .text	00000054 altera_avalon_uart_close
000303a4 g     F .text	00000034 _exit
0002efb4 g     F .text	00000140 alt_alarm_start
0002523c g     F .text	000001b8 __smakebuf_r
0002062c g     F .text	00000098 strlen
0002f8c8 g     F .text	00000158 open
0002b444 g     F .text	000000e0 .hidden __gedf2
0002d080 g     F .text	00000044 alt_putchar
000323e0 g     O .rwdata	00000004 __wctomb
0002790c g     F .text	00000018 __sprint_r
0002f374 g     F .text	00000030 alt_icache_flush_all
00032408 g     O .rwdata	00000004 alt_priority_mask
0002f3f4 g     F .text	000000a0 alt_ic_irq_enable
000226c0 g     F .text	00000024 __vfprintf_internal
0002e224 g     F .text	00000024 altera_avalon_mutex_close
0002e8f4 g     F .text	000001dc altera_avalon_uart_read
00029580 g     F .text	0000005c _wctomb_r
0002bd28 g     F .text	000008d0 .hidden __subdf3
0002638c g     F .text	000000b0 __lo0bits
0003240c g     O .rwdata	00000008 alt_alarm_list
0002f22c g     F .text	0000005c _do_ctors
00029478 g     F .text	000000d8 wcrtomb
0002c8a8 g     F .text	000000d0 close
0002cbfc g     F .text	00000080 alt_load
000290b0 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
000246fc g     F .text	00000004 __sinit_lock_acquire
0002610c g     F .text	00000114 __multadd
000260e4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <_gp+0xfffe5c38>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409014 	ori	at,at,576
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__reset-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201cc0 	call	201cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	10902104 	addi	r2,r2,16516
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	10902104 	addi	r2,r2,16516
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <_gp+0xfffe5d60>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <_gp+0xfffe5d54>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	e037883a 	mov	sp,fp
   201bc:	dfc00117 	ldw	ra,4(sp)
   201c0:	df000017 	ldw	fp,0(sp)
   201c4:	dec00204 	addi	sp,sp,8
   201c8:	f800283a 	ret

000201cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201cc:	defffb04 	addi	sp,sp,-20
   201d0:	dfc00415 	stw	ra,16(sp)
   201d4:	df000315 	stw	fp,12(sp)
   201d8:	df000304 	addi	fp,sp,12
   201dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e0:	000531fa 	rdctl	r2,exception
   201e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201e8:	e0bffd17 	ldw	r2,-12(fp)
   201ec:	10801f0c 	andi	r2,r2,124
   201f0:	1004d0ba 	srli	r2,r2,2
   201f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201f8:	0005333a 	rdctl	r2,badaddr
   201fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20200:	d0a72317 	ldw	r2,-25460(gp)
   20204:	10000726 	beq	r2,zero,20224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   20208:	d0a72317 	ldw	r2,-25460(gp)
   2020c:	e0fffd17 	ldw	r3,-12(fp)
   20210:	1809883a 	mov	r4,r3
   20214:	e17fff17 	ldw	r5,-4(fp)
   20218:	e1bffe17 	ldw	r6,-8(fp)
   2021c:	103ee83a 	callr	r2
   20220:	00000206 	br	2022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20228:	0005883a 	mov	r2,zero
}
   2022c:	e037883a 	mov	sp,fp
   20230:	dfc00117 	ldw	ra,4(sp)
   20234:	df000017 	ldw	fp,0(sp)
   20238:	dec00204 	addi	sp,sp,8
   2023c:	f800283a 	ret

Disassembly of section .text:

00020240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20240:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   20248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   2024c:	00bffd16 	blt	zero,r2,20244 <_gp+0xfffe5e78>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20250:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20254:	dee1a814 	ori	sp,sp,34464
    movhi gp, %hi(_gp)
   20258:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   2025c:	d6a8f314 	ori	gp,gp,41932
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20260:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20264:	10900914 	ori	r2,r2,16420

    movhi r3, %hi(__bss_end)
   20268:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   2026c:	18d06114 	ori	r3,r3,16772

    beq r2, r3, 1f
   20270:	10c00326 	beq	r2,r3,20280 <_start+0x40>

0:
    stw zero, (r2)
   20274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2027c:	10fffd36 	bltu	r2,r3,20274 <_gp+0xfffe5ea8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20280:	002cbfc0 	call	2cbfc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20284:	002cda00 	call	2cda0 <alt_main>

00020288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20288:	003fff06 	br	20288 <_gp+0xfffe5ebc>

0002028c <main>:
#include "altera_up_avalon_video_character_buffer_with_dma.h"



int main()
{
   2028c:	defff104 	addi	sp,sp,-60
   20290:	dfc00e15 	stw	ra,56(sp)
   20294:	df000d15 	stw	fp,52(sp)
   20298:	df000d04 	addi	fp,sp,52
	char str1[]={"MASTER (ON)"};
   2029c:	009514f4 	movhi	r2,21587
   202a0:	10905344 	addi	r2,r2,16717
   202a4:	e0bff515 	stw	r2,-44(fp)
   202a8:	008a0834 	movhi	r2,10272
   202ac:	10949144 	addi	r2,r2,21061
   202b0:	e0bff615 	stw	r2,-40(fp)
   202b4:	00800a74 	movhi	r2,41
   202b8:	109393c4 	addi	r2,r2,20047
   202bc:	e0bff715 	stw	r2,-36(fp)
	char str2[]={"MASTER (SWITCH)"};
   202c0:	009514f4 	movhi	r2,21587
   202c4:	10905344 	addi	r2,r2,16717
   202c8:	e0bff815 	stw	r2,-32(fp)
   202cc:	008a0834 	movhi	r2,10272
   202d0:	10949144 	addi	r2,r2,21061
   202d4:	e0bff915 	stw	r2,-28(fp)
   202d8:	00951274 	movhi	r2,21577
   202dc:	1095d4c4 	addi	r2,r2,22355
   202e0:	e0bffa15 	stw	r2,-24(fp)
   202e4:	00800a74 	movhi	r2,41
   202e8:	109210c4 	addi	r2,r2,18499
   202ec:	e0bffb15 	stw	r2,-20(fp)
	char str3[]={"MASTER (OFF)"};
   202f0:	009514f4 	movhi	r2,21587
   202f4:	10905344 	addi	r2,r2,16717
   202f8:	e0bffc15 	stw	r2,-16(fp)
   202fc:	008a0834 	movhi	r2,10272
   20300:	10949144 	addi	r2,r2,21061
   20304:	e0bffd15 	stw	r2,-12(fp)
   20308:	008a51b4 	movhi	r2,10566
   2030c:	109193c4 	addi	r2,r2,17999
   20310:	e0bffe15 	stw	r2,-8(fp)
   20314:	e03fff05 	stb	zero,-4(fp)
	 alt_mutex_dev *Mymutex;
	 Mymutex=altera_avalon_mutex_open("/dev/mutex_0");
   20318:	010000f4 	movhi	r4,3
   2031c:	2100f604 	addi	r4,r4,984
   20320:	002e1d00 	call	2e1d0 <altera_avalon_mutex_open>
   20324:	e0bff315 	stw	r2,-52(fp)
	 printf("Hello from Nios II#1!\n");
   20328:	010000f4 	movhi	r4,3
   2032c:	2100fa04 	addi	r4,r4,1000
   20330:	00206180 	call	20618 <puts>
	 while(altera_avalon_mutex_trylock(Mymutex,ALT_CPU_CPU_ID_VALUE ))
   20334:	0001883a 	nop
   20338:	e13ff317 	ldw	r4,-52(fp)
   2033c:	000b883a 	mov	r5,zero
   20340:	002e2880 	call	2e288 <altera_avalon_mutex_trylock>
   20344:	103ffc1e 	bne	r2,zero,20338 <_gp+0xfffe5f6c>
	 {}

	 alt_up_char_buffer_dev * vga_dev;
	 	// open the VGA port
	 	vga_dev = alt_up_char_buffer_open_dev("/dev/video_character_buffer_with_dma_0");
   20348:	010000f4 	movhi	r4,3
   2034c:	21010004 	addi	r4,r4,1024
   20350:	002ed4c0 	call	2ed4c <alt_up_char_buffer_open_dev>
   20354:	e0bff415 	stw	r2,-48(fp)

	 	if (vga_dev == NULL)
   20358:	e0bff417 	ldw	r2,-48(fp)
   2035c:	1000041e 	bne	r2,zero,20370 <main+0xe4>
	 	    	alt_printf ("Error: could not open VGA device \n");
   20360:	010000f4 	movhi	r4,3
   20364:	21010a04 	addi	r4,r4,1064
   20368:	002ce580 	call	2ce58 <alt_printf>
   2036c:	00000306 	br	2037c <main+0xf0>
	 	    	else
	 	    	alt_printf ("Opened VGA device \n");
   20370:	010000f4 	movhi	r4,3
   20374:	21011304 	addi	r4,r4,1100
   20378:	002ce580 	call	2ce58 <alt_printf>
  IOWR_16DIRECT(REG16_0_BASE, 0, 0x0);
   2037c:	0007883a 	mov	r3,zero
   20380:	00800134 	movhi	r2,4
   20384:	10840204 	addi	r2,r2,4104
   20388:	10c0002d 	sthio	r3,0(r2)
  altera_avalon_mutex_unlock (Mymutex);
   2038c:	e13ff317 	ldw	r4,-52(fp)
   20390:	002e2c80 	call	2e2c8 <altera_avalon_mutex_unlock>
  while(1){
  delay10ms(1000);
   20394:	0100fa04 	movi	r4,1000
   20398:	00204a00 	call	204a0 <delay10ms>
  printf("SEND ON SIGNAL");
   2039c:	010000f4 	movhi	r4,3
   203a0:	21011804 	addi	r4,r4,1120
   203a4:	00205240 	call	20524 <printf>
  while(altera_avalon_mutex_trylock(Mymutex,ALT_CPU_CPU_ID_VALUE ))
   203a8:	0001883a 	nop
   203ac:	e13ff317 	ldw	r4,-52(fp)
   203b0:	000b883a 	mov	r5,zero
   203b4:	002e2880 	call	2e288 <altera_avalon_mutex_trylock>
   203b8:	103ffc1e 	bne	r2,zero,203ac <_gp+0xfffe5fe0>
 	 {}
  alt_up_char_buffer_string(vga_dev, str1, 1, 1);
   203bc:	e0bff504 	addi	r2,fp,-44
   203c0:	e13ff417 	ldw	r4,-48(fp)
   203c4:	100b883a 	mov	r5,r2
   203c8:	01800044 	movi	r6,1
   203cc:	01c00044 	movi	r7,1
   203d0:	002ee580 	call	2ee58 <alt_up_char_buffer_string>
  IOWR_16DIRECT(REG16_0_BASE, 0, 0xff);
   203d4:	00c03fc4 	movi	r3,255
   203d8:	00800134 	movhi	r2,4
   203dc:	10840204 	addi	r2,r2,4104
   203e0:	10c0002d 	sthio	r3,0(r2)
  altera_avalon_mutex_unlock (Mymutex);
   203e4:	e13ff317 	ldw	r4,-52(fp)
   203e8:	002e2c80 	call	2e2c8 <altera_avalon_mutex_unlock>
  delay10ms(3000);
   203ec:	0102ee04 	movi	r4,3000
   203f0:	00204a00 	call	204a0 <delay10ms>
  printf("SEND SWITCH SIGNAL");
   203f4:	010000f4 	movhi	r4,3
   203f8:	21011c04 	addi	r4,r4,1136
   203fc:	00205240 	call	20524 <printf>
    while(altera_avalon_mutex_trylock(Mymutex,ALT_CPU_CPU_ID_VALUE ))
   20400:	0001883a 	nop
   20404:	e13ff317 	ldw	r4,-52(fp)
   20408:	000b883a 	mov	r5,zero
   2040c:	002e2880 	call	2e288 <altera_avalon_mutex_trylock>
   20410:	103ffc1e 	bne	r2,zero,20404 <_gp+0xfffe6038>
     	 {}
    alt_up_char_buffer_string(vga_dev, str2, 1, 1);
   20414:	e0bff804 	addi	r2,fp,-32
   20418:	e13ff417 	ldw	r4,-48(fp)
   2041c:	100b883a 	mov	r5,r2
   20420:	01800044 	movi	r6,1
   20424:	01c00044 	movi	r7,1
   20428:	002ee580 	call	2ee58 <alt_up_char_buffer_string>
    IOWR_16DIRECT(REG16_0_BASE, 0, 0x0f);
   2042c:	00c003c4 	movi	r3,15
   20430:	00800134 	movhi	r2,4
   20434:	10840204 	addi	r2,r2,4104
   20438:	10c0002d 	sthio	r3,0(r2)
    altera_avalon_mutex_unlock (Mymutex);
   2043c:	e13ff317 	ldw	r4,-52(fp)
   20440:	002e2c80 	call	2e2c8 <altera_avalon_mutex_unlock>
    delay10ms(3000);
   20444:	0102ee04 	movi	r4,3000
   20448:	00204a00 	call	204a0 <delay10ms>
  printf("SEND OFF SIGNAL");
   2044c:	010000f4 	movhi	r4,3
   20450:	21012104 	addi	r4,r4,1156
   20454:	00205240 	call	20524 <printf>
  while(altera_avalon_mutex_trylock(Mymutex,ALT_CPU_CPU_ID_VALUE ))
   20458:	0001883a 	nop
   2045c:	e13ff317 	ldw	r4,-52(fp)
   20460:	000b883a 	mov	r5,zero
   20464:	002e2880 	call	2e288 <altera_avalon_mutex_trylock>
   20468:	103ffc1e 	bne	r2,zero,2045c <_gp+0xfffe6090>
   	 {}
  alt_up_char_buffer_string(vga_dev, str3, 1, 1);
   2046c:	e0bffc04 	addi	r2,fp,-16
   20470:	e13ff417 	ldw	r4,-48(fp)
   20474:	100b883a 	mov	r5,r2
   20478:	01800044 	movi	r6,1
   2047c:	01c00044 	movi	r7,1
   20480:	002ee580 	call	2ee58 <alt_up_char_buffer_string>
  IOWR_16DIRECT(REG16_0_BASE, 0, 0x0);
   20484:	0007883a 	mov	r3,zero
   20488:	00800134 	movhi	r2,4
   2048c:	10840204 	addi	r2,r2,4104
   20490:	10c0002d 	sthio	r3,0(r2)
  altera_avalon_mutex_unlock (Mymutex);
   20494:	e13ff317 	ldw	r4,-52(fp)
   20498:	002e2c80 	call	2e2c8 <altera_avalon_mutex_unlock>
  }
   2049c:	003fbd06 	br	20394 <_gp+0xfffe5fc8>

000204a0 <delay10ms>:
  return 0;
}
void delay10ms(unsigned long time)
{
   204a0:	defffd04 	addi	sp,sp,-12
   204a4:	df000215 	stw	fp,8(sp)
   204a8:	df000204 	addi	fp,sp,8
   204ac:	e13fff15 	stw	r4,-4(fp)
	while(time>0)
   204b0:	00000b06 	br	204e0 <delay10ms+0x40>
	{
		int i=13333;
   204b4:	008d0544 	movi	r2,13333
   204b8:	e0bffe15 	stw	r2,-8(fp)
		while(i>0)
   204bc:	00000306 	br	204cc <delay10ms+0x2c>
		i--;
   204c0:	e0bffe17 	ldw	r2,-8(fp)
   204c4:	10bfffc4 	addi	r2,r2,-1
   204c8:	e0bffe15 	stw	r2,-8(fp)
void delay10ms(unsigned long time)
{
	while(time>0)
	{
		int i=13333;
		while(i>0)
   204cc:	e0bffe17 	ldw	r2,-8(fp)
   204d0:	00bffb16 	blt	zero,r2,204c0 <_gp+0xfffe60f4>
		i--;
		time--;
   204d4:	e0bfff17 	ldw	r2,-4(fp)
   204d8:	10bfffc4 	addi	r2,r2,-1
   204dc:	e0bfff15 	stw	r2,-4(fp)
  }
  return 0;
}
void delay10ms(unsigned long time)
{
	while(time>0)
   204e0:	e0bfff17 	ldw	r2,-4(fp)
   204e4:	103ff31e 	bne	r2,zero,204b4 <_gp+0xfffe60e8>
		int i=13333;
		while(i>0)
		i--;
		time--;
	}
}
   204e8:	e037883a 	mov	sp,fp
   204ec:	df000017 	ldw	fp,0(sp)
   204f0:	dec00104 	addi	sp,sp,4
   204f4:	f800283a 	ret

000204f8 <_printf_r>:
   204f8:	defffd04 	addi	sp,sp,-12
   204fc:	dfc00015 	stw	ra,0(sp)
   20500:	d9800115 	stw	r6,4(sp)
   20504:	d9c00215 	stw	r7,8(sp)
   20508:	280d883a 	mov	r6,r5
   2050c:	21400217 	ldw	r5,8(r4)
   20510:	d9c00104 	addi	r7,sp,4
   20514:	00206c40 	call	206c4 <___vfprintf_internal_r>
   20518:	dfc00017 	ldw	ra,0(sp)
   2051c:	dec00304 	addi	sp,sp,12
   20520:	f800283a 	ret

00020524 <printf>:
   20524:	defffc04 	addi	sp,sp,-16
   20528:	dfc00015 	stw	ra,0(sp)
   2052c:	d9400115 	stw	r5,4(sp)
   20530:	d9800215 	stw	r6,8(sp)
   20534:	d9c00315 	stw	r7,12(sp)
   20538:	008000f4 	movhi	r2,3
   2053c:	1088f404 	addi	r2,r2,9168
   20540:	10800017 	ldw	r2,0(r2)
   20544:	200b883a 	mov	r5,r4
   20548:	d9800104 	addi	r6,sp,4
   2054c:	11000217 	ldw	r4,8(r2)
   20550:	00226c00 	call	226c0 <__vfprintf_internal>
   20554:	dfc00017 	ldw	ra,0(sp)
   20558:	dec00404 	addi	sp,sp,16
   2055c:	f800283a 	ret

00020560 <_puts_r>:
   20560:	defff604 	addi	sp,sp,-40
   20564:	dc000715 	stw	r16,28(sp)
   20568:	2021883a 	mov	r16,r4
   2056c:	2809883a 	mov	r4,r5
   20570:	dc400815 	stw	r17,32(sp)
   20574:	dfc00915 	stw	ra,36(sp)
   20578:	2823883a 	mov	r17,r5
   2057c:	002062c0 	call	2062c <strlen>
   20580:	00c000f4 	movhi	r3,3
   20584:	18c8f404 	addi	r3,r3,9168
   20588:	18c00017 	ldw	r3,0(r3)
   2058c:	11000044 	addi	r4,r2,1
   20590:	d8800115 	stw	r2,4(sp)
   20594:	18c00217 	ldw	r3,8(r3)
   20598:	014000f4 	movhi	r5,3
   2059c:	29412504 	addi	r5,r5,1172
   205a0:	1880030b 	ldhu	r2,12(r3)
   205a4:	d9400215 	stw	r5,8(sp)
   205a8:	d9000615 	stw	r4,24(sp)
   205ac:	01400044 	movi	r5,1
   205b0:	01000084 	movi	r4,2
   205b4:	d9000515 	stw	r4,20(sp)
   205b8:	dc400015 	stw	r17,0(sp)
   205bc:	d9400315 	stw	r5,12(sp)
   205c0:	dec00415 	stw	sp,16(sp)
   205c4:	1108000c 	andi	r4,r2,8192
   205c8:	2000061e 	bne	r4,zero,205e4 <_puts_r+0x84>
   205cc:	19401917 	ldw	r5,100(r3)
   205d0:	0137ffc4 	movi	r4,-8193
   205d4:	10880014 	ori	r2,r2,8192
   205d8:	2908703a 	and	r4,r5,r4
   205dc:	1880030d 	sth	r2,12(r3)
   205e0:	19001915 	stw	r4,100(r3)
   205e4:	81400217 	ldw	r5,8(r16)
   205e8:	8009883a 	mov	r4,r16
   205ec:	d9800404 	addi	r6,sp,16
   205f0:	0024b480 	call	24b48 <__sfvwrite_r>
   205f4:	1000061e 	bne	r2,zero,20610 <_puts_r+0xb0>
   205f8:	00800284 	movi	r2,10
   205fc:	dfc00917 	ldw	ra,36(sp)
   20600:	dc400817 	ldw	r17,32(sp)
   20604:	dc000717 	ldw	r16,28(sp)
   20608:	dec00a04 	addi	sp,sp,40
   2060c:	f800283a 	ret
   20610:	00bfffc4 	movi	r2,-1
   20614:	003ff906 	br	205fc <_gp+0xfffe6230>

00020618 <puts>:
   20618:	008000f4 	movhi	r2,3
   2061c:	1088f404 	addi	r2,r2,9168
   20620:	200b883a 	mov	r5,r4
   20624:	11000017 	ldw	r4,0(r2)
   20628:	00205601 	jmpi	20560 <_puts_r>

0002062c <strlen>:
   2062c:	208000cc 	andi	r2,r4,3
   20630:	10002026 	beq	r2,zero,206b4 <strlen+0x88>
   20634:	20800007 	ldb	r2,0(r4)
   20638:	10002026 	beq	r2,zero,206bc <strlen+0x90>
   2063c:	2005883a 	mov	r2,r4
   20640:	00000206 	br	2064c <strlen+0x20>
   20644:	10c00007 	ldb	r3,0(r2)
   20648:	18001826 	beq	r3,zero,206ac <strlen+0x80>
   2064c:	10800044 	addi	r2,r2,1
   20650:	10c000cc 	andi	r3,r2,3
   20654:	183ffb1e 	bne	r3,zero,20644 <_gp+0xfffe6278>
   20658:	10c00017 	ldw	r3,0(r2)
   2065c:	01ffbff4 	movhi	r7,65279
   20660:	39ffbfc4 	addi	r7,r7,-257
   20664:	00ca303a 	nor	r5,zero,r3
   20668:	01a02074 	movhi	r6,32897
   2066c:	19c7883a 	add	r3,r3,r7
   20670:	31a02004 	addi	r6,r6,-32640
   20674:	1946703a 	and	r3,r3,r5
   20678:	1986703a 	and	r3,r3,r6
   2067c:	1800091e 	bne	r3,zero,206a4 <strlen+0x78>
   20680:	10800104 	addi	r2,r2,4
   20684:	10c00017 	ldw	r3,0(r2)
   20688:	19cb883a 	add	r5,r3,r7
   2068c:	00c6303a 	nor	r3,zero,r3
   20690:	28c6703a 	and	r3,r5,r3
   20694:	1986703a 	and	r3,r3,r6
   20698:	183ff926 	beq	r3,zero,20680 <_gp+0xfffe62b4>
   2069c:	00000106 	br	206a4 <strlen+0x78>
   206a0:	10800044 	addi	r2,r2,1
   206a4:	10c00007 	ldb	r3,0(r2)
   206a8:	183ffd1e 	bne	r3,zero,206a0 <_gp+0xfffe62d4>
   206ac:	1105c83a 	sub	r2,r2,r4
   206b0:	f800283a 	ret
   206b4:	2005883a 	mov	r2,r4
   206b8:	003fe706 	br	20658 <_gp+0xfffe628c>
   206bc:	0005883a 	mov	r2,zero
   206c0:	f800283a 	ret

000206c4 <___vfprintf_internal_r>:
   206c4:	defeb604 	addi	sp,sp,-1320
   206c8:	dfc14915 	stw	ra,1316(sp)
   206cc:	ddc14715 	stw	r23,1308(sp)
   206d0:	dd814615 	stw	r22,1304(sp)
   206d4:	282f883a 	mov	r23,r5
   206d8:	202d883a 	mov	r22,r4
   206dc:	d9812a15 	stw	r6,1192(sp)
   206e0:	d9c12d15 	stw	r7,1204(sp)
   206e4:	df014815 	stw	fp,1312(sp)
   206e8:	dd414515 	stw	r21,1300(sp)
   206ec:	dd014415 	stw	r20,1296(sp)
   206f0:	dcc14315 	stw	r19,1292(sp)
   206f4:	dc814215 	stw	r18,1288(sp)
   206f8:	dc414115 	stw	r17,1284(sp)
   206fc:	dc014015 	stw	r16,1280(sp)
   20700:	00252080 	call	25208 <_localeconv_r>
   20704:	10800017 	ldw	r2,0(r2)
   20708:	1009883a 	mov	r4,r2
   2070c:	d8813515 	stw	r2,1236(sp)
   20710:	002062c0 	call	2062c <strlen>
   20714:	d8813815 	stw	r2,1248(sp)
   20718:	b0000226 	beq	r22,zero,20724 <___vfprintf_internal_r+0x60>
   2071c:	b0800e17 	ldw	r2,56(r22)
   20720:	10010426 	beq	r2,zero,20b34 <___vfprintf_internal_r+0x470>
   20724:	b8c0030b 	ldhu	r3,12(r23)
   20728:	1908000c 	andi	r4,r3,8192
   2072c:	1805883a 	mov	r2,r3
   20730:	2000071e 	bne	r4,zero,20750 <___vfprintf_internal_r+0x8c>
   20734:	b9001917 	ldw	r4,100(r23)
   20738:	18880014 	ori	r2,r3,8192
   2073c:	00f7ffc4 	movi	r3,-8193
   20740:	20c8703a 	and	r4,r4,r3
   20744:	b880030d 	sth	r2,12(r23)
   20748:	1007883a 	mov	r3,r2
   2074c:	b9001915 	stw	r4,100(r23)
   20750:	1100020c 	andi	r4,r2,8
   20754:	2000a726 	beq	r4,zero,209f4 <___vfprintf_internal_r+0x330>
   20758:	b9000417 	ldw	r4,16(r23)
   2075c:	2000a526 	beq	r4,zero,209f4 <___vfprintf_internal_r+0x330>
   20760:	1080068c 	andi	r2,r2,26
   20764:	01000284 	movi	r4,10
   20768:	1100ab26 	beq	r2,r4,20a18 <___vfprintf_internal_r+0x354>
   2076c:	dac10e04 	addi	r11,sp,1080
   20770:	db010dc4 	addi	r12,sp,1079
   20774:	d8800404 	addi	r2,sp,16
   20778:	050000f4 	movhi	r20,3
   2077c:	dac12815 	stw	r11,1184(sp)
   20780:	5b17c83a 	sub	r11,r11,r12
   20784:	a5013684 	addi	r20,r20,1242
   20788:	db012915 	stw	r12,1188(sp)
   2078c:	d8811e15 	stw	r2,1144(sp)
   20790:	d8012015 	stw	zero,1152(sp)
   20794:	d8011f15 	stw	zero,1148(sp)
   20798:	d8013315 	stw	zero,1228(sp)
   2079c:	d8013715 	stw	zero,1244(sp)
   207a0:	d8013915 	stw	zero,1252(sp)
   207a4:	d8013b15 	stw	zero,1260(sp)
   207a8:	d8013a15 	stw	zero,1256(sp)
   207ac:	d8012f15 	stw	zero,1212(sp)
   207b0:	1011883a 	mov	r8,r2
   207b4:	dac13c15 	stw	r11,1264(sp)
   207b8:	db012a17 	ldw	r12,1192(sp)
   207bc:	60800007 	ldb	r2,0(r12)
   207c0:	1000df26 	beq	r2,zero,20b40 <___vfprintf_internal_r+0x47c>
   207c4:	00c00944 	movi	r3,37
   207c8:	10c0dd26 	beq	r2,r3,20b40 <___vfprintf_internal_r+0x47c>
   207cc:	6021883a 	mov	r16,r12
   207d0:	00000106 	br	207d8 <___vfprintf_internal_r+0x114>
   207d4:	10c08426 	beq	r2,r3,209e8 <___vfprintf_internal_r+0x324>
   207d8:	84000044 	addi	r16,r16,1
   207dc:	80800007 	ldb	r2,0(r16)
   207e0:	103ffc1e 	bne	r2,zero,207d4 <_gp+0xfffe6408>
   207e4:	dac12a17 	ldw	r11,1192(sp)
   207e8:	82e3c83a 	sub	r17,r16,r11
   207ec:	88000f26 	beq	r17,zero,2082c <___vfprintf_internal_r+0x168>
   207f0:	d8c12017 	ldw	r3,1152(sp)
   207f4:	d8811f17 	ldw	r2,1148(sp)
   207f8:	dac12a17 	ldw	r11,1192(sp)
   207fc:	1c47883a 	add	r3,r3,r17
   20800:	10800044 	addi	r2,r2,1
   20804:	d8c12015 	stw	r3,1152(sp)
   20808:	42c00015 	stw	r11,0(r8)
   2080c:	44400115 	stw	r17,4(r8)
   20810:	d8811f15 	stw	r2,1148(sp)
   20814:	00c001c4 	movi	r3,7
   20818:	1880b416 	blt	r3,r2,20aec <___vfprintf_internal_r+0x428>
   2081c:	42000204 	addi	r8,r8,8
   20820:	db012f17 	ldw	r12,1212(sp)
   20824:	6459883a 	add	r12,r12,r17
   20828:	db012f15 	stw	r12,1212(sp)
   2082c:	80800007 	ldb	r2,0(r16)
   20830:	1000b526 	beq	r2,zero,20b08 <___vfprintf_internal_r+0x444>
   20834:	80800044 	addi	r2,r16,1
   20838:	84000047 	ldb	r16,1(r16)
   2083c:	d8012785 	stb	zero,1182(sp)
   20840:	000d883a 	mov	r6,zero
   20844:	027fffc4 	movi	r9,-1
   20848:	d8012e15 	stw	zero,1208(sp)
   2084c:	0023883a 	mov	r17,zero
   20850:	01001604 	movi	r4,88
   20854:	01400244 	movi	r5,9
   20858:	02800a84 	movi	r10,42
   2085c:	01c01b04 	movi	r7,108
   20860:	10c00044 	addi	r3,r2,1
   20864:	80bff804 	addi	r2,r16,-32
   20868:	2082f236 	bltu	r4,r2,21434 <___vfprintf_internal_r+0xd70>
   2086c:	100490ba 	slli	r2,r2,2
   20870:	02c000b4 	movhi	r11,2
   20874:	5ac22104 	addi	r11,r11,2180
   20878:	12c5883a 	add	r2,r2,r11
   2087c:	10800017 	ldw	r2,0(r2)
   20880:	1000683a 	jmp	r2
   20884:	0002127c 	xorhi	zero,zero,2121
   20888:	00021434 	movhi	zero,2128
   2088c:	00021434 	movhi	zero,2128
   20890:	0002129c 	xori	zero,zero,2122
   20894:	00021434 	movhi	zero,2128
   20898:	00021434 	movhi	zero,2128
   2089c:	00021434 	movhi	zero,2128
   208a0:	00021434 	movhi	zero,2128
   208a4:	00021434 	movhi	zero,2128
   208a8:	00021434 	movhi	zero,2128
   208ac:	000213f8 	rdprs	zero,zero,2127
   208b0:	00021424 	muli	zero,zero,2128
   208b4:	00021434 	movhi	zero,2128
   208b8:	00020b48 	cmpgei	zero,zero,2093
   208bc:	00020b58 	cmpnei	zero,zero,2093
   208c0:	00021434 	movhi	zero,2128
   208c4:	00020b98 	cmpnei	zero,zero,2094
   208c8:	0002108c 	andi	zero,zero,2114
   208cc:	0002108c 	andi	zero,zero,2114
   208d0:	0002108c 	andi	zero,zero,2114
   208d4:	0002108c 	andi	zero,zero,2114
   208d8:	0002108c 	andi	zero,zero,2114
   208dc:	0002108c 	andi	zero,zero,2114
   208e0:	0002108c 	andi	zero,zero,2114
   208e4:	0002108c 	andi	zero,zero,2114
   208e8:	0002108c 	andi	zero,zero,2114
   208ec:	00021434 	movhi	zero,2128
   208f0:	00021434 	movhi	zero,2128
   208f4:	00021434 	movhi	zero,2128
   208f8:	00021434 	movhi	zero,2128
   208fc:	00021434 	movhi	zero,2128
   20900:	00021434 	movhi	zero,2128
   20904:	00021434 	movhi	zero,2128
   20908:	00021434 	movhi	zero,2128
   2090c:	00021434 	movhi	zero,2128
   20910:	00021434 	movhi	zero,2128
   20914:	000210c0 	call	210c <__reset-0x1def4>
   20918:	00020ba8 	cmpgeui	zero,zero,2094
   2091c:	00021434 	movhi	zero,2128
   20920:	00020ba8 	cmpgeui	zero,zero,2094
   20924:	00021434 	movhi	zero,2128
   20928:	00021434 	movhi	zero,2128
   2092c:	00021434 	movhi	zero,2128
   20930:	00021434 	movhi	zero,2128
   20934:	00020c4c 	andi	zero,zero,2097
   20938:	00021434 	movhi	zero,2128
   2093c:	00021434 	movhi	zero,2128
   20940:	00020c5c 	xori	zero,zero,2097
   20944:	00021434 	movhi	zero,2128
   20948:	00021434 	movhi	zero,2128
   2094c:	00021434 	movhi	zero,2128
   20950:	00021434 	movhi	zero,2128
   20954:	00021434 	movhi	zero,2128
   20958:	00021058 	cmpnei	zero,zero,2113
   2095c:	00021434 	movhi	zero,2128
   20960:	00021434 	movhi	zero,2128
   20964:	00021108 	cmpgei	zero,zero,2116
   20968:	00021434 	movhi	zero,2128
   2096c:	00021434 	movhi	zero,2128
   20970:	00021434 	movhi	zero,2128
   20974:	00021434 	movhi	zero,2128
   20978:	00021434 	movhi	zero,2128
   2097c:	00021434 	movhi	zero,2128
   20980:	00021434 	movhi	zero,2128
   20984:	00021434 	movhi	zero,2128
   20988:	00021434 	movhi	zero,2128
   2098c:	00021434 	movhi	zero,2128
   20990:	000212fc 	xorhi	zero,zero,2123
   20994:	000212ac 	andhi	zero,zero,2122
   20998:	00020ba8 	cmpgeui	zero,zero,2094
   2099c:	00020ba8 	cmpgeui	zero,zero,2094
   209a0:	00020ba8 	cmpgeui	zero,zero,2094
   209a4:	000212ec 	andhi	zero,zero,2123
   209a8:	000212ac 	andhi	zero,zero,2122
   209ac:	00021434 	movhi	zero,2128
   209b0:	00021434 	movhi	zero,2128
   209b4:	000211f4 	movhi	zero,2119
   209b8:	00021434 	movhi	zero,2128
   209bc:	00021208 	cmpgei	zero,zero,2120
   209c0:	0002123c 	xorhi	zero,zero,2120
   209c4:	0002133c 	xorhi	zero,zero,2124
   209c8:	00021164 	muli	zero,zero,2117
   209cc:	00021434 	movhi	zero,2128
   209d0:	00021384 	movi	zero,2126
   209d4:	00021434 	movhi	zero,2128
   209d8:	00021174 	movhi	zero,2117
   209dc:	00021434 	movhi	zero,2128
   209e0:	00021434 	movhi	zero,2128
   209e4:	000211b4 	movhi	zero,2118
   209e8:	db012a17 	ldw	r12,1192(sp)
   209ec:	8323c83a 	sub	r17,r16,r12
   209f0:	003f7e06 	br	207ec <_gp+0xfffe6420>
   209f4:	b009883a 	mov	r4,r22
   209f8:	b80b883a 	mov	r5,r23
   209fc:	00226e40 	call	226e4 <__swsetup_r>
   20a00:	10002d1e 	bne	r2,zero,20ab8 <___vfprintf_internal_r+0x3f4>
   20a04:	b8c0030b 	ldhu	r3,12(r23)
   20a08:	01000284 	movi	r4,10
   20a0c:	1805883a 	mov	r2,r3
   20a10:	1080068c 	andi	r2,r2,26
   20a14:	113f551e 	bne	r2,r4,2076c <_gp+0xfffe63a0>
   20a18:	b880038b 	ldhu	r2,14(r23)
   20a1c:	113fffcc 	andi	r4,r2,65535
   20a20:	2120001c 	xori	r4,r4,32768
   20a24:	21200004 	addi	r4,r4,-32768
   20a28:	203f5016 	blt	r4,zero,2076c <_gp+0xfffe63a0>
   20a2c:	bac01917 	ldw	r11,100(r23)
   20a30:	ba800717 	ldw	r10,28(r23)
   20a34:	ba400917 	ldw	r9,36(r23)
   20a38:	d9812a17 	ldw	r6,1192(sp)
   20a3c:	d9c12d17 	ldw	r7,1204(sp)
   20a40:	02010004 	movi	r8,1024
   20a44:	18ffff4c 	andi	r3,r3,65533
   20a48:	d881078d 	sth	r2,1054(sp)
   20a4c:	b009883a 	mov	r4,r22
   20a50:	d8800404 	addi	r2,sp,16
   20a54:	d9410404 	addi	r5,sp,1040
   20a58:	d8c1070d 	sth	r3,1052(sp)
   20a5c:	dac11d15 	stw	r11,1140(sp)
   20a60:	da810b15 	stw	r10,1068(sp)
   20a64:	da410d15 	stw	r9,1076(sp)
   20a68:	d8810415 	stw	r2,1040(sp)
   20a6c:	d8810815 	stw	r2,1056(sp)
   20a70:	da010615 	stw	r8,1048(sp)
   20a74:	da010915 	stw	r8,1060(sp)
   20a78:	d8010a15 	stw	zero,1064(sp)
   20a7c:	00206c40 	call	206c4 <___vfprintf_internal_r>
   20a80:	1021883a 	mov	r16,r2
   20a84:	10000416 	blt	r2,zero,20a98 <___vfprintf_internal_r+0x3d4>
   20a88:	b009883a 	mov	r4,r22
   20a8c:	d9410404 	addi	r5,sp,1040
   20a90:	002413c0 	call	2413c <_fflush_r>
   20a94:	1006ee1e 	bne	r2,zero,22650 <___vfprintf_internal_r+0x1f8c>
   20a98:	d881070b 	ldhu	r2,1052(sp)
   20a9c:	1080100c 	andi	r2,r2,64
   20aa0:	10000326 	beq	r2,zero,20ab0 <___vfprintf_internal_r+0x3ec>
   20aa4:	b880030b 	ldhu	r2,12(r23)
   20aa8:	10801014 	ori	r2,r2,64
   20aac:	b880030d 	sth	r2,12(r23)
   20ab0:	8005883a 	mov	r2,r16
   20ab4:	00000106 	br	20abc <___vfprintf_internal_r+0x3f8>
   20ab8:	00bfffc4 	movi	r2,-1
   20abc:	dfc14917 	ldw	ra,1316(sp)
   20ac0:	df014817 	ldw	fp,1312(sp)
   20ac4:	ddc14717 	ldw	r23,1308(sp)
   20ac8:	dd814617 	ldw	r22,1304(sp)
   20acc:	dd414517 	ldw	r21,1300(sp)
   20ad0:	dd014417 	ldw	r20,1296(sp)
   20ad4:	dcc14317 	ldw	r19,1292(sp)
   20ad8:	dc814217 	ldw	r18,1288(sp)
   20adc:	dc414117 	ldw	r17,1284(sp)
   20ae0:	dc014017 	ldw	r16,1280(sp)
   20ae4:	dec14a04 	addi	sp,sp,1320
   20ae8:	f800283a 	ret
   20aec:	b009883a 	mov	r4,r22
   20af0:	b80b883a 	mov	r5,r23
   20af4:	d9811e04 	addi	r6,sp,1144
   20af8:	002790c0 	call	2790c <__sprint_r>
   20afc:	1000081e 	bne	r2,zero,20b20 <___vfprintf_internal_r+0x45c>
   20b00:	da000404 	addi	r8,sp,16
   20b04:	003f4606 	br	20820 <_gp+0xfffe6454>
   20b08:	d8812017 	ldw	r2,1152(sp)
   20b0c:	10000426 	beq	r2,zero,20b20 <___vfprintf_internal_r+0x45c>
   20b10:	b009883a 	mov	r4,r22
   20b14:	b80b883a 	mov	r5,r23
   20b18:	d9811e04 	addi	r6,sp,1144
   20b1c:	002790c0 	call	2790c <__sprint_r>
   20b20:	b880030b 	ldhu	r2,12(r23)
   20b24:	1080100c 	andi	r2,r2,64
   20b28:	103fe31e 	bne	r2,zero,20ab8 <_gp+0xfffe66ec>
   20b2c:	d8812f17 	ldw	r2,1212(sp)
   20b30:	003fe206 	br	20abc <_gp+0xfffe66f0>
   20b34:	b009883a 	mov	r4,r22
   20b38:	00246e40 	call	246e4 <__sinit>
   20b3c:	003ef906 	br	20724 <_gp+0xfffe6358>
   20b40:	dc012a17 	ldw	r16,1192(sp)
   20b44:	003f3906 	br	2082c <_gp+0xfffe6460>
   20b48:	1805883a 	mov	r2,r3
   20b4c:	8c400114 	ori	r17,r17,4
   20b50:	1c000007 	ldb	r16,0(r3)
   20b54:	003f4206 	br	20860 <_gp+0xfffe6494>
   20b58:	1c000007 	ldb	r16,0(r3)
   20b5c:	18800044 	addi	r2,r3,1
   20b60:	8286b326 	beq	r16,r10,22630 <___vfprintf_internal_r+0x1f6c>
   20b64:	82fff404 	addi	r11,r16,-48
   20b68:	1007883a 	mov	r3,r2
   20b6c:	0013883a 	mov	r9,zero
   20b70:	2aff3c36 	bltu	r5,r11,20864 <_gp+0xfffe6498>
   20b74:	1c000007 	ldb	r16,0(r3)
   20b78:	4a4002a4 	muli	r9,r9,10
   20b7c:	18c00044 	addi	r3,r3,1
   20b80:	5a53883a 	add	r9,r11,r9
   20b84:	82fff404 	addi	r11,r16,-48
   20b88:	2afffa2e 	bgeu	r5,r11,20b74 <_gp+0xfffe67a8>
   20b8c:	483f350e 	bge	r9,zero,20864 <_gp+0xfffe6498>
   20b90:	027fffc4 	movi	r9,-1
   20b94:	003f3306 	br	20864 <_gp+0xfffe6498>
   20b98:	8c402014 	ori	r17,r17,128
   20b9c:	1805883a 	mov	r2,r3
   20ba0:	1c000007 	ldb	r16,0(r3)
   20ba4:	003f2e06 	br	20860 <_gp+0xfffe6494>
   20ba8:	db012d17 	ldw	r12,1204(sp)
   20bac:	dac12d17 	ldw	r11,1204(sp)
   20bb0:	d8c12a15 	stw	r3,1192(sp)
   20bb4:	63000017 	ldw	r12,0(r12)
   20bb8:	5ac00117 	ldw	r11,4(r11)
   20bbc:	d9812785 	stb	r6,1182(sp)
   20bc0:	6009883a 	mov	r4,r12
   20bc4:	580b883a 	mov	r5,r11
   20bc8:	db013715 	stw	r12,1244(sp)
   20bcc:	da013f15 	stw	r8,1276(sp)
   20bd0:	da413e15 	stw	r9,1272(sp)
   20bd4:	dac13915 	stw	r11,1252(sp)
   20bd8:	00275680 	call	27568 <__fpclassifyd>
   20bdc:	db012d17 	ldw	r12,1204(sp)
   20be0:	04800044 	movi	r18,1
   20be4:	da013f17 	ldw	r8,1276(sp)
   20be8:	64c00204 	addi	r19,r12,8
   20bec:	da413e17 	ldw	r9,1272(sp)
   20bf0:	d9013717 	ldw	r4,1244(sp)
   20bf4:	d9413917 	ldw	r5,1252(sp)
   20bf8:	1484581e 	bne	r2,r18,21d5c <___vfprintf_internal_r+0x1698>
   20bfc:	000d883a 	mov	r6,zero
   20c00:	000f883a 	mov	r7,zero
   20c04:	002b5240 	call	2b524 <__ledf2>
   20c08:	da013f17 	ldw	r8,1276(sp)
   20c0c:	1005ef16 	blt	r2,zero,223cc <___vfprintf_internal_r+0x1d08>
   20c10:	dd412783 	ldbu	r21,1182(sp)
   20c14:	008011c4 	movi	r2,71
   20c18:	14053b0e 	bge	r2,r16,22108 <___vfprintf_internal_r+0x1a44>
   20c1c:	00c000f4 	movhi	r3,3
   20c20:	18c12704 	addi	r3,r3,1180
   20c24:	d8c13115 	stw	r3,1220(sp)
   20c28:	02c000c4 	movi	r11,3
   20c2c:	00bfdfc4 	movi	r2,-129
   20c30:	dac12b15 	stw	r11,1196(sp)
   20c34:	88a2703a 	and	r17,r17,r2
   20c38:	dcc12d15 	stw	r19,1204(sp)
   20c3c:	5825883a 	mov	r18,r11
   20c40:	d8013215 	stw	zero,1224(sp)
   20c44:	d8013415 	stw	zero,1232(sp)
   20c48:	00003206 	br	20d14 <___vfprintf_internal_r+0x650>
   20c4c:	8c400214 	ori	r17,r17,8
   20c50:	1805883a 	mov	r2,r3
   20c54:	1c000007 	ldb	r16,0(r3)
   20c58:	003f0106 	br	20860 <_gp+0xfffe6494>
   20c5c:	8c400414 	ori	r17,r17,16
   20c60:	d8c12a15 	stw	r3,1192(sp)
   20c64:	88c0080c 	andi	r3,r17,32
   20c68:	d8812d17 	ldw	r2,1204(sp)
   20c6c:	18017726 	beq	r3,zero,2124c <___vfprintf_internal_r+0xb88>
   20c70:	db012d17 	ldw	r12,1204(sp)
   20c74:	14c00017 	ldw	r19,0(r2)
   20c78:	17000117 	ldw	fp,4(r2)
   20c7c:	63000204 	addi	r12,r12,8
   20c80:	db012d15 	stw	r12,1204(sp)
   20c84:	0005883a 	mov	r2,zero
   20c88:	9f06b03a 	or	r3,r19,fp
   20c8c:	d8012785 	stb	zero,1182(sp)
   20c90:	da413215 	stw	r9,1224(sp)
   20c94:	002b883a 	mov	r21,zero
   20c98:	48000216 	blt	r9,zero,20ca4 <___vfprintf_internal_r+0x5e0>
   20c9c:	013fdfc4 	movi	r4,-129
   20ca0:	8922703a 	and	r17,r17,r4
   20ca4:	1801ed1e 	bne	r3,zero,2145c <___vfprintf_internal_r+0xd98>
   20ca8:	4802e026 	beq	r9,zero,2182c <___vfprintf_internal_r+0x1168>
   20cac:	10803fcc 	andi	r2,r2,255
   20cb0:	00c00044 	movi	r3,1
   20cb4:	10c20f26 	beq	r2,r3,214f4 <___vfprintf_internal_r+0xe30>
   20cb8:	00c00084 	movi	r3,2
   20cbc:	10c2fd26 	beq	r2,r3,218b4 <___vfprintf_internal_r+0x11f0>
   20cc0:	d8c10e04 	addi	r3,sp,1080
   20cc4:	9808d0fa 	srli	r4,r19,3
   20cc8:	e00a977a 	slli	r5,fp,29
   20ccc:	e038d0fa 	srli	fp,fp,3
   20cd0:	9cc001cc 	andi	r19,r19,7
   20cd4:	98800c04 	addi	r2,r19,48
   20cd8:	18ffffc4 	addi	r3,r3,-1
   20cdc:	2926b03a 	or	r19,r5,r4
   20ce0:	18800005 	stb	r2,0(r3)
   20ce4:	9f08b03a 	or	r4,r19,fp
   20ce8:	203ff61e 	bne	r4,zero,20cc4 <_gp+0xfffe68f8>
   20cec:	8900004c 	andi	r4,r17,1
   20cf0:	d8c13115 	stw	r3,1220(sp)
   20cf4:	2003791e 	bne	r4,zero,21adc <___vfprintf_internal_r+0x1418>
   20cf8:	dac12817 	ldw	r11,1184(sp)
   20cfc:	58e5c83a 	sub	r18,r11,r3
   20d00:	9005883a 	mov	r2,r18
   20d04:	9240010e 	bge	r18,r9,20d0c <___vfprintf_internal_r+0x648>
   20d08:	4805883a 	mov	r2,r9
   20d0c:	d8812b15 	stw	r2,1196(sp)
   20d10:	d8013415 	stw	zero,1232(sp)
   20d14:	a8803fcc 	andi	r2,r21,255
   20d18:	1080201c 	xori	r2,r2,128
   20d1c:	10bfe004 	addi	r2,r2,-128
   20d20:	10000326 	beq	r2,zero,20d30 <___vfprintf_internal_r+0x66c>
   20d24:	db012b17 	ldw	r12,1196(sp)
   20d28:	63000044 	addi	r12,r12,1
   20d2c:	db012b15 	stw	r12,1196(sp)
   20d30:	88c0008c 	andi	r3,r17,2
   20d34:	d8c12c15 	stw	r3,1200(sp)
   20d38:	18000326 	beq	r3,zero,20d48 <___vfprintf_internal_r+0x684>
   20d3c:	dac12b17 	ldw	r11,1196(sp)
   20d40:	5ac00084 	addi	r11,r11,2
   20d44:	dac12b15 	stw	r11,1196(sp)
   20d48:	8b00210c 	andi	r12,r17,132
   20d4c:	db013015 	stw	r12,1216(sp)
   20d50:	6001c01e 	bne	r12,zero,21454 <___vfprintf_internal_r+0xd90>
   20d54:	dac12e17 	ldw	r11,1208(sp)
   20d58:	db012b17 	ldw	r12,1196(sp)
   20d5c:	5b39c83a 	sub	fp,r11,r12
   20d60:	0701bc0e 	bge	zero,fp,21454 <___vfprintf_internal_r+0xd90>
   20d64:	02400404 	movi	r9,16
   20d68:	d8c12017 	ldw	r3,1152(sp)
   20d6c:	d8811f17 	ldw	r2,1148(sp)
   20d70:	4f05220e 	bge	r9,fp,221fc <___vfprintf_internal_r+0x1b38>
   20d74:	014000f4 	movhi	r5,3
   20d78:	29413a84 	addi	r5,r5,1258
   20d7c:	d9413615 	stw	r5,1240(sp)
   20d80:	482b883a 	mov	r21,r9
   20d84:	04c001c4 	movi	r19,7
   20d88:	00000306 	br	20d98 <___vfprintf_internal_r+0x6d4>
   20d8c:	e73ffc04 	addi	fp,fp,-16
   20d90:	42000204 	addi	r8,r8,8
   20d94:	af00130e 	bge	r21,fp,20de4 <___vfprintf_internal_r+0x720>
   20d98:	02c000f4 	movhi	r11,3
   20d9c:	18c00404 	addi	r3,r3,16
   20da0:	10800044 	addi	r2,r2,1
   20da4:	5ac13a84 	addi	r11,r11,1258
   20da8:	42c00015 	stw	r11,0(r8)
   20dac:	45400115 	stw	r21,4(r8)
   20db0:	d8c12015 	stw	r3,1152(sp)
   20db4:	d8811f15 	stw	r2,1148(sp)
   20db8:	98bff40e 	bge	r19,r2,20d8c <_gp+0xfffe69c0>
   20dbc:	b009883a 	mov	r4,r22
   20dc0:	b80b883a 	mov	r5,r23
   20dc4:	d9811e04 	addi	r6,sp,1144
   20dc8:	002790c0 	call	2790c <__sprint_r>
   20dcc:	103f541e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   20dd0:	e73ffc04 	addi	fp,fp,-16
   20dd4:	d8c12017 	ldw	r3,1152(sp)
   20dd8:	d8811f17 	ldw	r2,1148(sp)
   20ddc:	da000404 	addi	r8,sp,16
   20de0:	af3fed16 	blt	r21,fp,20d98 <_gp+0xfffe69cc>
   20de4:	db013617 	ldw	r12,1240(sp)
   20de8:	e0c7883a 	add	r3,fp,r3
   20dec:	10800044 	addi	r2,r2,1
   20df0:	43000015 	stw	r12,0(r8)
   20df4:	47000115 	stw	fp,4(r8)
   20df8:	d8c12015 	stw	r3,1152(sp)
   20dfc:	d8811f15 	stw	r2,1148(sp)
   20e00:	010001c4 	movi	r4,7
   20e04:	2082f416 	blt	r4,r2,219d8 <___vfprintf_internal_r+0x1314>
   20e08:	d8812787 	ldb	r2,1182(sp)
   20e0c:	42000204 	addi	r8,r8,8
   20e10:	10000c26 	beq	r2,zero,20e44 <___vfprintf_internal_r+0x780>
   20e14:	d8811f17 	ldw	r2,1148(sp)
   20e18:	d9012784 	addi	r4,sp,1182
   20e1c:	18c00044 	addi	r3,r3,1
   20e20:	10800044 	addi	r2,r2,1
   20e24:	41000015 	stw	r4,0(r8)
   20e28:	01000044 	movi	r4,1
   20e2c:	41000115 	stw	r4,4(r8)
   20e30:	d8c12015 	stw	r3,1152(sp)
   20e34:	d8811f15 	stw	r2,1148(sp)
   20e38:	010001c4 	movi	r4,7
   20e3c:	20828d16 	blt	r4,r2,21874 <___vfprintf_internal_r+0x11b0>
   20e40:	42000204 	addi	r8,r8,8
   20e44:	dac12c17 	ldw	r11,1200(sp)
   20e48:	58000c26 	beq	r11,zero,20e7c <___vfprintf_internal_r+0x7b8>
   20e4c:	d8811f17 	ldw	r2,1148(sp)
   20e50:	d9012704 	addi	r4,sp,1180
   20e54:	18c00084 	addi	r3,r3,2
   20e58:	10800044 	addi	r2,r2,1
   20e5c:	41000015 	stw	r4,0(r8)
   20e60:	01000084 	movi	r4,2
   20e64:	41000115 	stw	r4,4(r8)
   20e68:	d8c12015 	stw	r3,1152(sp)
   20e6c:	d8811f15 	stw	r2,1148(sp)
   20e70:	010001c4 	movi	r4,7
   20e74:	20828716 	blt	r4,r2,21894 <___vfprintf_internal_r+0x11d0>
   20e78:	42000204 	addi	r8,r8,8
   20e7c:	db013017 	ldw	r12,1216(sp)
   20e80:	00802004 	movi	r2,128
   20e84:	6081e926 	beq	r12,r2,2162c <___vfprintf_internal_r+0xf68>
   20e88:	db013217 	ldw	r12,1224(sp)
   20e8c:	64abc83a 	sub	r21,r12,r18
   20e90:	0540260e 	bge	zero,r21,20f2c <___vfprintf_internal_r+0x868>
   20e94:	07000404 	movi	fp,16
   20e98:	d8811f17 	ldw	r2,1148(sp)
   20e9c:	e5443d0e 	bge	fp,r21,21f94 <___vfprintf_internal_r+0x18d0>
   20ea0:	014000f4 	movhi	r5,3
   20ea4:	29413684 	addi	r5,r5,1242
   20ea8:	d9412c15 	stw	r5,1200(sp)
   20eac:	04c001c4 	movi	r19,7
   20eb0:	00000306 	br	20ec0 <___vfprintf_internal_r+0x7fc>
   20eb4:	ad7ffc04 	addi	r21,r21,-16
   20eb8:	42000204 	addi	r8,r8,8
   20ebc:	e540110e 	bge	fp,r21,20f04 <___vfprintf_internal_r+0x840>
   20ec0:	18c00404 	addi	r3,r3,16
   20ec4:	10800044 	addi	r2,r2,1
   20ec8:	45000015 	stw	r20,0(r8)
   20ecc:	47000115 	stw	fp,4(r8)
   20ed0:	d8c12015 	stw	r3,1152(sp)
   20ed4:	d8811f15 	stw	r2,1148(sp)
   20ed8:	98bff60e 	bge	r19,r2,20eb4 <_gp+0xfffe6ae8>
   20edc:	b009883a 	mov	r4,r22
   20ee0:	b80b883a 	mov	r5,r23
   20ee4:	d9811e04 	addi	r6,sp,1144
   20ee8:	002790c0 	call	2790c <__sprint_r>
   20eec:	103f0c1e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   20ef0:	ad7ffc04 	addi	r21,r21,-16
   20ef4:	d8c12017 	ldw	r3,1152(sp)
   20ef8:	d8811f17 	ldw	r2,1148(sp)
   20efc:	da000404 	addi	r8,sp,16
   20f00:	e57fef16 	blt	fp,r21,20ec0 <_gp+0xfffe6af4>
   20f04:	dac12c17 	ldw	r11,1200(sp)
   20f08:	1d47883a 	add	r3,r3,r21
   20f0c:	10800044 	addi	r2,r2,1
   20f10:	42c00015 	stw	r11,0(r8)
   20f14:	45400115 	stw	r21,4(r8)
   20f18:	d8c12015 	stw	r3,1152(sp)
   20f1c:	d8811f15 	stw	r2,1148(sp)
   20f20:	010001c4 	movi	r4,7
   20f24:	20824b16 	blt	r4,r2,21854 <___vfprintf_internal_r+0x1190>
   20f28:	42000204 	addi	r8,r8,8
   20f2c:	8880400c 	andi	r2,r17,256
   20f30:	1001761e 	bne	r2,zero,2150c <___vfprintf_internal_r+0xe48>
   20f34:	d8811f17 	ldw	r2,1148(sp)
   20f38:	db013117 	ldw	r12,1220(sp)
   20f3c:	1c87883a 	add	r3,r3,r18
   20f40:	10800044 	addi	r2,r2,1
   20f44:	43000015 	stw	r12,0(r8)
   20f48:	44800115 	stw	r18,4(r8)
   20f4c:	d8c12015 	stw	r3,1152(sp)
   20f50:	d8811f15 	stw	r2,1148(sp)
   20f54:	010001c4 	movi	r4,7
   20f58:	20822616 	blt	r4,r2,217f4 <___vfprintf_internal_r+0x1130>
   20f5c:	42000204 	addi	r8,r8,8
   20f60:	8c40010c 	andi	r17,r17,4
   20f64:	88003126 	beq	r17,zero,2102c <___vfprintf_internal_r+0x968>
   20f68:	db012e17 	ldw	r12,1208(sp)
   20f6c:	dac12b17 	ldw	r11,1196(sp)
   20f70:	62e1c83a 	sub	r16,r12,r11
   20f74:	04002d0e 	bge	zero,r16,2102c <___vfprintf_internal_r+0x968>
   20f78:	04400404 	movi	r17,16
   20f7c:	d8811f17 	ldw	r2,1148(sp)
   20f80:	8c04df0e 	bge	r17,r16,22300 <___vfprintf_internal_r+0x1c3c>
   20f84:	010000f4 	movhi	r4,3
   20f88:	21013a84 	addi	r4,r4,1258
   20f8c:	d9013615 	stw	r4,1240(sp)
   20f90:	048001c4 	movi	r18,7
   20f94:	00000306 	br	20fa4 <___vfprintf_internal_r+0x8e0>
   20f98:	843ffc04 	addi	r16,r16,-16
   20f9c:	42000204 	addi	r8,r8,8
   20fa0:	8c00130e 	bge	r17,r16,20ff0 <___vfprintf_internal_r+0x92c>
   20fa4:	014000f4 	movhi	r5,3
   20fa8:	18c00404 	addi	r3,r3,16
   20fac:	10800044 	addi	r2,r2,1
   20fb0:	29413a84 	addi	r5,r5,1258
   20fb4:	41400015 	stw	r5,0(r8)
   20fb8:	44400115 	stw	r17,4(r8)
   20fbc:	d8c12015 	stw	r3,1152(sp)
   20fc0:	d8811f15 	stw	r2,1148(sp)
   20fc4:	90bff40e 	bge	r18,r2,20f98 <_gp+0xfffe6bcc>
   20fc8:	b009883a 	mov	r4,r22
   20fcc:	b80b883a 	mov	r5,r23
   20fd0:	d9811e04 	addi	r6,sp,1144
   20fd4:	002790c0 	call	2790c <__sprint_r>
   20fd8:	103ed11e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   20fdc:	843ffc04 	addi	r16,r16,-16
   20fe0:	d8c12017 	ldw	r3,1152(sp)
   20fe4:	d8811f17 	ldw	r2,1148(sp)
   20fe8:	da000404 	addi	r8,sp,16
   20fec:	8c3fed16 	blt	r17,r16,20fa4 <_gp+0xfffe6bd8>
   20ff0:	dac13617 	ldw	r11,1240(sp)
   20ff4:	1c07883a 	add	r3,r3,r16
   20ff8:	10800044 	addi	r2,r2,1
   20ffc:	42c00015 	stw	r11,0(r8)
   21000:	44000115 	stw	r16,4(r8)
   21004:	d8c12015 	stw	r3,1152(sp)
   21008:	d8811f15 	stw	r2,1148(sp)
   2100c:	010001c4 	movi	r4,7
   21010:	2080060e 	bge	r4,r2,2102c <___vfprintf_internal_r+0x968>
   21014:	b009883a 	mov	r4,r22
   21018:	b80b883a 	mov	r5,r23
   2101c:	d9811e04 	addi	r6,sp,1144
   21020:	002790c0 	call	2790c <__sprint_r>
   21024:	103ebe1e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   21028:	d8c12017 	ldw	r3,1152(sp)
   2102c:	d8812b17 	ldw	r2,1196(sp)
   21030:	db012e17 	ldw	r12,1208(sp)
   21034:	1300010e 	bge	r2,r12,2103c <___vfprintf_internal_r+0x978>
   21038:	6005883a 	mov	r2,r12
   2103c:	dac12f17 	ldw	r11,1212(sp)
   21040:	5897883a 	add	r11,r11,r2
   21044:	dac12f15 	stw	r11,1212(sp)
   21048:	1801f21e 	bne	r3,zero,21814 <___vfprintf_internal_r+0x1150>
   2104c:	d8011f15 	stw	zero,1148(sp)
   21050:	da000404 	addi	r8,sp,16
   21054:	003dd806 	br	207b8 <_gp+0xfffe63ec>
   21058:	8c400414 	ori	r17,r17,16
   2105c:	d8c12a15 	stw	r3,1192(sp)
   21060:	88c0080c 	andi	r3,r17,32
   21064:	d8812d17 	ldw	r2,1204(sp)
   21068:	18004626 	beq	r3,zero,21184 <___vfprintf_internal_r+0xac0>
   2106c:	dac12d17 	ldw	r11,1204(sp)
   21070:	14c00017 	ldw	r19,0(r2)
   21074:	17000117 	ldw	fp,4(r2)
   21078:	5ac00204 	addi	r11,r11,8
   2107c:	dac12d15 	stw	r11,1204(sp)
   21080:	00800044 	movi	r2,1
   21084:	9f06b03a 	or	r3,r19,fp
   21088:	003f0006 	br	20c8c <_gp+0xfffe68c0>
   2108c:	1805883a 	mov	r2,r3
   21090:	d8012e15 	stw	zero,1208(sp)
   21094:	82fff404 	addi	r11,r16,-48
   21098:	0019883a 	mov	r12,zero
   2109c:	14000007 	ldb	r16,0(r2)
   210a0:	630002a4 	muli	r12,r12,10
   210a4:	18c00044 	addi	r3,r3,1
   210a8:	1805883a 	mov	r2,r3
   210ac:	62d9883a 	add	r12,r12,r11
   210b0:	82fff404 	addi	r11,r16,-48
   210b4:	2afff92e 	bgeu	r5,r11,2109c <_gp+0xfffe6cd0>
   210b8:	db012e15 	stw	r12,1208(sp)
   210bc:	003de906 	br	20864 <_gp+0xfffe6498>
   210c0:	8c400414 	ori	r17,r17,16
   210c4:	d8c12a15 	stw	r3,1192(sp)
   210c8:	d9812785 	stb	r6,1182(sp)
   210cc:	8880080c 	andi	r2,r17,32
   210d0:	d8c12d17 	ldw	r3,1204(sp)
   210d4:	10007a26 	beq	r2,zero,212c0 <___vfprintf_internal_r+0xbfc>
   210d8:	db012d17 	ldw	r12,1204(sp)
   210dc:	18800117 	ldw	r2,4(r3)
   210e0:	1cc00017 	ldw	r19,0(r3)
   210e4:	63000204 	addi	r12,r12,8
   210e8:	db012d15 	stw	r12,1204(sp)
   210ec:	1039883a 	mov	fp,r2
   210f0:	10031016 	blt	r2,zero,21d34 <___vfprintf_internal_r+0x1670>
   210f4:	dd412783 	ldbu	r21,1182(sp)
   210f8:	da413215 	stw	r9,1224(sp)
   210fc:	00800044 	movi	r2,1
   21100:	9f06b03a 	or	r3,r19,fp
   21104:	003ee406 	br	20c98 <_gp+0xfffe68cc>
   21108:	030000f4 	movhi	r12,3
   2110c:	63012a04 	addi	r12,r12,1192
   21110:	d8c12a15 	stw	r3,1192(sp)
   21114:	d9812785 	stb	r6,1182(sp)
   21118:	db013b15 	stw	r12,1260(sp)
   2111c:	88c0080c 	andi	r3,r17,32
   21120:	d8812d17 	ldw	r2,1204(sp)
   21124:	18002b26 	beq	r3,zero,211d4 <___vfprintf_internal_r+0xb10>
   21128:	dac12d17 	ldw	r11,1204(sp)
   2112c:	14c00017 	ldw	r19,0(r2)
   21130:	17000117 	ldw	fp,4(r2)
   21134:	5ac00204 	addi	r11,r11,8
   21138:	dac12d15 	stw	r11,1204(sp)
   2113c:	8880004c 	andi	r2,r17,1
   21140:	10025b26 	beq	r2,zero,21ab0 <___vfprintf_internal_r+0x13ec>
   21144:	9f06b03a 	or	r3,r19,fp
   21148:	18037026 	beq	r3,zero,21f0c <___vfprintf_internal_r+0x1848>
   2114c:	00800c04 	movi	r2,48
   21150:	d8812705 	stb	r2,1180(sp)
   21154:	dc012745 	stb	r16,1181(sp)
   21158:	8c400094 	ori	r17,r17,2
   2115c:	00800084 	movi	r2,2
   21160:	003eca06 	br	20c8c <_gp+0xfffe68c0>
   21164:	8c400814 	ori	r17,r17,32
   21168:	1805883a 	mov	r2,r3
   2116c:	1c000007 	ldb	r16,0(r3)
   21170:	003dbb06 	br	20860 <_gp+0xfffe6494>
   21174:	d8c12a15 	stw	r3,1192(sp)
   21178:	88c0080c 	andi	r3,r17,32
   2117c:	d8812d17 	ldw	r2,1204(sp)
   21180:	183fba1e 	bne	r3,zero,2106c <_gp+0xfffe6ca0>
   21184:	88c0040c 	andi	r3,r17,16
   21188:	18024c1e 	bne	r3,zero,21abc <___vfprintf_internal_r+0x13f8>
   2118c:	88c0100c 	andi	r3,r17,64
   21190:	18024a26 	beq	r3,zero,21abc <___vfprintf_internal_r+0x13f8>
   21194:	dac12d17 	ldw	r11,1204(sp)
   21198:	14c0000b 	ldhu	r19,0(r2)
   2119c:	0039883a 	mov	fp,zero
   211a0:	5ac00104 	addi	r11,r11,4
   211a4:	dac12d15 	stw	r11,1204(sp)
   211a8:	00800044 	movi	r2,1
   211ac:	9807883a 	mov	r3,r19
   211b0:	003eb606 	br	20c8c <_gp+0xfffe68c0>
   211b4:	008000f4 	movhi	r2,3
   211b8:	10812f04 	addi	r2,r2,1212
   211bc:	d8c12a15 	stw	r3,1192(sp)
   211c0:	d8813b15 	stw	r2,1260(sp)
   211c4:	d9812785 	stb	r6,1182(sp)
   211c8:	88c0080c 	andi	r3,r17,32
   211cc:	d8812d17 	ldw	r2,1204(sp)
   211d0:	183fd51e 	bne	r3,zero,21128 <_gp+0xfffe6d5c>
   211d4:	88c0040c 	andi	r3,r17,16
   211d8:	18034126 	beq	r3,zero,21ee0 <___vfprintf_internal_r+0x181c>
   211dc:	db012d17 	ldw	r12,1204(sp)
   211e0:	14c00017 	ldw	r19,0(r2)
   211e4:	0039883a 	mov	fp,zero
   211e8:	63000104 	addi	r12,r12,4
   211ec:	db012d15 	stw	r12,1204(sp)
   211f0:	003fd206 	br	2113c <_gp+0xfffe6d70>
   211f4:	1c000007 	ldb	r16,0(r3)
   211f8:	81c3d626 	beq	r16,r7,22154 <___vfprintf_internal_r+0x1a90>
   211fc:	8c400414 	ori	r17,r17,16
   21200:	1805883a 	mov	r2,r3
   21204:	003d9606 	br	20860 <_gp+0xfffe6494>
   21208:	d8c12a15 	stw	r3,1192(sp)
   2120c:	d9812785 	stb	r6,1182(sp)
   21210:	8880080c 	andi	r2,r17,32
   21214:	10033f26 	beq	r2,zero,21f14 <___vfprintf_internal_r+0x1850>
   21218:	db012d17 	ldw	r12,1204(sp)
   2121c:	dac12f17 	ldw	r11,1212(sp)
   21220:	60800017 	ldw	r2,0(r12)
   21224:	5807d7fa 	srai	r3,r11,31
   21228:	63000104 	addi	r12,r12,4
   2122c:	db012d15 	stw	r12,1204(sp)
   21230:	12c00015 	stw	r11,0(r2)
   21234:	10c00115 	stw	r3,4(r2)
   21238:	003d5f06 	br	207b8 <_gp+0xfffe63ec>
   2123c:	d8c12a15 	stw	r3,1192(sp)
   21240:	88c0080c 	andi	r3,r17,32
   21244:	d8812d17 	ldw	r2,1204(sp)
   21248:	183e891e 	bne	r3,zero,20c70 <_gp+0xfffe68a4>
   2124c:	88c0040c 	andi	r3,r17,16
   21250:	1801ea1e 	bne	r3,zero,219fc <___vfprintf_internal_r+0x1338>
   21254:	88c0100c 	andi	r3,r17,64
   21258:	1801e826 	beq	r3,zero,219fc <___vfprintf_internal_r+0x1338>
   2125c:	db012d17 	ldw	r12,1204(sp)
   21260:	14c0000b 	ldhu	r19,0(r2)
   21264:	0039883a 	mov	fp,zero
   21268:	63000104 	addi	r12,r12,4
   2126c:	db012d15 	stw	r12,1204(sp)
   21270:	0005883a 	mov	r2,zero
   21274:	9807883a 	mov	r3,r19
   21278:	003e8406 	br	20c8c <_gp+0xfffe68c0>
   2127c:	30803fcc 	andi	r2,r6,255
   21280:	1080201c 	xori	r2,r2,128
   21284:	10bfe004 	addi	r2,r2,-128
   21288:	10031d1e 	bne	r2,zero,21f00 <___vfprintf_internal_r+0x183c>
   2128c:	1805883a 	mov	r2,r3
   21290:	01800804 	movi	r6,32
   21294:	1c000007 	ldb	r16,0(r3)
   21298:	003d7106 	br	20860 <_gp+0xfffe6494>
   2129c:	8c400054 	ori	r17,r17,1
   212a0:	1805883a 	mov	r2,r3
   212a4:	1c000007 	ldb	r16,0(r3)
   212a8:	003d6d06 	br	20860 <_gp+0xfffe6494>
   212ac:	d8c12a15 	stw	r3,1192(sp)
   212b0:	d9812785 	stb	r6,1182(sp)
   212b4:	8880080c 	andi	r2,r17,32
   212b8:	d8c12d17 	ldw	r3,1204(sp)
   212bc:	103f861e 	bne	r2,zero,210d8 <_gp+0xfffe6d0c>
   212c0:	8880040c 	andi	r2,r17,16
   212c4:	1001f31e 	bne	r2,zero,21a94 <___vfprintf_internal_r+0x13d0>
   212c8:	8880100c 	andi	r2,r17,64
   212cc:	1001f126 	beq	r2,zero,21a94 <___vfprintf_internal_r+0x13d0>
   212d0:	1cc0000f 	ldh	r19,0(r3)
   212d4:	db012d17 	ldw	r12,1204(sp)
   212d8:	9839d7fa 	srai	fp,r19,31
   212dc:	63000104 	addi	r12,r12,4
   212e0:	db012d15 	stw	r12,1204(sp)
   212e4:	e005883a 	mov	r2,fp
   212e8:	003f8106 	br	210f0 <_gp+0xfffe6d24>
   212ec:	8c401014 	ori	r17,r17,64
   212f0:	1805883a 	mov	r2,r3
   212f4:	1c000007 	ldb	r16,0(r3)
   212f8:	003d5906 	br	20860 <_gp+0xfffe6494>
   212fc:	db012d17 	ldw	r12,1204(sp)
   21300:	d8c12a15 	stw	r3,1192(sp)
   21304:	00c00044 	movi	r3,1
   21308:	60800017 	ldw	r2,0(r12)
   2130c:	63000104 	addi	r12,r12,4
   21310:	d8c12b15 	stw	r3,1196(sp)
   21314:	d8012785 	stb	zero,1182(sp)
   21318:	d8810405 	stb	r2,1040(sp)
   2131c:	db012d15 	stw	r12,1204(sp)
   21320:	dac10404 	addi	r11,sp,1040
   21324:	1825883a 	mov	r18,r3
   21328:	d8013215 	stw	zero,1224(sp)
   2132c:	d8013415 	stw	zero,1232(sp)
   21330:	dac13115 	stw	r11,1220(sp)
   21334:	0005883a 	mov	r2,zero
   21338:	003e7d06 	br	20d30 <_gp+0xfffe6964>
   2133c:	db012d17 	ldw	r12,1204(sp)
   21340:	00800c04 	movi	r2,48
   21344:	d8812705 	stb	r2,1180(sp)
   21348:	64c00017 	ldw	r19,0(r12)
   2134c:	00801e04 	movi	r2,120
   21350:	d8812745 	stb	r2,1181(sp)
   21354:	008000f4 	movhi	r2,3
   21358:	10812f04 	addi	r2,r2,1212
   2135c:	63000104 	addi	r12,r12,4
   21360:	d8c12a15 	stw	r3,1192(sp)
   21364:	d8813b15 	stw	r2,1260(sp)
   21368:	0039883a 	mov	fp,zero
   2136c:	8c400094 	ori	r17,r17,2
   21370:	db012d15 	stw	r12,1204(sp)
   21374:	00800084 	movi	r2,2
   21378:	04001e04 	movi	r16,120
   2137c:	9807883a 	mov	r3,r19
   21380:	003e4206 	br	20c8c <_gp+0xfffe68c0>
   21384:	dac12d17 	ldw	r11,1204(sp)
   21388:	db012d17 	ldw	r12,1204(sp)
   2138c:	d8c12a15 	stw	r3,1192(sp)
   21390:	5ac00017 	ldw	r11,0(r11)
   21394:	d8012785 	stb	zero,1182(sp)
   21398:	64c00104 	addi	r19,r12,4
   2139c:	dac13115 	stw	r11,1220(sp)
   213a0:	5803e826 	beq	r11,zero,22344 <___vfprintf_internal_r+0x1c80>
   213a4:	d9013117 	ldw	r4,1220(sp)
   213a8:	48037a16 	blt	r9,zero,22194 <___vfprintf_internal_r+0x1ad0>
   213ac:	480d883a 	mov	r6,r9
   213b0:	000b883a 	mov	r5,zero
   213b4:	da013f15 	stw	r8,1276(sp)
   213b8:	da413e15 	stw	r9,1272(sp)
   213bc:	0025b9c0 	call	25b9c <memchr>
   213c0:	da013f17 	ldw	r8,1276(sp)
   213c4:	da413e17 	ldw	r9,1272(sp)
   213c8:	10044426 	beq	r2,zero,224dc <___vfprintf_internal_r+0x1e18>
   213cc:	d8c13117 	ldw	r3,1220(sp)
   213d0:	10e5c83a 	sub	r18,r2,r3
   213d4:	4c834416 	blt	r9,r18,220e8 <___vfprintf_internal_r+0x1a24>
   213d8:	9005883a 	mov	r2,r18
   213dc:	90037216 	blt	r18,zero,221a8 <___vfprintf_internal_r+0x1ae4>
   213e0:	dd412783 	ldbu	r21,1182(sp)
   213e4:	d8812b15 	stw	r2,1196(sp)
   213e8:	dcc12d15 	stw	r19,1204(sp)
   213ec:	d8013215 	stw	zero,1224(sp)
   213f0:	d8013415 	stw	zero,1232(sp)
   213f4:	003e4706 	br	20d14 <_gp+0xfffe6948>
   213f8:	dac12d17 	ldw	r11,1204(sp)
   213fc:	db012d17 	ldw	r12,1204(sp)
   21400:	5ac00017 	ldw	r11,0(r11)
   21404:	dac12e15 	stw	r11,1208(sp)
   21408:	62c00104 	addi	r11,r12,4
   2140c:	db012e17 	ldw	r12,1208(sp)
   21410:	60034a16 	blt	r12,zero,2213c <___vfprintf_internal_r+0x1a78>
   21414:	dac12d15 	stw	r11,1204(sp)
   21418:	1805883a 	mov	r2,r3
   2141c:	1c000007 	ldb	r16,0(r3)
   21420:	003d0f06 	br	20860 <_gp+0xfffe6494>
   21424:	1805883a 	mov	r2,r3
   21428:	01800ac4 	movi	r6,43
   2142c:	1c000007 	ldb	r16,0(r3)
   21430:	003d0b06 	br	20860 <_gp+0xfffe6494>
   21434:	d8c12a15 	stw	r3,1192(sp)
   21438:	d9812785 	stb	r6,1182(sp)
   2143c:	803db226 	beq	r16,zero,20b08 <_gp+0xfffe673c>
   21440:	00c00044 	movi	r3,1
   21444:	d8c12b15 	stw	r3,1196(sp)
   21448:	dc010405 	stb	r16,1040(sp)
   2144c:	d8012785 	stb	zero,1182(sp)
   21450:	003fb306 	br	21320 <_gp+0xfffe6f54>
   21454:	d8c12017 	ldw	r3,1152(sp)
   21458:	003e6d06 	br	20e10 <_gp+0xfffe6a44>
   2145c:	10803fcc 	andi	r2,r2,255
   21460:	00c00044 	movi	r3,1
   21464:	10fe141e 	bne	r2,r3,20cb8 <_gp+0xfffe68ec>
   21468:	e000021e 	bne	fp,zero,21474 <___vfprintf_internal_r+0xdb0>
   2146c:	00800244 	movi	r2,9
   21470:	14c0202e 	bgeu	r2,r19,214f4 <___vfprintf_internal_r+0xe30>
   21474:	dc012b15 	stw	r16,1196(sp)
   21478:	dc412c15 	stw	r17,1200(sp)
   2147c:	9821883a 	mov	r16,r19
   21480:	e023883a 	mov	r17,fp
   21484:	dc810e04 	addi	r18,sp,1080
   21488:	4027883a 	mov	r19,r8
   2148c:	4839883a 	mov	fp,r9
   21490:	8009883a 	mov	r4,r16
   21494:	880b883a 	mov	r5,r17
   21498:	01800284 	movi	r6,10
   2149c:	000f883a 	mov	r7,zero
   214a0:	0029b9c0 	call	29b9c <__umoddi3>
   214a4:	10800c04 	addi	r2,r2,48
   214a8:	94bfffc4 	addi	r18,r18,-1
   214ac:	8009883a 	mov	r4,r16
   214b0:	880b883a 	mov	r5,r17
   214b4:	01800284 	movi	r6,10
   214b8:	000f883a 	mov	r7,zero
   214bc:	90800005 	stb	r2,0(r18)
   214c0:	00295dc0 	call	295dc <__udivdi3>
   214c4:	1021883a 	mov	r16,r2
   214c8:	10c4b03a 	or	r2,r2,r3
   214cc:	1823883a 	mov	r17,r3
   214d0:	103fef1e 	bne	r2,zero,21490 <_gp+0xfffe70c4>
   214d4:	dac12817 	ldw	r11,1184(sp)
   214d8:	dc813115 	stw	r18,1220(sp)
   214dc:	dc012b17 	ldw	r16,1196(sp)
   214e0:	9811883a 	mov	r8,r19
   214e4:	dc412c17 	ldw	r17,1200(sp)
   214e8:	e013883a 	mov	r9,fp
   214ec:	5ca5c83a 	sub	r18,r11,r18
   214f0:	003e0306 	br	20d00 <_gp+0xfffe6934>
   214f4:	9cc00c04 	addi	r19,r19,48
   214f8:	d8c10dc4 	addi	r3,sp,1079
   214fc:	dcc10dc5 	stb	r19,1079(sp)
   21500:	dc813c17 	ldw	r18,1264(sp)
   21504:	d8c13115 	stw	r3,1220(sp)
   21508:	003dfd06 	br	20d00 <_gp+0xfffe6934>
   2150c:	00801944 	movi	r2,101
   21510:	1400710e 	bge	r2,r16,216d8 <___vfprintf_internal_r+0x1014>
   21514:	d9013717 	ldw	r4,1244(sp)
   21518:	d9413917 	ldw	r5,1252(sp)
   2151c:	000d883a 	mov	r6,zero
   21520:	000f883a 	mov	r7,zero
   21524:	d8c13d15 	stw	r3,1268(sp)
   21528:	da013f15 	stw	r8,1276(sp)
   2152c:	002b3c00 	call	2b3c0 <__eqdf2>
   21530:	d8c13d17 	ldw	r3,1268(sp)
   21534:	da013f17 	ldw	r8,1276(sp)
   21538:	1000ef1e 	bne	r2,zero,218f8 <___vfprintf_internal_r+0x1234>
   2153c:	d8811f17 	ldw	r2,1148(sp)
   21540:	010000f4 	movhi	r4,3
   21544:	21013604 	addi	r4,r4,1240
   21548:	18c00044 	addi	r3,r3,1
   2154c:	10800044 	addi	r2,r2,1
   21550:	41000015 	stw	r4,0(r8)
   21554:	01000044 	movi	r4,1
   21558:	41000115 	stw	r4,4(r8)
   2155c:	d8c12015 	stw	r3,1152(sp)
   21560:	d8811f15 	stw	r2,1148(sp)
   21564:	010001c4 	movi	r4,7
   21568:	20828e16 	blt	r4,r2,21fa4 <___vfprintf_internal_r+0x18e0>
   2156c:	42000204 	addi	r8,r8,8
   21570:	d8812617 	ldw	r2,1176(sp)
   21574:	dac13317 	ldw	r11,1228(sp)
   21578:	12c00216 	blt	r2,r11,21584 <___vfprintf_internal_r+0xec0>
   2157c:	8880004c 	andi	r2,r17,1
   21580:	103e7726 	beq	r2,zero,20f60 <_gp+0xfffe6b94>
   21584:	db013817 	ldw	r12,1248(sp)
   21588:	d8811f17 	ldw	r2,1148(sp)
   2158c:	dac13517 	ldw	r11,1236(sp)
   21590:	1b07883a 	add	r3,r3,r12
   21594:	10800044 	addi	r2,r2,1
   21598:	42c00015 	stw	r11,0(r8)
   2159c:	43000115 	stw	r12,4(r8)
   215a0:	d8c12015 	stw	r3,1152(sp)
   215a4:	d8811f15 	stw	r2,1148(sp)
   215a8:	010001c4 	movi	r4,7
   215ac:	2082ed16 	blt	r4,r2,22164 <___vfprintf_internal_r+0x1aa0>
   215b0:	42000204 	addi	r8,r8,8
   215b4:	db013317 	ldw	r12,1228(sp)
   215b8:	643fffc4 	addi	r16,r12,-1
   215bc:	043e680e 	bge	zero,r16,20f60 <_gp+0xfffe6b94>
   215c0:	04800404 	movi	r18,16
   215c4:	d8811f17 	ldw	r2,1148(sp)
   215c8:	94007e0e 	bge	r18,r16,217c4 <___vfprintf_internal_r+0x1100>
   215cc:	014000f4 	movhi	r5,3
   215d0:	29413684 	addi	r5,r5,1242
   215d4:	d9412c15 	stw	r5,1200(sp)
   215d8:	054001c4 	movi	r21,7
   215dc:	00000306 	br	215ec <___vfprintf_internal_r+0xf28>
   215e0:	42000204 	addi	r8,r8,8
   215e4:	843ffc04 	addi	r16,r16,-16
   215e8:	9400790e 	bge	r18,r16,217d0 <___vfprintf_internal_r+0x110c>
   215ec:	18c00404 	addi	r3,r3,16
   215f0:	10800044 	addi	r2,r2,1
   215f4:	45000015 	stw	r20,0(r8)
   215f8:	44800115 	stw	r18,4(r8)
   215fc:	d8c12015 	stw	r3,1152(sp)
   21600:	d8811f15 	stw	r2,1148(sp)
   21604:	a8bff60e 	bge	r21,r2,215e0 <_gp+0xfffe7214>
   21608:	b009883a 	mov	r4,r22
   2160c:	b80b883a 	mov	r5,r23
   21610:	d9811e04 	addi	r6,sp,1144
   21614:	002790c0 	call	2790c <__sprint_r>
   21618:	103d411e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   2161c:	d8c12017 	ldw	r3,1152(sp)
   21620:	d8811f17 	ldw	r2,1148(sp)
   21624:	da000404 	addi	r8,sp,16
   21628:	003fee06 	br	215e4 <_gp+0xfffe7218>
   2162c:	dac12e17 	ldw	r11,1208(sp)
   21630:	db012b17 	ldw	r12,1196(sp)
   21634:	5b2bc83a 	sub	r21,r11,r12
   21638:	057e130e 	bge	zero,r21,20e88 <_gp+0xfffe6abc>
   2163c:	07000404 	movi	fp,16
   21640:	d8811f17 	ldw	r2,1148(sp)
   21644:	e543640e 	bge	fp,r21,223d8 <___vfprintf_internal_r+0x1d14>
   21648:	014000f4 	movhi	r5,3
   2164c:	29413684 	addi	r5,r5,1242
   21650:	d9412c15 	stw	r5,1200(sp)
   21654:	04c001c4 	movi	r19,7
   21658:	00000306 	br	21668 <___vfprintf_internal_r+0xfa4>
   2165c:	ad7ffc04 	addi	r21,r21,-16
   21660:	42000204 	addi	r8,r8,8
   21664:	e540110e 	bge	fp,r21,216ac <___vfprintf_internal_r+0xfe8>
   21668:	18c00404 	addi	r3,r3,16
   2166c:	10800044 	addi	r2,r2,1
   21670:	45000015 	stw	r20,0(r8)
   21674:	47000115 	stw	fp,4(r8)
   21678:	d8c12015 	stw	r3,1152(sp)
   2167c:	d8811f15 	stw	r2,1148(sp)
   21680:	98bff60e 	bge	r19,r2,2165c <_gp+0xfffe7290>
   21684:	b009883a 	mov	r4,r22
   21688:	b80b883a 	mov	r5,r23
   2168c:	d9811e04 	addi	r6,sp,1144
   21690:	002790c0 	call	2790c <__sprint_r>
   21694:	103d221e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   21698:	ad7ffc04 	addi	r21,r21,-16
   2169c:	d8c12017 	ldw	r3,1152(sp)
   216a0:	d8811f17 	ldw	r2,1148(sp)
   216a4:	da000404 	addi	r8,sp,16
   216a8:	e57fef16 	blt	fp,r21,21668 <_gp+0xfffe729c>
   216ac:	dac12c17 	ldw	r11,1200(sp)
   216b0:	1d47883a 	add	r3,r3,r21
   216b4:	10800044 	addi	r2,r2,1
   216b8:	42c00015 	stw	r11,0(r8)
   216bc:	45400115 	stw	r21,4(r8)
   216c0:	d8c12015 	stw	r3,1152(sp)
   216c4:	d8811f15 	stw	r2,1148(sp)
   216c8:	010001c4 	movi	r4,7
   216cc:	20819116 	blt	r4,r2,21d14 <___vfprintf_internal_r+0x1650>
   216d0:	42000204 	addi	r8,r8,8
   216d4:	003dec06 	br	20e88 <_gp+0xfffe6abc>
   216d8:	db013317 	ldw	r12,1228(sp)
   216dc:	00800044 	movi	r2,1
   216e0:	18c00044 	addi	r3,r3,1
   216e4:	1301530e 	bge	r2,r12,21c34 <___vfprintf_internal_r+0x1570>
   216e8:	dc011f17 	ldw	r16,1148(sp)
   216ec:	dac13117 	ldw	r11,1220(sp)
   216f0:	00800044 	movi	r2,1
   216f4:	84000044 	addi	r16,r16,1
   216f8:	40800115 	stw	r2,4(r8)
   216fc:	42c00015 	stw	r11,0(r8)
   21700:	d8c12015 	stw	r3,1152(sp)
   21704:	dc011f15 	stw	r16,1148(sp)
   21708:	008001c4 	movi	r2,7
   2170c:	14016b16 	blt	r2,r16,21cbc <___vfprintf_internal_r+0x15f8>
   21710:	42000204 	addi	r8,r8,8
   21714:	db013817 	ldw	r12,1248(sp)
   21718:	dac13517 	ldw	r11,1236(sp)
   2171c:	84000044 	addi	r16,r16,1
   21720:	1b07883a 	add	r3,r3,r12
   21724:	42c00015 	stw	r11,0(r8)
   21728:	43000115 	stw	r12,4(r8)
   2172c:	d8c12015 	stw	r3,1152(sp)
   21730:	dc011f15 	stw	r16,1148(sp)
   21734:	008001c4 	movi	r2,7
   21738:	14016916 	blt	r2,r16,21ce0 <___vfprintf_internal_r+0x161c>
   2173c:	44800204 	addi	r18,r8,8
   21740:	d9013717 	ldw	r4,1244(sp)
   21744:	d9413917 	ldw	r5,1252(sp)
   21748:	000d883a 	mov	r6,zero
   2174c:	000f883a 	mov	r7,zero
   21750:	d8c13d15 	stw	r3,1268(sp)
   21754:	002b3c00 	call	2b3c0 <__eqdf2>
   21758:	d8c13d17 	ldw	r3,1268(sp)
   2175c:	db013317 	ldw	r12,1228(sp)
   21760:	1000ae26 	beq	r2,zero,21a1c <___vfprintf_internal_r+0x1358>
   21764:	dac13117 	ldw	r11,1220(sp)
   21768:	60bfffc4 	addi	r2,r12,-1
   2176c:	1887883a 	add	r3,r3,r2
   21770:	59000044 	addi	r4,r11,1
   21774:	84000044 	addi	r16,r16,1
   21778:	90800115 	stw	r2,4(r18)
   2177c:	91000015 	stw	r4,0(r18)
   21780:	d8c12015 	stw	r3,1152(sp)
   21784:	dc011f15 	stw	r16,1148(sp)
   21788:	008001c4 	movi	r2,7
   2178c:	14014216 	blt	r2,r16,21c98 <___vfprintf_internal_r+0x15d4>
   21790:	94800204 	addi	r18,r18,8
   21794:	dac13a17 	ldw	r11,1256(sp)
   21798:	dd4122c4 	addi	r21,sp,1163
   2179c:	84000044 	addi	r16,r16,1
   217a0:	58c7883a 	add	r3,r11,r3
   217a4:	95400015 	stw	r21,0(r18)
   217a8:	92c00115 	stw	r11,4(r18)
   217ac:	d8c12015 	stw	r3,1152(sp)
   217b0:	dc011f15 	stw	r16,1148(sp)
   217b4:	008001c4 	movi	r2,7
   217b8:	14000e16 	blt	r2,r16,217f4 <___vfprintf_internal_r+0x1130>
   217bc:	92000204 	addi	r8,r18,8
   217c0:	003de706 	br	20f60 <_gp+0xfffe6b94>
   217c4:	010000f4 	movhi	r4,3
   217c8:	21013684 	addi	r4,r4,1242
   217cc:	d9012c15 	stw	r4,1200(sp)
   217d0:	dac12c17 	ldw	r11,1200(sp)
   217d4:	1c07883a 	add	r3,r3,r16
   217d8:	44000115 	stw	r16,4(r8)
   217dc:	42c00015 	stw	r11,0(r8)
   217e0:	10800044 	addi	r2,r2,1
   217e4:	d8c12015 	stw	r3,1152(sp)
   217e8:	d8811f15 	stw	r2,1148(sp)
   217ec:	010001c4 	movi	r4,7
   217f0:	20bdda0e 	bge	r4,r2,20f5c <_gp+0xfffe6b90>
   217f4:	b009883a 	mov	r4,r22
   217f8:	b80b883a 	mov	r5,r23
   217fc:	d9811e04 	addi	r6,sp,1144
   21800:	002790c0 	call	2790c <__sprint_r>
   21804:	103cc61e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   21808:	d8c12017 	ldw	r3,1152(sp)
   2180c:	da000404 	addi	r8,sp,16
   21810:	003dd306 	br	20f60 <_gp+0xfffe6b94>
   21814:	b009883a 	mov	r4,r22
   21818:	b80b883a 	mov	r5,r23
   2181c:	d9811e04 	addi	r6,sp,1144
   21820:	002790c0 	call	2790c <__sprint_r>
   21824:	103e0926 	beq	r2,zero,2104c <_gp+0xfffe6c80>
   21828:	003cbd06 	br	20b20 <_gp+0xfffe6754>
   2182c:	10803fcc 	andi	r2,r2,255
   21830:	1000651e 	bne	r2,zero,219c8 <___vfprintf_internal_r+0x1304>
   21834:	8880004c 	andi	r2,r17,1
   21838:	10013226 	beq	r2,zero,21d04 <___vfprintf_internal_r+0x1640>
   2183c:	00800c04 	movi	r2,48
   21840:	d8c10dc4 	addi	r3,sp,1079
   21844:	d8810dc5 	stb	r2,1079(sp)
   21848:	dc813c17 	ldw	r18,1264(sp)
   2184c:	d8c13115 	stw	r3,1220(sp)
   21850:	003d2b06 	br	20d00 <_gp+0xfffe6934>
   21854:	b009883a 	mov	r4,r22
   21858:	b80b883a 	mov	r5,r23
   2185c:	d9811e04 	addi	r6,sp,1144
   21860:	002790c0 	call	2790c <__sprint_r>
   21864:	103cae1e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   21868:	d8c12017 	ldw	r3,1152(sp)
   2186c:	da000404 	addi	r8,sp,16
   21870:	003dae06 	br	20f2c <_gp+0xfffe6b60>
   21874:	b009883a 	mov	r4,r22
   21878:	b80b883a 	mov	r5,r23
   2187c:	d9811e04 	addi	r6,sp,1144
   21880:	002790c0 	call	2790c <__sprint_r>
   21884:	103ca61e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   21888:	d8c12017 	ldw	r3,1152(sp)
   2188c:	da000404 	addi	r8,sp,16
   21890:	003d6c06 	br	20e44 <_gp+0xfffe6a78>
   21894:	b009883a 	mov	r4,r22
   21898:	b80b883a 	mov	r5,r23
   2189c:	d9811e04 	addi	r6,sp,1144
   218a0:	002790c0 	call	2790c <__sprint_r>
   218a4:	103c9e1e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   218a8:	d8c12017 	ldw	r3,1152(sp)
   218ac:	da000404 	addi	r8,sp,16
   218b0:	003d7206 	br	20e7c <_gp+0xfffe6ab0>
   218b4:	d9413b17 	ldw	r5,1260(sp)
   218b8:	d8c10e04 	addi	r3,sp,1080
   218bc:	988003cc 	andi	r2,r19,15
   218c0:	e008973a 	slli	r4,fp,28
   218c4:	2885883a 	add	r2,r5,r2
   218c8:	9826d13a 	srli	r19,r19,4
   218cc:	10800003 	ldbu	r2,0(r2)
   218d0:	e038d13a 	srli	fp,fp,4
   218d4:	18ffffc4 	addi	r3,r3,-1
   218d8:	24e6b03a 	or	r19,r4,r19
   218dc:	18800005 	stb	r2,0(r3)
   218e0:	9f04b03a 	or	r2,r19,fp
   218e4:	103ff51e 	bne	r2,zero,218bc <_gp+0xfffe74f0>
   218e8:	db012817 	ldw	r12,1184(sp)
   218ec:	d8c13115 	stw	r3,1220(sp)
   218f0:	60e5c83a 	sub	r18,r12,r3
   218f4:	003d0206 	br	20d00 <_gp+0xfffe6934>
   218f8:	dc012617 	ldw	r16,1176(sp)
   218fc:	0401b10e 	bge	zero,r16,21fc4 <___vfprintf_internal_r+0x1900>
   21900:	db013117 	ldw	r12,1220(sp)
   21904:	dac13317 	ldw	r11,1228(sp)
   21908:	62e1883a 	add	r16,r12,r11
   2190c:	db013417 	ldw	r12,1232(sp)
   21910:	5825883a 	mov	r18,r11
   21914:	62c0010e 	bge	r12,r11,2191c <___vfprintf_internal_r+0x1258>
   21918:	6025883a 	mov	r18,r12
   2191c:	04800b0e 	bge	zero,r18,2194c <___vfprintf_internal_r+0x1288>
   21920:	d8811f17 	ldw	r2,1148(sp)
   21924:	dac13117 	ldw	r11,1220(sp)
   21928:	1c87883a 	add	r3,r3,r18
   2192c:	10800044 	addi	r2,r2,1
   21930:	42c00015 	stw	r11,0(r8)
   21934:	44800115 	stw	r18,4(r8)
   21938:	d8c12015 	stw	r3,1152(sp)
   2193c:	d8811f15 	stw	r2,1148(sp)
   21940:	010001c4 	movi	r4,7
   21944:	20824f16 	blt	r4,r2,22284 <___vfprintf_internal_r+0x1bc0>
   21948:	42000204 	addi	r8,r8,8
   2194c:	90024b16 	blt	r18,zero,2227c <___vfprintf_internal_r+0x1bb8>
   21950:	db013417 	ldw	r12,1232(sp)
   21954:	64a5c83a 	sub	r18,r12,r18
   21958:	0480730e 	bge	zero,r18,21b28 <___vfprintf_internal_r+0x1464>
   2195c:	05400404 	movi	r21,16
   21960:	d8811f17 	ldw	r2,1148(sp)
   21964:	ac817d0e 	bge	r21,r18,21f5c <___vfprintf_internal_r+0x1898>
   21968:	014000f4 	movhi	r5,3
   2196c:	29413684 	addi	r5,r5,1242
   21970:	d9412c15 	stw	r5,1200(sp)
   21974:	070001c4 	movi	fp,7
   21978:	00000306 	br	21988 <___vfprintf_internal_r+0x12c4>
   2197c:	42000204 	addi	r8,r8,8
   21980:	94bffc04 	addi	r18,r18,-16
   21984:	ac81780e 	bge	r21,r18,21f68 <___vfprintf_internal_r+0x18a4>
   21988:	18c00404 	addi	r3,r3,16
   2198c:	10800044 	addi	r2,r2,1
   21990:	45000015 	stw	r20,0(r8)
   21994:	45400115 	stw	r21,4(r8)
   21998:	d8c12015 	stw	r3,1152(sp)
   2199c:	d8811f15 	stw	r2,1148(sp)
   219a0:	e0bff60e 	bge	fp,r2,2197c <_gp+0xfffe75b0>
   219a4:	b009883a 	mov	r4,r22
   219a8:	b80b883a 	mov	r5,r23
   219ac:	d9811e04 	addi	r6,sp,1144
   219b0:	002790c0 	call	2790c <__sprint_r>
   219b4:	103c5a1e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   219b8:	d8c12017 	ldw	r3,1152(sp)
   219bc:	d8811f17 	ldw	r2,1148(sp)
   219c0:	da000404 	addi	r8,sp,16
   219c4:	003fee06 	br	21980 <_gp+0xfffe75b4>
   219c8:	dac10e04 	addi	r11,sp,1080
   219cc:	0025883a 	mov	r18,zero
   219d0:	dac13115 	stw	r11,1220(sp)
   219d4:	003cca06 	br	20d00 <_gp+0xfffe6934>
   219d8:	b009883a 	mov	r4,r22
   219dc:	b80b883a 	mov	r5,r23
   219e0:	d9811e04 	addi	r6,sp,1144
   219e4:	002790c0 	call	2790c <__sprint_r>
   219e8:	103c4d1e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   219ec:	d8c12017 	ldw	r3,1152(sp)
   219f0:	d8812787 	ldb	r2,1182(sp)
   219f4:	da000404 	addi	r8,sp,16
   219f8:	003d0506 	br	20e10 <_gp+0xfffe6a44>
   219fc:	dac12d17 	ldw	r11,1204(sp)
   21a00:	14c00017 	ldw	r19,0(r2)
   21a04:	0039883a 	mov	fp,zero
   21a08:	5ac00104 	addi	r11,r11,4
   21a0c:	dac12d15 	stw	r11,1204(sp)
   21a10:	0005883a 	mov	r2,zero
   21a14:	9807883a 	mov	r3,r19
   21a18:	003c9c06 	br	20c8c <_gp+0xfffe68c0>
   21a1c:	657fffc4 	addi	r21,r12,-1
   21a20:	057f5c0e 	bge	zero,r21,21794 <_gp+0xfffe73c8>
   21a24:	07000404 	movi	fp,16
   21a28:	e5408f0e 	bge	fp,r21,21c68 <___vfprintf_internal_r+0x15a4>
   21a2c:	010000f4 	movhi	r4,3
   21a30:	21013684 	addi	r4,r4,1242
   21a34:	d9012c15 	stw	r4,1200(sp)
   21a38:	01c001c4 	movi	r7,7
   21a3c:	00000306 	br	21a4c <___vfprintf_internal_r+0x1388>
   21a40:	94800204 	addi	r18,r18,8
   21a44:	ad7ffc04 	addi	r21,r21,-16
   21a48:	e5408a0e 	bge	fp,r21,21c74 <___vfprintf_internal_r+0x15b0>
   21a4c:	18c00404 	addi	r3,r3,16
   21a50:	84000044 	addi	r16,r16,1
   21a54:	95000015 	stw	r20,0(r18)
   21a58:	97000115 	stw	fp,4(r18)
   21a5c:	d8c12015 	stw	r3,1152(sp)
   21a60:	dc011f15 	stw	r16,1148(sp)
   21a64:	3c3ff60e 	bge	r7,r16,21a40 <_gp+0xfffe7674>
   21a68:	b009883a 	mov	r4,r22
   21a6c:	b80b883a 	mov	r5,r23
   21a70:	d9811e04 	addi	r6,sp,1144
   21a74:	d9c13d15 	stw	r7,1268(sp)
   21a78:	002790c0 	call	2790c <__sprint_r>
   21a7c:	d9c13d17 	ldw	r7,1268(sp)
   21a80:	103c271e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   21a84:	d8c12017 	ldw	r3,1152(sp)
   21a88:	dc011f17 	ldw	r16,1148(sp)
   21a8c:	dc800404 	addi	r18,sp,16
   21a90:	003fec06 	br	21a44 <_gp+0xfffe7678>
   21a94:	1cc00017 	ldw	r19,0(r3)
   21a98:	dac12d17 	ldw	r11,1204(sp)
   21a9c:	9839d7fa 	srai	fp,r19,31
   21aa0:	5ac00104 	addi	r11,r11,4
   21aa4:	dac12d15 	stw	r11,1204(sp)
   21aa8:	e005883a 	mov	r2,fp
   21aac:	003d9006 	br	210f0 <_gp+0xfffe6d24>
   21ab0:	00800084 	movi	r2,2
   21ab4:	9f06b03a 	or	r3,r19,fp
   21ab8:	003c7406 	br	20c8c <_gp+0xfffe68c0>
   21abc:	db012d17 	ldw	r12,1204(sp)
   21ac0:	14c00017 	ldw	r19,0(r2)
   21ac4:	0039883a 	mov	fp,zero
   21ac8:	63000104 	addi	r12,r12,4
   21acc:	db012d15 	stw	r12,1204(sp)
   21ad0:	00800044 	movi	r2,1
   21ad4:	9807883a 	mov	r3,r19
   21ad8:	003c6c06 	br	20c8c <_gp+0xfffe68c0>
   21adc:	10803fcc 	andi	r2,r2,255
   21ae0:	1080201c 	xori	r2,r2,128
   21ae4:	10bfe004 	addi	r2,r2,-128
   21ae8:	01000c04 	movi	r4,48
   21aec:	1101a526 	beq	r2,r4,22184 <___vfprintf_internal_r+0x1ac0>
   21af0:	dac13117 	ldw	r11,1220(sp)
   21af4:	db012817 	ldw	r12,1184(sp)
   21af8:	193fffc5 	stb	r4,-1(r3)
   21afc:	5affffc4 	addi	r11,r11,-1
   21b00:	dac13115 	stw	r11,1220(sp)
   21b04:	62e5c83a 	sub	r18,r12,r11
   21b08:	003c7d06 	br	20d00 <_gp+0xfffe6934>
   21b0c:	b009883a 	mov	r4,r22
   21b10:	b80b883a 	mov	r5,r23
   21b14:	d9811e04 	addi	r6,sp,1144
   21b18:	002790c0 	call	2790c <__sprint_r>
   21b1c:	103c001e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   21b20:	d8c12017 	ldw	r3,1152(sp)
   21b24:	da000404 	addi	r8,sp,16
   21b28:	db013117 	ldw	r12,1220(sp)
   21b2c:	dac13417 	ldw	r11,1232(sp)
   21b30:	d8812617 	ldw	r2,1176(sp)
   21b34:	62e5883a 	add	r18,r12,r11
   21b38:	db013317 	ldw	r12,1228(sp)
   21b3c:	13000216 	blt	r2,r12,21b48 <___vfprintf_internal_r+0x1484>
   21b40:	8900004c 	andi	r4,r17,1
   21b44:	20000c26 	beq	r4,zero,21b78 <___vfprintf_internal_r+0x14b4>
   21b48:	dac13817 	ldw	r11,1248(sp)
   21b4c:	d9011f17 	ldw	r4,1148(sp)
   21b50:	db013517 	ldw	r12,1236(sp)
   21b54:	1ac7883a 	add	r3,r3,r11
   21b58:	21000044 	addi	r4,r4,1
   21b5c:	43000015 	stw	r12,0(r8)
   21b60:	42c00115 	stw	r11,4(r8)
   21b64:	d8c12015 	stw	r3,1152(sp)
   21b68:	d9011f15 	stw	r4,1148(sp)
   21b6c:	014001c4 	movi	r5,7
   21b70:	2901cc16 	blt	r5,r4,222a4 <___vfprintf_internal_r+0x1be0>
   21b74:	42000204 	addi	r8,r8,8
   21b78:	dac13317 	ldw	r11,1228(sp)
   21b7c:	8489c83a 	sub	r4,r16,r18
   21b80:	5885c83a 	sub	r2,r11,r2
   21b84:	1021883a 	mov	r16,r2
   21b88:	2080010e 	bge	r4,r2,21b90 <___vfprintf_internal_r+0x14cc>
   21b8c:	2021883a 	mov	r16,r4
   21b90:	04000a0e 	bge	zero,r16,21bbc <___vfprintf_internal_r+0x14f8>
   21b94:	d9011f17 	ldw	r4,1148(sp)
   21b98:	1c07883a 	add	r3,r3,r16
   21b9c:	44800015 	stw	r18,0(r8)
   21ba0:	21000044 	addi	r4,r4,1
   21ba4:	44000115 	stw	r16,4(r8)
   21ba8:	d8c12015 	stw	r3,1152(sp)
   21bac:	d9011f15 	stw	r4,1148(sp)
   21bb0:	014001c4 	movi	r5,7
   21bb4:	2901d616 	blt	r5,r4,22310 <___vfprintf_internal_r+0x1c4c>
   21bb8:	42000204 	addi	r8,r8,8
   21bbc:	8001df16 	blt	r16,zero,2233c <___vfprintf_internal_r+0x1c78>
   21bc0:	1421c83a 	sub	r16,r2,r16
   21bc4:	043ce60e 	bge	zero,r16,20f60 <_gp+0xfffe6b94>
   21bc8:	04800404 	movi	r18,16
   21bcc:	d8811f17 	ldw	r2,1148(sp)
   21bd0:	943efc0e 	bge	r18,r16,217c4 <_gp+0xfffe73f8>
   21bd4:	014000f4 	movhi	r5,3
   21bd8:	29413684 	addi	r5,r5,1242
   21bdc:	d9412c15 	stw	r5,1200(sp)
   21be0:	054001c4 	movi	r21,7
   21be4:	00000306 	br	21bf4 <___vfprintf_internal_r+0x1530>
   21be8:	42000204 	addi	r8,r8,8
   21bec:	843ffc04 	addi	r16,r16,-16
   21bf0:	943ef70e 	bge	r18,r16,217d0 <_gp+0xfffe7404>
   21bf4:	18c00404 	addi	r3,r3,16
   21bf8:	10800044 	addi	r2,r2,1
   21bfc:	45000015 	stw	r20,0(r8)
   21c00:	44800115 	stw	r18,4(r8)
   21c04:	d8c12015 	stw	r3,1152(sp)
   21c08:	d8811f15 	stw	r2,1148(sp)
   21c0c:	a8bff60e 	bge	r21,r2,21be8 <_gp+0xfffe781c>
   21c10:	b009883a 	mov	r4,r22
   21c14:	b80b883a 	mov	r5,r23
   21c18:	d9811e04 	addi	r6,sp,1144
   21c1c:	002790c0 	call	2790c <__sprint_r>
   21c20:	103bbf1e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   21c24:	d8c12017 	ldw	r3,1152(sp)
   21c28:	d8811f17 	ldw	r2,1148(sp)
   21c2c:	da000404 	addi	r8,sp,16
   21c30:	003fee06 	br	21bec <_gp+0xfffe7820>
   21c34:	8888703a 	and	r4,r17,r2
   21c38:	203eab1e 	bne	r4,zero,216e8 <_gp+0xfffe731c>
   21c3c:	dc011f17 	ldw	r16,1148(sp)
   21c40:	db013117 	ldw	r12,1220(sp)
   21c44:	40800115 	stw	r2,4(r8)
   21c48:	84000044 	addi	r16,r16,1
   21c4c:	43000015 	stw	r12,0(r8)
   21c50:	d8c12015 	stw	r3,1152(sp)
   21c54:	dc011f15 	stw	r16,1148(sp)
   21c58:	008001c4 	movi	r2,7
   21c5c:	14000e16 	blt	r2,r16,21c98 <___vfprintf_internal_r+0x15d4>
   21c60:	44800204 	addi	r18,r8,8
   21c64:	003ecb06 	br	21794 <_gp+0xfffe73c8>
   21c68:	008000f4 	movhi	r2,3
   21c6c:	10813684 	addi	r2,r2,1242
   21c70:	d8812c15 	stw	r2,1200(sp)
   21c74:	dac12c17 	ldw	r11,1200(sp)
   21c78:	1d47883a 	add	r3,r3,r21
   21c7c:	84000044 	addi	r16,r16,1
   21c80:	92c00015 	stw	r11,0(r18)
   21c84:	95400115 	stw	r21,4(r18)
   21c88:	d8c12015 	stw	r3,1152(sp)
   21c8c:	dc011f15 	stw	r16,1148(sp)
   21c90:	008001c4 	movi	r2,7
   21c94:	143ebe0e 	bge	r2,r16,21790 <_gp+0xfffe73c4>
   21c98:	b009883a 	mov	r4,r22
   21c9c:	b80b883a 	mov	r5,r23
   21ca0:	d9811e04 	addi	r6,sp,1144
   21ca4:	002790c0 	call	2790c <__sprint_r>
   21ca8:	103b9d1e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   21cac:	d8c12017 	ldw	r3,1152(sp)
   21cb0:	dc011f17 	ldw	r16,1148(sp)
   21cb4:	dc800404 	addi	r18,sp,16
   21cb8:	003eb606 	br	21794 <_gp+0xfffe73c8>
   21cbc:	b009883a 	mov	r4,r22
   21cc0:	b80b883a 	mov	r5,r23
   21cc4:	d9811e04 	addi	r6,sp,1144
   21cc8:	002790c0 	call	2790c <__sprint_r>
   21ccc:	103b941e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   21cd0:	d8c12017 	ldw	r3,1152(sp)
   21cd4:	dc011f17 	ldw	r16,1148(sp)
   21cd8:	da000404 	addi	r8,sp,16
   21cdc:	003e8d06 	br	21714 <_gp+0xfffe7348>
   21ce0:	b009883a 	mov	r4,r22
   21ce4:	b80b883a 	mov	r5,r23
   21ce8:	d9811e04 	addi	r6,sp,1144
   21cec:	002790c0 	call	2790c <__sprint_r>
   21cf0:	103b8b1e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   21cf4:	d8c12017 	ldw	r3,1152(sp)
   21cf8:	dc011f17 	ldw	r16,1148(sp)
   21cfc:	dc800404 	addi	r18,sp,16
   21d00:	003e8f06 	br	21740 <_gp+0xfffe7374>
   21d04:	db010e04 	addi	r12,sp,1080
   21d08:	0025883a 	mov	r18,zero
   21d0c:	db013115 	stw	r12,1220(sp)
   21d10:	003bfb06 	br	20d00 <_gp+0xfffe6934>
   21d14:	b009883a 	mov	r4,r22
   21d18:	b80b883a 	mov	r5,r23
   21d1c:	d9811e04 	addi	r6,sp,1144
   21d20:	002790c0 	call	2790c <__sprint_r>
   21d24:	103b7e1e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   21d28:	d8c12017 	ldw	r3,1152(sp)
   21d2c:	da000404 	addi	r8,sp,16
   21d30:	003c5506 	br	20e88 <_gp+0xfffe6abc>
   21d34:	04e7c83a 	sub	r19,zero,r19
   21d38:	9804c03a 	cmpne	r2,r19,zero
   21d3c:	0739c83a 	sub	fp,zero,fp
   21d40:	e0b9c83a 	sub	fp,fp,r2
   21d44:	05400b44 	movi	r21,45
   21d48:	dd412785 	stb	r21,1182(sp)
   21d4c:	da413215 	stw	r9,1224(sp)
   21d50:	00800044 	movi	r2,1
   21d54:	9f06b03a 	or	r3,r19,fp
   21d58:	003bcf06 	br	20c98 <_gp+0xfffe68cc>
   21d5c:	da013f15 	stw	r8,1276(sp)
   21d60:	da413e15 	stw	r9,1272(sp)
   21d64:	00275680 	call	27568 <__fpclassifyd>
   21d68:	da013f17 	ldw	r8,1276(sp)
   21d6c:	da413e17 	ldw	r9,1272(sp)
   21d70:	1000ce26 	beq	r2,zero,220ac <___vfprintf_internal_r+0x19e8>
   21d74:	057ff7c4 	movi	r21,-33
   21d78:	00bfffc4 	movi	r2,-1
   21d7c:	856a703a 	and	r21,r16,r21
   21d80:	4881f026 	beq	r9,r2,22544 <___vfprintf_internal_r+0x1e80>
   21d84:	008011c4 	movi	r2,71
   21d88:	a881e526 	beq	r21,r2,22520 <___vfprintf_internal_r+0x1e5c>
   21d8c:	db013917 	ldw	r12,1252(sp)
   21d90:	8ac04014 	ori	r11,r17,256
   21d94:	dac12d15 	stw	r11,1204(sp)
   21d98:	6001e416 	blt	r12,zero,2252c <___vfprintf_internal_r+0x1e68>
   21d9c:	dc813917 	ldw	r18,1252(sp)
   21da0:	d8012b05 	stb	zero,1196(sp)
   21da4:	00801984 	movi	r2,102
   21da8:	80811826 	beq	r16,r2,2220c <___vfprintf_internal_r+0x1b48>
   21dac:	00801184 	movi	r2,70
   21db0:	80811626 	beq	r16,r2,2220c <___vfprintf_internal_r+0x1b48>
   21db4:	00801144 	movi	r2,69
   21db8:	a881e026 	beq	r21,r2,2253c <___vfprintf_internal_r+0x1e78>
   21dbc:	4839883a 	mov	fp,r9
   21dc0:	d8812604 	addi	r2,sp,1176
   21dc4:	d8800115 	stw	r2,4(sp)
   21dc8:	d9413717 	ldw	r5,1244(sp)
   21dcc:	d8812504 	addi	r2,sp,1172
   21dd0:	d8800215 	stw	r2,8(sp)
   21dd4:	d8812104 	addi	r2,sp,1156
   21dd8:	df000015 	stw	fp,0(sp)
   21ddc:	d8800315 	stw	r2,12(sp)
   21de0:	b009883a 	mov	r4,r22
   21de4:	900d883a 	mov	r6,r18
   21de8:	01c00084 	movi	r7,2
   21dec:	da013f15 	stw	r8,1276(sp)
   21df0:	da413e15 	stw	r9,1272(sp)
   21df4:	0022a140 	call	22a14 <_dtoa_r>
   21df8:	d8813115 	stw	r2,1220(sp)
   21dfc:	008019c4 	movi	r2,103
   21e00:	da013f17 	ldw	r8,1276(sp)
   21e04:	da413e17 	ldw	r9,1272(sp)
   21e08:	80800226 	beq	r16,r2,21e14 <___vfprintf_internal_r+0x1750>
   21e0c:	008011c4 	movi	r2,71
   21e10:	8081101e 	bne	r16,r2,22254 <___vfprintf_internal_r+0x1b90>
   21e14:	8880004c 	andi	r2,r17,1
   21e18:	1001df26 	beq	r2,zero,22598 <___vfprintf_internal_r+0x1ed4>
   21e1c:	db013117 	ldw	r12,1220(sp)
   21e20:	6715883a 	add	r10,r12,fp
   21e24:	d9013717 	ldw	r4,1244(sp)
   21e28:	900b883a 	mov	r5,r18
   21e2c:	000d883a 	mov	r6,zero
   21e30:	000f883a 	mov	r7,zero
   21e34:	da013f15 	stw	r8,1276(sp)
   21e38:	da413e15 	stw	r9,1272(sp)
   21e3c:	da813d15 	stw	r10,1268(sp)
   21e40:	002b3c00 	call	2b3c0 <__eqdf2>
   21e44:	da013f17 	ldw	r8,1276(sp)
   21e48:	da413e17 	ldw	r9,1272(sp)
   21e4c:	da813d17 	ldw	r10,1268(sp)
   21e50:	10016526 	beq	r2,zero,223e8 <___vfprintf_internal_r+0x1d24>
   21e54:	d8812117 	ldw	r2,1156(sp)
   21e58:	1280062e 	bgeu	r2,r10,21e74 <___vfprintf_internal_r+0x17b0>
   21e5c:	01000c04 	movi	r4,48
   21e60:	10c00044 	addi	r3,r2,1
   21e64:	d8c12115 	stw	r3,1156(sp)
   21e68:	11000005 	stb	r4,0(r2)
   21e6c:	d8812117 	ldw	r2,1156(sp)
   21e70:	12bffb36 	bltu	r2,r10,21e60 <_gp+0xfffe7a94>
   21e74:	db013117 	ldw	r12,1220(sp)
   21e78:	1305c83a 	sub	r2,r2,r12
   21e7c:	d8813315 	stw	r2,1228(sp)
   21e80:	008011c4 	movi	r2,71
   21e84:	a8814a26 	beq	r21,r2,223b0 <___vfprintf_internal_r+0x1cec>
   21e88:	00801944 	movi	r2,101
   21e8c:	14020a0e 	bge	r2,r16,226b8 <___vfprintf_internal_r+0x1ff4>
   21e90:	00801984 	movi	r2,102
   21e94:	8081b626 	beq	r16,r2,22570 <___vfprintf_internal_r+0x1eac>
   21e98:	db012617 	ldw	r12,1176(sp)
   21e9c:	db013415 	stw	r12,1232(sp)
   21ea0:	db013417 	ldw	r12,1232(sp)
   21ea4:	dac13317 	ldw	r11,1228(sp)
   21ea8:	62c1a816 	blt	r12,r11,2254c <___vfprintf_internal_r+0x1e88>
   21eac:	8c40004c 	andi	r17,r17,1
   21eb0:	8801ca1e 	bne	r17,zero,225dc <___vfprintf_internal_r+0x1f18>
   21eb4:	6005883a 	mov	r2,r12
   21eb8:	6001b516 	blt	r12,zero,22590 <___vfprintf_internal_r+0x1ecc>
   21ebc:	dc813417 	ldw	r18,1232(sp)
   21ec0:	df012b07 	ldb	fp,1196(sp)
   21ec4:	e001321e 	bne	fp,zero,22390 <___vfprintf_internal_r+0x1ccc>
   21ec8:	dc412d17 	ldw	r17,1204(sp)
   21ecc:	dd412783 	ldbu	r21,1182(sp)
   21ed0:	d8812b15 	stw	r2,1196(sp)
   21ed4:	dcc12d15 	stw	r19,1204(sp)
   21ed8:	d8013215 	stw	zero,1224(sp)
   21edc:	003b8d06 	br	20d14 <_gp+0xfffe6948>
   21ee0:	88c0100c 	andi	r3,r17,64
   21ee4:	18008226 	beq	r3,zero,220f0 <___vfprintf_internal_r+0x1a2c>
   21ee8:	dac12d17 	ldw	r11,1204(sp)
   21eec:	14c0000b 	ldhu	r19,0(r2)
   21ef0:	0039883a 	mov	fp,zero
   21ef4:	5ac00104 	addi	r11,r11,4
   21ef8:	dac12d15 	stw	r11,1204(sp)
   21efc:	003c8f06 	br	2113c <_gp+0xfffe6d70>
   21f00:	1c000007 	ldb	r16,0(r3)
   21f04:	1805883a 	mov	r2,r3
   21f08:	003a5506 	br	20860 <_gp+0xfffe6494>
   21f0c:	00800084 	movi	r2,2
   21f10:	003b5e06 	br	20c8c <_gp+0xfffe68c0>
   21f14:	8880040c 	andi	r2,r17,16
   21f18:	1000091e 	bne	r2,zero,21f40 <___vfprintf_internal_r+0x187c>
   21f1c:	8c40100c 	andi	r17,r17,64
   21f20:	88000726 	beq	r17,zero,21f40 <___vfprintf_internal_r+0x187c>
   21f24:	db012d17 	ldw	r12,1204(sp)
   21f28:	dac12f17 	ldw	r11,1212(sp)
   21f2c:	60800017 	ldw	r2,0(r12)
   21f30:	63000104 	addi	r12,r12,4
   21f34:	db012d15 	stw	r12,1204(sp)
   21f38:	12c0000d 	sth	r11,0(r2)
   21f3c:	003a1e06 	br	207b8 <_gp+0xfffe63ec>
   21f40:	db012d17 	ldw	r12,1204(sp)
   21f44:	dac12f17 	ldw	r11,1212(sp)
   21f48:	60800017 	ldw	r2,0(r12)
   21f4c:	63000104 	addi	r12,r12,4
   21f50:	db012d15 	stw	r12,1204(sp)
   21f54:	12c00015 	stw	r11,0(r2)
   21f58:	003a1706 	br	207b8 <_gp+0xfffe63ec>
   21f5c:	010000f4 	movhi	r4,3
   21f60:	21013684 	addi	r4,r4,1242
   21f64:	d9012c15 	stw	r4,1200(sp)
   21f68:	dac12c17 	ldw	r11,1200(sp)
   21f6c:	1c87883a 	add	r3,r3,r18
   21f70:	10800044 	addi	r2,r2,1
   21f74:	42c00015 	stw	r11,0(r8)
   21f78:	44800115 	stw	r18,4(r8)
   21f7c:	d8c12015 	stw	r3,1152(sp)
   21f80:	d8811f15 	stw	r2,1148(sp)
   21f84:	010001c4 	movi	r4,7
   21f88:	20bee016 	blt	r4,r2,21b0c <_gp+0xfffe7740>
   21f8c:	42000204 	addi	r8,r8,8
   21f90:	003ee506 	br	21b28 <_gp+0xfffe775c>
   21f94:	010000f4 	movhi	r4,3
   21f98:	21013684 	addi	r4,r4,1242
   21f9c:	d9012c15 	stw	r4,1200(sp)
   21fa0:	003bd806 	br	20f04 <_gp+0xfffe6b38>
   21fa4:	b009883a 	mov	r4,r22
   21fa8:	b80b883a 	mov	r5,r23
   21fac:	d9811e04 	addi	r6,sp,1144
   21fb0:	002790c0 	call	2790c <__sprint_r>
   21fb4:	103ada1e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   21fb8:	d8c12017 	ldw	r3,1152(sp)
   21fbc:	da000404 	addi	r8,sp,16
   21fc0:	003d6b06 	br	21570 <_gp+0xfffe71a4>
   21fc4:	d8811f17 	ldw	r2,1148(sp)
   21fc8:	030000f4 	movhi	r12,3
   21fcc:	01000044 	movi	r4,1
   21fd0:	18c00044 	addi	r3,r3,1
   21fd4:	10800044 	addi	r2,r2,1
   21fd8:	63013604 	addi	r12,r12,1240
   21fdc:	41000115 	stw	r4,4(r8)
   21fe0:	43000015 	stw	r12,0(r8)
   21fe4:	d8c12015 	stw	r3,1152(sp)
   21fe8:	d8811f15 	stw	r2,1148(sp)
   21fec:	010001c4 	movi	r4,7
   21ff0:	20804916 	blt	r4,r2,22118 <___vfprintf_internal_r+0x1a54>
   21ff4:	42000204 	addi	r8,r8,8
   21ff8:	8000041e 	bne	r16,zero,2200c <___vfprintf_internal_r+0x1948>
   21ffc:	dac13317 	ldw	r11,1228(sp)
   22000:	5800021e 	bne	r11,zero,2200c <___vfprintf_internal_r+0x1948>
   22004:	8880004c 	andi	r2,r17,1
   22008:	103bd526 	beq	r2,zero,20f60 <_gp+0xfffe6b94>
   2200c:	db013817 	ldw	r12,1248(sp)
   22010:	d8811f17 	ldw	r2,1148(sp)
   22014:	dac13517 	ldw	r11,1236(sp)
   22018:	1b07883a 	add	r3,r3,r12
   2201c:	10800044 	addi	r2,r2,1
   22020:	42c00015 	stw	r11,0(r8)
   22024:	43000115 	stw	r12,4(r8)
   22028:	d8c12015 	stw	r3,1152(sp)
   2202c:	d8811f15 	stw	r2,1148(sp)
   22030:	010001c4 	movi	r4,7
   22034:	20813016 	blt	r4,r2,224f8 <___vfprintf_internal_r+0x1e34>
   22038:	42000204 	addi	r8,r8,8
   2203c:	0421c83a 	sub	r16,zero,r16
   22040:	0400630e 	bge	zero,r16,221d0 <___vfprintf_internal_r+0x1b0c>
   22044:	04800404 	movi	r18,16
   22048:	94009f0e 	bge	r18,r16,222c8 <___vfprintf_internal_r+0x1c04>
   2204c:	010000f4 	movhi	r4,3
   22050:	21013684 	addi	r4,r4,1242
   22054:	d9012c15 	stw	r4,1200(sp)
   22058:	054001c4 	movi	r21,7
   2205c:	00000306 	br	2206c <___vfprintf_internal_r+0x19a8>
   22060:	42000204 	addi	r8,r8,8
   22064:	843ffc04 	addi	r16,r16,-16
   22068:	94009a0e 	bge	r18,r16,222d4 <___vfprintf_internal_r+0x1c10>
   2206c:	18c00404 	addi	r3,r3,16
   22070:	10800044 	addi	r2,r2,1
   22074:	45000015 	stw	r20,0(r8)
   22078:	44800115 	stw	r18,4(r8)
   2207c:	d8c12015 	stw	r3,1152(sp)
   22080:	d8811f15 	stw	r2,1148(sp)
   22084:	a8bff60e 	bge	r21,r2,22060 <_gp+0xfffe7c94>
   22088:	b009883a 	mov	r4,r22
   2208c:	b80b883a 	mov	r5,r23
   22090:	d9811e04 	addi	r6,sp,1144
   22094:	002790c0 	call	2790c <__sprint_r>
   22098:	103aa11e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   2209c:	d8c12017 	ldw	r3,1152(sp)
   220a0:	d8811f17 	ldw	r2,1148(sp)
   220a4:	da000404 	addi	r8,sp,16
   220a8:	003fee06 	br	22064 <_gp+0xfffe7c98>
   220ac:	008011c4 	movi	r2,71
   220b0:	1400b316 	blt	r2,r16,22380 <___vfprintf_internal_r+0x1cbc>
   220b4:	030000f4 	movhi	r12,3
   220b8:	63012804 	addi	r12,r12,1184
   220bc:	db013115 	stw	r12,1220(sp)
   220c0:	00c000c4 	movi	r3,3
   220c4:	00bfdfc4 	movi	r2,-129
   220c8:	d8c12b15 	stw	r3,1196(sp)
   220cc:	88a2703a 	and	r17,r17,r2
   220d0:	dd412783 	ldbu	r21,1182(sp)
   220d4:	dcc12d15 	stw	r19,1204(sp)
   220d8:	1825883a 	mov	r18,r3
   220dc:	d8013215 	stw	zero,1224(sp)
   220e0:	d8013415 	stw	zero,1232(sp)
   220e4:	003b0b06 	br	20d14 <_gp+0xfffe6948>
   220e8:	4825883a 	mov	r18,r9
   220ec:	003cba06 	br	213d8 <_gp+0xfffe700c>
   220f0:	db012d17 	ldw	r12,1204(sp)
   220f4:	14c00017 	ldw	r19,0(r2)
   220f8:	0039883a 	mov	fp,zero
   220fc:	63000104 	addi	r12,r12,4
   22100:	db012d15 	stw	r12,1204(sp)
   22104:	003c0d06 	br	2113c <_gp+0xfffe6d70>
   22108:	008000f4 	movhi	r2,3
   2210c:	10812604 	addi	r2,r2,1176
   22110:	d8813115 	stw	r2,1220(sp)
   22114:	003ac406 	br	20c28 <_gp+0xfffe685c>
   22118:	b009883a 	mov	r4,r22
   2211c:	b80b883a 	mov	r5,r23
   22120:	d9811e04 	addi	r6,sp,1144
   22124:	002790c0 	call	2790c <__sprint_r>
   22128:	103a7d1e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   2212c:	dc012617 	ldw	r16,1176(sp)
   22130:	d8c12017 	ldw	r3,1152(sp)
   22134:	da000404 	addi	r8,sp,16
   22138:	003faf06 	br	21ff8 <_gp+0xfffe7c2c>
   2213c:	db012e17 	ldw	r12,1208(sp)
   22140:	1805883a 	mov	r2,r3
   22144:	dac12d15 	stw	r11,1204(sp)
   22148:	0319c83a 	sub	r12,zero,r12
   2214c:	db012e15 	stw	r12,1208(sp)
   22150:	003a7e06 	br	20b4c <_gp+0xfffe6780>
   22154:	18800044 	addi	r2,r3,1
   22158:	8c400814 	ori	r17,r17,32
   2215c:	1c000047 	ldb	r16,1(r3)
   22160:	0039bf06 	br	20860 <_gp+0xfffe6494>
   22164:	b009883a 	mov	r4,r22
   22168:	b80b883a 	mov	r5,r23
   2216c:	d9811e04 	addi	r6,sp,1144
   22170:	002790c0 	call	2790c <__sprint_r>
   22174:	103a6a1e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   22178:	d8c12017 	ldw	r3,1152(sp)
   2217c:	da000404 	addi	r8,sp,16
   22180:	003d0c06 	br	215b4 <_gp+0xfffe71e8>
   22184:	db012817 	ldw	r12,1184(sp)
   22188:	d8c13117 	ldw	r3,1220(sp)
   2218c:	60e5c83a 	sub	r18,r12,r3
   22190:	003adb06 	br	20d00 <_gp+0xfffe6934>
   22194:	da013f15 	stw	r8,1276(sp)
   22198:	002062c0 	call	2062c <strlen>
   2219c:	1025883a 	mov	r18,r2
   221a0:	da013f17 	ldw	r8,1276(sp)
   221a4:	903c8e0e 	bge	r18,zero,213e0 <_gp+0xfffe7014>
   221a8:	0005883a 	mov	r2,zero
   221ac:	003c8c06 	br	213e0 <_gp+0xfffe7014>
   221b0:	b009883a 	mov	r4,r22
   221b4:	b80b883a 	mov	r5,r23
   221b8:	d9811e04 	addi	r6,sp,1144
   221bc:	002790c0 	call	2790c <__sprint_r>
   221c0:	103a571e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   221c4:	d8c12017 	ldw	r3,1152(sp)
   221c8:	d8811f17 	ldw	r2,1148(sp)
   221cc:	da000404 	addi	r8,sp,16
   221d0:	db013317 	ldw	r12,1228(sp)
   221d4:	dac13117 	ldw	r11,1220(sp)
   221d8:	10800044 	addi	r2,r2,1
   221dc:	60c7883a 	add	r3,r12,r3
   221e0:	42c00015 	stw	r11,0(r8)
   221e4:	43000115 	stw	r12,4(r8)
   221e8:	d8c12015 	stw	r3,1152(sp)
   221ec:	d8811f15 	stw	r2,1148(sp)
   221f0:	010001c4 	movi	r4,7
   221f4:	20bb590e 	bge	r4,r2,20f5c <_gp+0xfffe6b90>
   221f8:	003d7e06 	br	217f4 <_gp+0xfffe7428>
   221fc:	010000f4 	movhi	r4,3
   22200:	21013a84 	addi	r4,r4,1258
   22204:	d9013615 	stw	r4,1240(sp)
   22208:	003af606 	br	20de4 <_gp+0xfffe6a18>
   2220c:	d8812604 	addi	r2,sp,1176
   22210:	d8800115 	stw	r2,4(sp)
   22214:	d9413717 	ldw	r5,1244(sp)
   22218:	d8812504 	addi	r2,sp,1172
   2221c:	d8800215 	stw	r2,8(sp)
   22220:	d8812104 	addi	r2,sp,1156
   22224:	da400015 	stw	r9,0(sp)
   22228:	d8800315 	stw	r2,12(sp)
   2222c:	b009883a 	mov	r4,r22
   22230:	900d883a 	mov	r6,r18
   22234:	01c000c4 	movi	r7,3
   22238:	da013f15 	stw	r8,1276(sp)
   2223c:	da413e15 	stw	r9,1272(sp)
   22240:	0022a140 	call	22a14 <_dtoa_r>
   22244:	da413e17 	ldw	r9,1272(sp)
   22248:	da013f17 	ldw	r8,1276(sp)
   2224c:	d8813115 	stw	r2,1220(sp)
   22250:	4839883a 	mov	fp,r9
   22254:	dac13117 	ldw	r11,1220(sp)
   22258:	00801184 	movi	r2,70
   2225c:	5f15883a 	add	r10,r11,fp
   22260:	a8bef01e 	bne	r21,r2,21e24 <_gp+0xfffe7a58>
   22264:	59000007 	ldb	r4,0(r11)
   22268:	00800c04 	movi	r2,48
   2226c:	2080e026 	beq	r4,r2,225f0 <___vfprintf_internal_r+0x1f2c>
   22270:	d8c12617 	ldw	r3,1176(sp)
   22274:	50d5883a 	add	r10,r10,r3
   22278:	003eea06 	br	21e24 <_gp+0xfffe7a58>
   2227c:	0025883a 	mov	r18,zero
   22280:	003db306 	br	21950 <_gp+0xfffe7584>
   22284:	b009883a 	mov	r4,r22
   22288:	b80b883a 	mov	r5,r23
   2228c:	d9811e04 	addi	r6,sp,1144
   22290:	002790c0 	call	2790c <__sprint_r>
   22294:	103a221e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   22298:	d8c12017 	ldw	r3,1152(sp)
   2229c:	da000404 	addi	r8,sp,16
   222a0:	003daa06 	br	2194c <_gp+0xfffe7580>
   222a4:	b009883a 	mov	r4,r22
   222a8:	b80b883a 	mov	r5,r23
   222ac:	d9811e04 	addi	r6,sp,1144
   222b0:	002790c0 	call	2790c <__sprint_r>
   222b4:	103a1a1e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   222b8:	d8812617 	ldw	r2,1176(sp)
   222bc:	d8c12017 	ldw	r3,1152(sp)
   222c0:	da000404 	addi	r8,sp,16
   222c4:	003e2c06 	br	21b78 <_gp+0xfffe77ac>
   222c8:	030000f4 	movhi	r12,3
   222cc:	63013684 	addi	r12,r12,1242
   222d0:	db012c15 	stw	r12,1200(sp)
   222d4:	dac12c17 	ldw	r11,1200(sp)
   222d8:	1c07883a 	add	r3,r3,r16
   222dc:	10800044 	addi	r2,r2,1
   222e0:	42c00015 	stw	r11,0(r8)
   222e4:	44000115 	stw	r16,4(r8)
   222e8:	d8c12015 	stw	r3,1152(sp)
   222ec:	d8811f15 	stw	r2,1148(sp)
   222f0:	010001c4 	movi	r4,7
   222f4:	20bfae16 	blt	r4,r2,221b0 <_gp+0xfffe7de4>
   222f8:	42000204 	addi	r8,r8,8
   222fc:	003fb406 	br	221d0 <_gp+0xfffe7e04>
   22300:	030000f4 	movhi	r12,3
   22304:	63013a84 	addi	r12,r12,1258
   22308:	db013615 	stw	r12,1240(sp)
   2230c:	003b3806 	br	20ff0 <_gp+0xfffe6c24>
   22310:	b009883a 	mov	r4,r22
   22314:	b80b883a 	mov	r5,r23
   22318:	d9811e04 	addi	r6,sp,1144
   2231c:	002790c0 	call	2790c <__sprint_r>
   22320:	1039ff1e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   22324:	d8812617 	ldw	r2,1176(sp)
   22328:	db013317 	ldw	r12,1228(sp)
   2232c:	d8c12017 	ldw	r3,1152(sp)
   22330:	da000404 	addi	r8,sp,16
   22334:	6085c83a 	sub	r2,r12,r2
   22338:	003e2006 	br	21bbc <_gp+0xfffe77f0>
   2233c:	0021883a 	mov	r16,zero
   22340:	003e1f06 	br	21bc0 <_gp+0xfffe77f4>
   22344:	00800184 	movi	r2,6
   22348:	1240012e 	bgeu	r2,r9,22350 <___vfprintf_internal_r+0x1c8c>
   2234c:	1013883a 	mov	r9,r2
   22350:	4825883a 	mov	r18,r9
   22354:	4805883a 	mov	r2,r9
   22358:	48009e16 	blt	r9,zero,225d4 <___vfprintf_internal_r+0x1f10>
   2235c:	d8812b15 	stw	r2,1196(sp)
   22360:	008000f4 	movhi	r2,3
   22364:	10813404 	addi	r2,r2,1232
   22368:	d8813115 	stw	r2,1220(sp)
   2236c:	dcc12d15 	stw	r19,1204(sp)
   22370:	d8013215 	stw	zero,1224(sp)
   22374:	d8013415 	stw	zero,1232(sp)
   22378:	0005883a 	mov	r2,zero
   2237c:	003a6c06 	br	20d30 <_gp+0xfffe6964>
   22380:	008000f4 	movhi	r2,3
   22384:	10812904 	addi	r2,r2,1188
   22388:	d8813115 	stw	r2,1220(sp)
   2238c:	003f4c06 	br	220c0 <_gp+0xfffe7cf4>
   22390:	00c00b44 	movi	r3,45
   22394:	d8812b15 	stw	r2,1196(sp)
   22398:	dc412d17 	ldw	r17,1204(sp)
   2239c:	d8c12785 	stb	r3,1182(sp)
   223a0:	dcc12d15 	stw	r19,1204(sp)
   223a4:	d8013215 	stw	zero,1224(sp)
   223a8:	00800b44 	movi	r2,45
   223ac:	003a5d06 	br	20d24 <_gp+0xfffe6958>
   223b0:	d8c12617 	ldw	r3,1176(sp)
   223b4:	00bfff44 	movi	r2,-3
   223b8:	18800d16 	blt	r3,r2,223f0 <___vfprintf_internal_r+0x1d2c>
   223bc:	48c00c16 	blt	r9,r3,223f0 <___vfprintf_internal_r+0x1d2c>
   223c0:	d8c13415 	stw	r3,1232(sp)
   223c4:	040019c4 	movi	r16,103
   223c8:	003eb506 	br	21ea0 <_gp+0xfffe7ad4>
   223cc:	05400b44 	movi	r21,45
   223d0:	dd412785 	stb	r21,1182(sp)
   223d4:	003a0f06 	br	20c14 <_gp+0xfffe6848>
   223d8:	010000f4 	movhi	r4,3
   223dc:	21013684 	addi	r4,r4,1242
   223e0:	d9012c15 	stw	r4,1200(sp)
   223e4:	003cb106 	br	216ac <_gp+0xfffe72e0>
   223e8:	5005883a 	mov	r2,r10
   223ec:	003ea106 	br	21e74 <_gp+0xfffe7aa8>
   223f0:	843fff84 	addi	r16,r16,-2
   223f4:	1f3fffc4 	addi	fp,r3,-1
   223f8:	df012615 	stw	fp,1176(sp)
   223fc:	dc0122c5 	stb	r16,1163(sp)
   22400:	e0009516 	blt	fp,zero,22658 <___vfprintf_internal_r+0x1f94>
   22404:	00800ac4 	movi	r2,43
   22408:	d8812305 	stb	r2,1164(sp)
   2240c:	00800244 	movi	r2,9
   22410:	1700690e 	bge	r2,fp,225b8 <___vfprintf_internal_r+0x1ef4>
   22414:	dd4122c4 	addi	r21,sp,1163
   22418:	dc012c15 	stw	r16,1200(sp)
   2241c:	8825883a 	mov	r18,r17
   22420:	a821883a 	mov	r16,r21
   22424:	4023883a 	mov	r17,r8
   22428:	e009883a 	mov	r4,fp
   2242c:	01400284 	movi	r5,10
   22430:	002a1ec0 	call	2a1ec <__modsi3>
   22434:	10800c04 	addi	r2,r2,48
   22438:	843fffc4 	addi	r16,r16,-1
   2243c:	e009883a 	mov	r4,fp
   22440:	01400284 	movi	r5,10
   22444:	80800005 	stb	r2,0(r16)
   22448:	002a1980 	call	2a198 <__divsi3>
   2244c:	1039883a 	mov	fp,r2
   22450:	00800244 	movi	r2,9
   22454:	173ff416 	blt	r2,fp,22428 <_gp+0xfffe805c>
   22458:	8811883a 	mov	r8,r17
   2245c:	e0800c04 	addi	r2,fp,48
   22460:	9023883a 	mov	r17,r18
   22464:	8025883a 	mov	r18,r16
   22468:	913fffc4 	addi	r4,r18,-1
   2246c:	90bfffc5 	stb	r2,-1(r18)
   22470:	dc012c17 	ldw	r16,1200(sp)
   22474:	25408e2e 	bgeu	r4,r21,226b0 <___vfprintf_internal_r+0x1fec>
   22478:	d9412384 	addi	r5,sp,1166
   2247c:	2c8bc83a 	sub	r5,r5,r18
   22480:	d8c12344 	addi	r3,sp,1165
   22484:	a94b883a 	add	r5,r21,r5
   22488:	00000106 	br	22490 <___vfprintf_internal_r+0x1dcc>
   2248c:	20800003 	ldbu	r2,0(r4)
   22490:	18800005 	stb	r2,0(r3)
   22494:	18c00044 	addi	r3,r3,1
   22498:	21000044 	addi	r4,r4,1
   2249c:	197ffb1e 	bne	r3,r5,2248c <_gp+0xfffe80c0>
   224a0:	d8812304 	addi	r2,sp,1164
   224a4:	1485c83a 	sub	r2,r2,r18
   224a8:	d8c12344 	addi	r3,sp,1165
   224ac:	1885883a 	add	r2,r3,r2
   224b0:	dac13317 	ldw	r11,1228(sp)
   224b4:	156bc83a 	sub	r21,r2,r21
   224b8:	dd413a15 	stw	r21,1256(sp)
   224bc:	00800044 	movi	r2,1
   224c0:	5d65883a 	add	r18,r11,r21
   224c4:	12c0770e 	bge	r2,r11,226a4 <___vfprintf_internal_r+0x1fe0>
   224c8:	94800044 	addi	r18,r18,1
   224cc:	9005883a 	mov	r2,r18
   224d0:	90007216 	blt	r18,zero,2269c <___vfprintf_internal_r+0x1fd8>
   224d4:	d8013415 	stw	zero,1232(sp)
   224d8:	003e7906 	br	21ec0 <_gp+0xfffe7af4>
   224dc:	da412b15 	stw	r9,1196(sp)
   224e0:	dd412783 	ldbu	r21,1182(sp)
   224e4:	4825883a 	mov	r18,r9
   224e8:	dcc12d15 	stw	r19,1204(sp)
   224ec:	d8013215 	stw	zero,1224(sp)
   224f0:	d8013415 	stw	zero,1232(sp)
   224f4:	003a0706 	br	20d14 <_gp+0xfffe6948>
   224f8:	b009883a 	mov	r4,r22
   224fc:	b80b883a 	mov	r5,r23
   22500:	d9811e04 	addi	r6,sp,1144
   22504:	002790c0 	call	2790c <__sprint_r>
   22508:	1039851e 	bne	r2,zero,20b20 <_gp+0xfffe6754>
   2250c:	dc012617 	ldw	r16,1176(sp)
   22510:	d8c12017 	ldw	r3,1152(sp)
   22514:	d8811f17 	ldw	r2,1148(sp)
   22518:	da000404 	addi	r8,sp,16
   2251c:	003ec706 	br	2203c <_gp+0xfffe7c70>
   22520:	483e1a1e 	bne	r9,zero,21d8c <_gp+0xfffe79c0>
   22524:	9013883a 	mov	r9,r18
   22528:	003e1806 	br	21d8c <_gp+0xfffe79c0>
   2252c:	00c00b44 	movi	r3,45
   22530:	64a0003c 	xorhi	r18,r12,32768
   22534:	d8c12b05 	stb	r3,1196(sp)
   22538:	003e1a06 	br	21da4 <_gp+0xfffe79d8>
   2253c:	4f000044 	addi	fp,r9,1
   22540:	003e1f06 	br	21dc0 <_gp+0xfffe79f4>
   22544:	02400184 	movi	r9,6
   22548:	003e1006 	br	21d8c <_gp+0xfffe79c0>
   2254c:	d8c13417 	ldw	r3,1232(sp)
   22550:	00c04b0e 	bge	zero,r3,22680 <___vfprintf_internal_r+0x1fbc>
   22554:	04800044 	movi	r18,1
   22558:	dac13317 	ldw	r11,1228(sp)
   2255c:	92e5883a 	add	r18,r18,r11
   22560:	9005883a 	mov	r2,r18
   22564:	903e560e 	bge	r18,zero,21ec0 <_gp+0xfffe7af4>
   22568:	0005883a 	mov	r2,zero
   2256c:	003e5406 	br	21ec0 <_gp+0xfffe7af4>
   22570:	d8c12617 	ldw	r3,1176(sp)
   22574:	d8c13415 	stw	r3,1232(sp)
   22578:	00c03b0e 	bge	zero,r3,22668 <___vfprintf_internal_r+0x1fa4>
   2257c:	4800081e 	bne	r9,zero,225a0 <___vfprintf_internal_r+0x1edc>
   22580:	8c40004c 	andi	r17,r17,1
   22584:	8800061e 	bne	r17,zero,225a0 <___vfprintf_internal_r+0x1edc>
   22588:	1805883a 	mov	r2,r3
   2258c:	183e4b0e 	bge	r3,zero,21ebc <_gp+0xfffe7af0>
   22590:	0005883a 	mov	r2,zero
   22594:	003e4906 	br	21ebc <_gp+0xfffe7af0>
   22598:	d8812117 	ldw	r2,1156(sp)
   2259c:	003e3506 	br	21e74 <_gp+0xfffe7aa8>
   225a0:	dac13417 	ldw	r11,1232(sp)
   225a4:	4a400044 	addi	r9,r9,1
   225a8:	5a65883a 	add	r18,r11,r9
   225ac:	9005883a 	mov	r2,r18
   225b0:	903e430e 	bge	r18,zero,21ec0 <_gp+0xfffe7af4>
   225b4:	003fec06 	br	22568 <_gp+0xfffe819c>
   225b8:	00800c04 	movi	r2,48
   225bc:	e0c00c04 	addi	r3,fp,48
   225c0:	d8812345 	stb	r2,1165(sp)
   225c4:	d8c12385 	stb	r3,1166(sp)
   225c8:	d88123c4 	addi	r2,sp,1167
   225cc:	dd4122c4 	addi	r21,sp,1163
   225d0:	003fb706 	br	224b0 <_gp+0xfffe80e4>
   225d4:	0005883a 	mov	r2,zero
   225d8:	003f6006 	br	2235c <_gp+0xfffe7f90>
   225dc:	db013417 	ldw	r12,1232(sp)
   225e0:	64800044 	addi	r18,r12,1
   225e4:	9005883a 	mov	r2,r18
   225e8:	903e350e 	bge	r18,zero,21ec0 <_gp+0xfffe7af4>
   225ec:	003fde06 	br	22568 <_gp+0xfffe819c>
   225f0:	d9013717 	ldw	r4,1244(sp)
   225f4:	900b883a 	mov	r5,r18
   225f8:	000d883a 	mov	r6,zero
   225fc:	000f883a 	mov	r7,zero
   22600:	da013f15 	stw	r8,1276(sp)
   22604:	da413e15 	stw	r9,1272(sp)
   22608:	da813d15 	stw	r10,1268(sp)
   2260c:	002b3c00 	call	2b3c0 <__eqdf2>
   22610:	da013f17 	ldw	r8,1276(sp)
   22614:	da413e17 	ldw	r9,1272(sp)
   22618:	da813d17 	ldw	r10,1268(sp)
   2261c:	103f1426 	beq	r2,zero,22270 <_gp+0xfffe7ea4>
   22620:	00800044 	movi	r2,1
   22624:	1707c83a 	sub	r3,r2,fp
   22628:	d8c12615 	stw	r3,1176(sp)
   2262c:	003f1106 	br	22274 <_gp+0xfffe7ea8>
   22630:	dac12d17 	ldw	r11,1204(sp)
   22634:	5a400017 	ldw	r9,0(r11)
   22638:	5ac00104 	addi	r11,r11,4
   2263c:	dac12d15 	stw	r11,1204(sp)
   22640:	483ec60e 	bge	r9,zero,2215c <_gp+0xfffe7d90>
   22644:	027fffc4 	movi	r9,-1
   22648:	1c000047 	ldb	r16,1(r3)
   2264c:	00388406 	br	20860 <_gp+0xfffe6494>
   22650:	043fffc4 	movi	r16,-1
   22654:	00391006 	br	20a98 <_gp+0xfffe66cc>
   22658:	00800b44 	movi	r2,45
   2265c:	0739c83a 	sub	fp,zero,fp
   22660:	d8812305 	stb	r2,1164(sp)
   22664:	003f6906 	br	2240c <_gp+0xfffe8040>
   22668:	4800081e 	bne	r9,zero,2268c <___vfprintf_internal_r+0x1fc8>
   2266c:	8c40004c 	andi	r17,r17,1
   22670:	8800061e 	bne	r17,zero,2268c <___vfprintf_internal_r+0x1fc8>
   22674:	00800044 	movi	r2,1
   22678:	1025883a 	mov	r18,r2
   2267c:	003e1006 	br	21ec0 <_gp+0xfffe7af4>
   22680:	04800084 	movi	r18,2
   22684:	90e5c83a 	sub	r18,r18,r3
   22688:	003fb306 	br	22558 <_gp+0xfffe818c>
   2268c:	4c800084 	addi	r18,r9,2
   22690:	9005883a 	mov	r2,r18
   22694:	903e0a0e 	bge	r18,zero,21ec0 <_gp+0xfffe7af4>
   22698:	003fb306 	br	22568 <_gp+0xfffe819c>
   2269c:	0005883a 	mov	r2,zero
   226a0:	003f8c06 	br	224d4 <_gp+0xfffe8108>
   226a4:	88a2703a 	and	r17,r17,r2
   226a8:	883f8826 	beq	r17,zero,224cc <_gp+0xfffe8100>
   226ac:	003f8606 	br	224c8 <_gp+0xfffe80fc>
   226b0:	d8812344 	addi	r2,sp,1165
   226b4:	003f7e06 	br	224b0 <_gp+0xfffe80e4>
   226b8:	d8c12617 	ldw	r3,1176(sp)
   226bc:	003f4d06 	br	223f4 <_gp+0xfffe8028>

000226c0 <__vfprintf_internal>:
   226c0:	2007883a 	mov	r3,r4
   226c4:	010000f4 	movhi	r4,3
   226c8:	2108f404 	addi	r4,r4,9168
   226cc:	21000017 	ldw	r4,0(r4)
   226d0:	2805883a 	mov	r2,r5
   226d4:	300f883a 	mov	r7,r6
   226d8:	180b883a 	mov	r5,r3
   226dc:	100d883a 	mov	r6,r2
   226e0:	00206c41 	jmpi	206c4 <___vfprintf_internal_r>

000226e4 <__swsetup_r>:
   226e4:	008000f4 	movhi	r2,3
   226e8:	defffd04 	addi	sp,sp,-12
   226ec:	1088f404 	addi	r2,r2,9168
   226f0:	dc400115 	stw	r17,4(sp)
   226f4:	2023883a 	mov	r17,r4
   226f8:	11000017 	ldw	r4,0(r2)
   226fc:	dc000015 	stw	r16,0(sp)
   22700:	dfc00215 	stw	ra,8(sp)
   22704:	2821883a 	mov	r16,r5
   22708:	20000226 	beq	r4,zero,22714 <__swsetup_r+0x30>
   2270c:	20c00e17 	ldw	r3,56(r4)
   22710:	18002e26 	beq	r3,zero,227cc <__swsetup_r+0xe8>
   22714:	8080030b 	ldhu	r2,12(r16)
   22718:	10c0020c 	andi	r3,r2,8
   2271c:	100d883a 	mov	r6,r2
   22720:	18000f26 	beq	r3,zero,22760 <__swsetup_r+0x7c>
   22724:	80c00417 	ldw	r3,16(r16)
   22728:	18001526 	beq	r3,zero,22780 <__swsetup_r+0x9c>
   2272c:	1100004c 	andi	r4,r2,1
   22730:	20001c1e 	bne	r4,zero,227a4 <__swsetup_r+0xc0>
   22734:	1080008c 	andi	r2,r2,2
   22738:	1000261e 	bne	r2,zero,227d4 <__swsetup_r+0xf0>
   2273c:	80800517 	ldw	r2,20(r16)
   22740:	80800215 	stw	r2,8(r16)
   22744:	18001c26 	beq	r3,zero,227b8 <__swsetup_r+0xd4>
   22748:	0005883a 	mov	r2,zero
   2274c:	dfc00217 	ldw	ra,8(sp)
   22750:	dc400117 	ldw	r17,4(sp)
   22754:	dc000017 	ldw	r16,0(sp)
   22758:	dec00304 	addi	sp,sp,12
   2275c:	f800283a 	ret
   22760:	3080040c 	andi	r2,r6,16
   22764:	10001726 	beq	r2,zero,227c4 <__swsetup_r+0xe0>
   22768:	3080010c 	andi	r2,r6,4
   2276c:	10001b1e 	bne	r2,zero,227dc <__swsetup_r+0xf8>
   22770:	80c00417 	ldw	r3,16(r16)
   22774:	30800214 	ori	r2,r6,8
   22778:	8080030d 	sth	r2,12(r16)
   2277c:	183feb1e 	bne	r3,zero,2272c <_gp+0xfffe8360>
   22780:	1140a00c 	andi	r5,r2,640
   22784:	01008004 	movi	r4,512
   22788:	293fe826 	beq	r5,r4,2272c <_gp+0xfffe8360>
   2278c:	8809883a 	mov	r4,r17
   22790:	800b883a 	mov	r5,r16
   22794:	002523c0 	call	2523c <__smakebuf_r>
   22798:	8080030b 	ldhu	r2,12(r16)
   2279c:	80c00417 	ldw	r3,16(r16)
   227a0:	003fe206 	br	2272c <_gp+0xfffe8360>
   227a4:	80800517 	ldw	r2,20(r16)
   227a8:	80000215 	stw	zero,8(r16)
   227ac:	0085c83a 	sub	r2,zero,r2
   227b0:	80800615 	stw	r2,24(r16)
   227b4:	183fe41e 	bne	r3,zero,22748 <_gp+0xfffe837c>
   227b8:	8080030b 	ldhu	r2,12(r16)
   227bc:	1080200c 	andi	r2,r2,128
   227c0:	103fe226 	beq	r2,zero,2274c <_gp+0xfffe8380>
   227c4:	00bfffc4 	movi	r2,-1
   227c8:	003fe006 	br	2274c <_gp+0xfffe8380>
   227cc:	00246e40 	call	246e4 <__sinit>
   227d0:	003fd006 	br	22714 <_gp+0xfffe8348>
   227d4:	0005883a 	mov	r2,zero
   227d8:	003fd906 	br	22740 <_gp+0xfffe8374>
   227dc:	81400c17 	ldw	r5,48(r16)
   227e0:	28000626 	beq	r5,zero,227fc <__swsetup_r+0x118>
   227e4:	80801004 	addi	r2,r16,64
   227e8:	28800326 	beq	r5,r2,227f8 <__swsetup_r+0x114>
   227ec:	8809883a 	mov	r4,r17
   227f0:	00248580 	call	24858 <_free_r>
   227f4:	8180030b 	ldhu	r6,12(r16)
   227f8:	80000c15 	stw	zero,48(r16)
   227fc:	80c00417 	ldw	r3,16(r16)
   22800:	00bff6c4 	movi	r2,-37
   22804:	118c703a 	and	r6,r2,r6
   22808:	80000115 	stw	zero,4(r16)
   2280c:	80c00015 	stw	r3,0(r16)
   22810:	003fd806 	br	22774 <_gp+0xfffe83a8>

00022814 <quorem>:
   22814:	defff704 	addi	sp,sp,-36
   22818:	dc800215 	stw	r18,8(sp)
   2281c:	20800417 	ldw	r2,16(r4)
   22820:	2c800417 	ldw	r18,16(r5)
   22824:	dfc00815 	stw	ra,32(sp)
   22828:	ddc00715 	stw	r23,28(sp)
   2282c:	dd800615 	stw	r22,24(sp)
   22830:	dd400515 	stw	r21,20(sp)
   22834:	dd000415 	stw	r20,16(sp)
   22838:	dcc00315 	stw	r19,12(sp)
   2283c:	dc400115 	stw	r17,4(sp)
   22840:	dc000015 	stw	r16,0(sp)
   22844:	14807116 	blt	r2,r18,22a0c <quorem+0x1f8>
   22848:	94bfffc4 	addi	r18,r18,-1
   2284c:	94ad883a 	add	r22,r18,r18
   22850:	b5ad883a 	add	r22,r22,r22
   22854:	2c400504 	addi	r17,r5,20
   22858:	8da9883a 	add	r20,r17,r22
   2285c:	25400504 	addi	r21,r4,20
   22860:	282f883a 	mov	r23,r5
   22864:	adad883a 	add	r22,r21,r22
   22868:	a1400017 	ldw	r5,0(r20)
   2286c:	2021883a 	mov	r16,r4
   22870:	b1000017 	ldw	r4,0(r22)
   22874:	29400044 	addi	r5,r5,1
   22878:	002a2480 	call	2a248 <__udivsi3>
   2287c:	1027883a 	mov	r19,r2
   22880:	10002c26 	beq	r2,zero,22934 <quorem+0x120>
   22884:	a813883a 	mov	r9,r21
   22888:	8811883a 	mov	r8,r17
   2288c:	0009883a 	mov	r4,zero
   22890:	000d883a 	mov	r6,zero
   22894:	41c00017 	ldw	r7,0(r8)
   22898:	49400017 	ldw	r5,0(r9)
   2289c:	42000104 	addi	r8,r8,4
   228a0:	38bfffcc 	andi	r2,r7,65535
   228a4:	14c5383a 	mul	r2,r2,r19
   228a8:	380ed43a 	srli	r7,r7,16
   228ac:	28ffffcc 	andi	r3,r5,65535
   228b0:	2085883a 	add	r2,r4,r2
   228b4:	1008d43a 	srli	r4,r2,16
   228b8:	3ccf383a 	mul	r7,r7,r19
   228bc:	198d883a 	add	r6,r3,r6
   228c0:	10ffffcc 	andi	r3,r2,65535
   228c4:	30c7c83a 	sub	r3,r6,r3
   228c8:	280ad43a 	srli	r5,r5,16
   228cc:	21c9883a 	add	r4,r4,r7
   228d0:	180dd43a 	srai	r6,r3,16
   228d4:	20bfffcc 	andi	r2,r4,65535
   228d8:	288bc83a 	sub	r5,r5,r2
   228dc:	298b883a 	add	r5,r5,r6
   228e0:	280e943a 	slli	r7,r5,16
   228e4:	18ffffcc 	andi	r3,r3,65535
   228e8:	2008d43a 	srli	r4,r4,16
   228ec:	38ceb03a 	or	r7,r7,r3
   228f0:	49c00015 	stw	r7,0(r9)
   228f4:	280dd43a 	srai	r6,r5,16
   228f8:	4a400104 	addi	r9,r9,4
   228fc:	a23fe52e 	bgeu	r20,r8,22894 <_gp+0xfffe84c8>
   22900:	b0800017 	ldw	r2,0(r22)
   22904:	10000b1e 	bne	r2,zero,22934 <quorem+0x120>
   22908:	b0bfff04 	addi	r2,r22,-4
   2290c:	a880082e 	bgeu	r21,r2,22930 <quorem+0x11c>
   22910:	b0ffff17 	ldw	r3,-4(r22)
   22914:	18000326 	beq	r3,zero,22924 <quorem+0x110>
   22918:	00000506 	br	22930 <quorem+0x11c>
   2291c:	10c00017 	ldw	r3,0(r2)
   22920:	1800031e 	bne	r3,zero,22930 <quorem+0x11c>
   22924:	10bfff04 	addi	r2,r2,-4
   22928:	94bfffc4 	addi	r18,r18,-1
   2292c:	a8bffb36 	bltu	r21,r2,2291c <_gp+0xfffe8550>
   22930:	84800415 	stw	r18,16(r16)
   22934:	8009883a 	mov	r4,r16
   22938:	b80b883a 	mov	r5,r23
   2293c:	00268fc0 	call	268fc <__mcmp>
   22940:	10002616 	blt	r2,zero,229dc <quorem+0x1c8>
   22944:	9cc00044 	addi	r19,r19,1
   22948:	a80d883a 	mov	r6,r21
   2294c:	000b883a 	mov	r5,zero
   22950:	31000017 	ldw	r4,0(r6)
   22954:	88800017 	ldw	r2,0(r17)
   22958:	31800104 	addi	r6,r6,4
   2295c:	20ffffcc 	andi	r3,r4,65535
   22960:	194b883a 	add	r5,r3,r5
   22964:	10ffffcc 	andi	r3,r2,65535
   22968:	28c7c83a 	sub	r3,r5,r3
   2296c:	1004d43a 	srli	r2,r2,16
   22970:	2008d43a 	srli	r4,r4,16
   22974:	180bd43a 	srai	r5,r3,16
   22978:	18ffffcc 	andi	r3,r3,65535
   2297c:	2089c83a 	sub	r4,r4,r2
   22980:	2149883a 	add	r4,r4,r5
   22984:	2004943a 	slli	r2,r4,16
   22988:	8c400104 	addi	r17,r17,4
   2298c:	200bd43a 	srai	r5,r4,16
   22990:	10c6b03a 	or	r3,r2,r3
   22994:	30ffff15 	stw	r3,-4(r6)
   22998:	a47fed2e 	bgeu	r20,r17,22950 <_gp+0xfffe8584>
   2299c:	9485883a 	add	r2,r18,r18
   229a0:	1085883a 	add	r2,r2,r2
   229a4:	a887883a 	add	r3,r21,r2
   229a8:	18800017 	ldw	r2,0(r3)
   229ac:	10000b1e 	bne	r2,zero,229dc <quorem+0x1c8>
   229b0:	18bfff04 	addi	r2,r3,-4
   229b4:	a880082e 	bgeu	r21,r2,229d8 <quorem+0x1c4>
   229b8:	18ffff17 	ldw	r3,-4(r3)
   229bc:	18000326 	beq	r3,zero,229cc <quorem+0x1b8>
   229c0:	00000506 	br	229d8 <quorem+0x1c4>
   229c4:	10c00017 	ldw	r3,0(r2)
   229c8:	1800031e 	bne	r3,zero,229d8 <quorem+0x1c4>
   229cc:	10bfff04 	addi	r2,r2,-4
   229d0:	94bfffc4 	addi	r18,r18,-1
   229d4:	a8bffb36 	bltu	r21,r2,229c4 <_gp+0xfffe85f8>
   229d8:	84800415 	stw	r18,16(r16)
   229dc:	9805883a 	mov	r2,r19
   229e0:	dfc00817 	ldw	ra,32(sp)
   229e4:	ddc00717 	ldw	r23,28(sp)
   229e8:	dd800617 	ldw	r22,24(sp)
   229ec:	dd400517 	ldw	r21,20(sp)
   229f0:	dd000417 	ldw	r20,16(sp)
   229f4:	dcc00317 	ldw	r19,12(sp)
   229f8:	dc800217 	ldw	r18,8(sp)
   229fc:	dc400117 	ldw	r17,4(sp)
   22a00:	dc000017 	ldw	r16,0(sp)
   22a04:	dec00904 	addi	sp,sp,36
   22a08:	f800283a 	ret
   22a0c:	0005883a 	mov	r2,zero
   22a10:	003ff306 	br	229e0 <_gp+0xfffe8614>

00022a14 <_dtoa_r>:
   22a14:	20801017 	ldw	r2,64(r4)
   22a18:	deffde04 	addi	sp,sp,-136
   22a1c:	dd401d15 	stw	r21,116(sp)
   22a20:	dcc01b15 	stw	r19,108(sp)
   22a24:	dc801a15 	stw	r18,104(sp)
   22a28:	dc401915 	stw	r17,100(sp)
   22a2c:	dc001815 	stw	r16,96(sp)
   22a30:	dfc02115 	stw	ra,132(sp)
   22a34:	df002015 	stw	fp,128(sp)
   22a38:	ddc01f15 	stw	r23,124(sp)
   22a3c:	dd801e15 	stw	r22,120(sp)
   22a40:	dd001c15 	stw	r20,112(sp)
   22a44:	d9c00315 	stw	r7,12(sp)
   22a48:	2021883a 	mov	r16,r4
   22a4c:	302b883a 	mov	r21,r6
   22a50:	2825883a 	mov	r18,r5
   22a54:	dc402417 	ldw	r17,144(sp)
   22a58:	3027883a 	mov	r19,r6
   22a5c:	10000826 	beq	r2,zero,22a80 <_dtoa_r+0x6c>
   22a60:	21801117 	ldw	r6,68(r4)
   22a64:	00c00044 	movi	r3,1
   22a68:	100b883a 	mov	r5,r2
   22a6c:	1986983a 	sll	r3,r3,r6
   22a70:	11800115 	stw	r6,4(r2)
   22a74:	10c00215 	stw	r3,8(r2)
   22a78:	00260e40 	call	260e4 <_Bfree>
   22a7c:	80001015 	stw	zero,64(r16)
   22a80:	a8002d16 	blt	r21,zero,22b38 <_dtoa_r+0x124>
   22a84:	88000015 	stw	zero,0(r17)
   22a88:	a8dffc2c 	andhi	r3,r21,32752
   22a8c:	009ffc34 	movhi	r2,32752
   22a90:	18801b26 	beq	r3,r2,22b00 <_dtoa_r+0xec>
   22a94:	9009883a 	mov	r4,r18
   22a98:	980b883a 	mov	r5,r19
   22a9c:	000d883a 	mov	r6,zero
   22aa0:	000f883a 	mov	r7,zero
   22aa4:	002b3c00 	call	2b3c0 <__eqdf2>
   22aa8:	10002a1e 	bne	r2,zero,22b54 <_dtoa_r+0x140>
   22aac:	d8c02317 	ldw	r3,140(sp)
   22ab0:	d9002517 	ldw	r4,148(sp)
   22ab4:	00800044 	movi	r2,1
   22ab8:	18800015 	stw	r2,0(r3)
   22abc:	2001a226 	beq	r4,zero,23148 <_dtoa_r+0x734>
   22ac0:	008000f4 	movhi	r2,3
   22ac4:	10813644 	addi	r2,r2,1241
   22ac8:	20800015 	stw	r2,0(r4)
   22acc:	10bfffc4 	addi	r2,r2,-1
   22ad0:	dfc02117 	ldw	ra,132(sp)
   22ad4:	df002017 	ldw	fp,128(sp)
   22ad8:	ddc01f17 	ldw	r23,124(sp)
   22adc:	dd801e17 	ldw	r22,120(sp)
   22ae0:	dd401d17 	ldw	r21,116(sp)
   22ae4:	dd001c17 	ldw	r20,112(sp)
   22ae8:	dcc01b17 	ldw	r19,108(sp)
   22aec:	dc801a17 	ldw	r18,104(sp)
   22af0:	dc401917 	ldw	r17,100(sp)
   22af4:	dc001817 	ldw	r16,96(sp)
   22af8:	dec02204 	addi	sp,sp,136
   22afc:	f800283a 	ret
   22b00:	d8c02317 	ldw	r3,140(sp)
   22b04:	0089c3c4 	movi	r2,9999
   22b08:	18800015 	stw	r2,0(r3)
   22b0c:	90017c26 	beq	r18,zero,23100 <_dtoa_r+0x6ec>
   22b10:	008000f4 	movhi	r2,3
   22b14:	10814204 	addi	r2,r2,1288
   22b18:	d9002517 	ldw	r4,148(sp)
   22b1c:	203fec26 	beq	r4,zero,22ad0 <_gp+0xfffe8704>
   22b20:	10c000c7 	ldb	r3,3(r2)
   22b24:	18017d1e 	bne	r3,zero,2311c <_dtoa_r+0x708>
   22b28:	10c000c4 	addi	r3,r2,3
   22b2c:	d9802517 	ldw	r6,148(sp)
   22b30:	30c00015 	stw	r3,0(r6)
   22b34:	003fe606 	br	22ad0 <_gp+0xfffe8704>
   22b38:	04e00034 	movhi	r19,32768
   22b3c:	9cffffc4 	addi	r19,r19,-1
   22b40:	00800044 	movi	r2,1
   22b44:	ace6703a 	and	r19,r21,r19
   22b48:	88800015 	stw	r2,0(r17)
   22b4c:	982b883a 	mov	r21,r19
   22b50:	003fcd06 	br	22a88 <_gp+0xfffe86bc>
   22b54:	d8800204 	addi	r2,sp,8
   22b58:	a822d53a 	srli	r17,r21,20
   22b5c:	d8800015 	stw	r2,0(sp)
   22b60:	8009883a 	mov	r4,r16
   22b64:	900b883a 	mov	r5,r18
   22b68:	980d883a 	mov	r6,r19
   22b6c:	d9c00104 	addi	r7,sp,4
   22b70:	0026c700 	call	26c70 <__d2b>
   22b74:	1039883a 	mov	fp,r2
   22b78:	88016a1e 	bne	r17,zero,23124 <_dtoa_r+0x710>
   22b7c:	dd000217 	ldw	r20,8(sp)
   22b80:	dc400117 	ldw	r17,4(sp)
   22b84:	00befbc4 	movi	r2,-1041
   22b88:	a463883a 	add	r17,r20,r17
   22b8c:	8882ea16 	blt	r17,r2,23738 <_dtoa_r+0xd24>
   22b90:	00bf0384 	movi	r2,-1010
   22b94:	1445c83a 	sub	r2,r2,r17
   22b98:	89010484 	addi	r4,r17,1042
   22b9c:	a8aa983a 	sll	r21,r21,r2
   22ba0:	9108d83a 	srl	r4,r18,r4
   22ba4:	a908b03a 	or	r4,r21,r4
   22ba8:	002c7500 	call	2c750 <__floatunsidf>
   22bac:	017f8434 	movhi	r5,65040
   22bb0:	01800044 	movi	r6,1
   22bb4:	1009883a 	mov	r4,r2
   22bb8:	194b883a 	add	r5,r3,r5
   22bbc:	8c7fffc4 	addi	r17,r17,-1
   22bc0:	d9800f15 	stw	r6,60(sp)
   22bc4:	000d883a 	mov	r6,zero
   22bc8:	01cffe34 	movhi	r7,16376
   22bcc:	002bd280 	call	2bd28 <__subdf3>
   22bd0:	0198dbf4 	movhi	r6,25455
   22bd4:	01cff4f4 	movhi	r7,16339
   22bd8:	1009883a 	mov	r4,r2
   22bdc:	180b883a 	mov	r5,r3
   22be0:	3190d844 	addi	r6,r6,17249
   22be4:	39e1e9c4 	addi	r7,r7,-30809
   22be8:	002b6040 	call	2b604 <__muldf3>
   22bec:	01a2d874 	movhi	r6,35681
   22bf0:	01cff1f4 	movhi	r7,16327
   22bf4:	180b883a 	mov	r5,r3
   22bf8:	31b22cc4 	addi	r6,r6,-14157
   22bfc:	39e28a04 	addi	r7,r7,-30168
   22c00:	1009883a 	mov	r4,r2
   22c04:	002a2580 	call	2a258 <__adddf3>
   22c08:	8809883a 	mov	r4,r17
   22c0c:	102d883a 	mov	r22,r2
   22c10:	182b883a 	mov	r21,r3
   22c14:	002c6800 	call	2c680 <__floatsidf>
   22c18:	019427f4 	movhi	r6,20639
   22c1c:	01cff4f4 	movhi	r7,16339
   22c20:	1009883a 	mov	r4,r2
   22c24:	180b883a 	mov	r5,r3
   22c28:	319e7ec4 	addi	r6,r6,31227
   22c2c:	39d104c4 	addi	r7,r7,17427
   22c30:	002b6040 	call	2b604 <__muldf3>
   22c34:	b009883a 	mov	r4,r22
   22c38:	a80b883a 	mov	r5,r21
   22c3c:	100d883a 	mov	r6,r2
   22c40:	180f883a 	mov	r7,r3
   22c44:	002a2580 	call	2a258 <__adddf3>
   22c48:	1009883a 	mov	r4,r2
   22c4c:	180b883a 	mov	r5,r3
   22c50:	102d883a 	mov	r22,r2
   22c54:	182b883a 	mov	r21,r3
   22c58:	002c5f80 	call	2c5f8 <__fixdfsi>
   22c5c:	b009883a 	mov	r4,r22
   22c60:	a80b883a 	mov	r5,r21
   22c64:	000d883a 	mov	r6,zero
   22c68:	000f883a 	mov	r7,zero
   22c6c:	d8800515 	stw	r2,20(sp)
   22c70:	002b5240 	call	2b524 <__ledf2>
   22c74:	10023116 	blt	r2,zero,2353c <_dtoa_r+0xb28>
   22c78:	d8c00517 	ldw	r3,20(sp)
   22c7c:	00800584 	movi	r2,22
   22c80:	10c21f36 	bltu	r2,r3,23500 <_dtoa_r+0xaec>
   22c84:	180490fa 	slli	r2,r3,3
   22c88:	00c000f4 	movhi	r3,3
   22c8c:	18c15e04 	addi	r3,r3,1400
   22c90:	1885883a 	add	r2,r3,r2
   22c94:	11000017 	ldw	r4,0(r2)
   22c98:	11400117 	ldw	r5,4(r2)
   22c9c:	900d883a 	mov	r6,r18
   22ca0:	980f883a 	mov	r7,r19
   22ca4:	002b4440 	call	2b444 <__gedf2>
   22ca8:	0082a70e 	bge	zero,r2,23748 <_dtoa_r+0xd34>
   22cac:	d9000517 	ldw	r4,20(sp)
   22cb0:	d8000c15 	stw	zero,48(sp)
   22cb4:	213fffc4 	addi	r4,r4,-1
   22cb8:	d9000515 	stw	r4,20(sp)
   22cbc:	a463c83a 	sub	r17,r20,r17
   22cc0:	8dbfffc4 	addi	r22,r17,-1
   22cc4:	b0021916 	blt	r22,zero,2352c <_dtoa_r+0xb18>
   22cc8:	d8000815 	stw	zero,32(sp)
   22ccc:	d8800517 	ldw	r2,20(sp)
   22cd0:	10020e16 	blt	r2,zero,2350c <_dtoa_r+0xaf8>
   22cd4:	b0ad883a 	add	r22,r22,r2
   22cd8:	d8800a15 	stw	r2,40(sp)
   22cdc:	d8000915 	stw	zero,36(sp)
   22ce0:	d8c00317 	ldw	r3,12(sp)
   22ce4:	00800244 	movi	r2,9
   22ce8:	10c11a36 	bltu	r2,r3,23154 <_dtoa_r+0x740>
   22cec:	00800144 	movi	r2,5
   22cf0:	10c4fc0e 	bge	r2,r3,240e4 <_dtoa_r+0x16d0>
   22cf4:	18ffff04 	addi	r3,r3,-4
   22cf8:	d8c00315 	stw	r3,12(sp)
   22cfc:	0029883a 	mov	r20,zero
   22d00:	d9800317 	ldw	r6,12(sp)
   22d04:	008000c4 	movi	r2,3
   22d08:	3083bd26 	beq	r6,r2,23c00 <_dtoa_r+0x11ec>
   22d0c:	1183670e 	bge	r2,r6,23aac <_dtoa_r+0x1098>
   22d10:	d8c00317 	ldw	r3,12(sp)
   22d14:	00800104 	movi	r2,4
   22d18:	1882e726 	beq	r3,r2,238b8 <_dtoa_r+0xea4>
   22d1c:	00800144 	movi	r2,5
   22d20:	1884f21e 	bne	r3,r2,240ec <_dtoa_r+0x16d8>
   22d24:	00800044 	movi	r2,1
   22d28:	d8800b15 	stw	r2,44(sp)
   22d2c:	d8c02217 	ldw	r3,136(sp)
   22d30:	d9000517 	ldw	r4,20(sp)
   22d34:	1907883a 	add	r3,r3,r4
   22d38:	19800044 	addi	r6,r3,1
   22d3c:	d8c00d15 	stw	r3,52(sp)
   22d40:	d9800615 	stw	r6,24(sp)
   22d44:	0183c30e 	bge	zero,r6,23c54 <_dtoa_r+0x1240>
   22d48:	d9800617 	ldw	r6,24(sp)
   22d4c:	3023883a 	mov	r17,r6
   22d50:	80001115 	stw	zero,68(r16)
   22d54:	008005c4 	movi	r2,23
   22d58:	1184f62e 	bgeu	r2,r6,24134 <_dtoa_r+0x1720>
   22d5c:	00c00044 	movi	r3,1
   22d60:	00800104 	movi	r2,4
   22d64:	1085883a 	add	r2,r2,r2
   22d68:	11000504 	addi	r4,r2,20
   22d6c:	180b883a 	mov	r5,r3
   22d70:	18c00044 	addi	r3,r3,1
   22d74:	313ffb2e 	bgeu	r6,r4,22d64 <_gp+0xfffe8998>
   22d78:	81401115 	stw	r5,68(r16)
   22d7c:	8009883a 	mov	r4,r16
   22d80:	002603c0 	call	2603c <_Balloc>
   22d84:	d8800715 	stw	r2,28(sp)
   22d88:	80801015 	stw	r2,64(r16)
   22d8c:	00800384 	movi	r2,14
   22d90:	1440fd36 	bltu	r2,r17,23188 <_dtoa_r+0x774>
   22d94:	a000fc26 	beq	r20,zero,23188 <_dtoa_r+0x774>
   22d98:	d8800517 	ldw	r2,20(sp)
   22d9c:	0083b90e 	bge	zero,r2,23c84 <_dtoa_r+0x1270>
   22da0:	d8c00517 	ldw	r3,20(sp)
   22da4:	108003cc 	andi	r2,r2,15
   22da8:	100490fa 	slli	r2,r2,3
   22dac:	182fd13a 	srai	r23,r3,4
   22db0:	00c000f4 	movhi	r3,3
   22db4:	18c15e04 	addi	r3,r3,1400
   22db8:	1885883a 	add	r2,r3,r2
   22dbc:	b8c0040c 	andi	r3,r23,16
   22dc0:	12c00017 	ldw	r11,0(r2)
   22dc4:	12800117 	ldw	r10,4(r2)
   22dc8:	18039726 	beq	r3,zero,23c28 <_dtoa_r+0x1214>
   22dcc:	008000f4 	movhi	r2,3
   22dd0:	10815404 	addi	r2,r2,1360
   22dd4:	11800817 	ldw	r6,32(r2)
   22dd8:	11c00917 	ldw	r7,36(r2)
   22ddc:	9009883a 	mov	r4,r18
   22de0:	980b883a 	mov	r5,r19
   22de4:	da801615 	stw	r10,88(sp)
   22de8:	dac01515 	stw	r11,84(sp)
   22dec:	002aaf40 	call	2aaf4 <__divdf3>
   22df0:	da801617 	ldw	r10,88(sp)
   22df4:	dac01517 	ldw	r11,84(sp)
   22df8:	bdc003cc 	andi	r23,r23,15
   22dfc:	044000c4 	movi	r17,3
   22e00:	d8800e15 	stw	r2,56(sp)
   22e04:	182b883a 	mov	r21,r3
   22e08:	b8001126 	beq	r23,zero,22e50 <_dtoa_r+0x43c>
   22e0c:	050000f4 	movhi	r20,3
   22e10:	a5015404 	addi	r20,r20,1360
   22e14:	5805883a 	mov	r2,r11
   22e18:	5007883a 	mov	r3,r10
   22e1c:	b980004c 	andi	r6,r23,1
   22e20:	1009883a 	mov	r4,r2
   22e24:	b82fd07a 	srai	r23,r23,1
   22e28:	180b883a 	mov	r5,r3
   22e2c:	30000426 	beq	r6,zero,22e40 <_dtoa_r+0x42c>
   22e30:	a1800017 	ldw	r6,0(r20)
   22e34:	a1c00117 	ldw	r7,4(r20)
   22e38:	8c400044 	addi	r17,r17,1
   22e3c:	002b6040 	call	2b604 <__muldf3>
   22e40:	a5000204 	addi	r20,r20,8
   22e44:	b83ff51e 	bne	r23,zero,22e1c <_gp+0xfffe8a50>
   22e48:	1017883a 	mov	r11,r2
   22e4c:	1815883a 	mov	r10,r3
   22e50:	d9000e17 	ldw	r4,56(sp)
   22e54:	a80b883a 	mov	r5,r21
   22e58:	580d883a 	mov	r6,r11
   22e5c:	500f883a 	mov	r7,r10
   22e60:	002aaf40 	call	2aaf4 <__divdf3>
   22e64:	1029883a 	mov	r20,r2
   22e68:	182b883a 	mov	r21,r3
   22e6c:	d9800c17 	ldw	r6,48(sp)
   22e70:	30000626 	beq	r6,zero,22e8c <_dtoa_r+0x478>
   22e74:	a009883a 	mov	r4,r20
   22e78:	a80b883a 	mov	r5,r21
   22e7c:	000d883a 	mov	r6,zero
   22e80:	01cffc34 	movhi	r7,16368
   22e84:	002b5240 	call	2b524 <__ledf2>
   22e88:	10043216 	blt	r2,zero,23f54 <_dtoa_r+0x1540>
   22e8c:	8809883a 	mov	r4,r17
   22e90:	002c6800 	call	2c680 <__floatsidf>
   22e94:	1009883a 	mov	r4,r2
   22e98:	180b883a 	mov	r5,r3
   22e9c:	a00d883a 	mov	r6,r20
   22ea0:	a80f883a 	mov	r7,r21
   22ea4:	002b6040 	call	2b604 <__muldf3>
   22ea8:	000d883a 	mov	r6,zero
   22eac:	1009883a 	mov	r4,r2
   22eb0:	180b883a 	mov	r5,r3
   22eb4:	01d00734 	movhi	r7,16412
   22eb8:	002a2580 	call	2a258 <__adddf3>
   22ebc:	1023883a 	mov	r17,r2
   22ec0:	d9800617 	ldw	r6,24(sp)
   22ec4:	00bf3034 	movhi	r2,64704
   22ec8:	1885883a 	add	r2,r3,r2
   22ecc:	d8800e15 	stw	r2,56(sp)
   22ed0:	30032e26 	beq	r6,zero,23b8c <_dtoa_r+0x1178>
   22ed4:	d8c00517 	ldw	r3,20(sp)
   22ed8:	da800617 	ldw	r10,24(sp)
   22edc:	d8c01215 	stw	r3,72(sp)
   22ee0:	d9000b17 	ldw	r4,44(sp)
   22ee4:	2003b026 	beq	r4,zero,23da8 <_dtoa_r+0x1394>
   22ee8:	50bfffc4 	addi	r2,r10,-1
   22eec:	100490fa 	slli	r2,r2,3
   22ef0:	00c000f4 	movhi	r3,3
   22ef4:	18c15e04 	addi	r3,r3,1400
   22ef8:	1885883a 	add	r2,r3,r2
   22efc:	11800017 	ldw	r6,0(r2)
   22f00:	11c00117 	ldw	r7,4(r2)
   22f04:	d8800717 	ldw	r2,28(sp)
   22f08:	0009883a 	mov	r4,zero
   22f0c:	014ff834 	movhi	r5,16352
   22f10:	da801615 	stw	r10,88(sp)
   22f14:	15c00044 	addi	r23,r2,1
   22f18:	002aaf40 	call	2aaf4 <__divdf3>
   22f1c:	d9c00e17 	ldw	r7,56(sp)
   22f20:	880d883a 	mov	r6,r17
   22f24:	1009883a 	mov	r4,r2
   22f28:	180b883a 	mov	r5,r3
   22f2c:	002bd280 	call	2bd28 <__subdf3>
   22f30:	a80b883a 	mov	r5,r21
   22f34:	a009883a 	mov	r4,r20
   22f38:	d8c01015 	stw	r3,64(sp)
   22f3c:	d8800e15 	stw	r2,56(sp)
   22f40:	002c5f80 	call	2c5f8 <__fixdfsi>
   22f44:	1009883a 	mov	r4,r2
   22f48:	d8801715 	stw	r2,92(sp)
   22f4c:	002c6800 	call	2c680 <__floatsidf>
   22f50:	a009883a 	mov	r4,r20
   22f54:	a80b883a 	mov	r5,r21
   22f58:	100d883a 	mov	r6,r2
   22f5c:	180f883a 	mov	r7,r3
   22f60:	002bd280 	call	2bd28 <__subdf3>
   22f64:	da001717 	ldw	r8,92(sp)
   22f68:	1829883a 	mov	r20,r3
   22f6c:	d8c00717 	ldw	r3,28(sp)
   22f70:	d9000e17 	ldw	r4,56(sp)
   22f74:	d9401017 	ldw	r5,64(sp)
   22f78:	42000c04 	addi	r8,r8,48
   22f7c:	1023883a 	mov	r17,r2
   22f80:	1a000005 	stb	r8,0(r3)
   22f84:	880d883a 	mov	r6,r17
   22f88:	a00f883a 	mov	r7,r20
   22f8c:	402b883a 	mov	r21,r8
   22f90:	002b4440 	call	2b444 <__gedf2>
   22f94:	00844516 	blt	zero,r2,240ac <_dtoa_r+0x1698>
   22f98:	0009883a 	mov	r4,zero
   22f9c:	014ffc34 	movhi	r5,16368
   22fa0:	880d883a 	mov	r6,r17
   22fa4:	a00f883a 	mov	r7,r20
   22fa8:	002bd280 	call	2bd28 <__subdf3>
   22fac:	d9000e17 	ldw	r4,56(sp)
   22fb0:	d9401017 	ldw	r5,64(sp)
   22fb4:	100d883a 	mov	r6,r2
   22fb8:	180f883a 	mov	r7,r3
   22fbc:	002b4440 	call	2b444 <__gedf2>
   22fc0:	da801617 	ldw	r10,88(sp)
   22fc4:	00843616 	blt	zero,r2,240a0 <_dtoa_r+0x168c>
   22fc8:	00800044 	movi	r2,1
   22fcc:	12806e0e 	bge	r2,r10,23188 <_dtoa_r+0x774>
   22fd0:	d9000717 	ldw	r4,28(sp)
   22fd4:	dd801315 	stw	r22,76(sp)
   22fd8:	dc001115 	stw	r16,68(sp)
   22fdc:	2295883a 	add	r10,r4,r10
   22fe0:	dcc01415 	stw	r19,80(sp)
   22fe4:	502d883a 	mov	r22,r10
   22fe8:	dcc01017 	ldw	r19,64(sp)
   22fec:	b821883a 	mov	r16,r23
   22ff0:	dc801015 	stw	r18,64(sp)
   22ff4:	dc800e17 	ldw	r18,56(sp)
   22ff8:	00000906 	br	23020 <_dtoa_r+0x60c>
   22ffc:	002bd280 	call	2bd28 <__subdf3>
   23000:	1009883a 	mov	r4,r2
   23004:	180b883a 	mov	r5,r3
   23008:	900d883a 	mov	r6,r18
   2300c:	980f883a 	mov	r7,r19
   23010:	002b5240 	call	2b524 <__ledf2>
   23014:	10040e16 	blt	r2,zero,24050 <_dtoa_r+0x163c>
   23018:	b821883a 	mov	r16,r23
   2301c:	bd841026 	beq	r23,r22,24060 <_dtoa_r+0x164c>
   23020:	9009883a 	mov	r4,r18
   23024:	980b883a 	mov	r5,r19
   23028:	000d883a 	mov	r6,zero
   2302c:	01d00934 	movhi	r7,16420
   23030:	002b6040 	call	2b604 <__muldf3>
   23034:	000d883a 	mov	r6,zero
   23038:	01d00934 	movhi	r7,16420
   2303c:	8809883a 	mov	r4,r17
   23040:	a00b883a 	mov	r5,r20
   23044:	1025883a 	mov	r18,r2
   23048:	1827883a 	mov	r19,r3
   2304c:	002b6040 	call	2b604 <__muldf3>
   23050:	180b883a 	mov	r5,r3
   23054:	1009883a 	mov	r4,r2
   23058:	1823883a 	mov	r17,r3
   2305c:	1029883a 	mov	r20,r2
   23060:	002c5f80 	call	2c5f8 <__fixdfsi>
   23064:	1009883a 	mov	r4,r2
   23068:	102b883a 	mov	r21,r2
   2306c:	002c6800 	call	2c680 <__floatsidf>
   23070:	a009883a 	mov	r4,r20
   23074:	880b883a 	mov	r5,r17
   23078:	100d883a 	mov	r6,r2
   2307c:	180f883a 	mov	r7,r3
   23080:	002bd280 	call	2bd28 <__subdf3>
   23084:	ad400c04 	addi	r21,r21,48
   23088:	1009883a 	mov	r4,r2
   2308c:	180b883a 	mov	r5,r3
   23090:	900d883a 	mov	r6,r18
   23094:	980f883a 	mov	r7,r19
   23098:	85400005 	stb	r21,0(r16)
   2309c:	1023883a 	mov	r17,r2
   230a0:	1829883a 	mov	r20,r3
   230a4:	002b5240 	call	2b524 <__ledf2>
   230a8:	bdc00044 	addi	r23,r23,1
   230ac:	0009883a 	mov	r4,zero
   230b0:	014ffc34 	movhi	r5,16368
   230b4:	880d883a 	mov	r6,r17
   230b8:	a00f883a 	mov	r7,r20
   230bc:	103fcf0e 	bge	r2,zero,22ffc <_gp+0xfffe8c30>
   230c0:	d9801217 	ldw	r6,72(sp)
   230c4:	dc001117 	ldw	r16,68(sp)
   230c8:	d9800515 	stw	r6,20(sp)
   230cc:	8009883a 	mov	r4,r16
   230d0:	e00b883a 	mov	r5,fp
   230d4:	00260e40 	call	260e4 <_Bfree>
   230d8:	d8c00517 	ldw	r3,20(sp)
   230dc:	d9002317 	ldw	r4,140(sp)
   230e0:	d9802517 	ldw	r6,148(sp)
   230e4:	b8000005 	stb	zero,0(r23)
   230e8:	18800044 	addi	r2,r3,1
   230ec:	20800015 	stw	r2,0(r4)
   230f0:	30027226 	beq	r6,zero,23abc <_dtoa_r+0x10a8>
   230f4:	35c00015 	stw	r23,0(r6)
   230f8:	d8800717 	ldw	r2,28(sp)
   230fc:	003e7406 	br	22ad0 <_gp+0xfffe8704>
   23100:	00800434 	movhi	r2,16
   23104:	10bfffc4 	addi	r2,r2,-1
   23108:	a8aa703a 	and	r21,r21,r2
   2310c:	a83e801e 	bne	r21,zero,22b10 <_gp+0xfffe8744>
   23110:	008000f4 	movhi	r2,3
   23114:	10813f04 	addi	r2,r2,1276
   23118:	003e7f06 	br	22b18 <_gp+0xfffe874c>
   2311c:	10c00204 	addi	r3,r2,8
   23120:	003e8206 	br	22b2c <_gp+0xfffe8760>
   23124:	01400434 	movhi	r5,16
   23128:	297fffc4 	addi	r5,r5,-1
   2312c:	994a703a 	and	r5,r19,r5
   23130:	9009883a 	mov	r4,r18
   23134:	8c7f0044 	addi	r17,r17,-1023
   23138:	294ffc34 	orhi	r5,r5,16368
   2313c:	dd000217 	ldw	r20,8(sp)
   23140:	d8000f15 	stw	zero,60(sp)
   23144:	003e9f06 	br	22bc4 <_gp+0xfffe87f8>
   23148:	008000f4 	movhi	r2,3
   2314c:	10813604 	addi	r2,r2,1240
   23150:	003e5f06 	br	22ad0 <_gp+0xfffe8704>
   23154:	80001115 	stw	zero,68(r16)
   23158:	8009883a 	mov	r4,r16
   2315c:	000b883a 	mov	r5,zero
   23160:	002603c0 	call	2603c <_Balloc>
   23164:	01bfffc4 	movi	r6,-1
   23168:	d8800715 	stw	r2,28(sp)
   2316c:	80801015 	stw	r2,64(r16)
   23170:	00800044 	movi	r2,1
   23174:	d9800615 	stw	r6,24(sp)
   23178:	d8800b15 	stw	r2,44(sp)
   2317c:	d8002215 	stw	zero,136(sp)
   23180:	d9800d15 	stw	r6,52(sp)
   23184:	d8000315 	stw	zero,12(sp)
   23188:	d8800117 	ldw	r2,4(sp)
   2318c:	10008e16 	blt	r2,zero,233c8 <_dtoa_r+0x9b4>
   23190:	d9000517 	ldw	r4,20(sp)
   23194:	00c00384 	movi	r3,14
   23198:	19008b16 	blt	r3,r4,233c8 <_dtoa_r+0x9b4>
   2319c:	200490fa 	slli	r2,r4,3
   231a0:	00c000f4 	movhi	r3,3
   231a4:	d9802217 	ldw	r6,136(sp)
   231a8:	18c15e04 	addi	r3,r3,1400
   231ac:	1885883a 	add	r2,r3,r2
   231b0:	14400017 	ldw	r17,0(r2)
   231b4:	15000117 	ldw	r20,4(r2)
   231b8:	3001c716 	blt	r6,zero,238d8 <_dtoa_r+0xec4>
   231bc:	880d883a 	mov	r6,r17
   231c0:	a00f883a 	mov	r7,r20
   231c4:	9009883a 	mov	r4,r18
   231c8:	980b883a 	mov	r5,r19
   231cc:	002aaf40 	call	2aaf4 <__divdf3>
   231d0:	180b883a 	mov	r5,r3
   231d4:	1009883a 	mov	r4,r2
   231d8:	002c5f80 	call	2c5f8 <__fixdfsi>
   231dc:	1009883a 	mov	r4,r2
   231e0:	102d883a 	mov	r22,r2
   231e4:	002c6800 	call	2c680 <__floatsidf>
   231e8:	1009883a 	mov	r4,r2
   231ec:	180b883a 	mov	r5,r3
   231f0:	880d883a 	mov	r6,r17
   231f4:	a00f883a 	mov	r7,r20
   231f8:	002b6040 	call	2b604 <__muldf3>
   231fc:	9009883a 	mov	r4,r18
   23200:	980b883a 	mov	r5,r19
   23204:	100d883a 	mov	r6,r2
   23208:	180f883a 	mov	r7,r3
   2320c:	002bd280 	call	2bd28 <__subdf3>
   23210:	d9000717 	ldw	r4,28(sp)
   23214:	d9800617 	ldw	r6,24(sp)
   23218:	180b883a 	mov	r5,r3
   2321c:	b0c00c04 	addi	r3,r22,48
   23220:	20c00005 	stb	r3,0(r4)
   23224:	25c00044 	addi	r23,r4,1
   23228:	01000044 	movi	r4,1
   2322c:	1011883a 	mov	r8,r2
   23230:	2807883a 	mov	r3,r5
   23234:	31003d26 	beq	r6,r4,2332c <_dtoa_r+0x918>
   23238:	000d883a 	mov	r6,zero
   2323c:	01d00934 	movhi	r7,16420
   23240:	1009883a 	mov	r4,r2
   23244:	002b6040 	call	2b604 <__muldf3>
   23248:	1009883a 	mov	r4,r2
   2324c:	180b883a 	mov	r5,r3
   23250:	000d883a 	mov	r6,zero
   23254:	000f883a 	mov	r7,zero
   23258:	1027883a 	mov	r19,r2
   2325c:	182b883a 	mov	r21,r3
   23260:	002b3c00 	call	2b3c0 <__eqdf2>
   23264:	103f9926 	beq	r2,zero,230cc <_gp+0xfffe8d00>
   23268:	d8c00617 	ldw	r3,24(sp)
   2326c:	d9000717 	ldw	r4,28(sp)
   23270:	b825883a 	mov	r18,r23
   23274:	18bfffc4 	addi	r2,r3,-1
   23278:	20ad883a 	add	r22,r4,r2
   2327c:	dc000315 	stw	r16,12(sp)
   23280:	00000a06 	br	232ac <_dtoa_r+0x898>
   23284:	002b6040 	call	2b604 <__muldf3>
   23288:	1009883a 	mov	r4,r2
   2328c:	180b883a 	mov	r5,r3
   23290:	000d883a 	mov	r6,zero
   23294:	000f883a 	mov	r7,zero
   23298:	1027883a 	mov	r19,r2
   2329c:	182b883a 	mov	r21,r3
   232a0:	b825883a 	mov	r18,r23
   232a4:	002b3c00 	call	2b3c0 <__eqdf2>
   232a8:	10022626 	beq	r2,zero,23b44 <_dtoa_r+0x1130>
   232ac:	880d883a 	mov	r6,r17
   232b0:	a00f883a 	mov	r7,r20
   232b4:	9809883a 	mov	r4,r19
   232b8:	a80b883a 	mov	r5,r21
   232bc:	002aaf40 	call	2aaf4 <__divdf3>
   232c0:	180b883a 	mov	r5,r3
   232c4:	1009883a 	mov	r4,r2
   232c8:	002c5f80 	call	2c5f8 <__fixdfsi>
   232cc:	1009883a 	mov	r4,r2
   232d0:	1021883a 	mov	r16,r2
   232d4:	002c6800 	call	2c680 <__floatsidf>
   232d8:	1009883a 	mov	r4,r2
   232dc:	180b883a 	mov	r5,r3
   232e0:	880d883a 	mov	r6,r17
   232e4:	a00f883a 	mov	r7,r20
   232e8:	002b6040 	call	2b604 <__muldf3>
   232ec:	9809883a 	mov	r4,r19
   232f0:	a80b883a 	mov	r5,r21
   232f4:	100d883a 	mov	r6,r2
   232f8:	180f883a 	mov	r7,r3
   232fc:	002bd280 	call	2bd28 <__subdf3>
   23300:	82000c04 	addi	r8,r16,48
   23304:	92000005 	stb	r8,0(r18)
   23308:	1009883a 	mov	r4,r2
   2330c:	180b883a 	mov	r5,r3
   23310:	000d883a 	mov	r6,zero
   23314:	01d00934 	movhi	r7,16420
   23318:	1011883a 	mov	r8,r2
   2331c:	bdc00044 	addi	r23,r23,1
   23320:	95bfd81e 	bne	r18,r22,23284 <_gp+0xfffe8eb8>
   23324:	802d883a 	mov	r22,r16
   23328:	dc000317 	ldw	r16,12(sp)
   2332c:	4009883a 	mov	r4,r8
   23330:	180b883a 	mov	r5,r3
   23334:	400d883a 	mov	r6,r8
   23338:	180f883a 	mov	r7,r3
   2333c:	002a2580 	call	2a258 <__adddf3>
   23340:	8809883a 	mov	r4,r17
   23344:	a00b883a 	mov	r5,r20
   23348:	100d883a 	mov	r6,r2
   2334c:	180f883a 	mov	r7,r3
   23350:	1027883a 	mov	r19,r2
   23354:	1825883a 	mov	r18,r3
   23358:	002b5240 	call	2b524 <__ledf2>
   2335c:	10000816 	blt	r2,zero,23380 <_dtoa_r+0x96c>
   23360:	8809883a 	mov	r4,r17
   23364:	a00b883a 	mov	r5,r20
   23368:	980d883a 	mov	r6,r19
   2336c:	900f883a 	mov	r7,r18
   23370:	002b3c00 	call	2b3c0 <__eqdf2>
   23374:	103f551e 	bne	r2,zero,230cc <_gp+0xfffe8d00>
   23378:	b580004c 	andi	r22,r22,1
   2337c:	b03f5326 	beq	r22,zero,230cc <_gp+0xfffe8d00>
   23380:	bd7fffc3 	ldbu	r21,-1(r23)
   23384:	b8bfffc4 	addi	r2,r23,-1
   23388:	1007883a 	mov	r3,r2
   2338c:	01400e44 	movi	r5,57
   23390:	d9800717 	ldw	r6,28(sp)
   23394:	00000506 	br	233ac <_dtoa_r+0x998>
   23398:	18ffffc4 	addi	r3,r3,-1
   2339c:	30825e26 	beq	r6,r2,23d18 <_dtoa_r+0x1304>
   233a0:	1d400003 	ldbu	r21,0(r3)
   233a4:	102f883a 	mov	r23,r2
   233a8:	10bfffc4 	addi	r2,r2,-1
   233ac:	a9003fcc 	andi	r4,r21,255
   233b0:	2100201c 	xori	r4,r4,128
   233b4:	213fe004 	addi	r4,r4,-128
   233b8:	217ff726 	beq	r4,r5,23398 <_gp+0xfffe8fcc>
   233bc:	aa000044 	addi	r8,r21,1
   233c0:	12000005 	stb	r8,0(r2)
   233c4:	003f4106 	br	230cc <_gp+0xfffe8d00>
   233c8:	d8c00b17 	ldw	r3,44(sp)
   233cc:	18006726 	beq	r3,zero,2356c <_dtoa_r+0xb58>
   233d0:	d9000317 	ldw	r4,12(sp)
   233d4:	00c00044 	movi	r3,1
   233d8:	19016a0e 	bge	r3,r4,23984 <_dtoa_r+0xf70>
   233dc:	d8800617 	ldw	r2,24(sp)
   233e0:	d8c00917 	ldw	r3,36(sp)
   233e4:	157fffc4 	addi	r21,r2,-1
   233e8:	1d420716 	blt	r3,r21,23c08 <_dtoa_r+0x11f4>
   233ec:	1d6bc83a 	sub	r21,r3,r21
   233f0:	d8800617 	ldw	r2,24(sp)
   233f4:	1002c716 	blt	r2,zero,23f14 <_dtoa_r+0x1500>
   233f8:	dd000817 	ldw	r20,32(sp)
   233fc:	d8800617 	ldw	r2,24(sp)
   23400:	d9800817 	ldw	r6,32(sp)
   23404:	8009883a 	mov	r4,r16
   23408:	01400044 	movi	r5,1
   2340c:	308d883a 	add	r6,r6,r2
   23410:	d9800815 	stw	r6,32(sp)
   23414:	b0ad883a 	add	r22,r22,r2
   23418:	002643c0 	call	2643c <__i2b>
   2341c:	1023883a 	mov	r17,r2
   23420:	a0000826 	beq	r20,zero,23444 <_dtoa_r+0xa30>
   23424:	0580070e 	bge	zero,r22,23444 <_dtoa_r+0xa30>
   23428:	b005883a 	mov	r2,r22
   2342c:	a5812016 	blt	r20,r22,238b0 <_dtoa_r+0xe9c>
   23430:	d8c00817 	ldw	r3,32(sp)
   23434:	a0a9c83a 	sub	r20,r20,r2
   23438:	b0adc83a 	sub	r22,r22,r2
   2343c:	1887c83a 	sub	r3,r3,r2
   23440:	d8c00815 	stw	r3,32(sp)
   23444:	d9000917 	ldw	r4,36(sp)
   23448:	0100140e 	bge	zero,r4,2349c <_dtoa_r+0xa88>
   2344c:	d9800b17 	ldw	r6,44(sp)
   23450:	3001e526 	beq	r6,zero,23be8 <_dtoa_r+0x11d4>
   23454:	05400e0e 	bge	zero,r21,23490 <_dtoa_r+0xa7c>
   23458:	880b883a 	mov	r5,r17
   2345c:	8009883a 	mov	r4,r16
   23460:	a80d883a 	mov	r6,r21
   23464:	00266740 	call	26674 <__pow5mult>
   23468:	e00d883a 	mov	r6,fp
   2346c:	8009883a 	mov	r4,r16
   23470:	100b883a 	mov	r5,r2
   23474:	1023883a 	mov	r17,r2
   23478:	00264780 	call	26478 <__multiply>
   2347c:	102f883a 	mov	r23,r2
   23480:	e00b883a 	mov	r5,fp
   23484:	8009883a 	mov	r4,r16
   23488:	00260e40 	call	260e4 <_Bfree>
   2348c:	b839883a 	mov	fp,r23
   23490:	d8800917 	ldw	r2,36(sp)
   23494:	154dc83a 	sub	r6,r2,r21
   23498:	3001281e 	bne	r6,zero,2393c <_dtoa_r+0xf28>
   2349c:	05c00044 	movi	r23,1
   234a0:	8009883a 	mov	r4,r16
   234a4:	b80b883a 	mov	r5,r23
   234a8:	002643c0 	call	2643c <__i2b>
   234ac:	d8c00a17 	ldw	r3,40(sp)
   234b0:	102b883a 	mov	r21,r2
   234b4:	00c0310e 	bge	zero,r3,2357c <_dtoa_r+0xb68>
   234b8:	8009883a 	mov	r4,r16
   234bc:	100b883a 	mov	r5,r2
   234c0:	180d883a 	mov	r6,r3
   234c4:	00266740 	call	26674 <__pow5mult>
   234c8:	d9000317 	ldw	r4,12(sp)
   234cc:	102b883a 	mov	r21,r2
   234d0:	b9011f0e 	bge	r23,r4,23950 <_dtoa_r+0xf3c>
   234d4:	0027883a 	mov	r19,zero
   234d8:	a8800417 	ldw	r2,16(r21)
   234dc:	10800104 	addi	r2,r2,4
   234e0:	1085883a 	add	r2,r2,r2
   234e4:	1085883a 	add	r2,r2,r2
   234e8:	a885883a 	add	r2,r21,r2
   234ec:	11000017 	ldw	r4,0(r2)
   234f0:	00263240 	call	26324 <__hi0bits>
   234f4:	00c00804 	movi	r3,32
   234f8:	1885c83a 	sub	r2,r3,r2
   234fc:	00002506 	br	23594 <_dtoa_r+0xb80>
   23500:	01800044 	movi	r6,1
   23504:	d9800c15 	stw	r6,48(sp)
   23508:	003dec06 	br	22cbc <_gp+0xfffe88f0>
   2350c:	d8c00817 	ldw	r3,32(sp)
   23510:	d9000517 	ldw	r4,20(sp)
   23514:	d8000a15 	stw	zero,40(sp)
   23518:	1907c83a 	sub	r3,r3,r4
   2351c:	010dc83a 	sub	r6,zero,r4
   23520:	d8c00815 	stw	r3,32(sp)
   23524:	d9800915 	stw	r6,36(sp)
   23528:	003ded06 	br	22ce0 <_gp+0xfffe8914>
   2352c:	05adc83a 	sub	r22,zero,r22
   23530:	dd800815 	stw	r22,32(sp)
   23534:	002d883a 	mov	r22,zero
   23538:	003de406 	br	22ccc <_gp+0xfffe8900>
   2353c:	d9000517 	ldw	r4,20(sp)
   23540:	002c6800 	call	2c680 <__floatsidf>
   23544:	1009883a 	mov	r4,r2
   23548:	180b883a 	mov	r5,r3
   2354c:	b00d883a 	mov	r6,r22
   23550:	a80f883a 	mov	r7,r21
   23554:	002b3c00 	call	2b3c0 <__eqdf2>
   23558:	103dc726 	beq	r2,zero,22c78 <_gp+0xfffe88ac>
   2355c:	d8800517 	ldw	r2,20(sp)
   23560:	10bfffc4 	addi	r2,r2,-1
   23564:	d8800515 	stw	r2,20(sp)
   23568:	003dc306 	br	22c78 <_gp+0xfffe88ac>
   2356c:	dd400917 	ldw	r21,36(sp)
   23570:	dd000817 	ldw	r20,32(sp)
   23574:	0023883a 	mov	r17,zero
   23578:	003fa906 	br	23420 <_gp+0xfffe9054>
   2357c:	d9800317 	ldw	r6,12(sp)
   23580:	b981670e 	bge	r23,r6,23b20 <_dtoa_r+0x110c>
   23584:	0027883a 	mov	r19,zero
   23588:	d8c00a17 	ldw	r3,40(sp)
   2358c:	183fd21e 	bne	r3,zero,234d8 <_gp+0xfffe910c>
   23590:	00800044 	movi	r2,1
   23594:	1585883a 	add	r2,r2,r22
   23598:	108007cc 	andi	r2,r2,31
   2359c:	10005f26 	beq	r2,zero,2371c <_dtoa_r+0xd08>
   235a0:	00c00804 	movi	r3,32
   235a4:	1887c83a 	sub	r3,r3,r2
   235a8:	01000104 	movi	r4,4
   235ac:	20c2dd0e 	bge	r4,r3,24124 <_dtoa_r+0x1710>
   235b0:	d9000817 	ldw	r4,32(sp)
   235b4:	00c00704 	movi	r3,28
   235b8:	1885c83a 	sub	r2,r3,r2
   235bc:	2089883a 	add	r4,r4,r2
   235c0:	d9000815 	stw	r4,32(sp)
   235c4:	a0a9883a 	add	r20,r20,r2
   235c8:	b0ad883a 	add	r22,r22,r2
   235cc:	d8800817 	ldw	r2,32(sp)
   235d0:	0080050e 	bge	zero,r2,235e8 <_dtoa_r+0xbd4>
   235d4:	e00b883a 	mov	r5,fp
   235d8:	8009883a 	mov	r4,r16
   235dc:	100d883a 	mov	r6,r2
   235e0:	00267b40 	call	267b4 <__lshift>
   235e4:	1039883a 	mov	fp,r2
   235e8:	0580050e 	bge	zero,r22,23600 <_dtoa_r+0xbec>
   235ec:	a80b883a 	mov	r5,r21
   235f0:	8009883a 	mov	r4,r16
   235f4:	b00d883a 	mov	r6,r22
   235f8:	00267b40 	call	267b4 <__lshift>
   235fc:	102b883a 	mov	r21,r2
   23600:	d8c00c17 	ldw	r3,48(sp)
   23604:	1801161e 	bne	r3,zero,23a60 <_dtoa_r+0x104c>
   23608:	d8c00617 	ldw	r3,24(sp)
   2360c:	00c12d0e 	bge	zero,r3,23ac4 <_dtoa_r+0x10b0>
   23610:	d8c00b17 	ldw	r3,44(sp)
   23614:	1800571e 	bne	r3,zero,23774 <_dtoa_r+0xd60>
   23618:	dc800717 	ldw	r18,28(sp)
   2361c:	dcc00617 	ldw	r19,24(sp)
   23620:	9029883a 	mov	r20,r18
   23624:	00000206 	br	23630 <_dtoa_r+0xc1c>
   23628:	002610c0 	call	2610c <__multadd>
   2362c:	1039883a 	mov	fp,r2
   23630:	e009883a 	mov	r4,fp
   23634:	a80b883a 	mov	r5,r21
   23638:	00228140 	call	22814 <quorem>
   2363c:	10800c04 	addi	r2,r2,48
   23640:	90800005 	stb	r2,0(r18)
   23644:	94800044 	addi	r18,r18,1
   23648:	9507c83a 	sub	r3,r18,r20
   2364c:	8009883a 	mov	r4,r16
   23650:	e00b883a 	mov	r5,fp
   23654:	01800284 	movi	r6,10
   23658:	000f883a 	mov	r7,zero
   2365c:	1cfff216 	blt	r3,r19,23628 <_gp+0xfffe925c>
   23660:	1011883a 	mov	r8,r2
   23664:	d8800617 	ldw	r2,24(sp)
   23668:	00822e0e 	bge	zero,r2,23f24 <_dtoa_r+0x1510>
   2366c:	d9000717 	ldw	r4,28(sp)
   23670:	0025883a 	mov	r18,zero
   23674:	20af883a 	add	r23,r4,r2
   23678:	e00b883a 	mov	r5,fp
   2367c:	01800044 	movi	r6,1
   23680:	8009883a 	mov	r4,r16
   23684:	da001715 	stw	r8,92(sp)
   23688:	00267b40 	call	267b4 <__lshift>
   2368c:	1009883a 	mov	r4,r2
   23690:	a80b883a 	mov	r5,r21
   23694:	1039883a 	mov	fp,r2
   23698:	00268fc0 	call	268fc <__mcmp>
   2369c:	da001717 	ldw	r8,92(sp)
   236a0:	00816e0e 	bge	zero,r2,23c5c <_dtoa_r+0x1248>
   236a4:	b93fffc3 	ldbu	r4,-1(r23)
   236a8:	b8bfffc4 	addi	r2,r23,-1
   236ac:	1007883a 	mov	r3,r2
   236b0:	01800e44 	movi	r6,57
   236b4:	d9c00717 	ldw	r7,28(sp)
   236b8:	00000506 	br	236d0 <_dtoa_r+0xcbc>
   236bc:	18ffffc4 	addi	r3,r3,-1
   236c0:	38811926 	beq	r7,r2,23b28 <_dtoa_r+0x1114>
   236c4:	19000003 	ldbu	r4,0(r3)
   236c8:	102f883a 	mov	r23,r2
   236cc:	10bfffc4 	addi	r2,r2,-1
   236d0:	21403fcc 	andi	r5,r4,255
   236d4:	2940201c 	xori	r5,r5,128
   236d8:	297fe004 	addi	r5,r5,-128
   236dc:	29bff726 	beq	r5,r6,236bc <_gp+0xfffe92f0>
   236e0:	21000044 	addi	r4,r4,1
   236e4:	11000005 	stb	r4,0(r2)
   236e8:	8009883a 	mov	r4,r16
   236ec:	a80b883a 	mov	r5,r21
   236f0:	00260e40 	call	260e4 <_Bfree>
   236f4:	883e7526 	beq	r17,zero,230cc <_gp+0xfffe8d00>
   236f8:	90000426 	beq	r18,zero,2370c <_dtoa_r+0xcf8>
   236fc:	94400326 	beq	r18,r17,2370c <_dtoa_r+0xcf8>
   23700:	8009883a 	mov	r4,r16
   23704:	900b883a 	mov	r5,r18
   23708:	00260e40 	call	260e4 <_Bfree>
   2370c:	8009883a 	mov	r4,r16
   23710:	880b883a 	mov	r5,r17
   23714:	00260e40 	call	260e4 <_Bfree>
   23718:	003e6c06 	br	230cc <_gp+0xfffe8d00>
   2371c:	00800704 	movi	r2,28
   23720:	d9800817 	ldw	r6,32(sp)
   23724:	a0a9883a 	add	r20,r20,r2
   23728:	b0ad883a 	add	r22,r22,r2
   2372c:	308d883a 	add	r6,r6,r2
   23730:	d9800815 	stw	r6,32(sp)
   23734:	003fa506 	br	235cc <_gp+0xfffe9200>
   23738:	013efb84 	movi	r4,-1042
   2373c:	246bc83a 	sub	r21,r4,r17
   23740:	9548983a 	sll	r4,r18,r21
   23744:	003d1806 	br	22ba8 <_gp+0xfffe87dc>
   23748:	d8000c15 	stw	zero,48(sp)
   2374c:	003d5b06 	br	22cbc <_gp+0xfffe88f0>
   23750:	880b883a 	mov	r5,r17
   23754:	8009883a 	mov	r4,r16
   23758:	01800284 	movi	r6,10
   2375c:	000f883a 	mov	r7,zero
   23760:	002610c0 	call	2610c <__multadd>
   23764:	1023883a 	mov	r17,r2
   23768:	d8800d17 	ldw	r2,52(sp)
   2376c:	0082550e 	bge	zero,r2,240c4 <_dtoa_r+0x16b0>
   23770:	d8800615 	stw	r2,24(sp)
   23774:	0500050e 	bge	zero,r20,2378c <_dtoa_r+0xd78>
   23778:	880b883a 	mov	r5,r17
   2377c:	8009883a 	mov	r4,r16
   23780:	a00d883a 	mov	r6,r20
   23784:	00267b40 	call	267b4 <__lshift>
   23788:	1023883a 	mov	r17,r2
   2378c:	98016a1e 	bne	r19,zero,23d38 <_dtoa_r+0x1324>
   23790:	8829883a 	mov	r20,r17
   23794:	d9000617 	ldw	r4,24(sp)
   23798:	dcc00717 	ldw	r19,28(sp)
   2379c:	9480004c 	andi	r18,r18,1
   237a0:	20bfffc4 	addi	r2,r4,-1
   237a4:	9885883a 	add	r2,r19,r2
   237a8:	d8800415 	stw	r2,16(sp)
   237ac:	dc800615 	stw	r18,24(sp)
   237b0:	e009883a 	mov	r4,fp
   237b4:	a80b883a 	mov	r5,r21
   237b8:	00228140 	call	22814 <quorem>
   237bc:	e009883a 	mov	r4,fp
   237c0:	880b883a 	mov	r5,r17
   237c4:	102f883a 	mov	r23,r2
   237c8:	00268fc0 	call	268fc <__mcmp>
   237cc:	8009883a 	mov	r4,r16
   237d0:	a80b883a 	mov	r5,r21
   237d4:	a00d883a 	mov	r6,r20
   237d8:	102d883a 	mov	r22,r2
   237dc:	002695c0 	call	2695c <__mdiff>
   237e0:	1007883a 	mov	r3,r2
   237e4:	10800317 	ldw	r2,12(r2)
   237e8:	bc800c04 	addi	r18,r23,48
   237ec:	1000971e 	bne	r2,zero,23a4c <_dtoa_r+0x1038>
   237f0:	180b883a 	mov	r5,r3
   237f4:	e009883a 	mov	r4,fp
   237f8:	d8c01515 	stw	r3,84(sp)
   237fc:	00268fc0 	call	268fc <__mcmp>
   23800:	d8c01517 	ldw	r3,84(sp)
   23804:	8009883a 	mov	r4,r16
   23808:	d8801515 	stw	r2,84(sp)
   2380c:	180b883a 	mov	r5,r3
   23810:	00260e40 	call	260e4 <_Bfree>
   23814:	d8801517 	ldw	r2,84(sp)
   23818:	1000041e 	bne	r2,zero,2382c <_dtoa_r+0xe18>
   2381c:	d9800317 	ldw	r6,12(sp)
   23820:	3000021e 	bne	r6,zero,2382c <_dtoa_r+0xe18>
   23824:	d8c00617 	ldw	r3,24(sp)
   23828:	18007626 	beq	r3,zero,23a04 <_dtoa_r+0xff0>
   2382c:	b0005b16 	blt	r22,zero,2399c <_dtoa_r+0xf88>
   23830:	b000041e 	bne	r22,zero,23844 <_dtoa_r+0xe30>
   23834:	d9000317 	ldw	r4,12(sp)
   23838:	2000021e 	bne	r4,zero,23844 <_dtoa_r+0xe30>
   2383c:	d8c00617 	ldw	r3,24(sp)
   23840:	18005626 	beq	r3,zero,2399c <_dtoa_r+0xf88>
   23844:	00814d16 	blt	zero,r2,23d7c <_dtoa_r+0x1368>
   23848:	d8c00417 	ldw	r3,16(sp)
   2384c:	9d800044 	addi	r22,r19,1
   23850:	9c800005 	stb	r18,0(r19)
   23854:	b02f883a 	mov	r23,r22
   23858:	98c14c26 	beq	r19,r3,23d8c <_dtoa_r+0x1378>
   2385c:	e00b883a 	mov	r5,fp
   23860:	8009883a 	mov	r4,r16
   23864:	01800284 	movi	r6,10
   23868:	000f883a 	mov	r7,zero
   2386c:	002610c0 	call	2610c <__multadd>
   23870:	1039883a 	mov	fp,r2
   23874:	8d006d26 	beq	r17,r20,23a2c <_dtoa_r+0x1018>
   23878:	880b883a 	mov	r5,r17
   2387c:	01800284 	movi	r6,10
   23880:	000f883a 	mov	r7,zero
   23884:	8009883a 	mov	r4,r16
   23888:	002610c0 	call	2610c <__multadd>
   2388c:	a00b883a 	mov	r5,r20
   23890:	8009883a 	mov	r4,r16
   23894:	01800284 	movi	r6,10
   23898:	000f883a 	mov	r7,zero
   2389c:	1023883a 	mov	r17,r2
   238a0:	002610c0 	call	2610c <__multadd>
   238a4:	1029883a 	mov	r20,r2
   238a8:	b027883a 	mov	r19,r22
   238ac:	003fc006 	br	237b0 <_gp+0xfffe93e4>
   238b0:	a005883a 	mov	r2,r20
   238b4:	003ede06 	br	23430 <_gp+0xfffe9064>
   238b8:	01000044 	movi	r4,1
   238bc:	d9000b15 	stw	r4,44(sp)
   238c0:	d9802217 	ldw	r6,136(sp)
   238c4:	0180dc0e 	bge	zero,r6,23c38 <_dtoa_r+0x1224>
   238c8:	3023883a 	mov	r17,r6
   238cc:	d9800d15 	stw	r6,52(sp)
   238d0:	d9800615 	stw	r6,24(sp)
   238d4:	003d1e06 	br	22d50 <_gp+0xfffe8984>
   238d8:	d8800617 	ldw	r2,24(sp)
   238dc:	00be3716 	blt	zero,r2,231bc <_gp+0xfffe8df0>
   238e0:	1000be1e 	bne	r2,zero,23bdc <_dtoa_r+0x11c8>
   238e4:	8809883a 	mov	r4,r17
   238e8:	a00b883a 	mov	r5,r20
   238ec:	000d883a 	mov	r6,zero
   238f0:	01d00534 	movhi	r7,16404
   238f4:	002b6040 	call	2b604 <__muldf3>
   238f8:	1009883a 	mov	r4,r2
   238fc:	180b883a 	mov	r5,r3
   23900:	900d883a 	mov	r6,r18
   23904:	980f883a 	mov	r7,r19
   23908:	002b4440 	call	2b444 <__gedf2>
   2390c:	002b883a 	mov	r21,zero
   23910:	0023883a 	mov	r17,zero
   23914:	10007a16 	blt	r2,zero,23b00 <_dtoa_r+0x10ec>
   23918:	d9002217 	ldw	r4,136(sp)
   2391c:	ddc00717 	ldw	r23,28(sp)
   23920:	0108303a 	nor	r4,zero,r4
   23924:	d9000515 	stw	r4,20(sp)
   23928:	8009883a 	mov	r4,r16
   2392c:	a80b883a 	mov	r5,r21
   23930:	00260e40 	call	260e4 <_Bfree>
   23934:	883f751e 	bne	r17,zero,2370c <_gp+0xfffe9340>
   23938:	003de406 	br	230cc <_gp+0xfffe8d00>
   2393c:	e00b883a 	mov	r5,fp
   23940:	8009883a 	mov	r4,r16
   23944:	00266740 	call	26674 <__pow5mult>
   23948:	1039883a 	mov	fp,r2
   2394c:	003ed306 	br	2349c <_gp+0xfffe90d0>
   23950:	903ee01e 	bne	r18,zero,234d4 <_gp+0xfffe9108>
   23954:	00800434 	movhi	r2,16
   23958:	10bfffc4 	addi	r2,r2,-1
   2395c:	9884703a 	and	r2,r19,r2
   23960:	103f081e 	bne	r2,zero,23584 <_gp+0xfffe91b8>
   23964:	9cdffc2c 	andhi	r19,r19,32752
   23968:	983f0626 	beq	r19,zero,23584 <_gp+0xfffe91b8>
   2396c:	d8800817 	ldw	r2,32(sp)
   23970:	b5800044 	addi	r22,r22,1
   23974:	04c00044 	movi	r19,1
   23978:	10800044 	addi	r2,r2,1
   2397c:	d8800815 	stw	r2,32(sp)
   23980:	003f0106 	br	23588 <_gp+0xfffe91bc>
   23984:	d9800f17 	ldw	r6,60(sp)
   23988:	30016826 	beq	r6,zero,23f2c <_dtoa_r+0x1518>
   2398c:	10810cc4 	addi	r2,r2,1075
   23990:	dd400917 	ldw	r21,36(sp)
   23994:	dd000817 	ldw	r20,32(sp)
   23998:	003e9906 	br	23400 <_gp+0xfffe9034>
   2399c:	9011883a 	mov	r8,r18
   239a0:	4007883a 	mov	r3,r8
   239a4:	e02d883a 	mov	r22,fp
   239a8:	0080100e 	bge	zero,r2,239ec <_dtoa_r+0xfd8>
   239ac:	01800044 	movi	r6,1
   239b0:	8009883a 	mov	r4,r16
   239b4:	e00b883a 	mov	r5,fp
   239b8:	da001515 	stw	r8,84(sp)
   239bc:	da001715 	stw	r8,92(sp)
   239c0:	00267b40 	call	267b4 <__lshift>
   239c4:	1009883a 	mov	r4,r2
   239c8:	a80b883a 	mov	r5,r21
   239cc:	102d883a 	mov	r22,r2
   239d0:	00268fc0 	call	268fc <__mcmp>
   239d4:	d8c01517 	ldw	r3,84(sp)
   239d8:	da001717 	ldw	r8,92(sp)
   239dc:	0081a50e 	bge	zero,r2,24074 <_dtoa_r+0x1660>
   239e0:	00800e44 	movi	r2,57
   239e4:	40817b26 	beq	r8,r2,23fd4 <_dtoa_r+0x15c0>
   239e8:	40c00044 	addi	r3,r8,1
   239ec:	8825883a 	mov	r18,r17
   239f0:	9dc00044 	addi	r23,r19,1
   239f4:	98c00005 	stb	r3,0(r19)
   239f8:	a023883a 	mov	r17,r20
   239fc:	b039883a 	mov	fp,r22
   23a00:	003f3906 	br	236e8 <_gp+0xfffe931c>
   23a04:	00800e44 	movi	r2,57
   23a08:	9011883a 	mov	r8,r18
   23a0c:	90817226 	beq	r18,r2,23fd8 <_dtoa_r+0x15c4>
   23a10:	0580010e 	bge	zero,r22,23a18 <_dtoa_r+0x1004>
   23a14:	ba000c44 	addi	r8,r23,49
   23a18:	8825883a 	mov	r18,r17
   23a1c:	9dc00044 	addi	r23,r19,1
   23a20:	9a000005 	stb	r8,0(r19)
   23a24:	a023883a 	mov	r17,r20
   23a28:	003f2f06 	br	236e8 <_gp+0xfffe931c>
   23a2c:	880b883a 	mov	r5,r17
   23a30:	8009883a 	mov	r4,r16
   23a34:	01800284 	movi	r6,10
   23a38:	000f883a 	mov	r7,zero
   23a3c:	002610c0 	call	2610c <__multadd>
   23a40:	1023883a 	mov	r17,r2
   23a44:	1029883a 	mov	r20,r2
   23a48:	003f9706 	br	238a8 <_gp+0xfffe94dc>
   23a4c:	8009883a 	mov	r4,r16
   23a50:	180b883a 	mov	r5,r3
   23a54:	00260e40 	call	260e4 <_Bfree>
   23a58:	00800044 	movi	r2,1
   23a5c:	003f7306 	br	2382c <_gp+0xfffe9460>
   23a60:	e009883a 	mov	r4,fp
   23a64:	a80b883a 	mov	r5,r21
   23a68:	00268fc0 	call	268fc <__mcmp>
   23a6c:	103ee60e 	bge	r2,zero,23608 <_gp+0xfffe923c>
   23a70:	8009883a 	mov	r4,r16
   23a74:	e00b883a 	mov	r5,fp
   23a78:	01800284 	movi	r6,10
   23a7c:	000f883a 	mov	r7,zero
   23a80:	002610c0 	call	2610c <__multadd>
   23a84:	d9000517 	ldw	r4,20(sp)
   23a88:	d9800b17 	ldw	r6,44(sp)
   23a8c:	1039883a 	mov	fp,r2
   23a90:	213fffc4 	addi	r4,r4,-1
   23a94:	d9000515 	stw	r4,20(sp)
   23a98:	303f2d1e 	bne	r6,zero,23750 <_gp+0xfffe9384>
   23a9c:	d9000d17 	ldw	r4,52(sp)
   23aa0:	0101780e 	bge	zero,r4,24084 <_dtoa_r+0x1670>
   23aa4:	d9000615 	stw	r4,24(sp)
   23aa8:	003edb06 	br	23618 <_gp+0xfffe924c>
   23aac:	00800084 	movi	r2,2
   23ab0:	30818e1e 	bne	r6,r2,240ec <_dtoa_r+0x16d8>
   23ab4:	d8000b15 	stw	zero,44(sp)
   23ab8:	003f8106 	br	238c0 <_gp+0xfffe94f4>
   23abc:	d8800717 	ldw	r2,28(sp)
   23ac0:	003c0306 	br	22ad0 <_gp+0xfffe8704>
   23ac4:	d9000317 	ldw	r4,12(sp)
   23ac8:	00800084 	movi	r2,2
   23acc:	113ed00e 	bge	r2,r4,23610 <_gp+0xfffe9244>
   23ad0:	d8c00617 	ldw	r3,24(sp)
   23ad4:	183f901e 	bne	r3,zero,23918 <_gp+0xfffe954c>
   23ad8:	a80b883a 	mov	r5,r21
   23adc:	8009883a 	mov	r4,r16
   23ae0:	01800144 	movi	r6,5
   23ae4:	000f883a 	mov	r7,zero
   23ae8:	002610c0 	call	2610c <__multadd>
   23aec:	e009883a 	mov	r4,fp
   23af0:	100b883a 	mov	r5,r2
   23af4:	102b883a 	mov	r21,r2
   23af8:	00268fc0 	call	268fc <__mcmp>
   23afc:	00bf860e 	bge	zero,r2,23918 <_gp+0xfffe954c>
   23b00:	d9800717 	ldw	r6,28(sp)
   23b04:	00800c44 	movi	r2,49
   23b08:	30800005 	stb	r2,0(r6)
   23b0c:	d8800517 	ldw	r2,20(sp)
   23b10:	35c00044 	addi	r23,r6,1
   23b14:	10800044 	addi	r2,r2,1
   23b18:	d8800515 	stw	r2,20(sp)
   23b1c:	003f8206 	br	23928 <_gp+0xfffe955c>
   23b20:	903e981e 	bne	r18,zero,23584 <_gp+0xfffe91b8>
   23b24:	003f8b06 	br	23954 <_gp+0xfffe9588>
   23b28:	d9800517 	ldw	r6,20(sp)
   23b2c:	d8c00717 	ldw	r3,28(sp)
   23b30:	00800c44 	movi	r2,49
   23b34:	31800044 	addi	r6,r6,1
   23b38:	d9800515 	stw	r6,20(sp)
   23b3c:	18800005 	stb	r2,0(r3)
   23b40:	003ee906 	br	236e8 <_gp+0xfffe931c>
   23b44:	dc000317 	ldw	r16,12(sp)
   23b48:	003d6006 	br	230cc <_gp+0xfffe8d00>
   23b4c:	8809883a 	mov	r4,r17
   23b50:	002c6800 	call	2c680 <__floatsidf>
   23b54:	a009883a 	mov	r4,r20
   23b58:	a80b883a 	mov	r5,r21
   23b5c:	100d883a 	mov	r6,r2
   23b60:	180f883a 	mov	r7,r3
   23b64:	002b6040 	call	2b604 <__muldf3>
   23b68:	1009883a 	mov	r4,r2
   23b6c:	180b883a 	mov	r5,r3
   23b70:	000d883a 	mov	r6,zero
   23b74:	01d00734 	movhi	r7,16412
   23b78:	002a2580 	call	2a258 <__adddf3>
   23b7c:	1023883a 	mov	r17,r2
   23b80:	00bf3034 	movhi	r2,64704
   23b84:	1885883a 	add	r2,r3,r2
   23b88:	d8800e15 	stw	r2,56(sp)
   23b8c:	a009883a 	mov	r4,r20
   23b90:	a80b883a 	mov	r5,r21
   23b94:	000d883a 	mov	r6,zero
   23b98:	01d00534 	movhi	r7,16404
   23b9c:	002bd280 	call	2bd28 <__subdf3>
   23ba0:	d9c00e17 	ldw	r7,56(sp)
   23ba4:	1009883a 	mov	r4,r2
   23ba8:	180b883a 	mov	r5,r3
   23bac:	880d883a 	mov	r6,r17
   23bb0:	102b883a 	mov	r21,r2
   23bb4:	1829883a 	mov	r20,r3
   23bb8:	002b4440 	call	2b444 <__gedf2>
   23bbc:	00807716 	blt	zero,r2,23d9c <_dtoa_r+0x1388>
   23bc0:	d8800e17 	ldw	r2,56(sp)
   23bc4:	a809883a 	mov	r4,r21
   23bc8:	a00b883a 	mov	r5,r20
   23bcc:	11e0003c 	xorhi	r7,r2,32768
   23bd0:	880d883a 	mov	r6,r17
   23bd4:	002b5240 	call	2b524 <__ledf2>
   23bd8:	103d6b0e 	bge	r2,zero,23188 <_gp+0xfffe8dbc>
   23bdc:	002b883a 	mov	r21,zero
   23be0:	0023883a 	mov	r17,zero
   23be4:	003f4c06 	br	23918 <_gp+0xfffe954c>
   23be8:	d9800917 	ldw	r6,36(sp)
   23bec:	e00b883a 	mov	r5,fp
   23bf0:	8009883a 	mov	r4,r16
   23bf4:	00266740 	call	26674 <__pow5mult>
   23bf8:	1039883a 	mov	fp,r2
   23bfc:	003e2706 	br	2349c <_gp+0xfffe90d0>
   23c00:	d8000b15 	stw	zero,44(sp)
   23c04:	003c4906 	br	22d2c <_gp+0xfffe8960>
   23c08:	d9000917 	ldw	r4,36(sp)
   23c0c:	d9800a17 	ldw	r6,40(sp)
   23c10:	dd400915 	stw	r21,36(sp)
   23c14:	a905c83a 	sub	r2,r21,r4
   23c18:	308d883a 	add	r6,r6,r2
   23c1c:	d9800a15 	stw	r6,40(sp)
   23c20:	002b883a 	mov	r21,zero
   23c24:	003df206 	br	233f0 <_gp+0xfffe9024>
   23c28:	dc800e15 	stw	r18,56(sp)
   23c2c:	982b883a 	mov	r21,r19
   23c30:	04400084 	movi	r17,2
   23c34:	003c7406 	br	22e08 <_gp+0xfffe8a3c>
   23c38:	04400044 	movi	r17,1
   23c3c:	dc400d15 	stw	r17,52(sp)
   23c40:	dc400615 	stw	r17,24(sp)
   23c44:	dc402215 	stw	r17,136(sp)
   23c48:	80001115 	stw	zero,68(r16)
   23c4c:	000b883a 	mov	r5,zero
   23c50:	003c4a06 	br	22d7c <_gp+0xfffe89b0>
   23c54:	3023883a 	mov	r17,r6
   23c58:	003ffb06 	br	23c48 <_gp+0xfffe987c>
   23c5c:	1000021e 	bne	r2,zero,23c68 <_dtoa_r+0x1254>
   23c60:	4200004c 	andi	r8,r8,1
   23c64:	403e8f1e 	bne	r8,zero,236a4 <_gp+0xfffe92d8>
   23c68:	01000c04 	movi	r4,48
   23c6c:	00000106 	br	23c74 <_dtoa_r+0x1260>
   23c70:	102f883a 	mov	r23,r2
   23c74:	b8bfffc4 	addi	r2,r23,-1
   23c78:	10c00007 	ldb	r3,0(r2)
   23c7c:	193ffc26 	beq	r3,r4,23c70 <_gp+0xfffe98a4>
   23c80:	003e9906 	br	236e8 <_gp+0xfffe931c>
   23c84:	d9000517 	ldw	r4,20(sp)
   23c88:	012fc83a 	sub	r23,zero,r4
   23c8c:	b800ad26 	beq	r23,zero,23f44 <_dtoa_r+0x1530>
   23c90:	b88003cc 	andi	r2,r23,15
   23c94:	100490fa 	slli	r2,r2,3
   23c98:	00c000f4 	movhi	r3,3
   23c9c:	18c15e04 	addi	r3,r3,1400
   23ca0:	1885883a 	add	r2,r3,r2
   23ca4:	11800017 	ldw	r6,0(r2)
   23ca8:	11c00117 	ldw	r7,4(r2)
   23cac:	b82fd13a 	srai	r23,r23,4
   23cb0:	9009883a 	mov	r4,r18
   23cb4:	980b883a 	mov	r5,r19
   23cb8:	002b6040 	call	2b604 <__muldf3>
   23cbc:	1029883a 	mov	r20,r2
   23cc0:	182b883a 	mov	r21,r3
   23cc4:	b800f426 	beq	r23,zero,24098 <_dtoa_r+0x1684>
   23cc8:	020000f4 	movhi	r8,3
   23ccc:	42015404 	addi	r8,r8,1360
   23cd0:	8029883a 	mov	r20,r16
   23cd4:	04400084 	movi	r17,2
   23cd8:	4021883a 	mov	r16,r8
   23cdc:	b980004c 	andi	r6,r23,1
   23ce0:	1009883a 	mov	r4,r2
   23ce4:	b82fd07a 	srai	r23,r23,1
   23ce8:	180b883a 	mov	r5,r3
   23cec:	30000426 	beq	r6,zero,23d00 <_dtoa_r+0x12ec>
   23cf0:	81800017 	ldw	r6,0(r16)
   23cf4:	81c00117 	ldw	r7,4(r16)
   23cf8:	8c400044 	addi	r17,r17,1
   23cfc:	002b6040 	call	2b604 <__muldf3>
   23d00:	84000204 	addi	r16,r16,8
   23d04:	b83ff51e 	bne	r23,zero,23cdc <_gp+0xfffe9910>
   23d08:	a021883a 	mov	r16,r20
   23d0c:	182b883a 	mov	r21,r3
   23d10:	1029883a 	mov	r20,r2
   23d14:	003c5506 	br	22e6c <_gp+0xfffe8aa0>
   23d18:	d9800517 	ldw	r6,20(sp)
   23d1c:	d9000717 	ldw	r4,28(sp)
   23d20:	00c00c04 	movi	r3,48
   23d24:	31800044 	addi	r6,r6,1
   23d28:	d9800515 	stw	r6,20(sp)
   23d2c:	20c00005 	stb	r3,0(r4)
   23d30:	02000c44 	movi	r8,49
   23d34:	003da206 	br	233c0 <_gp+0xfffe8ff4>
   23d38:	89400117 	ldw	r5,4(r17)
   23d3c:	8009883a 	mov	r4,r16
   23d40:	002603c0 	call	2603c <_Balloc>
   23d44:	89800417 	ldw	r6,16(r17)
   23d48:	11000304 	addi	r4,r2,12
   23d4c:	89400304 	addi	r5,r17,12
   23d50:	31800084 	addi	r6,r6,2
   23d54:	318d883a 	add	r6,r6,r6
   23d58:	318d883a 	add	r6,r6,r6
   23d5c:	1027883a 	mov	r19,r2
   23d60:	0025c840 	call	25c84 <memcpy>
   23d64:	8009883a 	mov	r4,r16
   23d68:	980b883a 	mov	r5,r19
   23d6c:	01800044 	movi	r6,1
   23d70:	00267b40 	call	267b4 <__lshift>
   23d74:	1029883a 	mov	r20,r2
   23d78:	003e8606 	br	23794 <_gp+0xfffe93c8>
   23d7c:	00800e44 	movi	r2,57
   23d80:	90809526 	beq	r18,r2,23fd8 <_dtoa_r+0x15c4>
   23d84:	92000044 	addi	r8,r18,1
   23d88:	003f2306 	br	23a18 <_gp+0xfffe964c>
   23d8c:	9011883a 	mov	r8,r18
   23d90:	8825883a 	mov	r18,r17
   23d94:	a023883a 	mov	r17,r20
   23d98:	003e3706 	br	23678 <_gp+0xfffe92ac>
   23d9c:	002b883a 	mov	r21,zero
   23da0:	0023883a 	mov	r17,zero
   23da4:	003f5606 	br	23b00 <_gp+0xfffe9734>
   23da8:	51bfffc4 	addi	r6,r10,-1
   23dac:	300490fa 	slli	r2,r6,3
   23db0:	00c000f4 	movhi	r3,3
   23db4:	18c15e04 	addi	r3,r3,1400
   23db8:	1885883a 	add	r2,r3,r2
   23dbc:	d9c00e17 	ldw	r7,56(sp)
   23dc0:	11000017 	ldw	r4,0(r2)
   23dc4:	11400117 	ldw	r5,4(r2)
   23dc8:	d8800717 	ldw	r2,28(sp)
   23dcc:	d9801015 	stw	r6,64(sp)
   23dd0:	880d883a 	mov	r6,r17
   23dd4:	da801615 	stw	r10,88(sp)
   23dd8:	15c00044 	addi	r23,r2,1
   23ddc:	002b6040 	call	2b604 <__muldf3>
   23de0:	a80b883a 	mov	r5,r21
   23de4:	a009883a 	mov	r4,r20
   23de8:	d8c01115 	stw	r3,68(sp)
   23dec:	d8800e15 	stw	r2,56(sp)
   23df0:	002c5f80 	call	2c5f8 <__fixdfsi>
   23df4:	1009883a 	mov	r4,r2
   23df8:	1023883a 	mov	r17,r2
   23dfc:	002c6800 	call	2c680 <__floatsidf>
   23e00:	a009883a 	mov	r4,r20
   23e04:	a80b883a 	mov	r5,r21
   23e08:	100d883a 	mov	r6,r2
   23e0c:	180f883a 	mov	r7,r3
   23e10:	002bd280 	call	2bd28 <__subdf3>
   23e14:	1813883a 	mov	r9,r3
   23e18:	d8c00717 	ldw	r3,28(sp)
   23e1c:	8c400c04 	addi	r17,r17,48
   23e20:	1011883a 	mov	r8,r2
   23e24:	1c400005 	stb	r17,0(r3)
   23e28:	da801617 	ldw	r10,88(sp)
   23e2c:	00800044 	movi	r2,1
   23e30:	50802326 	beq	r10,r2,23ec0 <_dtoa_r+0x14ac>
   23e34:	d8800717 	ldw	r2,28(sp)
   23e38:	b82b883a 	mov	r21,r23
   23e3c:	dc001315 	stw	r16,76(sp)
   23e40:	12a9883a 	add	r20,r2,r10
   23e44:	4807883a 	mov	r3,r9
   23e48:	4005883a 	mov	r2,r8
   23e4c:	dc801415 	stw	r18,80(sp)
   23e50:	000d883a 	mov	r6,zero
   23e54:	01d00934 	movhi	r7,16420
   23e58:	1009883a 	mov	r4,r2
   23e5c:	180b883a 	mov	r5,r3
   23e60:	002b6040 	call	2b604 <__muldf3>
   23e64:	180b883a 	mov	r5,r3
   23e68:	1009883a 	mov	r4,r2
   23e6c:	1821883a 	mov	r16,r3
   23e70:	1025883a 	mov	r18,r2
   23e74:	002c5f80 	call	2c5f8 <__fixdfsi>
   23e78:	1009883a 	mov	r4,r2
   23e7c:	1023883a 	mov	r17,r2
   23e80:	002c6800 	call	2c680 <__floatsidf>
   23e84:	9009883a 	mov	r4,r18
   23e88:	800b883a 	mov	r5,r16
   23e8c:	100d883a 	mov	r6,r2
   23e90:	180f883a 	mov	r7,r3
   23e94:	8c400c04 	addi	r17,r17,48
   23e98:	002bd280 	call	2bd28 <__subdf3>
   23e9c:	ad400044 	addi	r21,r21,1
   23ea0:	ac7fffc5 	stb	r17,-1(r21)
   23ea4:	ad3fea1e 	bne	r21,r20,23e50 <_gp+0xfffe9a84>
   23ea8:	1813883a 	mov	r9,r3
   23eac:	d8c01017 	ldw	r3,64(sp)
   23eb0:	dc001317 	ldw	r16,76(sp)
   23eb4:	dc801417 	ldw	r18,80(sp)
   23eb8:	1011883a 	mov	r8,r2
   23ebc:	b8ef883a 	add	r23,r23,r3
   23ec0:	d9000e17 	ldw	r4,56(sp)
   23ec4:	d9401117 	ldw	r5,68(sp)
   23ec8:	000d883a 	mov	r6,zero
   23ecc:	01cff834 	movhi	r7,16352
   23ed0:	da001715 	stw	r8,92(sp)
   23ed4:	da401515 	stw	r9,84(sp)
   23ed8:	002a2580 	call	2a258 <__adddf3>
   23edc:	da001717 	ldw	r8,92(sp)
   23ee0:	da401517 	ldw	r9,84(sp)
   23ee4:	1009883a 	mov	r4,r2
   23ee8:	400d883a 	mov	r6,r8
   23eec:	480f883a 	mov	r7,r9
   23ef0:	180b883a 	mov	r5,r3
   23ef4:	002b5240 	call	2b524 <__ledf2>
   23ef8:	da001717 	ldw	r8,92(sp)
   23efc:	da401517 	ldw	r9,84(sp)
   23f00:	10003b0e 	bge	r2,zero,23ff0 <_dtoa_r+0x15dc>
   23f04:	d9001217 	ldw	r4,72(sp)
   23f08:	bd7fffc3 	ldbu	r21,-1(r23)
   23f0c:	d9000515 	stw	r4,20(sp)
   23f10:	003d1c06 	br	23384 <_gp+0xfffe8fb8>
   23f14:	d8c00817 	ldw	r3,32(sp)
   23f18:	18a9c83a 	sub	r20,r3,r2
   23f1c:	0005883a 	mov	r2,zero
   23f20:	003d3706 	br	23400 <_gp+0xfffe9034>
   23f24:	00800044 	movi	r2,1
   23f28:	003dd006 	br	2366c <_gp+0xfffe92a0>
   23f2c:	d8c00217 	ldw	r3,8(sp)
   23f30:	00800d84 	movi	r2,54
   23f34:	dd400917 	ldw	r21,36(sp)
   23f38:	10c5c83a 	sub	r2,r2,r3
   23f3c:	dd000817 	ldw	r20,32(sp)
   23f40:	003d2f06 	br	23400 <_gp+0xfffe9034>
   23f44:	9029883a 	mov	r20,r18
   23f48:	982b883a 	mov	r21,r19
   23f4c:	04400084 	movi	r17,2
   23f50:	003bc606 	br	22e6c <_gp+0xfffe8aa0>
   23f54:	d8800617 	ldw	r2,24(sp)
   23f58:	103efc26 	beq	r2,zero,23b4c <_gp+0xfffe9780>
   23f5c:	d8c00d17 	ldw	r3,52(sp)
   23f60:	00fc890e 	bge	zero,r3,23188 <_gp+0xfffe8dbc>
   23f64:	a80b883a 	mov	r5,r21
   23f68:	a009883a 	mov	r4,r20
   23f6c:	000d883a 	mov	r6,zero
   23f70:	01d00934 	movhi	r7,16420
   23f74:	002b6040 	call	2b604 <__muldf3>
   23f78:	89000044 	addi	r4,r17,1
   23f7c:	1029883a 	mov	r20,r2
   23f80:	182b883a 	mov	r21,r3
   23f84:	002c6800 	call	2c680 <__floatsidf>
   23f88:	a009883a 	mov	r4,r20
   23f8c:	a80b883a 	mov	r5,r21
   23f90:	100d883a 	mov	r6,r2
   23f94:	180f883a 	mov	r7,r3
   23f98:	002b6040 	call	2b604 <__muldf3>
   23f9c:	1009883a 	mov	r4,r2
   23fa0:	180b883a 	mov	r5,r3
   23fa4:	000d883a 	mov	r6,zero
   23fa8:	01d00734 	movhi	r7,16412
   23fac:	002a2580 	call	2a258 <__adddf3>
   23fb0:	d9000517 	ldw	r4,20(sp)
   23fb4:	1023883a 	mov	r17,r2
   23fb8:	00bf3034 	movhi	r2,64704
   23fbc:	213fffc4 	addi	r4,r4,-1
   23fc0:	1885883a 	add	r2,r3,r2
   23fc4:	d9001215 	stw	r4,72(sp)
   23fc8:	d8800e15 	stw	r2,56(sp)
   23fcc:	da800d17 	ldw	r10,52(sp)
   23fd0:	003bc306 	br	22ee0 <_gp+0xfffe8b14>
   23fd4:	b039883a 	mov	fp,r22
   23fd8:	01000e44 	movi	r4,57
   23fdc:	8825883a 	mov	r18,r17
   23fe0:	9dc00044 	addi	r23,r19,1
   23fe4:	99000005 	stb	r4,0(r19)
   23fe8:	a023883a 	mov	r17,r20
   23fec:	003dae06 	br	236a8 <_gp+0xfffe92dc>
   23ff0:	d9800e17 	ldw	r6,56(sp)
   23ff4:	d9c01117 	ldw	r7,68(sp)
   23ff8:	0009883a 	mov	r4,zero
   23ffc:	014ff834 	movhi	r5,16352
   24000:	da001715 	stw	r8,92(sp)
   24004:	da401515 	stw	r9,84(sp)
   24008:	002bd280 	call	2bd28 <__subdf3>
   2400c:	da001717 	ldw	r8,92(sp)
   24010:	da401517 	ldw	r9,84(sp)
   24014:	1009883a 	mov	r4,r2
   24018:	180b883a 	mov	r5,r3
   2401c:	400d883a 	mov	r6,r8
   24020:	480f883a 	mov	r7,r9
   24024:	002b4440 	call	2b444 <__gedf2>
   24028:	00bc570e 	bge	zero,r2,23188 <_gp+0xfffe8dbc>
   2402c:	01000c04 	movi	r4,48
   24030:	00000106 	br	24038 <_dtoa_r+0x1624>
   24034:	102f883a 	mov	r23,r2
   24038:	b8bfffc4 	addi	r2,r23,-1
   2403c:	10c00007 	ldb	r3,0(r2)
   24040:	193ffc26 	beq	r3,r4,24034 <_gp+0xfffe9c68>
   24044:	d9801217 	ldw	r6,72(sp)
   24048:	d9800515 	stw	r6,20(sp)
   2404c:	003c1f06 	br	230cc <_gp+0xfffe8d00>
   24050:	d8801217 	ldw	r2,72(sp)
   24054:	dc001117 	ldw	r16,68(sp)
   24058:	d8800515 	stw	r2,20(sp)
   2405c:	003cc906 	br	23384 <_gp+0xfffe8fb8>
   24060:	dd801317 	ldw	r22,76(sp)
   24064:	dc001117 	ldw	r16,68(sp)
   24068:	dcc01417 	ldw	r19,80(sp)
   2406c:	dc801017 	ldw	r18,64(sp)
   24070:	003c4506 	br	23188 <_gp+0xfffe8dbc>
   24074:	103e5d1e 	bne	r2,zero,239ec <_gp+0xfffe9620>
   24078:	4080004c 	andi	r2,r8,1
   2407c:	103e5b26 	beq	r2,zero,239ec <_gp+0xfffe9620>
   24080:	003e5706 	br	239e0 <_gp+0xfffe9614>
   24084:	d8c00317 	ldw	r3,12(sp)
   24088:	00800084 	movi	r2,2
   2408c:	10c00a16 	blt	r2,r3,240b8 <_dtoa_r+0x16a4>
   24090:	d9000d17 	ldw	r4,52(sp)
   24094:	003e8306 	br	23aa4 <_gp+0xfffe96d8>
   24098:	04400084 	movi	r17,2
   2409c:	003b7306 	br	22e6c <_gp+0xfffe8aa0>
   240a0:	d9801217 	ldw	r6,72(sp)
   240a4:	d9800515 	stw	r6,20(sp)
   240a8:	003cb606 	br	23384 <_gp+0xfffe8fb8>
   240ac:	d9001217 	ldw	r4,72(sp)
   240b0:	d9000515 	stw	r4,20(sp)
   240b4:	003c0506 	br	230cc <_gp+0xfffe8d00>
   240b8:	d9800d17 	ldw	r6,52(sp)
   240bc:	d9800615 	stw	r6,24(sp)
   240c0:	003e8306 	br	23ad0 <_gp+0xfffe9704>
   240c4:	d9800317 	ldw	r6,12(sp)
   240c8:	00800084 	movi	r2,2
   240cc:	11800216 	blt	r2,r6,240d8 <_dtoa_r+0x16c4>
   240d0:	d8800d17 	ldw	r2,52(sp)
   240d4:	003da606 	br	23770 <_gp+0xfffe93a4>
   240d8:	d8800d17 	ldw	r2,52(sp)
   240dc:	d8800615 	stw	r2,24(sp)
   240e0:	003e7b06 	br	23ad0 <_gp+0xfffe9704>
   240e4:	05000044 	movi	r20,1
   240e8:	003b0506 	br	22d00 <_gp+0xfffe8934>
   240ec:	8009883a 	mov	r4,r16
   240f0:	80001115 	stw	zero,68(r16)
   240f4:	000b883a 	mov	r5,zero
   240f8:	002603c0 	call	2603c <_Balloc>
   240fc:	d8800715 	stw	r2,28(sp)
   24100:	d8c00717 	ldw	r3,28(sp)
   24104:	00bfffc4 	movi	r2,-1
   24108:	01000044 	movi	r4,1
   2410c:	d8800615 	stw	r2,24(sp)
   24110:	80c01015 	stw	r3,64(r16)
   24114:	d9000b15 	stw	r4,44(sp)
   24118:	d8002215 	stw	zero,136(sp)
   2411c:	d8800d15 	stw	r2,52(sp)
   24120:	003c1906 	br	23188 <_gp+0xfffe8dbc>
   24124:	193d2926 	beq	r3,r4,235cc <_gp+0xfffe9200>
   24128:	00c00f04 	movi	r3,60
   2412c:	1885c83a 	sub	r2,r3,r2
   24130:	003d7b06 	br	23720 <_gp+0xfffe9354>
   24134:	000b883a 	mov	r5,zero
   24138:	003b1006 	br	22d7c <_gp+0xfffe89b0>

0002413c <_fflush_r>:
   2413c:	defffb04 	addi	sp,sp,-20
   24140:	dcc00315 	stw	r19,12(sp)
   24144:	dc000015 	stw	r16,0(sp)
   24148:	dfc00415 	stw	ra,16(sp)
   2414c:	dc800215 	stw	r18,8(sp)
   24150:	dc400115 	stw	r17,4(sp)
   24154:	2027883a 	mov	r19,r4
   24158:	2821883a 	mov	r16,r5
   2415c:	20000226 	beq	r4,zero,24168 <_fflush_r+0x2c>
   24160:	20800e17 	ldw	r2,56(r4)
   24164:	10005326 	beq	r2,zero,242b4 <_fflush_r+0x178>
   24168:	8080030b 	ldhu	r2,12(r16)
   2416c:	10ffffcc 	andi	r3,r2,65535
   24170:	18e0001c 	xori	r3,r3,32768
   24174:	18e00004 	addi	r3,r3,-32768
   24178:	18002c26 	beq	r3,zero,2422c <_fflush_r+0xf0>
   2417c:	10c0020c 	andi	r3,r2,8
   24180:	1800321e 	bne	r3,zero,2424c <_fflush_r+0x110>
   24184:	80c00117 	ldw	r3,4(r16)
   24188:	10820014 	ori	r2,r2,2048
   2418c:	8080030d 	sth	r2,12(r16)
   24190:	00c0570e 	bge	zero,r3,242f0 <_fflush_r+0x1b4>
   24194:	82000a17 	ldw	r8,40(r16)
   24198:	40002426 	beq	r8,zero,2422c <_fflush_r+0xf0>
   2419c:	9c400017 	ldw	r17,0(r19)
   241a0:	10c4000c 	andi	r3,r2,4096
   241a4:	98000015 	stw	zero,0(r19)
   241a8:	18004626 	beq	r3,zero,242c4 <_fflush_r+0x188>
   241ac:	81801417 	ldw	r6,80(r16)
   241b0:	10c0010c 	andi	r3,r2,4
   241b4:	18000626 	beq	r3,zero,241d0 <_fflush_r+0x94>
   241b8:	80c00117 	ldw	r3,4(r16)
   241bc:	80800c17 	ldw	r2,48(r16)
   241c0:	30cdc83a 	sub	r6,r6,r3
   241c4:	10000226 	beq	r2,zero,241d0 <_fflush_r+0x94>
   241c8:	80800f17 	ldw	r2,60(r16)
   241cc:	308dc83a 	sub	r6,r6,r2
   241d0:	81400717 	ldw	r5,28(r16)
   241d4:	9809883a 	mov	r4,r19
   241d8:	000f883a 	mov	r7,zero
   241dc:	403ee83a 	callr	r8
   241e0:	00ffffc4 	movi	r3,-1
   241e4:	10c04526 	beq	r2,r3,242fc <_fflush_r+0x1c0>
   241e8:	80c0030b 	ldhu	r3,12(r16)
   241ec:	81000417 	ldw	r4,16(r16)
   241f0:	80000115 	stw	zero,4(r16)
   241f4:	197dffcc 	andi	r5,r3,63487
   241f8:	8140030d 	sth	r5,12(r16)
   241fc:	81000015 	stw	r4,0(r16)
   24200:	18c4000c 	andi	r3,r3,4096
   24204:	18000126 	beq	r3,zero,2420c <_fflush_r+0xd0>
   24208:	80801415 	stw	r2,80(r16)
   2420c:	81400c17 	ldw	r5,48(r16)
   24210:	9c400015 	stw	r17,0(r19)
   24214:	28000526 	beq	r5,zero,2422c <_fflush_r+0xf0>
   24218:	80801004 	addi	r2,r16,64
   2421c:	28800226 	beq	r5,r2,24228 <_fflush_r+0xec>
   24220:	9809883a 	mov	r4,r19
   24224:	00248580 	call	24858 <_free_r>
   24228:	80000c15 	stw	zero,48(r16)
   2422c:	0005883a 	mov	r2,zero
   24230:	dfc00417 	ldw	ra,16(sp)
   24234:	dcc00317 	ldw	r19,12(sp)
   24238:	dc800217 	ldw	r18,8(sp)
   2423c:	dc400117 	ldw	r17,4(sp)
   24240:	dc000017 	ldw	r16,0(sp)
   24244:	dec00504 	addi	sp,sp,20
   24248:	f800283a 	ret
   2424c:	84800417 	ldw	r18,16(r16)
   24250:	903ff626 	beq	r18,zero,2422c <_gp+0xfffe9e60>
   24254:	84400017 	ldw	r17,0(r16)
   24258:	108000cc 	andi	r2,r2,3
   2425c:	84800015 	stw	r18,0(r16)
   24260:	8ca3c83a 	sub	r17,r17,r18
   24264:	10001526 	beq	r2,zero,242bc <_fflush_r+0x180>
   24268:	0005883a 	mov	r2,zero
   2426c:	80800215 	stw	r2,8(r16)
   24270:	04400316 	blt	zero,r17,24280 <_fflush_r+0x144>
   24274:	003fed06 	br	2422c <_gp+0xfffe9e60>
   24278:	90a5883a 	add	r18,r18,r2
   2427c:	047feb0e 	bge	zero,r17,2422c <_gp+0xfffe9e60>
   24280:	80800917 	ldw	r2,36(r16)
   24284:	81400717 	ldw	r5,28(r16)
   24288:	880f883a 	mov	r7,r17
   2428c:	900d883a 	mov	r6,r18
   24290:	9809883a 	mov	r4,r19
   24294:	103ee83a 	callr	r2
   24298:	88a3c83a 	sub	r17,r17,r2
   2429c:	00bff616 	blt	zero,r2,24278 <_gp+0xfffe9eac>
   242a0:	80c0030b 	ldhu	r3,12(r16)
   242a4:	00bfffc4 	movi	r2,-1
   242a8:	18c01014 	ori	r3,r3,64
   242ac:	80c0030d 	sth	r3,12(r16)
   242b0:	003fdf06 	br	24230 <_gp+0xfffe9e64>
   242b4:	00246e40 	call	246e4 <__sinit>
   242b8:	003fab06 	br	24168 <_gp+0xfffe9d9c>
   242bc:	80800517 	ldw	r2,20(r16)
   242c0:	003fea06 	br	2426c <_gp+0xfffe9ea0>
   242c4:	81400717 	ldw	r5,28(r16)
   242c8:	000d883a 	mov	r6,zero
   242cc:	9809883a 	mov	r4,r19
   242d0:	01c00044 	movi	r7,1
   242d4:	403ee83a 	callr	r8
   242d8:	100d883a 	mov	r6,r2
   242dc:	00bfffc4 	movi	r2,-1
   242e0:	30801326 	beq	r6,r2,24330 <_fflush_r+0x1f4>
   242e4:	8080030b 	ldhu	r2,12(r16)
   242e8:	82000a17 	ldw	r8,40(r16)
   242ec:	003fb006 	br	241b0 <_gp+0xfffe9de4>
   242f0:	80c00f17 	ldw	r3,60(r16)
   242f4:	00ffa716 	blt	zero,r3,24194 <_gp+0xfffe9dc8>
   242f8:	003fcc06 	br	2422c <_gp+0xfffe9e60>
   242fc:	98c00017 	ldw	r3,0(r19)
   24300:	183fb926 	beq	r3,zero,241e8 <_gp+0xfffe9e1c>
   24304:	01000744 	movi	r4,29
   24308:	19000226 	beq	r3,r4,24314 <_fflush_r+0x1d8>
   2430c:	01000584 	movi	r4,22
   24310:	1900101e 	bne	r3,r4,24354 <_fflush_r+0x218>
   24314:	8080030b 	ldhu	r2,12(r16)
   24318:	80c00417 	ldw	r3,16(r16)
   2431c:	80000115 	stw	zero,4(r16)
   24320:	10bdffcc 	andi	r2,r2,63487
   24324:	8080030d 	sth	r2,12(r16)
   24328:	80c00015 	stw	r3,0(r16)
   2432c:	003fb706 	br	2420c <_gp+0xfffe9e40>
   24330:	98800017 	ldw	r2,0(r19)
   24334:	103feb26 	beq	r2,zero,242e4 <_gp+0xfffe9f18>
   24338:	00c00744 	movi	r3,29
   2433c:	10c00226 	beq	r2,r3,24348 <_fflush_r+0x20c>
   24340:	00c00584 	movi	r3,22
   24344:	10ffd61e 	bne	r2,r3,242a0 <_gp+0xfffe9ed4>
   24348:	9c400015 	stw	r17,0(r19)
   2434c:	0005883a 	mov	r2,zero
   24350:	003fb706 	br	24230 <_gp+0xfffe9e64>
   24354:	80c0030b 	ldhu	r3,12(r16)
   24358:	18c01014 	ori	r3,r3,64
   2435c:	80c0030d 	sth	r3,12(r16)
   24360:	003fb306 	br	24230 <_gp+0xfffe9e64>

00024364 <fflush>:
   24364:	20000526 	beq	r4,zero,2437c <fflush+0x18>
   24368:	008000f4 	movhi	r2,3
   2436c:	1088f404 	addi	r2,r2,9168
   24370:	200b883a 	mov	r5,r4
   24374:	11000017 	ldw	r4,0(r2)
   24378:	002413c1 	jmpi	2413c <_fflush_r>
   2437c:	008000f4 	movhi	r2,3
   24380:	1088f304 	addi	r2,r2,9164
   24384:	11000017 	ldw	r4,0(r2)
   24388:	014000b4 	movhi	r5,2
   2438c:	29504f04 	addi	r5,r5,16700
   24390:	00250a41 	jmpi	250a4 <_fwalk_reent>

00024394 <__fp_lock>:
   24394:	0005883a 	mov	r2,zero
   24398:	f800283a 	ret

0002439c <__fp_unlock>:
   2439c:	0005883a 	mov	r2,zero
   243a0:	f800283a 	ret

000243a4 <_cleanup_r>:
   243a4:	014000f4 	movhi	r5,3
   243a8:	2963c604 	addi	r5,r5,-28904
   243ac:	0024fec1 	jmpi	24fec <_fwalk>

000243b0 <__sinit.part.1>:
   243b0:	defff604 	addi	sp,sp,-40
   243b4:	00c000b4 	movhi	r3,2
   243b8:	dfc00915 	stw	ra,36(sp)
   243bc:	df000815 	stw	fp,32(sp)
   243c0:	ddc00715 	stw	r23,28(sp)
   243c4:	dd800615 	stw	r22,24(sp)
   243c8:	dd400515 	stw	r21,20(sp)
   243cc:	dd000415 	stw	r20,16(sp)
   243d0:	dcc00315 	stw	r19,12(sp)
   243d4:	dc800215 	stw	r18,8(sp)
   243d8:	dc400115 	stw	r17,4(sp)
   243dc:	dc000015 	stw	r16,0(sp)
   243e0:	18d0e904 	addi	r3,r3,17316
   243e4:	24000117 	ldw	r16,4(r4)
   243e8:	20c00f15 	stw	r3,60(r4)
   243ec:	07000044 	movi	fp,1
   243f0:	00c000c4 	movi	r3,3
   243f4:	2080bb04 	addi	r2,r4,748
   243f8:	20c0b915 	stw	r3,740(r4)
   243fc:	27000e15 	stw	fp,56(r4)
   24400:	2080ba15 	stw	r2,744(r4)
   24404:	2000b815 	stw	zero,736(r4)
   24408:	05c00204 	movi	r23,8
   2440c:	00800104 	movi	r2,4
   24410:	2025883a 	mov	r18,r4
   24414:	b80d883a 	mov	r6,r23
   24418:	81001704 	addi	r4,r16,92
   2441c:	000b883a 	mov	r5,zero
   24420:	80000015 	stw	zero,0(r16)
   24424:	80000115 	stw	zero,4(r16)
   24428:	80000215 	stw	zero,8(r16)
   2442c:	8080030d 	sth	r2,12(r16)
   24430:	80001915 	stw	zero,100(r16)
   24434:	8000038d 	sth	zero,14(r16)
   24438:	80000415 	stw	zero,16(r16)
   2443c:	80000515 	stw	zero,20(r16)
   24440:	80000615 	stw	zero,24(r16)
   24444:	0025f180 	call	25f18 <memset>
   24448:	058000b4 	movhi	r22,2
   2444c:	94400217 	ldw	r17,8(r18)
   24450:	054000b4 	movhi	r21,2
   24454:	050000b4 	movhi	r20,2
   24458:	04c000b4 	movhi	r19,2
   2445c:	b59d8c04 	addi	r22,r22,30256
   24460:	ad5da304 	addi	r21,r21,30348
   24464:	a51dc204 	addi	r20,r20,30472
   24468:	9cddd904 	addi	r19,r19,30564
   2446c:	85800815 	stw	r22,32(r16)
   24470:	85400915 	stw	r21,36(r16)
   24474:	85000a15 	stw	r20,40(r16)
   24478:	84c00b15 	stw	r19,44(r16)
   2447c:	84000715 	stw	r16,28(r16)
   24480:	00800284 	movi	r2,10
   24484:	89001704 	addi	r4,r17,92
   24488:	b80d883a 	mov	r6,r23
   2448c:	000b883a 	mov	r5,zero
   24490:	88000015 	stw	zero,0(r17)
   24494:	88000115 	stw	zero,4(r17)
   24498:	88000215 	stw	zero,8(r17)
   2449c:	8880030d 	sth	r2,12(r17)
   244a0:	88001915 	stw	zero,100(r17)
   244a4:	8f00038d 	sth	fp,14(r17)
   244a8:	88000415 	stw	zero,16(r17)
   244ac:	88000515 	stw	zero,20(r17)
   244b0:	88000615 	stw	zero,24(r17)
   244b4:	0025f180 	call	25f18 <memset>
   244b8:	94000317 	ldw	r16,12(r18)
   244bc:	00800484 	movi	r2,18
   244c0:	8c400715 	stw	r17,28(r17)
   244c4:	8d800815 	stw	r22,32(r17)
   244c8:	8d400915 	stw	r21,36(r17)
   244cc:	8d000a15 	stw	r20,40(r17)
   244d0:	8cc00b15 	stw	r19,44(r17)
   244d4:	8080030d 	sth	r2,12(r16)
   244d8:	00800084 	movi	r2,2
   244dc:	80000015 	stw	zero,0(r16)
   244e0:	80000115 	stw	zero,4(r16)
   244e4:	80000215 	stw	zero,8(r16)
   244e8:	80001915 	stw	zero,100(r16)
   244ec:	8080038d 	sth	r2,14(r16)
   244f0:	80000415 	stw	zero,16(r16)
   244f4:	80000515 	stw	zero,20(r16)
   244f8:	80000615 	stw	zero,24(r16)
   244fc:	81001704 	addi	r4,r16,92
   24500:	000b883a 	mov	r5,zero
   24504:	b80d883a 	mov	r6,r23
   24508:	0025f180 	call	25f18 <memset>
   2450c:	84000715 	stw	r16,28(r16)
   24510:	85800815 	stw	r22,32(r16)
   24514:	85400915 	stw	r21,36(r16)
   24518:	85000a15 	stw	r20,40(r16)
   2451c:	84c00b15 	stw	r19,44(r16)
   24520:	dfc00917 	ldw	ra,36(sp)
   24524:	df000817 	ldw	fp,32(sp)
   24528:	ddc00717 	ldw	r23,28(sp)
   2452c:	dd800617 	ldw	r22,24(sp)
   24530:	dd400517 	ldw	r21,20(sp)
   24534:	dd000417 	ldw	r20,16(sp)
   24538:	dcc00317 	ldw	r19,12(sp)
   2453c:	dc800217 	ldw	r18,8(sp)
   24540:	dc400117 	ldw	r17,4(sp)
   24544:	dc000017 	ldw	r16,0(sp)
   24548:	dec00a04 	addi	sp,sp,40
   2454c:	f800283a 	ret

00024550 <__sfmoreglue>:
   24550:	defffc04 	addi	sp,sp,-16
   24554:	dc400115 	stw	r17,4(sp)
   24558:	2c401a24 	muli	r17,r5,104
   2455c:	dc800215 	stw	r18,8(sp)
   24560:	2825883a 	mov	r18,r5
   24564:	89400304 	addi	r5,r17,12
   24568:	dc000015 	stw	r16,0(sp)
   2456c:	dfc00315 	stw	ra,12(sp)
   24570:	00253f40 	call	253f4 <_malloc_r>
   24574:	1021883a 	mov	r16,r2
   24578:	10000726 	beq	r2,zero,24598 <__sfmoreglue+0x48>
   2457c:	11000304 	addi	r4,r2,12
   24580:	10000015 	stw	zero,0(r2)
   24584:	14800115 	stw	r18,4(r2)
   24588:	11000215 	stw	r4,8(r2)
   2458c:	000b883a 	mov	r5,zero
   24590:	880d883a 	mov	r6,r17
   24594:	0025f180 	call	25f18 <memset>
   24598:	8005883a 	mov	r2,r16
   2459c:	dfc00317 	ldw	ra,12(sp)
   245a0:	dc800217 	ldw	r18,8(sp)
   245a4:	dc400117 	ldw	r17,4(sp)
   245a8:	dc000017 	ldw	r16,0(sp)
   245ac:	dec00404 	addi	sp,sp,16
   245b0:	f800283a 	ret

000245b4 <__sfp>:
   245b4:	008000f4 	movhi	r2,3
   245b8:	defffb04 	addi	sp,sp,-20
   245bc:	1088f304 	addi	r2,r2,9164
   245c0:	dc800215 	stw	r18,8(sp)
   245c4:	14800017 	ldw	r18,0(r2)
   245c8:	dcc00315 	stw	r19,12(sp)
   245cc:	dfc00415 	stw	ra,16(sp)
   245d0:	90800e17 	ldw	r2,56(r18)
   245d4:	dc400115 	stw	r17,4(sp)
   245d8:	dc000015 	stw	r16,0(sp)
   245dc:	2027883a 	mov	r19,r4
   245e0:	1000021e 	bne	r2,zero,245ec <__sfp+0x38>
   245e4:	9009883a 	mov	r4,r18
   245e8:	00243b00 	call	243b0 <__sinit.part.1>
   245ec:	9480b804 	addi	r18,r18,736
   245f0:	047fffc4 	movi	r17,-1
   245f4:	91400117 	ldw	r5,4(r18)
   245f8:	94000217 	ldw	r16,8(r18)
   245fc:	297fffc4 	addi	r5,r5,-1
   24600:	28000a16 	blt	r5,zero,2462c <__sfp+0x78>
   24604:	8080030f 	ldh	r2,12(r16)
   24608:	10000c26 	beq	r2,zero,2463c <__sfp+0x88>
   2460c:	80c01d04 	addi	r3,r16,116
   24610:	00000206 	br	2461c <__sfp+0x68>
   24614:	18bfe60f 	ldh	r2,-104(r3)
   24618:	10000826 	beq	r2,zero,2463c <__sfp+0x88>
   2461c:	297fffc4 	addi	r5,r5,-1
   24620:	1c3ffd04 	addi	r16,r3,-12
   24624:	18c01a04 	addi	r3,r3,104
   24628:	2c7ffa1e 	bne	r5,r17,24614 <_gp+0xfffea248>
   2462c:	90800017 	ldw	r2,0(r18)
   24630:	10001d26 	beq	r2,zero,246a8 <__sfp+0xf4>
   24634:	1025883a 	mov	r18,r2
   24638:	003fee06 	br	245f4 <_gp+0xfffea228>
   2463c:	00bfffc4 	movi	r2,-1
   24640:	8080038d 	sth	r2,14(r16)
   24644:	00800044 	movi	r2,1
   24648:	8080030d 	sth	r2,12(r16)
   2464c:	80001915 	stw	zero,100(r16)
   24650:	80000015 	stw	zero,0(r16)
   24654:	80000215 	stw	zero,8(r16)
   24658:	80000115 	stw	zero,4(r16)
   2465c:	80000415 	stw	zero,16(r16)
   24660:	80000515 	stw	zero,20(r16)
   24664:	80000615 	stw	zero,24(r16)
   24668:	81001704 	addi	r4,r16,92
   2466c:	000b883a 	mov	r5,zero
   24670:	01800204 	movi	r6,8
   24674:	0025f180 	call	25f18 <memset>
   24678:	8005883a 	mov	r2,r16
   2467c:	80000c15 	stw	zero,48(r16)
   24680:	80000d15 	stw	zero,52(r16)
   24684:	80001115 	stw	zero,68(r16)
   24688:	80001215 	stw	zero,72(r16)
   2468c:	dfc00417 	ldw	ra,16(sp)
   24690:	dcc00317 	ldw	r19,12(sp)
   24694:	dc800217 	ldw	r18,8(sp)
   24698:	dc400117 	ldw	r17,4(sp)
   2469c:	dc000017 	ldw	r16,0(sp)
   246a0:	dec00504 	addi	sp,sp,20
   246a4:	f800283a 	ret
   246a8:	9809883a 	mov	r4,r19
   246ac:	01400104 	movi	r5,4
   246b0:	00245500 	call	24550 <__sfmoreglue>
   246b4:	90800015 	stw	r2,0(r18)
   246b8:	103fde1e 	bne	r2,zero,24634 <_gp+0xfffea268>
   246bc:	00800304 	movi	r2,12
   246c0:	98800015 	stw	r2,0(r19)
   246c4:	0005883a 	mov	r2,zero
   246c8:	003ff006 	br	2468c <_gp+0xfffea2c0>

000246cc <_cleanup>:
   246cc:	008000f4 	movhi	r2,3
   246d0:	1088f304 	addi	r2,r2,9164
   246d4:	11000017 	ldw	r4,0(r2)
   246d8:	014000f4 	movhi	r5,3
   246dc:	2963c604 	addi	r5,r5,-28904
   246e0:	0024fec1 	jmpi	24fec <_fwalk>

000246e4 <__sinit>:
   246e4:	20800e17 	ldw	r2,56(r4)
   246e8:	10000126 	beq	r2,zero,246f0 <__sinit+0xc>
   246ec:	f800283a 	ret
   246f0:	00243b01 	jmpi	243b0 <__sinit.part.1>

000246f4 <__sfp_lock_acquire>:
   246f4:	f800283a 	ret

000246f8 <__sfp_lock_release>:
   246f8:	f800283a 	ret

000246fc <__sinit_lock_acquire>:
   246fc:	f800283a 	ret

00024700 <__sinit_lock_release>:
   24700:	f800283a 	ret

00024704 <__fp_lock_all>:
   24704:	008000f4 	movhi	r2,3
   24708:	1088f404 	addi	r2,r2,9168
   2470c:	11000017 	ldw	r4,0(r2)
   24710:	014000b4 	movhi	r5,2
   24714:	2950e504 	addi	r5,r5,17300
   24718:	0024fec1 	jmpi	24fec <_fwalk>

0002471c <__fp_unlock_all>:
   2471c:	008000f4 	movhi	r2,3
   24720:	1088f404 	addi	r2,r2,9168
   24724:	11000017 	ldw	r4,0(r2)
   24728:	014000b4 	movhi	r5,2
   2472c:	2950e704 	addi	r5,r5,17308
   24730:	0024fec1 	jmpi	24fec <_fwalk>

00024734 <_malloc_trim_r>:
   24734:	defffb04 	addi	sp,sp,-20
   24738:	dcc00315 	stw	r19,12(sp)
   2473c:	04c000f4 	movhi	r19,3
   24740:	dc800215 	stw	r18,8(sp)
   24744:	dc400115 	stw	r17,4(sp)
   24748:	dc000015 	stw	r16,0(sp)
   2474c:	dfc00415 	stw	ra,16(sp)
   24750:	2821883a 	mov	r16,r5
   24754:	9cc32804 	addi	r19,r19,3232
   24758:	2025883a 	mov	r18,r4
   2475c:	002ce180 	call	2ce18 <__malloc_lock>
   24760:	98800217 	ldw	r2,8(r19)
   24764:	14400117 	ldw	r17,4(r2)
   24768:	00bfff04 	movi	r2,-4
   2476c:	88a2703a 	and	r17,r17,r2
   24770:	8c21c83a 	sub	r16,r17,r16
   24774:	8403fbc4 	addi	r16,r16,4079
   24778:	8020d33a 	srli	r16,r16,12
   2477c:	0083ffc4 	movi	r2,4095
   24780:	843fffc4 	addi	r16,r16,-1
   24784:	8020933a 	slli	r16,r16,12
   24788:	1400060e 	bge	r2,r16,247a4 <_malloc_trim_r+0x70>
   2478c:	9009883a 	mov	r4,r18
   24790:	000b883a 	mov	r5,zero
   24794:	00275dc0 	call	275dc <_sbrk_r>
   24798:	98c00217 	ldw	r3,8(r19)
   2479c:	1c47883a 	add	r3,r3,r17
   247a0:	10c00a26 	beq	r2,r3,247cc <_malloc_trim_r+0x98>
   247a4:	9009883a 	mov	r4,r18
   247a8:	002ce380 	call	2ce38 <__malloc_unlock>
   247ac:	0005883a 	mov	r2,zero
   247b0:	dfc00417 	ldw	ra,16(sp)
   247b4:	dcc00317 	ldw	r19,12(sp)
   247b8:	dc800217 	ldw	r18,8(sp)
   247bc:	dc400117 	ldw	r17,4(sp)
   247c0:	dc000017 	ldw	r16,0(sp)
   247c4:	dec00504 	addi	sp,sp,20
   247c8:	f800283a 	ret
   247cc:	9009883a 	mov	r4,r18
   247d0:	040bc83a 	sub	r5,zero,r16
   247d4:	00275dc0 	call	275dc <_sbrk_r>
   247d8:	00ffffc4 	movi	r3,-1
   247dc:	10c00d26 	beq	r2,r3,24814 <_malloc_trim_r+0xe0>
   247e0:	00c000f4 	movhi	r3,3
   247e4:	18d01704 	addi	r3,r3,16476
   247e8:	18800017 	ldw	r2,0(r3)
   247ec:	99000217 	ldw	r4,8(r19)
   247f0:	8c23c83a 	sub	r17,r17,r16
   247f4:	8c400054 	ori	r17,r17,1
   247f8:	1421c83a 	sub	r16,r2,r16
   247fc:	24400115 	stw	r17,4(r4)
   24800:	9009883a 	mov	r4,r18
   24804:	1c000015 	stw	r16,0(r3)
   24808:	002ce380 	call	2ce38 <__malloc_unlock>
   2480c:	00800044 	movi	r2,1
   24810:	003fe706 	br	247b0 <_gp+0xfffea3e4>
   24814:	9009883a 	mov	r4,r18
   24818:	000b883a 	mov	r5,zero
   2481c:	00275dc0 	call	275dc <_sbrk_r>
   24820:	99000217 	ldw	r4,8(r19)
   24824:	014003c4 	movi	r5,15
   24828:	1107c83a 	sub	r3,r2,r4
   2482c:	28ffdd0e 	bge	r5,r3,247a4 <_gp+0xfffea3d8>
   24830:	014000f4 	movhi	r5,3
   24834:	2948f604 	addi	r5,r5,9176
   24838:	29400017 	ldw	r5,0(r5)
   2483c:	18c00054 	ori	r3,r3,1
   24840:	20c00115 	stw	r3,4(r4)
   24844:	00c000f4 	movhi	r3,3
   24848:	1145c83a 	sub	r2,r2,r5
   2484c:	18d01704 	addi	r3,r3,16476
   24850:	18800015 	stw	r2,0(r3)
   24854:	003fd306 	br	247a4 <_gp+0xfffea3d8>

00024858 <_free_r>:
   24858:	28004c26 	beq	r5,zero,2498c <_free_r+0x134>
   2485c:	defffd04 	addi	sp,sp,-12
   24860:	dc400115 	stw	r17,4(sp)
   24864:	dc000015 	stw	r16,0(sp)
   24868:	2023883a 	mov	r17,r4
   2486c:	2821883a 	mov	r16,r5
   24870:	dfc00215 	stw	ra,8(sp)
   24874:	002ce180 	call	2ce18 <__malloc_lock>
   24878:	813fff17 	ldw	r4,-4(r16)
   2487c:	00bfff84 	movi	r2,-2
   24880:	024000f4 	movhi	r9,3
   24884:	81bffe04 	addi	r6,r16,-8
   24888:	2084703a 	and	r2,r4,r2
   2488c:	4a432804 	addi	r9,r9,3232
   24890:	308b883a 	add	r5,r6,r2
   24894:	2a000117 	ldw	r8,4(r5)
   24898:	49c00217 	ldw	r7,8(r9)
   2489c:	00ffff04 	movi	r3,-4
   248a0:	40c6703a 	and	r3,r8,r3
   248a4:	39405326 	beq	r7,r5,249f4 <_free_r+0x19c>
   248a8:	28c00115 	stw	r3,4(r5)
   248ac:	2100004c 	andi	r4,r4,1
   248b0:	2000091e 	bne	r4,zero,248d8 <_free_r+0x80>
   248b4:	81fffe17 	ldw	r7,-8(r16)
   248b8:	4a000204 	addi	r8,r9,8
   248bc:	31cdc83a 	sub	r6,r6,r7
   248c0:	31000217 	ldw	r4,8(r6)
   248c4:	11c5883a 	add	r2,r2,r7
   248c8:	22006126 	beq	r4,r8,24a50 <_free_r+0x1f8>
   248cc:	31c00317 	ldw	r7,12(r6)
   248d0:	21c00315 	stw	r7,12(r4)
   248d4:	39000215 	stw	r4,8(r7)
   248d8:	28c9883a 	add	r4,r5,r3
   248dc:	21c00117 	ldw	r7,4(r4)
   248e0:	39c0004c 	andi	r7,r7,1
   248e4:	38000d1e 	bne	r7,zero,2491c <_free_r+0xc4>
   248e8:	29000217 	ldw	r4,8(r5)
   248ec:	10c5883a 	add	r2,r2,r3
   248f0:	00c000f4 	movhi	r3,3
   248f4:	18c32a04 	addi	r3,r3,3240
   248f8:	20c07526 	beq	r4,r3,24ad0 <_free_r+0x278>
   248fc:	29c00317 	ldw	r7,12(r5)
   24900:	11400054 	ori	r5,r2,1
   24904:	3087883a 	add	r3,r6,r2
   24908:	21c00315 	stw	r7,12(r4)
   2490c:	39000215 	stw	r4,8(r7)
   24910:	31400115 	stw	r5,4(r6)
   24914:	18800015 	stw	r2,0(r3)
   24918:	00000406 	br	2492c <_free_r+0xd4>
   2491c:	10c00054 	ori	r3,r2,1
   24920:	30c00115 	stw	r3,4(r6)
   24924:	3087883a 	add	r3,r6,r2
   24928:	18800015 	stw	r2,0(r3)
   2492c:	00c07fc4 	movi	r3,511
   24930:	18801736 	bltu	r3,r2,24990 <_free_r+0x138>
   24934:	1004d0fa 	srli	r2,r2,3
   24938:	01400044 	movi	r5,1
   2493c:	49000117 	ldw	r4,4(r9)
   24940:	1087883a 	add	r3,r2,r2
   24944:	18c7883a 	add	r3,r3,r3
   24948:	1005d0ba 	srai	r2,r2,2
   2494c:	18c7883a 	add	r3,r3,r3
   24950:	1a47883a 	add	r3,r3,r9
   24954:	19c00217 	ldw	r7,8(r3)
   24958:	2884983a 	sll	r2,r5,r2
   2495c:	30c00315 	stw	r3,12(r6)
   24960:	31c00215 	stw	r7,8(r6)
   24964:	1104b03a 	or	r2,r2,r4
   24968:	19800215 	stw	r6,8(r3)
   2496c:	48800115 	stw	r2,4(r9)
   24970:	39800315 	stw	r6,12(r7)
   24974:	8809883a 	mov	r4,r17
   24978:	dfc00217 	ldw	ra,8(sp)
   2497c:	dc400117 	ldw	r17,4(sp)
   24980:	dc000017 	ldw	r16,0(sp)
   24984:	dec00304 	addi	sp,sp,12
   24988:	002ce381 	jmpi	2ce38 <__malloc_unlock>
   2498c:	f800283a 	ret
   24990:	1006d27a 	srli	r3,r2,9
   24994:	01000104 	movi	r4,4
   24998:	20c04036 	bltu	r4,r3,24a9c <_free_r+0x244>
   2499c:	1006d1ba 	srli	r3,r2,6
   249a0:	19400e04 	addi	r5,r3,56
   249a4:	2947883a 	add	r3,r5,r5
   249a8:	18c7883a 	add	r3,r3,r3
   249ac:	18c7883a 	add	r3,r3,r3
   249b0:	1a49883a 	add	r4,r3,r9
   249b4:	20c00217 	ldw	r3,8(r4)
   249b8:	01c000f4 	movhi	r7,3
   249bc:	39c32804 	addi	r7,r7,3232
   249c0:	19003b26 	beq	r3,r4,24ab0 <_free_r+0x258>
   249c4:	01ffff04 	movi	r7,-4
   249c8:	19400117 	ldw	r5,4(r3)
   249cc:	29ca703a 	and	r5,r5,r7
   249d0:	1140022e 	bgeu	r2,r5,249dc <_free_r+0x184>
   249d4:	18c00217 	ldw	r3,8(r3)
   249d8:	20fffb1e 	bne	r4,r3,249c8 <_gp+0xfffea5fc>
   249dc:	18800317 	ldw	r2,12(r3)
   249e0:	30800315 	stw	r2,12(r6)
   249e4:	30c00215 	stw	r3,8(r6)
   249e8:	11800215 	stw	r6,8(r2)
   249ec:	19800315 	stw	r6,12(r3)
   249f0:	003fe006 	br	24974 <_gp+0xfffea5a8>
   249f4:	2100004c 	andi	r4,r4,1
   249f8:	1885883a 	add	r2,r3,r2
   249fc:	2000071e 	bne	r4,zero,24a1c <_free_r+0x1c4>
   24a00:	817ffe17 	ldw	r5,-8(r16)
   24a04:	314dc83a 	sub	r6,r6,r5
   24a08:	30c00317 	ldw	r3,12(r6)
   24a0c:	31000217 	ldw	r4,8(r6)
   24a10:	1145883a 	add	r2,r2,r5
   24a14:	20c00315 	stw	r3,12(r4)
   24a18:	19000215 	stw	r4,8(r3)
   24a1c:	10c00054 	ori	r3,r2,1
   24a20:	30c00115 	stw	r3,4(r6)
   24a24:	00c000f4 	movhi	r3,3
   24a28:	18c8f704 	addi	r3,r3,9180
   24a2c:	18c00017 	ldw	r3,0(r3)
   24a30:	49800215 	stw	r6,8(r9)
   24a34:	10ffcf36 	bltu	r2,r3,24974 <_gp+0xfffea5a8>
   24a38:	008000f4 	movhi	r2,3
   24a3c:	10900e04 	addi	r2,r2,16440
   24a40:	11400017 	ldw	r5,0(r2)
   24a44:	8809883a 	mov	r4,r17
   24a48:	00247340 	call	24734 <_malloc_trim_r>
   24a4c:	003fc906 	br	24974 <_gp+0xfffea5a8>
   24a50:	28c9883a 	add	r4,r5,r3
   24a54:	21000117 	ldw	r4,4(r4)
   24a58:	2100004c 	andi	r4,r4,1
   24a5c:	20000a1e 	bne	r4,zero,24a88 <_free_r+0x230>
   24a60:	29000317 	ldw	r4,12(r5)
   24a64:	29400217 	ldw	r5,8(r5)
   24a68:	10c5883a 	add	r2,r2,r3
   24a6c:	10c00054 	ori	r3,r2,1
   24a70:	29000315 	stw	r4,12(r5)
   24a74:	21400215 	stw	r5,8(r4)
   24a78:	30c00115 	stw	r3,4(r6)
   24a7c:	308d883a 	add	r6,r6,r2
   24a80:	30800015 	stw	r2,0(r6)
   24a84:	003fbb06 	br	24974 <_gp+0xfffea5a8>
   24a88:	10c00054 	ori	r3,r2,1
   24a8c:	30c00115 	stw	r3,4(r6)
   24a90:	308d883a 	add	r6,r6,r2
   24a94:	30800015 	stw	r2,0(r6)
   24a98:	003fb606 	br	24974 <_gp+0xfffea5a8>
   24a9c:	01000504 	movi	r4,20
   24aa0:	20c01436 	bltu	r4,r3,24af4 <_free_r+0x29c>
   24aa4:	194016c4 	addi	r5,r3,91
   24aa8:	2947883a 	add	r3,r5,r5
   24aac:	003fbe06 	br	249a8 <_gp+0xfffea5dc>
   24ab0:	280bd0ba 	srai	r5,r5,2
   24ab4:	00800044 	movi	r2,1
   24ab8:	39000117 	ldw	r4,4(r7)
   24abc:	114a983a 	sll	r5,r2,r5
   24ac0:	1805883a 	mov	r2,r3
   24ac4:	2908b03a 	or	r4,r5,r4
   24ac8:	39000115 	stw	r4,4(r7)
   24acc:	003fc406 	br	249e0 <_gp+0xfffea614>
   24ad0:	49800515 	stw	r6,20(r9)
   24ad4:	49800415 	stw	r6,16(r9)
   24ad8:	10c00054 	ori	r3,r2,1
   24adc:	31000315 	stw	r4,12(r6)
   24ae0:	31000215 	stw	r4,8(r6)
   24ae4:	30c00115 	stw	r3,4(r6)
   24ae8:	308d883a 	add	r6,r6,r2
   24aec:	30800015 	stw	r2,0(r6)
   24af0:	003fa006 	br	24974 <_gp+0xfffea5a8>
   24af4:	01001504 	movi	r4,84
   24af8:	20c00436 	bltu	r4,r3,24b0c <_free_r+0x2b4>
   24afc:	1006d33a 	srli	r3,r2,12
   24b00:	19401b84 	addi	r5,r3,110
   24b04:	2947883a 	add	r3,r5,r5
   24b08:	003fa706 	br	249a8 <_gp+0xfffea5dc>
   24b0c:	01005504 	movi	r4,340
   24b10:	20c00436 	bltu	r4,r3,24b24 <_free_r+0x2cc>
   24b14:	1006d3fa 	srli	r3,r2,15
   24b18:	19401dc4 	addi	r5,r3,119
   24b1c:	2947883a 	add	r3,r5,r5
   24b20:	003fa106 	br	249a8 <_gp+0xfffea5dc>
   24b24:	01015504 	movi	r4,1364
   24b28:	20c00436 	bltu	r4,r3,24b3c <_free_r+0x2e4>
   24b2c:	1006d4ba 	srli	r3,r2,18
   24b30:	19401f04 	addi	r5,r3,124
   24b34:	2947883a 	add	r3,r5,r5
   24b38:	003f9b06 	br	249a8 <_gp+0xfffea5dc>
   24b3c:	00c03f04 	movi	r3,252
   24b40:	01401f84 	movi	r5,126
   24b44:	003f9806 	br	249a8 <_gp+0xfffea5dc>

00024b48 <__sfvwrite_r>:
   24b48:	30800217 	ldw	r2,8(r6)
   24b4c:	10004526 	beq	r2,zero,24c64 <__sfvwrite_r+0x11c>
   24b50:	28c0030b 	ldhu	r3,12(r5)
   24b54:	defff404 	addi	sp,sp,-48
   24b58:	dd400715 	stw	r21,28(sp)
   24b5c:	dcc00515 	stw	r19,20(sp)
   24b60:	dc000215 	stw	r16,8(sp)
   24b64:	dfc00b15 	stw	ra,44(sp)
   24b68:	df000a15 	stw	fp,40(sp)
   24b6c:	ddc00915 	stw	r23,36(sp)
   24b70:	dd800815 	stw	r22,32(sp)
   24b74:	dd000615 	stw	r20,24(sp)
   24b78:	dc800415 	stw	r18,16(sp)
   24b7c:	dc400315 	stw	r17,12(sp)
   24b80:	1880020c 	andi	r2,r3,8
   24b84:	2821883a 	mov	r16,r5
   24b88:	202b883a 	mov	r21,r4
   24b8c:	3027883a 	mov	r19,r6
   24b90:	10002526 	beq	r2,zero,24c28 <__sfvwrite_r+0xe0>
   24b94:	28800417 	ldw	r2,16(r5)
   24b98:	10002326 	beq	r2,zero,24c28 <__sfvwrite_r+0xe0>
   24b9c:	1880008c 	andi	r2,r3,2
   24ba0:	9c400017 	ldw	r17,0(r19)
   24ba4:	10003126 	beq	r2,zero,24c6c <__sfvwrite_r+0x124>
   24ba8:	0029883a 	mov	r20,zero
   24bac:	0025883a 	mov	r18,zero
   24bb0:	05810004 	movi	r22,1024
   24bb4:	a00d883a 	mov	r6,r20
   24bb8:	a809883a 	mov	r4,r21
   24bbc:	90002526 	beq	r18,zero,24c54 <__sfvwrite_r+0x10c>
   24bc0:	900f883a 	mov	r7,r18
   24bc4:	81400717 	ldw	r5,28(r16)
   24bc8:	b480012e 	bgeu	r22,r18,24bd0 <__sfvwrite_r+0x88>
   24bcc:	01c10004 	movi	r7,1024
   24bd0:	80800917 	ldw	r2,36(r16)
   24bd4:	103ee83a 	callr	r2
   24bd8:	0080510e 	bge	zero,r2,24d20 <__sfvwrite_r+0x1d8>
   24bdc:	98c00217 	ldw	r3,8(r19)
   24be0:	a0a9883a 	add	r20,r20,r2
   24be4:	90a5c83a 	sub	r18,r18,r2
   24be8:	1885c83a 	sub	r2,r3,r2
   24bec:	98800215 	stw	r2,8(r19)
   24bf0:	103ff01e 	bne	r2,zero,24bb4 <_gp+0xfffea7e8>
   24bf4:	0005883a 	mov	r2,zero
   24bf8:	dfc00b17 	ldw	ra,44(sp)
   24bfc:	df000a17 	ldw	fp,40(sp)
   24c00:	ddc00917 	ldw	r23,36(sp)
   24c04:	dd800817 	ldw	r22,32(sp)
   24c08:	dd400717 	ldw	r21,28(sp)
   24c0c:	dd000617 	ldw	r20,24(sp)
   24c10:	dcc00517 	ldw	r19,20(sp)
   24c14:	dc800417 	ldw	r18,16(sp)
   24c18:	dc400317 	ldw	r17,12(sp)
   24c1c:	dc000217 	ldw	r16,8(sp)
   24c20:	dec00c04 	addi	sp,sp,48
   24c24:	f800283a 	ret
   24c28:	a809883a 	mov	r4,r21
   24c2c:	800b883a 	mov	r5,r16
   24c30:	00226e40 	call	226e4 <__swsetup_r>
   24c34:	80c0030b 	ldhu	r3,12(r16)
   24c38:	103fd826 	beq	r2,zero,24b9c <_gp+0xfffea7d0>
   24c3c:	18c01014 	ori	r3,r3,64
   24c40:	80c0030d 	sth	r3,12(r16)
   24c44:	00c00244 	movi	r3,9
   24c48:	00bfffc4 	movi	r2,-1
   24c4c:	a8c00015 	stw	r3,0(r21)
   24c50:	003fe906 	br	24bf8 <_gp+0xfffea82c>
   24c54:	8d000017 	ldw	r20,0(r17)
   24c58:	8c800117 	ldw	r18,4(r17)
   24c5c:	8c400204 	addi	r17,r17,8
   24c60:	003fd406 	br	24bb4 <_gp+0xfffea7e8>
   24c64:	0005883a 	mov	r2,zero
   24c68:	f800283a 	ret
   24c6c:	1880004c 	andi	r2,r3,1
   24c70:	1000301e 	bne	r2,zero,24d34 <__sfvwrite_r+0x1ec>
   24c74:	002f883a 	mov	r23,zero
   24c78:	0025883a 	mov	r18,zero
   24c7c:	90001c26 	beq	r18,zero,24cf0 <__sfvwrite_r+0x1a8>
   24c80:	1880800c 	andi	r2,r3,512
   24c84:	85000217 	ldw	r20,8(r16)
   24c88:	10006c26 	beq	r2,zero,24e3c <__sfvwrite_r+0x2f4>
   24c8c:	a02d883a 	mov	r22,r20
   24c90:	95008536 	bltu	r18,r20,24ea8 <__sfvwrite_r+0x360>
   24c94:	1881200c 	andi	r2,r3,1152
   24c98:	10009d1e 	bne	r2,zero,24f10 <__sfvwrite_r+0x3c8>
   24c9c:	81000017 	ldw	r4,0(r16)
   24ca0:	a039883a 	mov	fp,r20
   24ca4:	9029883a 	mov	r20,r18
   24ca8:	b80b883a 	mov	r5,r23
   24cac:	b00d883a 	mov	r6,r22
   24cb0:	0025dbc0 	call	25dbc <memmove>
   24cb4:	80c00217 	ldw	r3,8(r16)
   24cb8:	81000017 	ldw	r4,0(r16)
   24cbc:	9005883a 	mov	r2,r18
   24cc0:	1f39c83a 	sub	fp,r3,fp
   24cc4:	258f883a 	add	r7,r4,r22
   24cc8:	87000215 	stw	fp,8(r16)
   24ccc:	81c00015 	stw	r7,0(r16)
   24cd0:	98c00217 	ldw	r3,8(r19)
   24cd4:	b8af883a 	add	r23,r23,r2
   24cd8:	90a5c83a 	sub	r18,r18,r2
   24cdc:	1d05c83a 	sub	r2,r3,r20
   24ce0:	98800215 	stw	r2,8(r19)
   24ce4:	103fc326 	beq	r2,zero,24bf4 <_gp+0xfffea828>
   24ce8:	80c0030b 	ldhu	r3,12(r16)
   24cec:	903fe41e 	bne	r18,zero,24c80 <_gp+0xfffea8b4>
   24cf0:	8dc00017 	ldw	r23,0(r17)
   24cf4:	8c800117 	ldw	r18,4(r17)
   24cf8:	8c400204 	addi	r17,r17,8
   24cfc:	003fdf06 	br	24c7c <_gp+0xfffea8b0>
   24d00:	0026fc80 	call	26fc8 <_realloc_r>
   24d04:	102d883a 	mov	r22,r2
   24d08:	1000a01e 	bne	r2,zero,24f8c <__sfvwrite_r+0x444>
   24d0c:	81400417 	ldw	r5,16(r16)
   24d10:	a809883a 	mov	r4,r21
   24d14:	00248580 	call	24858 <_free_r>
   24d18:	00800304 	movi	r2,12
   24d1c:	a8800015 	stw	r2,0(r21)
   24d20:	80c0030b 	ldhu	r3,12(r16)
   24d24:	00bfffc4 	movi	r2,-1
   24d28:	18c01014 	ori	r3,r3,64
   24d2c:	80c0030d 	sth	r3,12(r16)
   24d30:	003fb106 	br	24bf8 <_gp+0xfffea82c>
   24d34:	0029883a 	mov	r20,zero
   24d38:	0011883a 	mov	r8,zero
   24d3c:	0039883a 	mov	fp,zero
   24d40:	0025883a 	mov	r18,zero
   24d44:	90001f26 	beq	r18,zero,24dc4 <__sfvwrite_r+0x27c>
   24d48:	40006826 	beq	r8,zero,24eec <__sfvwrite_r+0x3a4>
   24d4c:	a02f883a 	mov	r23,r20
   24d50:	9500012e 	bgeu	r18,r20,24d58 <__sfvwrite_r+0x210>
   24d54:	902f883a 	mov	r23,r18
   24d58:	81000017 	ldw	r4,0(r16)
   24d5c:	80800417 	ldw	r2,16(r16)
   24d60:	b82d883a 	mov	r22,r23
   24d64:	81800217 	ldw	r6,8(r16)
   24d68:	81c00517 	ldw	r7,20(r16)
   24d6c:	1100022e 	bgeu	r2,r4,24d78 <__sfvwrite_r+0x230>
   24d70:	31c7883a 	add	r3,r6,r7
   24d74:	1dc01816 	blt	r3,r23,24dd8 <__sfvwrite_r+0x290>
   24d78:	b9c03f16 	blt	r23,r7,24e78 <__sfvwrite_r+0x330>
   24d7c:	80800917 	ldw	r2,36(r16)
   24d80:	81400717 	ldw	r5,28(r16)
   24d84:	a809883a 	mov	r4,r21
   24d88:	da000115 	stw	r8,4(sp)
   24d8c:	e00d883a 	mov	r6,fp
   24d90:	103ee83a 	callr	r2
   24d94:	102d883a 	mov	r22,r2
   24d98:	da000117 	ldw	r8,4(sp)
   24d9c:	00bfe00e 	bge	zero,r2,24d20 <_gp+0xfffea954>
   24da0:	a5a9c83a 	sub	r20,r20,r22
   24da4:	a0001f26 	beq	r20,zero,24e24 <__sfvwrite_r+0x2dc>
   24da8:	98800217 	ldw	r2,8(r19)
   24dac:	e5b9883a 	add	fp,fp,r22
   24db0:	95a5c83a 	sub	r18,r18,r22
   24db4:	15adc83a 	sub	r22,r2,r22
   24db8:	9d800215 	stw	r22,8(r19)
   24dbc:	b03f8d26 	beq	r22,zero,24bf4 <_gp+0xfffea828>
   24dc0:	903fe11e 	bne	r18,zero,24d48 <_gp+0xfffea97c>
   24dc4:	8f000017 	ldw	fp,0(r17)
   24dc8:	8c800117 	ldw	r18,4(r17)
   24dcc:	0011883a 	mov	r8,zero
   24dd0:	8c400204 	addi	r17,r17,8
   24dd4:	003fdb06 	br	24d44 <_gp+0xfffea978>
   24dd8:	180d883a 	mov	r6,r3
   24ddc:	e00b883a 	mov	r5,fp
   24de0:	da000115 	stw	r8,4(sp)
   24de4:	d8c00015 	stw	r3,0(sp)
   24de8:	0025dbc0 	call	25dbc <memmove>
   24dec:	d8c00017 	ldw	r3,0(sp)
   24df0:	80800017 	ldw	r2,0(r16)
   24df4:	a809883a 	mov	r4,r21
   24df8:	800b883a 	mov	r5,r16
   24dfc:	10c5883a 	add	r2,r2,r3
   24e00:	80800015 	stw	r2,0(r16)
   24e04:	d8c00015 	stw	r3,0(sp)
   24e08:	002413c0 	call	2413c <_fflush_r>
   24e0c:	d8c00017 	ldw	r3,0(sp)
   24e10:	da000117 	ldw	r8,4(sp)
   24e14:	103fc21e 	bne	r2,zero,24d20 <_gp+0xfffea954>
   24e18:	182d883a 	mov	r22,r3
   24e1c:	a5a9c83a 	sub	r20,r20,r22
   24e20:	a03fe11e 	bne	r20,zero,24da8 <_gp+0xfffea9dc>
   24e24:	a809883a 	mov	r4,r21
   24e28:	800b883a 	mov	r5,r16
   24e2c:	002413c0 	call	2413c <_fflush_r>
   24e30:	103fbb1e 	bne	r2,zero,24d20 <_gp+0xfffea954>
   24e34:	0011883a 	mov	r8,zero
   24e38:	003fdb06 	br	24da8 <_gp+0xfffea9dc>
   24e3c:	81000017 	ldw	r4,0(r16)
   24e40:	80800417 	ldw	r2,16(r16)
   24e44:	1100012e 	bgeu	r2,r4,24e4c <__sfvwrite_r+0x304>
   24e48:	a4805a36 	bltu	r20,r18,24fb4 <__sfvwrite_r+0x46c>
   24e4c:	81c00517 	ldw	r7,20(r16)
   24e50:	91c01a36 	bltu	r18,r7,24ebc <__sfvwrite_r+0x374>
   24e54:	80800917 	ldw	r2,36(r16)
   24e58:	81400717 	ldw	r5,28(r16)
   24e5c:	a809883a 	mov	r4,r21
   24e60:	b80d883a 	mov	r6,r23
   24e64:	103ee83a 	callr	r2
   24e68:	1029883a 	mov	r20,r2
   24e6c:	00bfac0e 	bge	zero,r2,24d20 <_gp+0xfffea954>
   24e70:	a005883a 	mov	r2,r20
   24e74:	003f9606 	br	24cd0 <_gp+0xfffea904>
   24e78:	b80d883a 	mov	r6,r23
   24e7c:	e00b883a 	mov	r5,fp
   24e80:	da000115 	stw	r8,4(sp)
   24e84:	0025dbc0 	call	25dbc <memmove>
   24e88:	80800217 	ldw	r2,8(r16)
   24e8c:	80c00017 	ldw	r3,0(r16)
   24e90:	da000117 	ldw	r8,4(sp)
   24e94:	15c5c83a 	sub	r2,r2,r23
   24e98:	1def883a 	add	r23,r3,r23
   24e9c:	80800215 	stw	r2,8(r16)
   24ea0:	85c00015 	stw	r23,0(r16)
   24ea4:	003fbe06 	br	24da0 <_gp+0xfffea9d4>
   24ea8:	81000017 	ldw	r4,0(r16)
   24eac:	9039883a 	mov	fp,r18
   24eb0:	9029883a 	mov	r20,r18
   24eb4:	902d883a 	mov	r22,r18
   24eb8:	003f7b06 	br	24ca8 <_gp+0xfffea8dc>
   24ebc:	b80b883a 	mov	r5,r23
   24ec0:	900d883a 	mov	r6,r18
   24ec4:	0025dbc0 	call	25dbc <memmove>
   24ec8:	80c00217 	ldw	r3,8(r16)
   24ecc:	80800017 	ldw	r2,0(r16)
   24ed0:	9029883a 	mov	r20,r18
   24ed4:	1c87c83a 	sub	r3,r3,r18
   24ed8:	1485883a 	add	r2,r2,r18
   24edc:	80800015 	stw	r2,0(r16)
   24ee0:	80c00215 	stw	r3,8(r16)
   24ee4:	9005883a 	mov	r2,r18
   24ee8:	003f7906 	br	24cd0 <_gp+0xfffea904>
   24eec:	e009883a 	mov	r4,fp
   24ef0:	01400284 	movi	r5,10
   24ef4:	900d883a 	mov	r6,r18
   24ef8:	0025b9c0 	call	25b9c <memchr>
   24efc:	10003826 	beq	r2,zero,24fe0 <__sfvwrite_r+0x498>
   24f00:	10800044 	addi	r2,r2,1
   24f04:	1729c83a 	sub	r20,r2,fp
   24f08:	02000044 	movi	r8,1
   24f0c:	003f8f06 	br	24d4c <_gp+0xfffea980>
   24f10:	80800517 	ldw	r2,20(r16)
   24f14:	81400417 	ldw	r5,16(r16)
   24f18:	87000017 	ldw	fp,0(r16)
   24f1c:	10a9883a 	add	r20,r2,r2
   24f20:	a085883a 	add	r2,r20,r2
   24f24:	1028d7fa 	srli	r20,r2,31
   24f28:	e179c83a 	sub	fp,fp,r5
   24f2c:	e1000044 	addi	r4,fp,1
   24f30:	a085883a 	add	r2,r20,r2
   24f34:	1029d07a 	srai	r20,r2,1
   24f38:	2485883a 	add	r2,r4,r18
   24f3c:	a00d883a 	mov	r6,r20
   24f40:	a080022e 	bgeu	r20,r2,24f4c <__sfvwrite_r+0x404>
   24f44:	1029883a 	mov	r20,r2
   24f48:	100d883a 	mov	r6,r2
   24f4c:	18c1000c 	andi	r3,r3,1024
   24f50:	a809883a 	mov	r4,r21
   24f54:	183f6a26 	beq	r3,zero,24d00 <_gp+0xfffea934>
   24f58:	300b883a 	mov	r5,r6
   24f5c:	00253f40 	call	253f4 <_malloc_r>
   24f60:	102d883a 	mov	r22,r2
   24f64:	103f6c26 	beq	r2,zero,24d18 <_gp+0xfffea94c>
   24f68:	81400417 	ldw	r5,16(r16)
   24f6c:	1009883a 	mov	r4,r2
   24f70:	e00d883a 	mov	r6,fp
   24f74:	0025c840 	call	25c84 <memcpy>
   24f78:	8080030b 	ldhu	r2,12(r16)
   24f7c:	00fedfc4 	movi	r3,-1153
   24f80:	10c4703a 	and	r2,r2,r3
   24f84:	10802014 	ori	r2,r2,128
   24f88:	8080030d 	sth	r2,12(r16)
   24f8c:	b709883a 	add	r4,r22,fp
   24f90:	a707c83a 	sub	r3,r20,fp
   24f94:	85800415 	stw	r22,16(r16)
   24f98:	85000515 	stw	r20,20(r16)
   24f9c:	81000015 	stw	r4,0(r16)
   24fa0:	9039883a 	mov	fp,r18
   24fa4:	80c00215 	stw	r3,8(r16)
   24fa8:	9029883a 	mov	r20,r18
   24fac:	902d883a 	mov	r22,r18
   24fb0:	003f3d06 	br	24ca8 <_gp+0xfffea8dc>
   24fb4:	b80b883a 	mov	r5,r23
   24fb8:	a00d883a 	mov	r6,r20
   24fbc:	0025dbc0 	call	25dbc <memmove>
   24fc0:	80800017 	ldw	r2,0(r16)
   24fc4:	a809883a 	mov	r4,r21
   24fc8:	800b883a 	mov	r5,r16
   24fcc:	1505883a 	add	r2,r2,r20
   24fd0:	80800015 	stw	r2,0(r16)
   24fd4:	002413c0 	call	2413c <_fflush_r>
   24fd8:	103fa526 	beq	r2,zero,24e70 <_gp+0xfffeaaa4>
   24fdc:	003f5006 	br	24d20 <_gp+0xfffea954>
   24fe0:	95000044 	addi	r20,r18,1
   24fe4:	02000044 	movi	r8,1
   24fe8:	003f5806 	br	24d4c <_gp+0xfffea980>

00024fec <_fwalk>:
   24fec:	defff804 	addi	sp,sp,-32
   24ff0:	dd400515 	stw	r21,20(sp)
   24ff4:	2540b804 	addi	r21,r4,736
   24ff8:	dd800615 	stw	r22,24(sp)
   24ffc:	dd000415 	stw	r20,16(sp)
   25000:	dfc00715 	stw	ra,28(sp)
   25004:	dcc00315 	stw	r19,12(sp)
   25008:	dc800215 	stw	r18,8(sp)
   2500c:	dc400115 	stw	r17,4(sp)
   25010:	dc000015 	stw	r16,0(sp)
   25014:	2829883a 	mov	r20,r5
   25018:	002d883a 	mov	r22,zero
   2501c:	00246f40 	call	246f4 <__sfp_lock_acquire>
   25020:	a8001426 	beq	r21,zero,25074 <_fwalk+0x88>
   25024:	04ffffc4 	movi	r19,-1
   25028:	ac400117 	ldw	r17,4(r21)
   2502c:	ac800217 	ldw	r18,8(r21)
   25030:	8c7fffc4 	addi	r17,r17,-1
   25034:	88000d16 	blt	r17,zero,2506c <_fwalk+0x80>
   25038:	94000304 	addi	r16,r18,12
   2503c:	94800384 	addi	r18,r18,14
   25040:	80c0000f 	ldh	r3,0(r16)
   25044:	8c7fffc4 	addi	r17,r17,-1
   25048:	813ffd04 	addi	r4,r16,-12
   2504c:	18000426 	beq	r3,zero,25060 <_fwalk+0x74>
   25050:	90c0000f 	ldh	r3,0(r18)
   25054:	1cc00226 	beq	r3,r19,25060 <_fwalk+0x74>
   25058:	a03ee83a 	callr	r20
   2505c:	b0acb03a 	or	r22,r22,r2
   25060:	84001a04 	addi	r16,r16,104
   25064:	94801a04 	addi	r18,r18,104
   25068:	8cfff51e 	bne	r17,r19,25040 <_gp+0xfffeac74>
   2506c:	ad400017 	ldw	r21,0(r21)
   25070:	a83fed1e 	bne	r21,zero,25028 <_gp+0xfffeac5c>
   25074:	00246f80 	call	246f8 <__sfp_lock_release>
   25078:	b005883a 	mov	r2,r22
   2507c:	dfc00717 	ldw	ra,28(sp)
   25080:	dd800617 	ldw	r22,24(sp)
   25084:	dd400517 	ldw	r21,20(sp)
   25088:	dd000417 	ldw	r20,16(sp)
   2508c:	dcc00317 	ldw	r19,12(sp)
   25090:	dc800217 	ldw	r18,8(sp)
   25094:	dc400117 	ldw	r17,4(sp)
   25098:	dc000017 	ldw	r16,0(sp)
   2509c:	dec00804 	addi	sp,sp,32
   250a0:	f800283a 	ret

000250a4 <_fwalk_reent>:
   250a4:	defff804 	addi	sp,sp,-32
   250a8:	dd400515 	stw	r21,20(sp)
   250ac:	2540b804 	addi	r21,r4,736
   250b0:	dd800615 	stw	r22,24(sp)
   250b4:	dd000415 	stw	r20,16(sp)
   250b8:	dcc00315 	stw	r19,12(sp)
   250bc:	dfc00715 	stw	ra,28(sp)
   250c0:	dc800215 	stw	r18,8(sp)
   250c4:	dc400115 	stw	r17,4(sp)
   250c8:	dc000015 	stw	r16,0(sp)
   250cc:	2027883a 	mov	r19,r4
   250d0:	2829883a 	mov	r20,r5
   250d4:	002d883a 	mov	r22,zero
   250d8:	00246f40 	call	246f4 <__sfp_lock_acquire>
   250dc:	a8001326 	beq	r21,zero,2512c <_fwalk_reent+0x88>
   250e0:	04bfffc4 	movi	r18,-1
   250e4:	ac400117 	ldw	r17,4(r21)
   250e8:	ac000217 	ldw	r16,8(r21)
   250ec:	8c7fffc4 	addi	r17,r17,-1
   250f0:	88000c16 	blt	r17,zero,25124 <_fwalk_reent+0x80>
   250f4:	84000304 	addi	r16,r16,12
   250f8:	80c0000f 	ldh	r3,0(r16)
   250fc:	8c7fffc4 	addi	r17,r17,-1
   25100:	817ffd04 	addi	r5,r16,-12
   25104:	18000526 	beq	r3,zero,2511c <_fwalk_reent+0x78>
   25108:	80c0008f 	ldh	r3,2(r16)
   2510c:	9809883a 	mov	r4,r19
   25110:	1c800226 	beq	r3,r18,2511c <_fwalk_reent+0x78>
   25114:	a03ee83a 	callr	r20
   25118:	b0acb03a 	or	r22,r22,r2
   2511c:	84001a04 	addi	r16,r16,104
   25120:	8cbff51e 	bne	r17,r18,250f8 <_gp+0xfffead2c>
   25124:	ad400017 	ldw	r21,0(r21)
   25128:	a83fee1e 	bne	r21,zero,250e4 <_gp+0xfffead18>
   2512c:	00246f80 	call	246f8 <__sfp_lock_release>
   25130:	b005883a 	mov	r2,r22
   25134:	dfc00717 	ldw	ra,28(sp)
   25138:	dd800617 	ldw	r22,24(sp)
   2513c:	dd400517 	ldw	r21,20(sp)
   25140:	dd000417 	ldw	r20,16(sp)
   25144:	dcc00317 	ldw	r19,12(sp)
   25148:	dc800217 	ldw	r18,8(sp)
   2514c:	dc400117 	ldw	r17,4(sp)
   25150:	dc000017 	ldw	r16,0(sp)
   25154:	dec00804 	addi	sp,sp,32
   25158:	f800283a 	ret

0002515c <_setlocale_r>:
   2515c:	30001b26 	beq	r6,zero,251cc <_setlocale_r+0x70>
   25160:	014000f4 	movhi	r5,3
   25164:	defffe04 	addi	sp,sp,-8
   25168:	29414404 	addi	r5,r5,1296
   2516c:	3009883a 	mov	r4,r6
   25170:	dc000015 	stw	r16,0(sp)
   25174:	dfc00115 	stw	ra,4(sp)
   25178:	3021883a 	mov	r16,r6
   2517c:	002776c0 	call	2776c <strcmp>
   25180:	1000061e 	bne	r2,zero,2519c <_setlocale_r+0x40>
   25184:	008000f4 	movhi	r2,3
   25188:	10814304 	addi	r2,r2,1292
   2518c:	dfc00117 	ldw	ra,4(sp)
   25190:	dc000017 	ldw	r16,0(sp)
   25194:	dec00204 	addi	sp,sp,8
   25198:	f800283a 	ret
   2519c:	014000f4 	movhi	r5,3
   251a0:	29414304 	addi	r5,r5,1292
   251a4:	8009883a 	mov	r4,r16
   251a8:	002776c0 	call	2776c <strcmp>
   251ac:	103ff526 	beq	r2,zero,25184 <_gp+0xfffeadb8>
   251b0:	014000f4 	movhi	r5,3
   251b4:	29412e04 	addi	r5,r5,1208
   251b8:	8009883a 	mov	r4,r16
   251bc:	002776c0 	call	2776c <strcmp>
   251c0:	103ff026 	beq	r2,zero,25184 <_gp+0xfffeadb8>
   251c4:	0005883a 	mov	r2,zero
   251c8:	003ff006 	br	2518c <_gp+0xfffeadc0>
   251cc:	008000f4 	movhi	r2,3
   251d0:	10814304 	addi	r2,r2,1292
   251d4:	f800283a 	ret

000251d8 <__locale_charset>:
   251d8:	008000f4 	movhi	r2,3
   251dc:	10831204 	addi	r2,r2,3144
   251e0:	f800283a 	ret

000251e4 <__locale_mb_cur_max>:
   251e4:	008000f4 	movhi	r2,3
   251e8:	1088f504 	addi	r2,r2,9172
   251ec:	10800017 	ldw	r2,0(r2)
   251f0:	f800283a 	ret

000251f4 <__locale_msgcharset>:
   251f4:	008000f4 	movhi	r2,3
   251f8:	10830a04 	addi	r2,r2,3112
   251fc:	f800283a 	ret

00025200 <__locale_cjk_lang>:
   25200:	0005883a 	mov	r2,zero
   25204:	f800283a 	ret

00025208 <_localeconv_r>:
   25208:	008000f4 	movhi	r2,3
   2520c:	10831a04 	addi	r2,r2,3176
   25210:	f800283a 	ret

00025214 <setlocale>:
   25214:	00c000f4 	movhi	r3,3
   25218:	18c8f404 	addi	r3,r3,9168
   2521c:	2005883a 	mov	r2,r4
   25220:	19000017 	ldw	r4,0(r3)
   25224:	280d883a 	mov	r6,r5
   25228:	100b883a 	mov	r5,r2
   2522c:	002515c1 	jmpi	2515c <_setlocale_r>

00025230 <localeconv>:
   25230:	008000f4 	movhi	r2,3
   25234:	10831a04 	addi	r2,r2,3176
   25238:	f800283a 	ret

0002523c <__smakebuf_r>:
   2523c:	2880030b 	ldhu	r2,12(r5)
   25240:	10c0008c 	andi	r3,r2,2
   25244:	1800401e 	bne	r3,zero,25348 <__smakebuf_r+0x10c>
   25248:	deffec04 	addi	sp,sp,-80
   2524c:	dc000f15 	stw	r16,60(sp)
   25250:	2821883a 	mov	r16,r5
   25254:	2940038f 	ldh	r5,14(r5)
   25258:	dc401015 	stw	r17,64(sp)
   2525c:	dfc01315 	stw	ra,76(sp)
   25260:	dcc01215 	stw	r19,72(sp)
   25264:	dc801115 	stw	r18,68(sp)
   25268:	2023883a 	mov	r17,r4
   2526c:	28001b16 	blt	r5,zero,252dc <__smakebuf_r+0xa0>
   25270:	d80d883a 	mov	r6,sp
   25274:	00291080 	call	29108 <_fstat_r>
   25278:	10001716 	blt	r2,zero,252d8 <__smakebuf_r+0x9c>
   2527c:	d8800117 	ldw	r2,4(sp)
   25280:	00e00014 	movui	r3,32768
   25284:	10bc000c 	andi	r2,r2,61440
   25288:	10c03726 	beq	r2,r3,25368 <__smakebuf_r+0x12c>
   2528c:	80c0030b 	ldhu	r3,12(r16)
   25290:	18c20014 	ori	r3,r3,2048
   25294:	80c0030d 	sth	r3,12(r16)
   25298:	00c80004 	movi	r3,8192
   2529c:	10c03c1e 	bne	r2,r3,25390 <__smakebuf_r+0x154>
   252a0:	8140038f 	ldh	r5,14(r16)
   252a4:	8809883a 	mov	r4,r17
   252a8:	00291600 	call	29160 <_isatty_r>
   252ac:	10004e26 	beq	r2,zero,253e8 <__smakebuf_r+0x1ac>
   252b0:	8080030b 	ldhu	r2,12(r16)
   252b4:	04c00044 	movi	r19,1
   252b8:	80c010c4 	addi	r3,r16,67
   252bc:	14c4b03a 	or	r2,r2,r19
   252c0:	8080030d 	sth	r2,12(r16)
   252c4:	80c00015 	stw	r3,0(r16)
   252c8:	80c00415 	stw	r3,16(r16)
   252cc:	84c00515 	stw	r19,20(r16)
   252d0:	04810004 	movi	r18,1024
   252d4:	00000706 	br	252f4 <__smakebuf_r+0xb8>
   252d8:	8080030b 	ldhu	r2,12(r16)
   252dc:	10c0200c 	andi	r3,r2,128
   252e0:	18001f1e 	bne	r3,zero,25360 <__smakebuf_r+0x124>
   252e4:	04810004 	movi	r18,1024
   252e8:	10820014 	ori	r2,r2,2048
   252ec:	8080030d 	sth	r2,12(r16)
   252f0:	0027883a 	mov	r19,zero
   252f4:	8809883a 	mov	r4,r17
   252f8:	900b883a 	mov	r5,r18
   252fc:	00253f40 	call	253f4 <_malloc_r>
   25300:	10002e26 	beq	r2,zero,253bc <__smakebuf_r+0x180>
   25304:	80c0030b 	ldhu	r3,12(r16)
   25308:	010000b4 	movhi	r4,2
   2530c:	2110e904 	addi	r4,r4,17316
   25310:	89000f15 	stw	r4,60(r17)
   25314:	18c02014 	ori	r3,r3,128
   25318:	80c0030d 	sth	r3,12(r16)
   2531c:	80800015 	stw	r2,0(r16)
   25320:	80800415 	stw	r2,16(r16)
   25324:	84800515 	stw	r18,20(r16)
   25328:	98001c1e 	bne	r19,zero,2539c <__smakebuf_r+0x160>
   2532c:	dfc01317 	ldw	ra,76(sp)
   25330:	dcc01217 	ldw	r19,72(sp)
   25334:	dc801117 	ldw	r18,68(sp)
   25338:	dc401017 	ldw	r17,64(sp)
   2533c:	dc000f17 	ldw	r16,60(sp)
   25340:	dec01404 	addi	sp,sp,80
   25344:	f800283a 	ret
   25348:	288010c4 	addi	r2,r5,67
   2534c:	28800015 	stw	r2,0(r5)
   25350:	28800415 	stw	r2,16(r5)
   25354:	00800044 	movi	r2,1
   25358:	28800515 	stw	r2,20(r5)
   2535c:	f800283a 	ret
   25360:	04801004 	movi	r18,64
   25364:	003fe006 	br	252e8 <_gp+0xfffeaf1c>
   25368:	81000a17 	ldw	r4,40(r16)
   2536c:	00c000b4 	movhi	r3,2
   25370:	18ddc204 	addi	r3,r3,30472
   25374:	20ffc51e 	bne	r4,r3,2528c <_gp+0xfffeaec0>
   25378:	80c0030b 	ldhu	r3,12(r16)
   2537c:	01010004 	movi	r4,1024
   25380:	81001315 	stw	r4,76(r16)
   25384:	1906b03a 	or	r3,r3,r4
   25388:	80c0030d 	sth	r3,12(r16)
   2538c:	003fc206 	br	25298 <_gp+0xfffeaecc>
   25390:	0027883a 	mov	r19,zero
   25394:	04810004 	movi	r18,1024
   25398:	003fd606 	br	252f4 <_gp+0xfffeaf28>
   2539c:	8140038f 	ldh	r5,14(r16)
   253a0:	8809883a 	mov	r4,r17
   253a4:	00291600 	call	29160 <_isatty_r>
   253a8:	103fe026 	beq	r2,zero,2532c <_gp+0xfffeaf60>
   253ac:	8080030b 	ldhu	r2,12(r16)
   253b0:	10800054 	ori	r2,r2,1
   253b4:	8080030d 	sth	r2,12(r16)
   253b8:	003fdc06 	br	2532c <_gp+0xfffeaf60>
   253bc:	8080030b 	ldhu	r2,12(r16)
   253c0:	10c0800c 	andi	r3,r2,512
   253c4:	183fd91e 	bne	r3,zero,2532c <_gp+0xfffeaf60>
   253c8:	10800094 	ori	r2,r2,2
   253cc:	80c010c4 	addi	r3,r16,67
   253d0:	8080030d 	sth	r2,12(r16)
   253d4:	00800044 	movi	r2,1
   253d8:	80c00015 	stw	r3,0(r16)
   253dc:	80c00415 	stw	r3,16(r16)
   253e0:	80800515 	stw	r2,20(r16)
   253e4:	003fd106 	br	2532c <_gp+0xfffeaf60>
   253e8:	04c00044 	movi	r19,1
   253ec:	04810004 	movi	r18,1024
   253f0:	003fc006 	br	252f4 <_gp+0xfffeaf28>

000253f4 <_malloc_r>:
   253f4:	defff504 	addi	sp,sp,-44
   253f8:	dc800315 	stw	r18,12(sp)
   253fc:	dfc00a15 	stw	ra,40(sp)
   25400:	df000915 	stw	fp,36(sp)
   25404:	ddc00815 	stw	r23,32(sp)
   25408:	dd800715 	stw	r22,28(sp)
   2540c:	dd400615 	stw	r21,24(sp)
   25410:	dd000515 	stw	r20,20(sp)
   25414:	dcc00415 	stw	r19,16(sp)
   25418:	dc400215 	stw	r17,8(sp)
   2541c:	dc000115 	stw	r16,4(sp)
   25420:	288002c4 	addi	r2,r5,11
   25424:	00c00584 	movi	r3,22
   25428:	2025883a 	mov	r18,r4
   2542c:	18802a2e 	bgeu	r3,r2,254d8 <_malloc_r+0xe4>
   25430:	047ffe04 	movi	r17,-8
   25434:	1462703a 	and	r17,r2,r17
   25438:	88009e16 	blt	r17,zero,256b4 <_malloc_r+0x2c0>
   2543c:	89409d36 	bltu	r17,r5,256b4 <_malloc_r+0x2c0>
   25440:	002ce180 	call	2ce18 <__malloc_lock>
   25444:	00807dc4 	movi	r2,503
   25448:	14402736 	bltu	r2,r17,254e8 <_malloc_r+0xf4>
   2544c:	8806d0fa 	srli	r3,r17,3
   25450:	04c000f4 	movhi	r19,3
   25454:	9cc32804 	addi	r19,r19,3232
   25458:	18c5883a 	add	r2,r3,r3
   2545c:	1085883a 	add	r2,r2,r2
   25460:	1085883a 	add	r2,r2,r2
   25464:	9885883a 	add	r2,r19,r2
   25468:	14000317 	ldw	r16,12(r2)
   2546c:	80814a26 	beq	r16,r2,25998 <_malloc_r+0x5a4>
   25470:	80c00117 	ldw	r3,4(r16)
   25474:	81000317 	ldw	r4,12(r16)
   25478:	00bfff04 	movi	r2,-4
   2547c:	1884703a 	and	r2,r3,r2
   25480:	81400217 	ldw	r5,8(r16)
   25484:	8085883a 	add	r2,r16,r2
   25488:	10c00117 	ldw	r3,4(r2)
   2548c:	29000315 	stw	r4,12(r5)
   25490:	21400215 	stw	r5,8(r4)
   25494:	18c00054 	ori	r3,r3,1
   25498:	10c00115 	stw	r3,4(r2)
   2549c:	9009883a 	mov	r4,r18
   254a0:	002ce380 	call	2ce38 <__malloc_unlock>
   254a4:	80800204 	addi	r2,r16,8
   254a8:	dfc00a17 	ldw	ra,40(sp)
   254ac:	df000917 	ldw	fp,36(sp)
   254b0:	ddc00817 	ldw	r23,32(sp)
   254b4:	dd800717 	ldw	r22,28(sp)
   254b8:	dd400617 	ldw	r21,24(sp)
   254bc:	dd000517 	ldw	r20,20(sp)
   254c0:	dcc00417 	ldw	r19,16(sp)
   254c4:	dc800317 	ldw	r18,12(sp)
   254c8:	dc400217 	ldw	r17,8(sp)
   254cc:	dc000117 	ldw	r16,4(sp)
   254d0:	dec00b04 	addi	sp,sp,44
   254d4:	f800283a 	ret
   254d8:	04400404 	movi	r17,16
   254dc:	89407536 	bltu	r17,r5,256b4 <_malloc_r+0x2c0>
   254e0:	002ce180 	call	2ce18 <__malloc_lock>
   254e4:	003fd906 	br	2544c <_gp+0xfffeb080>
   254e8:	8806d27a 	srli	r3,r17,9
   254ec:	18007526 	beq	r3,zero,256c4 <_malloc_r+0x2d0>
   254f0:	00800104 	movi	r2,4
   254f4:	10c0ef36 	bltu	r2,r3,258b4 <_malloc_r+0x4c0>
   254f8:	8806d1ba 	srli	r3,r17,6
   254fc:	19c00e04 	addi	r7,r3,56
   25500:	39cb883a 	add	r5,r7,r7
   25504:	04c000f4 	movhi	r19,3
   25508:	294b883a 	add	r5,r5,r5
   2550c:	9cc32804 	addi	r19,r19,3232
   25510:	294b883a 	add	r5,r5,r5
   25514:	994b883a 	add	r5,r19,r5
   25518:	2c000317 	ldw	r16,12(r5)
   2551c:	2c000e26 	beq	r5,r16,25558 <_malloc_r+0x164>
   25520:	80800117 	ldw	r2,4(r16)
   25524:	01bfff04 	movi	r6,-4
   25528:	010003c4 	movi	r4,15
   2552c:	1184703a 	and	r2,r2,r6
   25530:	1447c83a 	sub	r3,r2,r17
   25534:	20c00716 	blt	r4,r3,25554 <_malloc_r+0x160>
   25538:	1800650e 	bge	r3,zero,256d0 <_malloc_r+0x2dc>
   2553c:	84000317 	ldw	r16,12(r16)
   25540:	2c000526 	beq	r5,r16,25558 <_malloc_r+0x164>
   25544:	80800117 	ldw	r2,4(r16)
   25548:	1184703a 	and	r2,r2,r6
   2554c:	1447c83a 	sub	r3,r2,r17
   25550:	20fff90e 	bge	r4,r3,25538 <_gp+0xfffeb16c>
   25554:	39ffffc4 	addi	r7,r7,-1
   25558:	38c00044 	addi	r3,r7,1
   2555c:	018000f4 	movhi	r6,3
   25560:	9c000417 	ldw	r16,16(r19)
   25564:	31832804 	addi	r6,r6,3232
   25568:	32400204 	addi	r9,r6,8
   2556c:	82410326 	beq	r16,r9,2597c <_malloc_r+0x588>
   25570:	81000117 	ldw	r4,4(r16)
   25574:	00bfff04 	movi	r2,-4
   25578:	208e703a 	and	r7,r4,r2
   2557c:	3c45c83a 	sub	r2,r7,r17
   25580:	010003c4 	movi	r4,15
   25584:	2080ee16 	blt	r4,r2,25940 <_malloc_r+0x54c>
   25588:	32400515 	stw	r9,20(r6)
   2558c:	32400415 	stw	r9,16(r6)
   25590:	1000510e 	bge	r2,zero,256d8 <_malloc_r+0x2e4>
   25594:	00807fc4 	movi	r2,511
   25598:	11c0ce36 	bltu	r2,r7,258d4 <_malloc_r+0x4e0>
   2559c:	3808d0fa 	srli	r4,r7,3
   255a0:	01c00044 	movi	r7,1
   255a4:	30800117 	ldw	r2,4(r6)
   255a8:	210b883a 	add	r5,r4,r4
   255ac:	294b883a 	add	r5,r5,r5
   255b0:	2009d0ba 	srai	r4,r4,2
   255b4:	294b883a 	add	r5,r5,r5
   255b8:	298b883a 	add	r5,r5,r6
   255bc:	2a000217 	ldw	r8,8(r5)
   255c0:	3908983a 	sll	r4,r7,r4
   255c4:	81400315 	stw	r5,12(r16)
   255c8:	82000215 	stw	r8,8(r16)
   255cc:	2088b03a 	or	r4,r4,r2
   255d0:	2c000215 	stw	r16,8(r5)
   255d4:	31000115 	stw	r4,4(r6)
   255d8:	44000315 	stw	r16,12(r8)
   255dc:	1805d0ba 	srai	r2,r3,2
   255e0:	01400044 	movi	r5,1
   255e4:	288a983a 	sll	r5,r5,r2
   255e8:	21404336 	bltu	r4,r5,256f8 <_malloc_r+0x304>
   255ec:	2144703a 	and	r2,r4,r5
   255f0:	10000a1e 	bne	r2,zero,2561c <_malloc_r+0x228>
   255f4:	00bfff04 	movi	r2,-4
   255f8:	294b883a 	add	r5,r5,r5
   255fc:	1886703a 	and	r3,r3,r2
   25600:	2144703a 	and	r2,r4,r5
   25604:	18c00104 	addi	r3,r3,4
   25608:	1000041e 	bne	r2,zero,2561c <_malloc_r+0x228>
   2560c:	294b883a 	add	r5,r5,r5
   25610:	2144703a 	and	r2,r4,r5
   25614:	18c00104 	addi	r3,r3,4
   25618:	103ffc26 	beq	r2,zero,2560c <_gp+0xfffeb240>
   2561c:	023fff04 	movi	r8,-4
   25620:	01c003c4 	movi	r7,15
   25624:	18c5883a 	add	r2,r3,r3
   25628:	1085883a 	add	r2,r2,r2
   2562c:	1085883a 	add	r2,r2,r2
   25630:	9895883a 	add	r10,r19,r2
   25634:	52c00304 	addi	r11,r10,12
   25638:	1819883a 	mov	r12,r3
   2563c:	5c000017 	ldw	r16,0(r11)
   25640:	59bffd04 	addi	r6,r11,-12
   25644:	8180041e 	bne	r16,r6,25658 <_malloc_r+0x264>
   25648:	0000ce06 	br	25984 <_malloc_r+0x590>
   2564c:	2000d70e 	bge	r4,zero,259ac <_malloc_r+0x5b8>
   25650:	84000317 	ldw	r16,12(r16)
   25654:	8180cb26 	beq	r16,r6,25984 <_malloc_r+0x590>
   25658:	80800117 	ldw	r2,4(r16)
   2565c:	1204703a 	and	r2,r2,r8
   25660:	1449c83a 	sub	r4,r2,r17
   25664:	393ff90e 	bge	r7,r4,2564c <_gp+0xfffeb280>
   25668:	80800317 	ldw	r2,12(r16)
   2566c:	80c00217 	ldw	r3,8(r16)
   25670:	89400054 	ori	r5,r17,1
   25674:	81400115 	stw	r5,4(r16)
   25678:	18800315 	stw	r2,12(r3)
   2567c:	10c00215 	stw	r3,8(r2)
   25680:	8463883a 	add	r17,r16,r17
   25684:	9c400515 	stw	r17,20(r19)
   25688:	9c400415 	stw	r17,16(r19)
   2568c:	20800054 	ori	r2,r4,1
   25690:	88800115 	stw	r2,4(r17)
   25694:	8a400315 	stw	r9,12(r17)
   25698:	8a400215 	stw	r9,8(r17)
   2569c:	8923883a 	add	r17,r17,r4
   256a0:	89000015 	stw	r4,0(r17)
   256a4:	9009883a 	mov	r4,r18
   256a8:	002ce380 	call	2ce38 <__malloc_unlock>
   256ac:	80800204 	addi	r2,r16,8
   256b0:	003f7d06 	br	254a8 <_gp+0xfffeb0dc>
   256b4:	00800304 	movi	r2,12
   256b8:	90800015 	stw	r2,0(r18)
   256bc:	0005883a 	mov	r2,zero
   256c0:	003f7906 	br	254a8 <_gp+0xfffeb0dc>
   256c4:	01401f84 	movi	r5,126
   256c8:	01c00fc4 	movi	r7,63
   256cc:	003f8d06 	br	25504 <_gp+0xfffeb138>
   256d0:	81000317 	ldw	r4,12(r16)
   256d4:	003f6a06 	br	25480 <_gp+0xfffeb0b4>
   256d8:	81c5883a 	add	r2,r16,r7
   256dc:	10c00117 	ldw	r3,4(r2)
   256e0:	9009883a 	mov	r4,r18
   256e4:	18c00054 	ori	r3,r3,1
   256e8:	10c00115 	stw	r3,4(r2)
   256ec:	002ce380 	call	2ce38 <__malloc_unlock>
   256f0:	80800204 	addi	r2,r16,8
   256f4:	003f6c06 	br	254a8 <_gp+0xfffeb0dc>
   256f8:	9c000217 	ldw	r16,8(r19)
   256fc:	00bfff04 	movi	r2,-4
   25700:	85800117 	ldw	r22,4(r16)
   25704:	b0ac703a 	and	r22,r22,r2
   25708:	b4400336 	bltu	r22,r17,25718 <_malloc_r+0x324>
   2570c:	b445c83a 	sub	r2,r22,r17
   25710:	00c003c4 	movi	r3,15
   25714:	18805d16 	blt	r3,r2,2588c <_malloc_r+0x498>
   25718:	05c000f4 	movhi	r23,3
   2571c:	008000f4 	movhi	r2,3
   25720:	bdc8f604 	addi	r23,r23,9176
   25724:	10900e04 	addi	r2,r2,16440
   25728:	15400017 	ldw	r21,0(r2)
   2572c:	b9000017 	ldw	r4,0(r23)
   25730:	00ffffc4 	movi	r3,-1
   25734:	858d883a 	add	r6,r16,r22
   25738:	8d6b883a 	add	r21,r17,r21
   2573c:	20c0e426 	beq	r4,r3,25ad0 <_malloc_r+0x6dc>
   25740:	ad4403c4 	addi	r21,r21,4111
   25744:	00fc0004 	movi	r3,-4096
   25748:	a8ea703a 	and	r21,r21,r3
   2574c:	9009883a 	mov	r4,r18
   25750:	a80b883a 	mov	r5,r21
   25754:	d9800015 	stw	r6,0(sp)
   25758:	00275dc0 	call	275dc <_sbrk_r>
   2575c:	00ffffc4 	movi	r3,-1
   25760:	1029883a 	mov	r20,r2
   25764:	d9800017 	ldw	r6,0(sp)
   25768:	10c0a426 	beq	r2,r3,259fc <_malloc_r+0x608>
   2576c:	1180a236 	bltu	r2,r6,259f8 <_malloc_r+0x604>
   25770:	070000f4 	movhi	fp,3
   25774:	e7101704 	addi	fp,fp,16476
   25778:	e0c00017 	ldw	r3,0(fp)
   2577c:	a8c7883a 	add	r3,r21,r3
   25780:	e0c00015 	stw	r3,0(fp)
   25784:	3500da26 	beq	r6,r20,25af0 <_malloc_r+0x6fc>
   25788:	b9000017 	ldw	r4,0(r23)
   2578c:	00bfffc4 	movi	r2,-1
   25790:	2080e426 	beq	r4,r2,25b24 <_malloc_r+0x730>
   25794:	a185c83a 	sub	r2,r20,r6
   25798:	1885883a 	add	r2,r3,r2
   2579c:	e0800015 	stw	r2,0(fp)
   257a0:	a0c001cc 	andi	r3,r20,7
   257a4:	1800b526 	beq	r3,zero,25a7c <_malloc_r+0x688>
   257a8:	a0e9c83a 	sub	r20,r20,r3
   257ac:	00840204 	movi	r2,4104
   257b0:	a5000204 	addi	r20,r20,8
   257b4:	10c7c83a 	sub	r3,r2,r3
   257b8:	a545883a 	add	r2,r20,r21
   257bc:	1083ffcc 	andi	r2,r2,4095
   257c0:	18abc83a 	sub	r21,r3,r2
   257c4:	9009883a 	mov	r4,r18
   257c8:	a80b883a 	mov	r5,r21
   257cc:	00275dc0 	call	275dc <_sbrk_r>
   257d0:	00ffffc4 	movi	r3,-1
   257d4:	10c0d026 	beq	r2,r3,25b18 <_malloc_r+0x724>
   257d8:	1507c83a 	sub	r3,r2,r20
   257dc:	a8c7883a 	add	r3,r21,r3
   257e0:	18c00054 	ori	r3,r3,1
   257e4:	e0800017 	ldw	r2,0(fp)
   257e8:	9d000215 	stw	r20,8(r19)
   257ec:	a0c00115 	stw	r3,4(r20)
   257f0:	a887883a 	add	r3,r21,r2
   257f4:	e0c00015 	stw	r3,0(fp)
   257f8:	84c00e26 	beq	r16,r19,25834 <_malloc_r+0x440>
   257fc:	018003c4 	movi	r6,15
   25800:	3580a02e 	bgeu	r6,r22,25a84 <_malloc_r+0x690>
   25804:	81400117 	ldw	r5,4(r16)
   25808:	013ffe04 	movi	r4,-8
   2580c:	b0bffd04 	addi	r2,r22,-12
   25810:	1104703a 	and	r2,r2,r4
   25814:	2900004c 	andi	r4,r5,1
   25818:	1108b03a 	or	r4,r2,r4
   2581c:	81000115 	stw	r4,4(r16)
   25820:	01400144 	movi	r5,5
   25824:	8089883a 	add	r4,r16,r2
   25828:	21400115 	stw	r5,4(r4)
   2582c:	21400215 	stw	r5,8(r4)
   25830:	3080c036 	bltu	r6,r2,25b34 <_malloc_r+0x740>
   25834:	008000f4 	movhi	r2,3
   25838:	10900d04 	addi	r2,r2,16436
   2583c:	11000017 	ldw	r4,0(r2)
   25840:	20c0012e 	bgeu	r4,r3,25848 <_malloc_r+0x454>
   25844:	10c00015 	stw	r3,0(r2)
   25848:	008000f4 	movhi	r2,3
   2584c:	10900c04 	addi	r2,r2,16432
   25850:	11000017 	ldw	r4,0(r2)
   25854:	9c000217 	ldw	r16,8(r19)
   25858:	20c0012e 	bgeu	r4,r3,25860 <_malloc_r+0x46c>
   2585c:	10c00015 	stw	r3,0(r2)
   25860:	80c00117 	ldw	r3,4(r16)
   25864:	00bfff04 	movi	r2,-4
   25868:	1886703a 	and	r3,r3,r2
   2586c:	1c45c83a 	sub	r2,r3,r17
   25870:	1c400236 	bltu	r3,r17,2587c <_malloc_r+0x488>
   25874:	00c003c4 	movi	r3,15
   25878:	18800416 	blt	r3,r2,2588c <_malloc_r+0x498>
   2587c:	9009883a 	mov	r4,r18
   25880:	002ce380 	call	2ce38 <__malloc_unlock>
   25884:	0005883a 	mov	r2,zero
   25888:	003f0706 	br	254a8 <_gp+0xfffeb0dc>
   2588c:	88c00054 	ori	r3,r17,1
   25890:	80c00115 	stw	r3,4(r16)
   25894:	8463883a 	add	r17,r16,r17
   25898:	10800054 	ori	r2,r2,1
   2589c:	9c400215 	stw	r17,8(r19)
   258a0:	88800115 	stw	r2,4(r17)
   258a4:	9009883a 	mov	r4,r18
   258a8:	002ce380 	call	2ce38 <__malloc_unlock>
   258ac:	80800204 	addi	r2,r16,8
   258b0:	003efd06 	br	254a8 <_gp+0xfffeb0dc>
   258b4:	00800504 	movi	r2,20
   258b8:	10c0482e 	bgeu	r2,r3,259dc <_malloc_r+0x5e8>
   258bc:	00801504 	movi	r2,84
   258c0:	10c06836 	bltu	r2,r3,25a64 <_malloc_r+0x670>
   258c4:	8806d33a 	srli	r3,r17,12
   258c8:	19c01b84 	addi	r7,r3,110
   258cc:	39cb883a 	add	r5,r7,r7
   258d0:	003f0c06 	br	25504 <_gp+0xfffeb138>
   258d4:	3804d27a 	srli	r2,r7,9
   258d8:	01000104 	movi	r4,4
   258dc:	2080422e 	bgeu	r4,r2,259e8 <_malloc_r+0x5f4>
   258e0:	01000504 	movi	r4,20
   258e4:	20807c36 	bltu	r4,r2,25ad8 <_malloc_r+0x6e4>
   258e8:	110016c4 	addi	r4,r2,91
   258ec:	210b883a 	add	r5,r4,r4
   258f0:	294b883a 	add	r5,r5,r5
   258f4:	294b883a 	add	r5,r5,r5
   258f8:	994b883a 	add	r5,r19,r5
   258fc:	28800217 	ldw	r2,8(r5)
   25900:	020000f4 	movhi	r8,3
   25904:	42032804 	addi	r8,r8,3232
   25908:	11406326 	beq	r2,r5,25a98 <_malloc_r+0x6a4>
   2590c:	01bfff04 	movi	r6,-4
   25910:	11000117 	ldw	r4,4(r2)
   25914:	2188703a 	and	r4,r4,r6
   25918:	3900022e 	bgeu	r7,r4,25924 <_malloc_r+0x530>
   2591c:	10800217 	ldw	r2,8(r2)
   25920:	28bffb1e 	bne	r5,r2,25910 <_gp+0xfffeb544>
   25924:	11800317 	ldw	r6,12(r2)
   25928:	99000117 	ldw	r4,4(r19)
   2592c:	81800315 	stw	r6,12(r16)
   25930:	80800215 	stw	r2,8(r16)
   25934:	34000215 	stw	r16,8(r6)
   25938:	14000315 	stw	r16,12(r2)
   2593c:	003f2706 	br	255dc <_gp+0xfffeb210>
   25940:	88c00054 	ori	r3,r17,1
   25944:	80c00115 	stw	r3,4(r16)
   25948:	8463883a 	add	r17,r16,r17
   2594c:	34400515 	stw	r17,20(r6)
   25950:	34400415 	stw	r17,16(r6)
   25954:	10c00054 	ori	r3,r2,1
   25958:	8a400315 	stw	r9,12(r17)
   2595c:	8a400215 	stw	r9,8(r17)
   25960:	88c00115 	stw	r3,4(r17)
   25964:	88a3883a 	add	r17,r17,r2
   25968:	88800015 	stw	r2,0(r17)
   2596c:	9009883a 	mov	r4,r18
   25970:	002ce380 	call	2ce38 <__malloc_unlock>
   25974:	80800204 	addi	r2,r16,8
   25978:	003ecb06 	br	254a8 <_gp+0xfffeb0dc>
   2597c:	31000117 	ldw	r4,4(r6)
   25980:	003f1606 	br	255dc <_gp+0xfffeb210>
   25984:	63000044 	addi	r12,r12,1
   25988:	608000cc 	andi	r2,r12,3
   2598c:	5ac00204 	addi	r11,r11,8
   25990:	103f2a1e 	bne	r2,zero,2563c <_gp+0xfffeb270>
   25994:	00002106 	br	25a1c <_malloc_r+0x628>
   25998:	80800204 	addi	r2,r16,8
   2599c:	84000517 	ldw	r16,20(r16)
   259a0:	143eb31e 	bne	r2,r16,25470 <_gp+0xfffeb0a4>
   259a4:	18c00084 	addi	r3,r3,2
   259a8:	003eec06 	br	2555c <_gp+0xfffeb190>
   259ac:	8085883a 	add	r2,r16,r2
   259b0:	10c00117 	ldw	r3,4(r2)
   259b4:	81000317 	ldw	r4,12(r16)
   259b8:	81400217 	ldw	r5,8(r16)
   259bc:	18c00054 	ori	r3,r3,1
   259c0:	10c00115 	stw	r3,4(r2)
   259c4:	29000315 	stw	r4,12(r5)
   259c8:	21400215 	stw	r5,8(r4)
   259cc:	9009883a 	mov	r4,r18
   259d0:	002ce380 	call	2ce38 <__malloc_unlock>
   259d4:	80800204 	addi	r2,r16,8
   259d8:	003eb306 	br	254a8 <_gp+0xfffeb0dc>
   259dc:	19c016c4 	addi	r7,r3,91
   259e0:	39cb883a 	add	r5,r7,r7
   259e4:	003ec706 	br	25504 <_gp+0xfffeb138>
   259e8:	3804d1ba 	srli	r2,r7,6
   259ec:	11000e04 	addi	r4,r2,56
   259f0:	210b883a 	add	r5,r4,r4
   259f4:	003fbe06 	br	258f0 <_gp+0xfffeb524>
   259f8:	84ff5d26 	beq	r16,r19,25770 <_gp+0xfffeb3a4>
   259fc:	9c000217 	ldw	r16,8(r19)
   25a00:	00bfff04 	movi	r2,-4
   25a04:	80c00117 	ldw	r3,4(r16)
   25a08:	1886703a 	and	r3,r3,r2
   25a0c:	003f9706 	br	2586c <_gp+0xfffeb4a0>
   25a10:	52800017 	ldw	r10,0(r10)
   25a14:	18ffffc4 	addi	r3,r3,-1
   25a18:	50805c1e 	bne	r10,r2,25b8c <_malloc_r+0x798>
   25a1c:	190000cc 	andi	r4,r3,3
   25a20:	50bffe04 	addi	r2,r10,-8
   25a24:	203ffa1e 	bne	r4,zero,25a10 <_gp+0xfffeb644>
   25a28:	98800117 	ldw	r2,4(r19)
   25a2c:	0146303a 	nor	r3,zero,r5
   25a30:	1884703a 	and	r2,r3,r2
   25a34:	98800115 	stw	r2,4(r19)
   25a38:	294b883a 	add	r5,r5,r5
   25a3c:	117f2e36 	bltu	r2,r5,256f8 <_gp+0xfffeb32c>
   25a40:	283f2d26 	beq	r5,zero,256f8 <_gp+0xfffeb32c>
   25a44:	1146703a 	and	r3,r2,r5
   25a48:	1800521e 	bne	r3,zero,25b94 <_malloc_r+0x7a0>
   25a4c:	6007883a 	mov	r3,r12
   25a50:	294b883a 	add	r5,r5,r5
   25a54:	1148703a 	and	r4,r2,r5
   25a58:	18c00104 	addi	r3,r3,4
   25a5c:	203ffc26 	beq	r4,zero,25a50 <_gp+0xfffeb684>
   25a60:	003ef006 	br	25624 <_gp+0xfffeb258>
   25a64:	00805504 	movi	r2,340
   25a68:	10c01336 	bltu	r2,r3,25ab8 <_malloc_r+0x6c4>
   25a6c:	8806d3fa 	srli	r3,r17,15
   25a70:	19c01dc4 	addi	r7,r3,119
   25a74:	39cb883a 	add	r5,r7,r7
   25a78:	003ea206 	br	25504 <_gp+0xfffeb138>
   25a7c:	00c40004 	movi	r3,4096
   25a80:	003f4d06 	br	257b8 <_gp+0xfffeb3ec>
   25a84:	00800044 	movi	r2,1
   25a88:	a0800115 	stw	r2,4(r20)
   25a8c:	a021883a 	mov	r16,r20
   25a90:	0007883a 	mov	r3,zero
   25a94:	003f7506 	br	2586c <_gp+0xfffeb4a0>
   25a98:	200bd0ba 	srai	r5,r4,2
   25a9c:	01800044 	movi	r6,1
   25aa0:	41000117 	ldw	r4,4(r8)
   25aa4:	314a983a 	sll	r5,r6,r5
   25aa8:	100d883a 	mov	r6,r2
   25aac:	2908b03a 	or	r4,r5,r4
   25ab0:	41000115 	stw	r4,4(r8)
   25ab4:	003f9d06 	br	2592c <_gp+0xfffeb560>
   25ab8:	00815504 	movi	r2,1364
   25abc:	10c01336 	bltu	r2,r3,25b0c <_malloc_r+0x718>
   25ac0:	8806d4ba 	srli	r3,r17,18
   25ac4:	19c01f04 	addi	r7,r3,124
   25ac8:	39cb883a 	add	r5,r7,r7
   25acc:	003e8d06 	br	25504 <_gp+0xfffeb138>
   25ad0:	ad400404 	addi	r21,r21,16
   25ad4:	003f1d06 	br	2574c <_gp+0xfffeb380>
   25ad8:	01001504 	movi	r4,84
   25adc:	20801c36 	bltu	r4,r2,25b50 <_malloc_r+0x75c>
   25ae0:	3804d33a 	srli	r2,r7,12
   25ae4:	11001b84 	addi	r4,r2,110
   25ae8:	210b883a 	add	r5,r4,r4
   25aec:	003f8006 	br	258f0 <_gp+0xfffeb524>
   25af0:	3083ffcc 	andi	r2,r6,4095
   25af4:	103f241e 	bne	r2,zero,25788 <_gp+0xfffeb3bc>
   25af8:	99000217 	ldw	r4,8(r19)
   25afc:	ad85883a 	add	r2,r21,r22
   25b00:	10800054 	ori	r2,r2,1
   25b04:	20800115 	stw	r2,4(r4)
   25b08:	003f4a06 	br	25834 <_gp+0xfffeb468>
   25b0c:	01403f04 	movi	r5,252
   25b10:	01c01f84 	movi	r7,126
   25b14:	003e7b06 	br	25504 <_gp+0xfffeb138>
   25b18:	00c00044 	movi	r3,1
   25b1c:	002b883a 	mov	r21,zero
   25b20:	003f3006 	br	257e4 <_gp+0xfffeb418>
   25b24:	008000f4 	movhi	r2,3
   25b28:	1088f604 	addi	r2,r2,9176
   25b2c:	15000015 	stw	r20,0(r2)
   25b30:	003f1b06 	br	257a0 <_gp+0xfffeb3d4>
   25b34:	9009883a 	mov	r4,r18
   25b38:	81400204 	addi	r5,r16,8
   25b3c:	00248580 	call	24858 <_free_r>
   25b40:	008000f4 	movhi	r2,3
   25b44:	10901704 	addi	r2,r2,16476
   25b48:	10c00017 	ldw	r3,0(r2)
   25b4c:	003f3906 	br	25834 <_gp+0xfffeb468>
   25b50:	01005504 	movi	r4,340
   25b54:	20800436 	bltu	r4,r2,25b68 <_malloc_r+0x774>
   25b58:	3804d3fa 	srli	r2,r7,15
   25b5c:	11001dc4 	addi	r4,r2,119
   25b60:	210b883a 	add	r5,r4,r4
   25b64:	003f6206 	br	258f0 <_gp+0xfffeb524>
   25b68:	01015504 	movi	r4,1364
   25b6c:	20800436 	bltu	r4,r2,25b80 <_malloc_r+0x78c>
   25b70:	3804d4ba 	srli	r2,r7,18
   25b74:	11001f04 	addi	r4,r2,124
   25b78:	210b883a 	add	r5,r4,r4
   25b7c:	003f5c06 	br	258f0 <_gp+0xfffeb524>
   25b80:	01403f04 	movi	r5,252
   25b84:	01001f84 	movi	r4,126
   25b88:	003f5906 	br	258f0 <_gp+0xfffeb524>
   25b8c:	98800117 	ldw	r2,4(r19)
   25b90:	003fa906 	br	25a38 <_gp+0xfffeb66c>
   25b94:	6007883a 	mov	r3,r12
   25b98:	003ea206 	br	25624 <_gp+0xfffeb258>

00025b9c <memchr>:
   25b9c:	208000cc 	andi	r2,r4,3
   25ba0:	280f883a 	mov	r7,r5
   25ba4:	10003526 	beq	r2,zero,25c7c <memchr+0xe0>
   25ba8:	30bfffc4 	addi	r2,r6,-1
   25bac:	30001b26 	beq	r6,zero,25c1c <memchr+0x80>
   25bb0:	21800003 	ldbu	r6,0(r4)
   25bb4:	28c03fcc 	andi	r3,r5,255
   25bb8:	30c01a26 	beq	r6,r3,25c24 <memchr+0x88>
   25bbc:	180d883a 	mov	r6,r3
   25bc0:	00000406 	br	25bd4 <memchr+0x38>
   25bc4:	10001526 	beq	r2,zero,25c1c <memchr+0x80>
   25bc8:	20c00003 	ldbu	r3,0(r4)
   25bcc:	10bfffc4 	addi	r2,r2,-1
   25bd0:	19801426 	beq	r3,r6,25c24 <memchr+0x88>
   25bd4:	21000044 	addi	r4,r4,1
   25bd8:	20c000cc 	andi	r3,r4,3
   25bdc:	183ff91e 	bne	r3,zero,25bc4 <_gp+0xfffeb7f8>
   25be0:	024000c4 	movi	r9,3
   25be4:	48801136 	bltu	r9,r2,25c2c <memchr+0x90>
   25be8:	10000c26 	beq	r2,zero,25c1c <memchr+0x80>
   25bec:	20c00003 	ldbu	r3,0(r4)
   25bf0:	29403fcc 	andi	r5,r5,255
   25bf4:	19400b26 	beq	r3,r5,25c24 <memchr+0x88>
   25bf8:	20c00044 	addi	r3,r4,1
   25bfc:	2085883a 	add	r2,r4,r2
   25c00:	39803fcc 	andi	r6,r7,255
   25c04:	00000306 	br	25c14 <memchr+0x78>
   25c08:	18c00044 	addi	r3,r3,1
   25c0c:	197fffc3 	ldbu	r5,-1(r3)
   25c10:	29800426 	beq	r5,r6,25c24 <memchr+0x88>
   25c14:	1809883a 	mov	r4,r3
   25c18:	18bffb1e 	bne	r3,r2,25c08 <_gp+0xfffeb83c>
   25c1c:	0005883a 	mov	r2,zero
   25c20:	f800283a 	ret
   25c24:	2005883a 	mov	r2,r4
   25c28:	f800283a 	ret
   25c2c:	28c03fcc 	andi	r3,r5,255
   25c30:	1810923a 	slli	r8,r3,8
   25c34:	02ffbff4 	movhi	r11,65279
   25c38:	02a02074 	movhi	r10,32897
   25c3c:	40c6b03a 	or	r3,r8,r3
   25c40:	1810943a 	slli	r8,r3,16
   25c44:	5affbfc4 	addi	r11,r11,-257
   25c48:	52a02004 	addi	r10,r10,-32640
   25c4c:	40d0b03a 	or	r8,r8,r3
   25c50:	20c00017 	ldw	r3,0(r4)
   25c54:	40c6f03a 	xor	r3,r8,r3
   25c58:	1acd883a 	add	r6,r3,r11
   25c5c:	00c6303a 	nor	r3,zero,r3
   25c60:	30c6703a 	and	r3,r6,r3
   25c64:	1a86703a 	and	r3,r3,r10
   25c68:	183fdf1e 	bne	r3,zero,25be8 <_gp+0xfffeb81c>
   25c6c:	10bfff04 	addi	r2,r2,-4
   25c70:	21000104 	addi	r4,r4,4
   25c74:	48bff636 	bltu	r9,r2,25c50 <_gp+0xfffeb884>
   25c78:	003fdb06 	br	25be8 <_gp+0xfffeb81c>
   25c7c:	3005883a 	mov	r2,r6
   25c80:	003fd706 	br	25be0 <_gp+0xfffeb814>

00025c84 <memcpy>:
   25c84:	deffff04 	addi	sp,sp,-4
   25c88:	dc000015 	stw	r16,0(sp)
   25c8c:	00c003c4 	movi	r3,15
   25c90:	2005883a 	mov	r2,r4
   25c94:	1980432e 	bgeu	r3,r6,25da4 <memcpy+0x120>
   25c98:	2146b03a 	or	r3,r4,r5
   25c9c:	18c000cc 	andi	r3,r3,3
   25ca0:	1800421e 	bne	r3,zero,25dac <memcpy+0x128>
   25ca4:	343ffc04 	addi	r16,r6,-16
   25ca8:	8020d13a 	srli	r16,r16,4
   25cac:	28c00104 	addi	r3,r5,4
   25cb0:	23400104 	addi	r13,r4,4
   25cb4:	801e913a 	slli	r15,r16,4
   25cb8:	2b000204 	addi	r12,r5,8
   25cbc:	22c00204 	addi	r11,r4,8
   25cc0:	7bc00504 	addi	r15,r15,20
   25cc4:	2a800304 	addi	r10,r5,12
   25cc8:	22400304 	addi	r9,r4,12
   25ccc:	2bdf883a 	add	r15,r5,r15
   25cd0:	2811883a 	mov	r8,r5
   25cd4:	200f883a 	mov	r7,r4
   25cd8:	41000017 	ldw	r4,0(r8)
   25cdc:	39c00404 	addi	r7,r7,16
   25ce0:	18c00404 	addi	r3,r3,16
   25ce4:	393ffc15 	stw	r4,-16(r7)
   25ce8:	1bbffc17 	ldw	r14,-16(r3)
   25cec:	6b400404 	addi	r13,r13,16
   25cf0:	5ac00404 	addi	r11,r11,16
   25cf4:	6bbffc15 	stw	r14,-16(r13)
   25cf8:	63800017 	ldw	r14,0(r12)
   25cfc:	4a400404 	addi	r9,r9,16
   25d00:	42000404 	addi	r8,r8,16
   25d04:	5bbffc15 	stw	r14,-16(r11)
   25d08:	53800017 	ldw	r14,0(r10)
   25d0c:	63000404 	addi	r12,r12,16
   25d10:	52800404 	addi	r10,r10,16
   25d14:	4bbffc15 	stw	r14,-16(r9)
   25d18:	1bffef1e 	bne	r3,r15,25cd8 <_gp+0xfffeb90c>
   25d1c:	81c00044 	addi	r7,r16,1
   25d20:	380e913a 	slli	r7,r7,4
   25d24:	310003cc 	andi	r4,r6,15
   25d28:	02c000c4 	movi	r11,3
   25d2c:	11c7883a 	add	r3,r2,r7
   25d30:	29cb883a 	add	r5,r5,r7
   25d34:	59001f2e 	bgeu	r11,r4,25db4 <memcpy+0x130>
   25d38:	1813883a 	mov	r9,r3
   25d3c:	2811883a 	mov	r8,r5
   25d40:	200f883a 	mov	r7,r4
   25d44:	42800017 	ldw	r10,0(r8)
   25d48:	4a400104 	addi	r9,r9,4
   25d4c:	39ffff04 	addi	r7,r7,-4
   25d50:	4abfff15 	stw	r10,-4(r9)
   25d54:	42000104 	addi	r8,r8,4
   25d58:	59fffa36 	bltu	r11,r7,25d44 <_gp+0xfffeb978>
   25d5c:	213fff04 	addi	r4,r4,-4
   25d60:	2008d0ba 	srli	r4,r4,2
   25d64:	318000cc 	andi	r6,r6,3
   25d68:	21000044 	addi	r4,r4,1
   25d6c:	2109883a 	add	r4,r4,r4
   25d70:	2109883a 	add	r4,r4,r4
   25d74:	1907883a 	add	r3,r3,r4
   25d78:	290b883a 	add	r5,r5,r4
   25d7c:	30000626 	beq	r6,zero,25d98 <memcpy+0x114>
   25d80:	198d883a 	add	r6,r3,r6
   25d84:	29c00003 	ldbu	r7,0(r5)
   25d88:	18c00044 	addi	r3,r3,1
   25d8c:	29400044 	addi	r5,r5,1
   25d90:	19ffffc5 	stb	r7,-1(r3)
   25d94:	19bffb1e 	bne	r3,r6,25d84 <_gp+0xfffeb9b8>
   25d98:	dc000017 	ldw	r16,0(sp)
   25d9c:	dec00104 	addi	sp,sp,4
   25da0:	f800283a 	ret
   25da4:	2007883a 	mov	r3,r4
   25da8:	003ff406 	br	25d7c <_gp+0xfffeb9b0>
   25dac:	2007883a 	mov	r3,r4
   25db0:	003ff306 	br	25d80 <_gp+0xfffeb9b4>
   25db4:	200d883a 	mov	r6,r4
   25db8:	003ff006 	br	25d7c <_gp+0xfffeb9b0>

00025dbc <memmove>:
   25dbc:	2005883a 	mov	r2,r4
   25dc0:	29000b2e 	bgeu	r5,r4,25df0 <memmove+0x34>
   25dc4:	298f883a 	add	r7,r5,r6
   25dc8:	21c0092e 	bgeu	r4,r7,25df0 <memmove+0x34>
   25dcc:	2187883a 	add	r3,r4,r6
   25dd0:	198bc83a 	sub	r5,r3,r6
   25dd4:	30004b26 	beq	r6,zero,25f04 <memmove+0x148>
   25dd8:	39ffffc4 	addi	r7,r7,-1
   25ddc:	39000003 	ldbu	r4,0(r7)
   25de0:	18ffffc4 	addi	r3,r3,-1
   25de4:	19000005 	stb	r4,0(r3)
   25de8:	197ffb1e 	bne	r3,r5,25dd8 <_gp+0xfffeba0c>
   25dec:	f800283a 	ret
   25df0:	00c003c4 	movi	r3,15
   25df4:	1980412e 	bgeu	r3,r6,25efc <memmove+0x140>
   25df8:	1146b03a 	or	r3,r2,r5
   25dfc:	18c000cc 	andi	r3,r3,3
   25e00:	1800411e 	bne	r3,zero,25f08 <memmove+0x14c>
   25e04:	33fffc04 	addi	r15,r6,-16
   25e08:	781ed13a 	srli	r15,r15,4
   25e0c:	28c00104 	addi	r3,r5,4
   25e10:	13400104 	addi	r13,r2,4
   25e14:	781c913a 	slli	r14,r15,4
   25e18:	2b000204 	addi	r12,r5,8
   25e1c:	12c00204 	addi	r11,r2,8
   25e20:	73800504 	addi	r14,r14,20
   25e24:	2a800304 	addi	r10,r5,12
   25e28:	12400304 	addi	r9,r2,12
   25e2c:	2b9d883a 	add	r14,r5,r14
   25e30:	2811883a 	mov	r8,r5
   25e34:	100f883a 	mov	r7,r2
   25e38:	41000017 	ldw	r4,0(r8)
   25e3c:	39c00404 	addi	r7,r7,16
   25e40:	18c00404 	addi	r3,r3,16
   25e44:	393ffc15 	stw	r4,-16(r7)
   25e48:	193ffc17 	ldw	r4,-16(r3)
   25e4c:	6b400404 	addi	r13,r13,16
   25e50:	5ac00404 	addi	r11,r11,16
   25e54:	693ffc15 	stw	r4,-16(r13)
   25e58:	61000017 	ldw	r4,0(r12)
   25e5c:	4a400404 	addi	r9,r9,16
   25e60:	42000404 	addi	r8,r8,16
   25e64:	593ffc15 	stw	r4,-16(r11)
   25e68:	51000017 	ldw	r4,0(r10)
   25e6c:	63000404 	addi	r12,r12,16
   25e70:	52800404 	addi	r10,r10,16
   25e74:	493ffc15 	stw	r4,-16(r9)
   25e78:	1bbfef1e 	bne	r3,r14,25e38 <_gp+0xfffeba6c>
   25e7c:	79000044 	addi	r4,r15,1
   25e80:	2008913a 	slli	r4,r4,4
   25e84:	328003cc 	andi	r10,r6,15
   25e88:	02c000c4 	movi	r11,3
   25e8c:	1107883a 	add	r3,r2,r4
   25e90:	290b883a 	add	r5,r5,r4
   25e94:	5a801e2e 	bgeu	r11,r10,25f10 <memmove+0x154>
   25e98:	1813883a 	mov	r9,r3
   25e9c:	2811883a 	mov	r8,r5
   25ea0:	500f883a 	mov	r7,r10
   25ea4:	41000017 	ldw	r4,0(r8)
   25ea8:	4a400104 	addi	r9,r9,4
   25eac:	39ffff04 	addi	r7,r7,-4
   25eb0:	493fff15 	stw	r4,-4(r9)
   25eb4:	42000104 	addi	r8,r8,4
   25eb8:	59fffa36 	bltu	r11,r7,25ea4 <_gp+0xfffebad8>
   25ebc:	513fff04 	addi	r4,r10,-4
   25ec0:	2008d0ba 	srli	r4,r4,2
   25ec4:	318000cc 	andi	r6,r6,3
   25ec8:	21000044 	addi	r4,r4,1
   25ecc:	2109883a 	add	r4,r4,r4
   25ed0:	2109883a 	add	r4,r4,r4
   25ed4:	1907883a 	add	r3,r3,r4
   25ed8:	290b883a 	add	r5,r5,r4
   25edc:	30000926 	beq	r6,zero,25f04 <memmove+0x148>
   25ee0:	198d883a 	add	r6,r3,r6
   25ee4:	29c00003 	ldbu	r7,0(r5)
   25ee8:	18c00044 	addi	r3,r3,1
   25eec:	29400044 	addi	r5,r5,1
   25ef0:	19ffffc5 	stb	r7,-1(r3)
   25ef4:	19bffb1e 	bne	r3,r6,25ee4 <_gp+0xfffebb18>
   25ef8:	f800283a 	ret
   25efc:	1007883a 	mov	r3,r2
   25f00:	003ff606 	br	25edc <_gp+0xfffebb10>
   25f04:	f800283a 	ret
   25f08:	1007883a 	mov	r3,r2
   25f0c:	003ff406 	br	25ee0 <_gp+0xfffebb14>
   25f10:	500d883a 	mov	r6,r10
   25f14:	003ff106 	br	25edc <_gp+0xfffebb10>

00025f18 <memset>:
   25f18:	20c000cc 	andi	r3,r4,3
   25f1c:	2005883a 	mov	r2,r4
   25f20:	18004326 	beq	r3,zero,26030 <memset+0x118>
   25f24:	31ffffc4 	addi	r7,r6,-1
   25f28:	30004026 	beq	r6,zero,2602c <memset+0x114>
   25f2c:	2813883a 	mov	r9,r5
   25f30:	200d883a 	mov	r6,r4
   25f34:	2007883a 	mov	r3,r4
   25f38:	00000406 	br	25f4c <memset+0x34>
   25f3c:	3a3fffc4 	addi	r8,r7,-1
   25f40:	31800044 	addi	r6,r6,1
   25f44:	38003926 	beq	r7,zero,2602c <memset+0x114>
   25f48:	400f883a 	mov	r7,r8
   25f4c:	18c00044 	addi	r3,r3,1
   25f50:	32400005 	stb	r9,0(r6)
   25f54:	1a0000cc 	andi	r8,r3,3
   25f58:	403ff81e 	bne	r8,zero,25f3c <_gp+0xfffebb70>
   25f5c:	010000c4 	movi	r4,3
   25f60:	21c02d2e 	bgeu	r4,r7,26018 <memset+0x100>
   25f64:	29803fcc 	andi	r6,r5,255
   25f68:	3008923a 	slli	r4,r6,8
   25f6c:	218cb03a 	or	r6,r4,r6
   25f70:	3008943a 	slli	r4,r6,16
   25f74:	218cb03a 	or	r6,r4,r6
   25f78:	010003c4 	movi	r4,15
   25f7c:	21c0182e 	bgeu	r4,r7,25fe0 <memset+0xc8>
   25f80:	3b3ffc04 	addi	r12,r7,-16
   25f84:	6018d13a 	srli	r12,r12,4
   25f88:	1a000104 	addi	r8,r3,4
   25f8c:	1ac00204 	addi	r11,r3,8
   25f90:	6008913a 	slli	r4,r12,4
   25f94:	1a800304 	addi	r10,r3,12
   25f98:	1813883a 	mov	r9,r3
   25f9c:	21000504 	addi	r4,r4,20
   25fa0:	1909883a 	add	r4,r3,r4
   25fa4:	49800015 	stw	r6,0(r9)
   25fa8:	41800015 	stw	r6,0(r8)
   25fac:	59800015 	stw	r6,0(r11)
   25fb0:	51800015 	stw	r6,0(r10)
   25fb4:	42000404 	addi	r8,r8,16
   25fb8:	4a400404 	addi	r9,r9,16
   25fbc:	5ac00404 	addi	r11,r11,16
   25fc0:	52800404 	addi	r10,r10,16
   25fc4:	413ff71e 	bne	r8,r4,25fa4 <_gp+0xfffebbd8>
   25fc8:	63000044 	addi	r12,r12,1
   25fcc:	6018913a 	slli	r12,r12,4
   25fd0:	39c003cc 	andi	r7,r7,15
   25fd4:	010000c4 	movi	r4,3
   25fd8:	1b07883a 	add	r3,r3,r12
   25fdc:	21c00e2e 	bgeu	r4,r7,26018 <memset+0x100>
   25fe0:	1813883a 	mov	r9,r3
   25fe4:	3811883a 	mov	r8,r7
   25fe8:	010000c4 	movi	r4,3
   25fec:	49800015 	stw	r6,0(r9)
   25ff0:	423fff04 	addi	r8,r8,-4
   25ff4:	4a400104 	addi	r9,r9,4
   25ff8:	223ffc36 	bltu	r4,r8,25fec <_gp+0xfffebc20>
   25ffc:	393fff04 	addi	r4,r7,-4
   26000:	2008d0ba 	srli	r4,r4,2
   26004:	39c000cc 	andi	r7,r7,3
   26008:	21000044 	addi	r4,r4,1
   2600c:	2109883a 	add	r4,r4,r4
   26010:	2109883a 	add	r4,r4,r4
   26014:	1907883a 	add	r3,r3,r4
   26018:	38000426 	beq	r7,zero,2602c <memset+0x114>
   2601c:	19cf883a 	add	r7,r3,r7
   26020:	19400005 	stb	r5,0(r3)
   26024:	18c00044 	addi	r3,r3,1
   26028:	19fffd1e 	bne	r3,r7,26020 <_gp+0xfffebc54>
   2602c:	f800283a 	ret
   26030:	2007883a 	mov	r3,r4
   26034:	300f883a 	mov	r7,r6
   26038:	003fc806 	br	25f5c <_gp+0xfffebb90>

0002603c <_Balloc>:
   2603c:	20801317 	ldw	r2,76(r4)
   26040:	defffc04 	addi	sp,sp,-16
   26044:	dc400115 	stw	r17,4(sp)
   26048:	dc000015 	stw	r16,0(sp)
   2604c:	dfc00315 	stw	ra,12(sp)
   26050:	dc800215 	stw	r18,8(sp)
   26054:	2023883a 	mov	r17,r4
   26058:	2821883a 	mov	r16,r5
   2605c:	10000f26 	beq	r2,zero,2609c <_Balloc+0x60>
   26060:	8407883a 	add	r3,r16,r16
   26064:	18c7883a 	add	r3,r3,r3
   26068:	10c7883a 	add	r3,r2,r3
   2606c:	18800017 	ldw	r2,0(r3)
   26070:	10001126 	beq	r2,zero,260b8 <_Balloc+0x7c>
   26074:	11000017 	ldw	r4,0(r2)
   26078:	19000015 	stw	r4,0(r3)
   2607c:	10000415 	stw	zero,16(r2)
   26080:	10000315 	stw	zero,12(r2)
   26084:	dfc00317 	ldw	ra,12(sp)
   26088:	dc800217 	ldw	r18,8(sp)
   2608c:	dc400117 	ldw	r17,4(sp)
   26090:	dc000017 	ldw	r16,0(sp)
   26094:	dec00404 	addi	sp,sp,16
   26098:	f800283a 	ret
   2609c:	01400104 	movi	r5,4
   260a0:	01800844 	movi	r6,33
   260a4:	0028d540 	call	28d54 <_calloc_r>
   260a8:	88801315 	stw	r2,76(r17)
   260ac:	103fec1e 	bne	r2,zero,26060 <_gp+0xfffebc94>
   260b0:	0005883a 	mov	r2,zero
   260b4:	003ff306 	br	26084 <_gp+0xfffebcb8>
   260b8:	01400044 	movi	r5,1
   260bc:	2c24983a 	sll	r18,r5,r16
   260c0:	8809883a 	mov	r4,r17
   260c4:	91800144 	addi	r6,r18,5
   260c8:	318d883a 	add	r6,r6,r6
   260cc:	318d883a 	add	r6,r6,r6
   260d0:	0028d540 	call	28d54 <_calloc_r>
   260d4:	103ff626 	beq	r2,zero,260b0 <_gp+0xfffebce4>
   260d8:	14000115 	stw	r16,4(r2)
   260dc:	14800215 	stw	r18,8(r2)
   260e0:	003fe606 	br	2607c <_gp+0xfffebcb0>

000260e4 <_Bfree>:
   260e4:	28000826 	beq	r5,zero,26108 <_Bfree+0x24>
   260e8:	28c00117 	ldw	r3,4(r5)
   260ec:	20801317 	ldw	r2,76(r4)
   260f0:	18c7883a 	add	r3,r3,r3
   260f4:	18c7883a 	add	r3,r3,r3
   260f8:	10c5883a 	add	r2,r2,r3
   260fc:	10c00017 	ldw	r3,0(r2)
   26100:	28c00015 	stw	r3,0(r5)
   26104:	11400015 	stw	r5,0(r2)
   26108:	f800283a 	ret

0002610c <__multadd>:
   2610c:	defffa04 	addi	sp,sp,-24
   26110:	dc000115 	stw	r16,4(sp)
   26114:	2c000417 	ldw	r16,16(r5)
   26118:	dc800315 	stw	r18,12(sp)
   2611c:	dc400215 	stw	r17,8(sp)
   26120:	dfc00515 	stw	ra,20(sp)
   26124:	dcc00415 	stw	r19,16(sp)
   26128:	2823883a 	mov	r17,r5
   2612c:	2025883a 	mov	r18,r4
   26130:	2a400504 	addi	r9,r5,20
   26134:	0015883a 	mov	r10,zero
   26138:	4a000017 	ldw	r8,0(r9)
   2613c:	4a400104 	addi	r9,r9,4
   26140:	52800044 	addi	r10,r10,1
   26144:	40ffffcc 	andi	r3,r8,65535
   26148:	1987383a 	mul	r3,r3,r6
   2614c:	4010d43a 	srli	r8,r8,16
   26150:	19cf883a 	add	r7,r3,r7
   26154:	4191383a 	mul	r8,r8,r6
   26158:	3816d43a 	srli	r11,r7,16
   2615c:	38ffffcc 	andi	r3,r7,65535
   26160:	5a0f883a 	add	r7,r11,r8
   26164:	3810943a 	slli	r8,r7,16
   26168:	380ed43a 	srli	r7,r7,16
   2616c:	40c7883a 	add	r3,r8,r3
   26170:	48ffff15 	stw	r3,-4(r9)
   26174:	543ff016 	blt	r10,r16,26138 <_gp+0xfffebd6c>
   26178:	38000926 	beq	r7,zero,261a0 <__multadd+0x94>
   2617c:	88800217 	ldw	r2,8(r17)
   26180:	80800f0e 	bge	r16,r2,261c0 <__multadd+0xb4>
   26184:	80800144 	addi	r2,r16,5
   26188:	1085883a 	add	r2,r2,r2
   2618c:	1085883a 	add	r2,r2,r2
   26190:	8885883a 	add	r2,r17,r2
   26194:	11c00015 	stw	r7,0(r2)
   26198:	84000044 	addi	r16,r16,1
   2619c:	8c000415 	stw	r16,16(r17)
   261a0:	8805883a 	mov	r2,r17
   261a4:	dfc00517 	ldw	ra,20(sp)
   261a8:	dcc00417 	ldw	r19,16(sp)
   261ac:	dc800317 	ldw	r18,12(sp)
   261b0:	dc400217 	ldw	r17,8(sp)
   261b4:	dc000117 	ldw	r16,4(sp)
   261b8:	dec00604 	addi	sp,sp,24
   261bc:	f800283a 	ret
   261c0:	89400117 	ldw	r5,4(r17)
   261c4:	9009883a 	mov	r4,r18
   261c8:	d9c00015 	stw	r7,0(sp)
   261cc:	29400044 	addi	r5,r5,1
   261d0:	002603c0 	call	2603c <_Balloc>
   261d4:	89800417 	ldw	r6,16(r17)
   261d8:	89400304 	addi	r5,r17,12
   261dc:	11000304 	addi	r4,r2,12
   261e0:	31800084 	addi	r6,r6,2
   261e4:	318d883a 	add	r6,r6,r6
   261e8:	318d883a 	add	r6,r6,r6
   261ec:	1027883a 	mov	r19,r2
   261f0:	0025c840 	call	25c84 <memcpy>
   261f4:	89000117 	ldw	r4,4(r17)
   261f8:	90c01317 	ldw	r3,76(r18)
   261fc:	d9c00017 	ldw	r7,0(sp)
   26200:	2109883a 	add	r4,r4,r4
   26204:	2109883a 	add	r4,r4,r4
   26208:	1907883a 	add	r3,r3,r4
   2620c:	18800017 	ldw	r2,0(r3)
   26210:	88800015 	stw	r2,0(r17)
   26214:	1c400015 	stw	r17,0(r3)
   26218:	9823883a 	mov	r17,r19
   2621c:	003fd906 	br	26184 <_gp+0xfffebdb8>

00026220 <__s2b>:
   26220:	defff904 	addi	sp,sp,-28
   26224:	dc400115 	stw	r17,4(sp)
   26228:	dc000015 	stw	r16,0(sp)
   2622c:	2023883a 	mov	r17,r4
   26230:	2821883a 	mov	r16,r5
   26234:	39000204 	addi	r4,r7,8
   26238:	01400244 	movi	r5,9
   2623c:	dcc00315 	stw	r19,12(sp)
   26240:	dc800215 	stw	r18,8(sp)
   26244:	dfc00615 	stw	ra,24(sp)
   26248:	dd400515 	stw	r21,20(sp)
   2624c:	dd000415 	stw	r20,16(sp)
   26250:	3825883a 	mov	r18,r7
   26254:	3027883a 	mov	r19,r6
   26258:	002a1980 	call	2a198 <__divsi3>
   2625c:	00c00044 	movi	r3,1
   26260:	000b883a 	mov	r5,zero
   26264:	1880030e 	bge	r3,r2,26274 <__s2b+0x54>
   26268:	18c7883a 	add	r3,r3,r3
   2626c:	29400044 	addi	r5,r5,1
   26270:	18bffd16 	blt	r3,r2,26268 <_gp+0xfffebe9c>
   26274:	8809883a 	mov	r4,r17
   26278:	002603c0 	call	2603c <_Balloc>
   2627c:	d8c00717 	ldw	r3,28(sp)
   26280:	10c00515 	stw	r3,20(r2)
   26284:	00c00044 	movi	r3,1
   26288:	10c00415 	stw	r3,16(r2)
   2628c:	00c00244 	movi	r3,9
   26290:	1cc0210e 	bge	r3,r19,26318 <__s2b+0xf8>
   26294:	80eb883a 	add	r21,r16,r3
   26298:	a829883a 	mov	r20,r21
   2629c:	84e1883a 	add	r16,r16,r19
   262a0:	a1c00007 	ldb	r7,0(r20)
   262a4:	8809883a 	mov	r4,r17
   262a8:	a5000044 	addi	r20,r20,1
   262ac:	100b883a 	mov	r5,r2
   262b0:	01800284 	movi	r6,10
   262b4:	39fff404 	addi	r7,r7,-48
   262b8:	002610c0 	call	2610c <__multadd>
   262bc:	a43ff81e 	bne	r20,r16,262a0 <_gp+0xfffebed4>
   262c0:	ace1883a 	add	r16,r21,r19
   262c4:	843ffe04 	addi	r16,r16,-8
   262c8:	9c800a0e 	bge	r19,r18,262f4 <__s2b+0xd4>
   262cc:	94e5c83a 	sub	r18,r18,r19
   262d0:	84a5883a 	add	r18,r16,r18
   262d4:	81c00007 	ldb	r7,0(r16)
   262d8:	8809883a 	mov	r4,r17
   262dc:	84000044 	addi	r16,r16,1
   262e0:	100b883a 	mov	r5,r2
   262e4:	01800284 	movi	r6,10
   262e8:	39fff404 	addi	r7,r7,-48
   262ec:	002610c0 	call	2610c <__multadd>
   262f0:	84bff81e 	bne	r16,r18,262d4 <_gp+0xfffebf08>
   262f4:	dfc00617 	ldw	ra,24(sp)
   262f8:	dd400517 	ldw	r21,20(sp)
   262fc:	dd000417 	ldw	r20,16(sp)
   26300:	dcc00317 	ldw	r19,12(sp)
   26304:	dc800217 	ldw	r18,8(sp)
   26308:	dc400117 	ldw	r17,4(sp)
   2630c:	dc000017 	ldw	r16,0(sp)
   26310:	dec00704 	addi	sp,sp,28
   26314:	f800283a 	ret
   26318:	84000284 	addi	r16,r16,10
   2631c:	1827883a 	mov	r19,r3
   26320:	003fe906 	br	262c8 <_gp+0xfffebefc>

00026324 <__hi0bits>:
   26324:	20bfffec 	andhi	r2,r4,65535
   26328:	1000141e 	bne	r2,zero,2637c <__hi0bits+0x58>
   2632c:	2008943a 	slli	r4,r4,16
   26330:	00800404 	movi	r2,16
   26334:	20ffc02c 	andhi	r3,r4,65280
   26338:	1800021e 	bne	r3,zero,26344 <__hi0bits+0x20>
   2633c:	2008923a 	slli	r4,r4,8
   26340:	10800204 	addi	r2,r2,8
   26344:	20fc002c 	andhi	r3,r4,61440
   26348:	1800021e 	bne	r3,zero,26354 <__hi0bits+0x30>
   2634c:	2008913a 	slli	r4,r4,4
   26350:	10800104 	addi	r2,r2,4
   26354:	20f0002c 	andhi	r3,r4,49152
   26358:	1800031e 	bne	r3,zero,26368 <__hi0bits+0x44>
   2635c:	2109883a 	add	r4,r4,r4
   26360:	10800084 	addi	r2,r2,2
   26364:	2109883a 	add	r4,r4,r4
   26368:	20000316 	blt	r4,zero,26378 <__hi0bits+0x54>
   2636c:	2110002c 	andhi	r4,r4,16384
   26370:	2000041e 	bne	r4,zero,26384 <__hi0bits+0x60>
   26374:	00800804 	movi	r2,32
   26378:	f800283a 	ret
   2637c:	0005883a 	mov	r2,zero
   26380:	003fec06 	br	26334 <_gp+0xfffebf68>
   26384:	10800044 	addi	r2,r2,1
   26388:	f800283a 	ret

0002638c <__lo0bits>:
   2638c:	20c00017 	ldw	r3,0(r4)
   26390:	188001cc 	andi	r2,r3,7
   26394:	10000826 	beq	r2,zero,263b8 <__lo0bits+0x2c>
   26398:	1880004c 	andi	r2,r3,1
   2639c:	1000211e 	bne	r2,zero,26424 <__lo0bits+0x98>
   263a0:	1880008c 	andi	r2,r3,2
   263a4:	1000211e 	bne	r2,zero,2642c <__lo0bits+0xa0>
   263a8:	1806d0ba 	srli	r3,r3,2
   263ac:	00800084 	movi	r2,2
   263b0:	20c00015 	stw	r3,0(r4)
   263b4:	f800283a 	ret
   263b8:	18bfffcc 	andi	r2,r3,65535
   263bc:	10001326 	beq	r2,zero,2640c <__lo0bits+0x80>
   263c0:	0005883a 	mov	r2,zero
   263c4:	19403fcc 	andi	r5,r3,255
   263c8:	2800021e 	bne	r5,zero,263d4 <__lo0bits+0x48>
   263cc:	1806d23a 	srli	r3,r3,8
   263d0:	10800204 	addi	r2,r2,8
   263d4:	194003cc 	andi	r5,r3,15
   263d8:	2800021e 	bne	r5,zero,263e4 <__lo0bits+0x58>
   263dc:	1806d13a 	srli	r3,r3,4
   263e0:	10800104 	addi	r2,r2,4
   263e4:	194000cc 	andi	r5,r3,3
   263e8:	2800021e 	bne	r5,zero,263f4 <__lo0bits+0x68>
   263ec:	1806d0ba 	srli	r3,r3,2
   263f0:	10800084 	addi	r2,r2,2
   263f4:	1940004c 	andi	r5,r3,1
   263f8:	2800081e 	bne	r5,zero,2641c <__lo0bits+0x90>
   263fc:	1806d07a 	srli	r3,r3,1
   26400:	1800051e 	bne	r3,zero,26418 <__lo0bits+0x8c>
   26404:	00800804 	movi	r2,32
   26408:	f800283a 	ret
   2640c:	1806d43a 	srli	r3,r3,16
   26410:	00800404 	movi	r2,16
   26414:	003feb06 	br	263c4 <_gp+0xfffebff8>
   26418:	10800044 	addi	r2,r2,1
   2641c:	20c00015 	stw	r3,0(r4)
   26420:	f800283a 	ret
   26424:	0005883a 	mov	r2,zero
   26428:	f800283a 	ret
   2642c:	1806d07a 	srli	r3,r3,1
   26430:	00800044 	movi	r2,1
   26434:	20c00015 	stw	r3,0(r4)
   26438:	f800283a 	ret

0002643c <__i2b>:
   2643c:	defffd04 	addi	sp,sp,-12
   26440:	dc000015 	stw	r16,0(sp)
   26444:	04000044 	movi	r16,1
   26448:	dc400115 	stw	r17,4(sp)
   2644c:	2823883a 	mov	r17,r5
   26450:	800b883a 	mov	r5,r16
   26454:	dfc00215 	stw	ra,8(sp)
   26458:	002603c0 	call	2603c <_Balloc>
   2645c:	14400515 	stw	r17,20(r2)
   26460:	14000415 	stw	r16,16(r2)
   26464:	dfc00217 	ldw	ra,8(sp)
   26468:	dc400117 	ldw	r17,4(sp)
   2646c:	dc000017 	ldw	r16,0(sp)
   26470:	dec00304 	addi	sp,sp,12
   26474:	f800283a 	ret

00026478 <__multiply>:
   26478:	defffa04 	addi	sp,sp,-24
   2647c:	dcc00315 	stw	r19,12(sp)
   26480:	dc800215 	stw	r18,8(sp)
   26484:	2cc00417 	ldw	r19,16(r5)
   26488:	34800417 	ldw	r18,16(r6)
   2648c:	dd000415 	stw	r20,16(sp)
   26490:	dc400115 	stw	r17,4(sp)
   26494:	dfc00515 	stw	ra,20(sp)
   26498:	dc000015 	stw	r16,0(sp)
   2649c:	2829883a 	mov	r20,r5
   264a0:	3023883a 	mov	r17,r6
   264a4:	9c807016 	blt	r19,r18,26668 <__multiply+0x1f0>
   264a8:	9005883a 	mov	r2,r18
   264ac:	9825883a 	mov	r18,r19
   264b0:	1027883a 	mov	r19,r2
   264b4:	a0800217 	ldw	r2,8(r20)
   264b8:	94e1883a 	add	r16,r18,r19
   264bc:	a1400117 	ldw	r5,4(r20)
   264c0:	1400010e 	bge	r2,r16,264c8 <__multiply+0x50>
   264c4:	29400044 	addi	r5,r5,1
   264c8:	002603c0 	call	2603c <_Balloc>
   264cc:	8417883a 	add	r11,r16,r16
   264d0:	13000504 	addi	r12,r2,20
   264d4:	5ad7883a 	add	r11,r11,r11
   264d8:	62d7883a 	add	r11,r12,r11
   264dc:	6007883a 	mov	r3,r12
   264e0:	62c0032e 	bgeu	r12,r11,264f0 <__multiply+0x78>
   264e4:	18000015 	stw	zero,0(r3)
   264e8:	18c00104 	addi	r3,r3,4
   264ec:	1afffd36 	bltu	r3,r11,264e4 <_gp+0xfffec118>
   264f0:	9ce7883a 	add	r19,r19,r19
   264f4:	94a5883a 	add	r18,r18,r18
   264f8:	89800504 	addi	r6,r17,20
   264fc:	9ce7883a 	add	r19,r19,r19
   26500:	a3800504 	addi	r14,r20,20
   26504:	94a5883a 	add	r18,r18,r18
   26508:	34db883a 	add	r13,r6,r19
   2650c:	7495883a 	add	r10,r14,r18
   26510:	3340422e 	bgeu	r6,r13,2661c <__multiply+0x1a4>
   26514:	34400017 	ldw	r17,0(r6)
   26518:	8cbfffcc 	andi	r18,r17,65535
   2651c:	90001b26 	beq	r18,zero,2658c <__multiply+0x114>
   26520:	6013883a 	mov	r9,r12
   26524:	7023883a 	mov	r17,r14
   26528:	0011883a 	mov	r8,zero
   2652c:	88c00017 	ldw	r3,0(r17)
   26530:	4bc00017 	ldw	r15,0(r9)
   26534:	8c400104 	addi	r17,r17,4
   26538:	19ffffcc 	andi	r7,r3,65535
   2653c:	3c8f383a 	mul	r7,r7,r18
   26540:	1808d43a 	srli	r4,r3,16
   26544:	797fffcc 	andi	r5,r15,65535
   26548:	29cb883a 	add	r5,r5,r7
   2654c:	2a0b883a 	add	r5,r5,r8
   26550:	2489383a 	mul	r4,r4,r18
   26554:	7806d43a 	srli	r3,r15,16
   26558:	2810d43a 	srli	r8,r5,16
   2655c:	297fffcc 	andi	r5,r5,65535
   26560:	1907883a 	add	r3,r3,r4
   26564:	1a07883a 	add	r3,r3,r8
   26568:	1808943a 	slli	r4,r3,16
   2656c:	480f883a 	mov	r7,r9
   26570:	1810d43a 	srli	r8,r3,16
   26574:	214ab03a 	or	r5,r4,r5
   26578:	49400015 	stw	r5,0(r9)
   2657c:	4a400104 	addi	r9,r9,4
   26580:	8abfea36 	bltu	r17,r10,2652c <_gp+0xfffec160>
   26584:	3a000115 	stw	r8,4(r7)
   26588:	34400017 	ldw	r17,0(r6)
   2658c:	8822d43a 	srli	r17,r17,16
   26590:	88001f26 	beq	r17,zero,26610 <__multiply+0x198>
   26594:	60c00017 	ldw	r3,0(r12)
   26598:	7013883a 	mov	r9,r14
   2659c:	601f883a 	mov	r15,r12
   265a0:	1811883a 	mov	r8,r3
   265a4:	6027883a 	mov	r19,r12
   265a8:	000f883a 	mov	r7,zero
   265ac:	00000106 	br	265b4 <__multiply+0x13c>
   265b0:	9027883a 	mov	r19,r18
   265b4:	4940000b 	ldhu	r5,0(r9)
   265b8:	4010d43a 	srli	r8,r8,16
   265bc:	193fffcc 	andi	r4,r3,65535
   265c0:	2c4b383a 	mul	r5,r5,r17
   265c4:	7bc00104 	addi	r15,r15,4
   265c8:	4a400104 	addi	r9,r9,4
   265cc:	2a0b883a 	add	r5,r5,r8
   265d0:	29cb883a 	add	r5,r5,r7
   265d4:	2806943a 	slli	r3,r5,16
   265d8:	9c800104 	addi	r18,r19,4
   265dc:	280ad43a 	srli	r5,r5,16
   265e0:	1908b03a 	or	r4,r3,r4
   265e4:	793fff15 	stw	r4,-4(r15)
   265e8:	48ffff17 	ldw	r3,-4(r9)
   265ec:	92000017 	ldw	r8,0(r18)
   265f0:	1806d43a 	srli	r3,r3,16
   265f4:	413fffcc 	andi	r4,r8,65535
   265f8:	1c47383a 	mul	r3,r3,r17
   265fc:	1907883a 	add	r3,r3,r4
   26600:	1947883a 	add	r3,r3,r5
   26604:	180ed43a 	srli	r7,r3,16
   26608:	4abfe936 	bltu	r9,r10,265b0 <_gp+0xfffec1e4>
   2660c:	98c00115 	stw	r3,4(r19)
   26610:	31800104 	addi	r6,r6,4
   26614:	63000104 	addi	r12,r12,4
   26618:	337fbe36 	bltu	r6,r13,26514 <_gp+0xfffec148>
   2661c:	0400090e 	bge	zero,r16,26644 <__multiply+0x1cc>
   26620:	58ffff17 	ldw	r3,-4(r11)
   26624:	5affff04 	addi	r11,r11,-4
   26628:	18000326 	beq	r3,zero,26638 <__multiply+0x1c0>
   2662c:	00000506 	br	26644 <__multiply+0x1cc>
   26630:	58c00017 	ldw	r3,0(r11)
   26634:	1800031e 	bne	r3,zero,26644 <__multiply+0x1cc>
   26638:	843fffc4 	addi	r16,r16,-1
   2663c:	5affff04 	addi	r11,r11,-4
   26640:	803ffb1e 	bne	r16,zero,26630 <_gp+0xfffec264>
   26644:	14000415 	stw	r16,16(r2)
   26648:	dfc00517 	ldw	ra,20(sp)
   2664c:	dd000417 	ldw	r20,16(sp)
   26650:	dcc00317 	ldw	r19,12(sp)
   26654:	dc800217 	ldw	r18,8(sp)
   26658:	dc400117 	ldw	r17,4(sp)
   2665c:	dc000017 	ldw	r16,0(sp)
   26660:	dec00604 	addi	sp,sp,24
   26664:	f800283a 	ret
   26668:	3029883a 	mov	r20,r6
   2666c:	2823883a 	mov	r17,r5
   26670:	003f9006 	br	264b4 <_gp+0xfffec0e8>

00026674 <__pow5mult>:
   26674:	defffa04 	addi	sp,sp,-24
   26678:	dcc00315 	stw	r19,12(sp)
   2667c:	dc800215 	stw	r18,8(sp)
   26680:	dc000015 	stw	r16,0(sp)
   26684:	dfc00515 	stw	ra,20(sp)
   26688:	dd000415 	stw	r20,16(sp)
   2668c:	dc400115 	stw	r17,4(sp)
   26690:	308000cc 	andi	r2,r6,3
   26694:	3021883a 	mov	r16,r6
   26698:	2027883a 	mov	r19,r4
   2669c:	2825883a 	mov	r18,r5
   266a0:	10002e1e 	bne	r2,zero,2675c <__pow5mult+0xe8>
   266a4:	8021d0ba 	srai	r16,r16,2
   266a8:	80001a26 	beq	r16,zero,26714 <__pow5mult+0xa0>
   266ac:	9c401217 	ldw	r17,72(r19)
   266b0:	8800061e 	bne	r17,zero,266cc <__pow5mult+0x58>
   266b4:	00003406 	br	26788 <__pow5mult+0x114>
   266b8:	8021d07a 	srai	r16,r16,1
   266bc:	80001526 	beq	r16,zero,26714 <__pow5mult+0xa0>
   266c0:	88800017 	ldw	r2,0(r17)
   266c4:	10001c26 	beq	r2,zero,26738 <__pow5mult+0xc4>
   266c8:	1023883a 	mov	r17,r2
   266cc:	80c0004c 	andi	r3,r16,1
   266d0:	183ff926 	beq	r3,zero,266b8 <_gp+0xfffec2ec>
   266d4:	900b883a 	mov	r5,r18
   266d8:	880d883a 	mov	r6,r17
   266dc:	9809883a 	mov	r4,r19
   266e0:	00264780 	call	26478 <__multiply>
   266e4:	90001b26 	beq	r18,zero,26754 <__pow5mult+0xe0>
   266e8:	91c00117 	ldw	r7,4(r18)
   266ec:	98c01317 	ldw	r3,76(r19)
   266f0:	8021d07a 	srai	r16,r16,1
   266f4:	39cf883a 	add	r7,r7,r7
   266f8:	39cf883a 	add	r7,r7,r7
   266fc:	19c7883a 	add	r3,r3,r7
   26700:	19000017 	ldw	r4,0(r3)
   26704:	91000015 	stw	r4,0(r18)
   26708:	1c800015 	stw	r18,0(r3)
   2670c:	1025883a 	mov	r18,r2
   26710:	803feb1e 	bne	r16,zero,266c0 <_gp+0xfffec2f4>
   26714:	9005883a 	mov	r2,r18
   26718:	dfc00517 	ldw	ra,20(sp)
   2671c:	dd000417 	ldw	r20,16(sp)
   26720:	dcc00317 	ldw	r19,12(sp)
   26724:	dc800217 	ldw	r18,8(sp)
   26728:	dc400117 	ldw	r17,4(sp)
   2672c:	dc000017 	ldw	r16,0(sp)
   26730:	dec00604 	addi	sp,sp,24
   26734:	f800283a 	ret
   26738:	9809883a 	mov	r4,r19
   2673c:	880b883a 	mov	r5,r17
   26740:	880d883a 	mov	r6,r17
   26744:	00264780 	call	26478 <__multiply>
   26748:	88800015 	stw	r2,0(r17)
   2674c:	10000015 	stw	zero,0(r2)
   26750:	003fdd06 	br	266c8 <_gp+0xfffec2fc>
   26754:	1025883a 	mov	r18,r2
   26758:	003fd706 	br	266b8 <_gp+0xfffec2ec>
   2675c:	10bfffc4 	addi	r2,r2,-1
   26760:	1085883a 	add	r2,r2,r2
   26764:	00c000f4 	movhi	r3,3
   26768:	18c14704 	addi	r3,r3,1308
   2676c:	1085883a 	add	r2,r2,r2
   26770:	1885883a 	add	r2,r3,r2
   26774:	11800017 	ldw	r6,0(r2)
   26778:	000f883a 	mov	r7,zero
   2677c:	002610c0 	call	2610c <__multadd>
   26780:	1025883a 	mov	r18,r2
   26784:	003fc706 	br	266a4 <_gp+0xfffec2d8>
   26788:	05000044 	movi	r20,1
   2678c:	9809883a 	mov	r4,r19
   26790:	a00b883a 	mov	r5,r20
   26794:	002603c0 	call	2603c <_Balloc>
   26798:	1023883a 	mov	r17,r2
   2679c:	00809c44 	movi	r2,625
   267a0:	88800515 	stw	r2,20(r17)
   267a4:	8d000415 	stw	r20,16(r17)
   267a8:	9c401215 	stw	r17,72(r19)
   267ac:	88000015 	stw	zero,0(r17)
   267b0:	003fc606 	br	266cc <_gp+0xfffec300>

000267b4 <__lshift>:
   267b4:	defff904 	addi	sp,sp,-28
   267b8:	dd000415 	stw	r20,16(sp)
   267bc:	dcc00315 	stw	r19,12(sp)
   267c0:	3029d17a 	srai	r20,r6,5
   267c4:	2cc00417 	ldw	r19,16(r5)
   267c8:	28800217 	ldw	r2,8(r5)
   267cc:	dd400515 	stw	r21,20(sp)
   267d0:	a4e7883a 	add	r19,r20,r19
   267d4:	dc800215 	stw	r18,8(sp)
   267d8:	dc400115 	stw	r17,4(sp)
   267dc:	dc000015 	stw	r16,0(sp)
   267e0:	dfc00615 	stw	ra,24(sp)
   267e4:	9c000044 	addi	r16,r19,1
   267e8:	2823883a 	mov	r17,r5
   267ec:	302b883a 	mov	r21,r6
   267f0:	2025883a 	mov	r18,r4
   267f4:	29400117 	ldw	r5,4(r5)
   267f8:	1400030e 	bge	r2,r16,26808 <__lshift+0x54>
   267fc:	1085883a 	add	r2,r2,r2
   26800:	29400044 	addi	r5,r5,1
   26804:	143ffd16 	blt	r2,r16,267fc <_gp+0xfffec430>
   26808:	9009883a 	mov	r4,r18
   2680c:	002603c0 	call	2603c <_Balloc>
   26810:	11c00504 	addi	r7,r2,20
   26814:	0500090e 	bge	zero,r20,2683c <__lshift+0x88>
   26818:	3811883a 	mov	r8,r7
   2681c:	0007883a 	mov	r3,zero
   26820:	40000015 	stw	zero,0(r8)
   26824:	18c00044 	addi	r3,r3,1
   26828:	42000104 	addi	r8,r8,4
   2682c:	1d3ffc1e 	bne	r3,r20,26820 <_gp+0xfffec454>
   26830:	18c7883a 	add	r3,r3,r3
   26834:	18c7883a 	add	r3,r3,r3
   26838:	38cf883a 	add	r7,r7,r3
   2683c:	89000417 	ldw	r4,16(r17)
   26840:	88c00504 	addi	r3,r17,20
   26844:	a98007cc 	andi	r6,r21,31
   26848:	2109883a 	add	r4,r4,r4
   2684c:	2109883a 	add	r4,r4,r4
   26850:	1909883a 	add	r4,r3,r4
   26854:	30002326 	beq	r6,zero,268e4 <__lshift+0x130>
   26858:	01400804 	movi	r5,32
   2685c:	298bc83a 	sub	r5,r5,r6
   26860:	0013883a 	mov	r9,zero
   26864:	1a000017 	ldw	r8,0(r3)
   26868:	3815883a 	mov	r10,r7
   2686c:	39c00104 	addi	r7,r7,4
   26870:	4190983a 	sll	r8,r8,r6
   26874:	18c00104 	addi	r3,r3,4
   26878:	4a10b03a 	or	r8,r9,r8
   2687c:	3a3fff15 	stw	r8,-4(r7)
   26880:	1a3fff17 	ldw	r8,-4(r3)
   26884:	4152d83a 	srl	r9,r8,r5
   26888:	193ff636 	bltu	r3,r4,26864 <_gp+0xfffec498>
   2688c:	52400115 	stw	r9,4(r10)
   26890:	48000126 	beq	r9,zero,26898 <__lshift+0xe4>
   26894:	9c000084 	addi	r16,r19,2
   26898:	89000117 	ldw	r4,4(r17)
   2689c:	90c01317 	ldw	r3,76(r18)
   268a0:	843fffc4 	addi	r16,r16,-1
   268a4:	2109883a 	add	r4,r4,r4
   268a8:	2109883a 	add	r4,r4,r4
   268ac:	1907883a 	add	r3,r3,r4
   268b0:	19000017 	ldw	r4,0(r3)
   268b4:	14000415 	stw	r16,16(r2)
   268b8:	89000015 	stw	r4,0(r17)
   268bc:	1c400015 	stw	r17,0(r3)
   268c0:	dfc00617 	ldw	ra,24(sp)
   268c4:	dd400517 	ldw	r21,20(sp)
   268c8:	dd000417 	ldw	r20,16(sp)
   268cc:	dcc00317 	ldw	r19,12(sp)
   268d0:	dc800217 	ldw	r18,8(sp)
   268d4:	dc400117 	ldw	r17,4(sp)
   268d8:	dc000017 	ldw	r16,0(sp)
   268dc:	dec00704 	addi	sp,sp,28
   268e0:	f800283a 	ret
   268e4:	19400017 	ldw	r5,0(r3)
   268e8:	39c00104 	addi	r7,r7,4
   268ec:	18c00104 	addi	r3,r3,4
   268f0:	397fff15 	stw	r5,-4(r7)
   268f4:	193ffb36 	bltu	r3,r4,268e4 <_gp+0xfffec518>
   268f8:	003fe706 	br	26898 <_gp+0xfffec4cc>

000268fc <__mcmp>:
   268fc:	20800417 	ldw	r2,16(r4)
   26900:	28c00417 	ldw	r3,16(r5)
   26904:	10c5c83a 	sub	r2,r2,r3
   26908:	1000111e 	bne	r2,zero,26950 <__mcmp+0x54>
   2690c:	18c7883a 	add	r3,r3,r3
   26910:	18c7883a 	add	r3,r3,r3
   26914:	21000504 	addi	r4,r4,20
   26918:	29400504 	addi	r5,r5,20
   2691c:	20c5883a 	add	r2,r4,r3
   26920:	28cb883a 	add	r5,r5,r3
   26924:	00000106 	br	2692c <__mcmp+0x30>
   26928:	20800a2e 	bgeu	r4,r2,26954 <__mcmp+0x58>
   2692c:	10bfff04 	addi	r2,r2,-4
   26930:	297fff04 	addi	r5,r5,-4
   26934:	11800017 	ldw	r6,0(r2)
   26938:	28c00017 	ldw	r3,0(r5)
   2693c:	30fffa26 	beq	r6,r3,26928 <_gp+0xfffec55c>
   26940:	30c00236 	bltu	r6,r3,2694c <__mcmp+0x50>
   26944:	00800044 	movi	r2,1
   26948:	f800283a 	ret
   2694c:	00bfffc4 	movi	r2,-1
   26950:	f800283a 	ret
   26954:	0005883a 	mov	r2,zero
   26958:	f800283a 	ret

0002695c <__mdiff>:
   2695c:	defffb04 	addi	sp,sp,-20
   26960:	dc000015 	stw	r16,0(sp)
   26964:	2821883a 	mov	r16,r5
   26968:	dcc00315 	stw	r19,12(sp)
   2696c:	300b883a 	mov	r5,r6
   26970:	2027883a 	mov	r19,r4
   26974:	8009883a 	mov	r4,r16
   26978:	dc800215 	stw	r18,8(sp)
   2697c:	dfc00415 	stw	ra,16(sp)
   26980:	dc400115 	stw	r17,4(sp)
   26984:	3025883a 	mov	r18,r6
   26988:	00268fc0 	call	268fc <__mcmp>
   2698c:	10005226 	beq	r2,zero,26ad8 <__mdiff+0x17c>
   26990:	10004c16 	blt	r2,zero,26ac4 <__mdiff+0x168>
   26994:	0023883a 	mov	r17,zero
   26998:	81400117 	ldw	r5,4(r16)
   2699c:	9809883a 	mov	r4,r19
   269a0:	002603c0 	call	2603c <_Balloc>
   269a4:	83400417 	ldw	r13,16(r16)
   269a8:	93800417 	ldw	r14,16(r18)
   269ac:	81000504 	addi	r4,r16,20
   269b0:	6b59883a 	add	r12,r13,r13
   269b4:	739d883a 	add	r14,r14,r14
   269b8:	6319883a 	add	r12,r12,r12
   269bc:	91800504 	addi	r6,r18,20
   269c0:	739d883a 	add	r14,r14,r14
   269c4:	14400315 	stw	r17,12(r2)
   269c8:	2319883a 	add	r12,r4,r12
   269cc:	339d883a 	add	r14,r6,r14
   269d0:	12400504 	addi	r9,r2,20
   269d4:	0007883a 	mov	r3,zero
   269d8:	22000017 	ldw	r8,0(r4)
   269dc:	32800017 	ldw	r10,0(r6)
   269e0:	4ac00104 	addi	r11,r9,4
   269e4:	41ffffcc 	andi	r7,r8,65535
   269e8:	38c7883a 	add	r3,r7,r3
   269ec:	51ffffcc 	andi	r7,r10,65535
   269f0:	19cfc83a 	sub	r7,r3,r7
   269f4:	4010d43a 	srli	r8,r8,16
   269f8:	5014d43a 	srli	r10,r10,16
   269fc:	3807d43a 	srai	r3,r7,16
   26a00:	39ffffcc 	andi	r7,r7,65535
   26a04:	4291c83a 	sub	r8,r8,r10
   26a08:	40c7883a 	add	r3,r8,r3
   26a0c:	1810943a 	slli	r8,r3,16
   26a10:	31800104 	addi	r6,r6,4
   26a14:	21000104 	addi	r4,r4,4
   26a18:	41ceb03a 	or	r7,r8,r7
   26a1c:	49c00015 	stw	r7,0(r9)
   26a20:	1807d43a 	srai	r3,r3,16
   26a24:	580b883a 	mov	r5,r11
   26a28:	5813883a 	mov	r9,r11
   26a2c:	33bfea36 	bltu	r6,r14,269d8 <_gp+0xfffec60c>
   26a30:	2011883a 	mov	r8,r4
   26a34:	2300152e 	bgeu	r4,r12,26a8c <__mdiff+0x130>
   26a38:	21400017 	ldw	r5,0(r4)
   26a3c:	4a400104 	addi	r9,r9,4
   26a40:	21000104 	addi	r4,r4,4
   26a44:	29ffffcc 	andi	r7,r5,65535
   26a48:	38c7883a 	add	r3,r7,r3
   26a4c:	280ad43a 	srli	r5,r5,16
   26a50:	180dd43a 	srai	r6,r3,16
   26a54:	19ffffcc 	andi	r7,r3,65535
   26a58:	3147883a 	add	r3,r6,r5
   26a5c:	180a943a 	slli	r5,r3,16
   26a60:	1807d43a 	srai	r3,r3,16
   26a64:	29ceb03a 	or	r7,r5,r7
   26a68:	49ffff15 	stw	r7,-4(r9)
   26a6c:	233ff236 	bltu	r4,r12,26a38 <_gp+0xfffec66c>
   26a70:	0206303a 	nor	r3,zero,r8
   26a74:	1b07883a 	add	r3,r3,r12
   26a78:	1806d0ba 	srli	r3,r3,2
   26a7c:	18c00044 	addi	r3,r3,1
   26a80:	18c7883a 	add	r3,r3,r3
   26a84:	18c7883a 	add	r3,r3,r3
   26a88:	58cb883a 	add	r5,r11,r3
   26a8c:	28ffff04 	addi	r3,r5,-4
   26a90:	3800041e 	bne	r7,zero,26aa4 <__mdiff+0x148>
   26a94:	18ffff04 	addi	r3,r3,-4
   26a98:	19000017 	ldw	r4,0(r3)
   26a9c:	6b7fffc4 	addi	r13,r13,-1
   26aa0:	203ffc26 	beq	r4,zero,26a94 <_gp+0xfffec6c8>
   26aa4:	13400415 	stw	r13,16(r2)
   26aa8:	dfc00417 	ldw	ra,16(sp)
   26aac:	dcc00317 	ldw	r19,12(sp)
   26ab0:	dc800217 	ldw	r18,8(sp)
   26ab4:	dc400117 	ldw	r17,4(sp)
   26ab8:	dc000017 	ldw	r16,0(sp)
   26abc:	dec00504 	addi	sp,sp,20
   26ac0:	f800283a 	ret
   26ac4:	8005883a 	mov	r2,r16
   26ac8:	04400044 	movi	r17,1
   26acc:	9021883a 	mov	r16,r18
   26ad0:	1025883a 	mov	r18,r2
   26ad4:	003fb006 	br	26998 <_gp+0xfffec5cc>
   26ad8:	9809883a 	mov	r4,r19
   26adc:	000b883a 	mov	r5,zero
   26ae0:	002603c0 	call	2603c <_Balloc>
   26ae4:	00c00044 	movi	r3,1
   26ae8:	10c00415 	stw	r3,16(r2)
   26aec:	10000515 	stw	zero,20(r2)
   26af0:	003fed06 	br	26aa8 <_gp+0xfffec6dc>

00026af4 <__ulp>:
   26af4:	295ffc2c 	andhi	r5,r5,32752
   26af8:	00bf3034 	movhi	r2,64704
   26afc:	2887883a 	add	r3,r5,r2
   26b00:	00c0020e 	bge	zero,r3,26b0c <__ulp+0x18>
   26b04:	0005883a 	mov	r2,zero
   26b08:	f800283a 	ret
   26b0c:	00c7c83a 	sub	r3,zero,r3
   26b10:	180bd53a 	srai	r5,r3,20
   26b14:	008004c4 	movi	r2,19
   26b18:	11400a0e 	bge	r2,r5,26b44 <__ulp+0x50>
   26b1c:	00800c84 	movi	r2,50
   26b20:	0007883a 	mov	r3,zero
   26b24:	11400516 	blt	r2,r5,26b3c <__ulp+0x48>
   26b28:	00800cc4 	movi	r2,51
   26b2c:	114bc83a 	sub	r5,r2,r5
   26b30:	00800044 	movi	r2,1
   26b34:	1144983a 	sll	r2,r2,r5
   26b38:	f800283a 	ret
   26b3c:	00800044 	movi	r2,1
   26b40:	f800283a 	ret
   26b44:	00800234 	movhi	r2,8
   26b48:	1147d83a 	sra	r3,r2,r5
   26b4c:	0005883a 	mov	r2,zero
   26b50:	f800283a 	ret

00026b54 <__b2d>:
   26b54:	defffa04 	addi	sp,sp,-24
   26b58:	dc000015 	stw	r16,0(sp)
   26b5c:	24000417 	ldw	r16,16(r4)
   26b60:	dc400115 	stw	r17,4(sp)
   26b64:	24400504 	addi	r17,r4,20
   26b68:	8421883a 	add	r16,r16,r16
   26b6c:	8421883a 	add	r16,r16,r16
   26b70:	8c21883a 	add	r16,r17,r16
   26b74:	dc800215 	stw	r18,8(sp)
   26b78:	84bfff17 	ldw	r18,-4(r16)
   26b7c:	dd000415 	stw	r20,16(sp)
   26b80:	dcc00315 	stw	r19,12(sp)
   26b84:	9009883a 	mov	r4,r18
   26b88:	2829883a 	mov	r20,r5
   26b8c:	dfc00515 	stw	ra,20(sp)
   26b90:	00263240 	call	26324 <__hi0bits>
   26b94:	00c00804 	movi	r3,32
   26b98:	1887c83a 	sub	r3,r3,r2
   26b9c:	a0c00015 	stw	r3,0(r20)
   26ba0:	00c00284 	movi	r3,10
   26ba4:	84ffff04 	addi	r19,r16,-4
   26ba8:	18801216 	blt	r3,r2,26bf4 <__b2d+0xa0>
   26bac:	014002c4 	movi	r5,11
   26bb0:	2889c83a 	sub	r4,r5,r2
   26bb4:	9106d83a 	srl	r3,r18,r4
   26bb8:	18cffc34 	orhi	r3,r3,16368
   26bbc:	8cc0282e 	bgeu	r17,r19,26c60 <__b2d+0x10c>
   26bc0:	817ffe17 	ldw	r5,-8(r16)
   26bc4:	290ad83a 	srl	r5,r5,r4
   26bc8:	10800544 	addi	r2,r2,21
   26bcc:	9084983a 	sll	r2,r18,r2
   26bd0:	2884b03a 	or	r2,r5,r2
   26bd4:	dfc00517 	ldw	ra,20(sp)
   26bd8:	dd000417 	ldw	r20,16(sp)
   26bdc:	dcc00317 	ldw	r19,12(sp)
   26be0:	dc800217 	ldw	r18,8(sp)
   26be4:	dc400117 	ldw	r17,4(sp)
   26be8:	dc000017 	ldw	r16,0(sp)
   26bec:	dec00604 	addi	sp,sp,24
   26bf0:	f800283a 	ret
   26bf4:	113ffd44 	addi	r4,r2,-11
   26bf8:	8cc00f2e 	bgeu	r17,r19,26c38 <__b2d+0xe4>
   26bfc:	81bffe04 	addi	r6,r16,-8
   26c00:	817ffe17 	ldw	r5,-8(r16)
   26c04:	20001326 	beq	r4,zero,26c54 <__b2d+0x100>
   26c08:	00c00ac4 	movi	r3,43
   26c0c:	1885c83a 	sub	r2,r3,r2
   26c10:	2886d83a 	srl	r3,r5,r2
   26c14:	9124983a 	sll	r18,r18,r4
   26c18:	90e4b03a 	or	r18,r18,r3
   26c1c:	90cffc34 	orhi	r3,r18,16368
   26c20:	8980112e 	bgeu	r17,r6,26c68 <__b2d+0x114>
   26c24:	81bffd17 	ldw	r6,-12(r16)
   26c28:	308cd83a 	srl	r6,r6,r2
   26c2c:	2904983a 	sll	r2,r5,r4
   26c30:	1184b03a 	or	r2,r2,r6
   26c34:	003fe706 	br	26bd4 <_gp+0xfffec808>
   26c38:	20000526 	beq	r4,zero,26c50 <__b2d+0xfc>
   26c3c:	9124983a 	sll	r18,r18,r4
   26c40:	000d883a 	mov	r6,zero
   26c44:	000b883a 	mov	r5,zero
   26c48:	90cffc34 	orhi	r3,r18,16368
   26c4c:	003ff706 	br	26c2c <_gp+0xfffec860>
   26c50:	000b883a 	mov	r5,zero
   26c54:	90cffc34 	orhi	r3,r18,16368
   26c58:	2805883a 	mov	r2,r5
   26c5c:	003fdd06 	br	26bd4 <_gp+0xfffec808>
   26c60:	000b883a 	mov	r5,zero
   26c64:	003fd806 	br	26bc8 <_gp+0xfffec7fc>
   26c68:	000d883a 	mov	r6,zero
   26c6c:	003fef06 	br	26c2c <_gp+0xfffec860>

00026c70 <__d2b>:
   26c70:	defff704 	addi	sp,sp,-36
   26c74:	dc000215 	stw	r16,8(sp)
   26c78:	3021883a 	mov	r16,r6
   26c7c:	dc400315 	stw	r17,12(sp)
   26c80:	8022907a 	slli	r17,r16,1
   26c84:	dd400715 	stw	r21,28(sp)
   26c88:	282b883a 	mov	r21,r5
   26c8c:	01400044 	movi	r5,1
   26c90:	dd000615 	stw	r20,24(sp)
   26c94:	dcc00515 	stw	r19,20(sp)
   26c98:	dc800415 	stw	r18,16(sp)
   26c9c:	dfc00815 	stw	ra,32(sp)
   26ca0:	3829883a 	mov	r20,r7
   26ca4:	dc800917 	ldw	r18,36(sp)
   26ca8:	8822d57a 	srli	r17,r17,21
   26cac:	002603c0 	call	2603c <_Balloc>
   26cb0:	1027883a 	mov	r19,r2
   26cb4:	00800434 	movhi	r2,16
   26cb8:	10bfffc4 	addi	r2,r2,-1
   26cbc:	808c703a 	and	r6,r16,r2
   26cc0:	88000126 	beq	r17,zero,26cc8 <__d2b+0x58>
   26cc4:	31800434 	orhi	r6,r6,16
   26cc8:	d9800015 	stw	r6,0(sp)
   26ccc:	a8001f26 	beq	r21,zero,26d4c <__d2b+0xdc>
   26cd0:	d9000104 	addi	r4,sp,4
   26cd4:	dd400115 	stw	r21,4(sp)
   26cd8:	002638c0 	call	2638c <__lo0bits>
   26cdc:	d8c00017 	ldw	r3,0(sp)
   26ce0:	1000291e 	bne	r2,zero,26d88 <__d2b+0x118>
   26ce4:	d9000117 	ldw	r4,4(sp)
   26ce8:	99000515 	stw	r4,20(r19)
   26cec:	1820c03a 	cmpne	r16,r3,zero
   26cf0:	84000044 	addi	r16,r16,1
   26cf4:	98c00615 	stw	r3,24(r19)
   26cf8:	9c000415 	stw	r16,16(r19)
   26cfc:	88001b1e 	bne	r17,zero,26d6c <__d2b+0xfc>
   26d00:	800690ba 	slli	r3,r16,2
   26d04:	10bef384 	addi	r2,r2,-1074
   26d08:	a0800015 	stw	r2,0(r20)
   26d0c:	98c5883a 	add	r2,r19,r3
   26d10:	11000417 	ldw	r4,16(r2)
   26d14:	8020917a 	slli	r16,r16,5
   26d18:	00263240 	call	26324 <__hi0bits>
   26d1c:	8085c83a 	sub	r2,r16,r2
   26d20:	90800015 	stw	r2,0(r18)
   26d24:	9805883a 	mov	r2,r19
   26d28:	dfc00817 	ldw	ra,32(sp)
   26d2c:	dd400717 	ldw	r21,28(sp)
   26d30:	dd000617 	ldw	r20,24(sp)
   26d34:	dcc00517 	ldw	r19,20(sp)
   26d38:	dc800417 	ldw	r18,16(sp)
   26d3c:	dc400317 	ldw	r17,12(sp)
   26d40:	dc000217 	ldw	r16,8(sp)
   26d44:	dec00904 	addi	sp,sp,36
   26d48:	f800283a 	ret
   26d4c:	d809883a 	mov	r4,sp
   26d50:	002638c0 	call	2638c <__lo0bits>
   26d54:	d8c00017 	ldw	r3,0(sp)
   26d58:	04000044 	movi	r16,1
   26d5c:	9c000415 	stw	r16,16(r19)
   26d60:	98c00515 	stw	r3,20(r19)
   26d64:	10800804 	addi	r2,r2,32
   26d68:	883fe526 	beq	r17,zero,26d00 <_gp+0xfffec934>
   26d6c:	8c7ef344 	addi	r17,r17,-1075
   26d70:	88a3883a 	add	r17,r17,r2
   26d74:	00c00d44 	movi	r3,53
   26d78:	a4400015 	stw	r17,0(r20)
   26d7c:	1885c83a 	sub	r2,r3,r2
   26d80:	90800015 	stw	r2,0(r18)
   26d84:	003fe706 	br	26d24 <_gp+0xfffec958>
   26d88:	01000804 	movi	r4,32
   26d8c:	2089c83a 	sub	r4,r4,r2
   26d90:	1908983a 	sll	r4,r3,r4
   26d94:	d9400117 	ldw	r5,4(sp)
   26d98:	1886d83a 	srl	r3,r3,r2
   26d9c:	2148b03a 	or	r4,r4,r5
   26da0:	99000515 	stw	r4,20(r19)
   26da4:	d8c00015 	stw	r3,0(sp)
   26da8:	003fd006 	br	26cec <_gp+0xfffec920>

00026dac <__ratio>:
   26dac:	defff904 	addi	sp,sp,-28
   26db0:	dc400315 	stw	r17,12(sp)
   26db4:	2823883a 	mov	r17,r5
   26db8:	d9400104 	addi	r5,sp,4
   26dbc:	dfc00615 	stw	ra,24(sp)
   26dc0:	dcc00515 	stw	r19,20(sp)
   26dc4:	dc800415 	stw	r18,16(sp)
   26dc8:	2027883a 	mov	r19,r4
   26dcc:	dc000215 	stw	r16,8(sp)
   26dd0:	0026b540 	call	26b54 <__b2d>
   26dd4:	8809883a 	mov	r4,r17
   26dd8:	d80b883a 	mov	r5,sp
   26ddc:	1025883a 	mov	r18,r2
   26de0:	1821883a 	mov	r16,r3
   26de4:	0026b540 	call	26b54 <__b2d>
   26de8:	8a400417 	ldw	r9,16(r17)
   26dec:	9a000417 	ldw	r8,16(r19)
   26df0:	100d883a 	mov	r6,r2
   26df4:	d8800017 	ldw	r2,0(sp)
   26df8:	4251c83a 	sub	r8,r8,r9
   26dfc:	4012917a 	slli	r9,r8,5
   26e00:	da000117 	ldw	r8,4(sp)
   26e04:	4091c83a 	sub	r8,r8,r2
   26e08:	4251883a 	add	r8,r8,r9
   26e0c:	02000d0e 	bge	zero,r8,26e44 <__ratio+0x98>
   26e10:	4010953a 	slli	r8,r8,20
   26e14:	4421883a 	add	r16,r8,r16
   26e18:	9009883a 	mov	r4,r18
   26e1c:	800b883a 	mov	r5,r16
   26e20:	180f883a 	mov	r7,r3
   26e24:	002aaf40 	call	2aaf4 <__divdf3>
   26e28:	dfc00617 	ldw	ra,24(sp)
   26e2c:	dcc00517 	ldw	r19,20(sp)
   26e30:	dc800417 	ldw	r18,16(sp)
   26e34:	dc400317 	ldw	r17,12(sp)
   26e38:	dc000217 	ldw	r16,8(sp)
   26e3c:	dec00704 	addi	sp,sp,28
   26e40:	f800283a 	ret
   26e44:	4010953a 	slli	r8,r8,20
   26e48:	1a07c83a 	sub	r3,r3,r8
   26e4c:	003ff206 	br	26e18 <_gp+0xfffeca4c>

00026e50 <_mprec_log10>:
   26e50:	defffe04 	addi	sp,sp,-8
   26e54:	dc000015 	stw	r16,0(sp)
   26e58:	dfc00115 	stw	ra,4(sp)
   26e5c:	008005c4 	movi	r2,23
   26e60:	2021883a 	mov	r16,r4
   26e64:	11000d0e 	bge	r2,r4,26e9c <_mprec_log10+0x4c>
   26e68:	0005883a 	mov	r2,zero
   26e6c:	00cffc34 	movhi	r3,16368
   26e70:	843fffc4 	addi	r16,r16,-1
   26e74:	1009883a 	mov	r4,r2
   26e78:	180b883a 	mov	r5,r3
   26e7c:	000d883a 	mov	r6,zero
   26e80:	01d00934 	movhi	r7,16420
   26e84:	002b6040 	call	2b604 <__muldf3>
   26e88:	803ff91e 	bne	r16,zero,26e70 <_gp+0xfffecaa4>
   26e8c:	dfc00117 	ldw	ra,4(sp)
   26e90:	dc000017 	ldw	r16,0(sp)
   26e94:	dec00204 	addi	sp,sp,8
   26e98:	f800283a 	ret
   26e9c:	202090fa 	slli	r16,r4,3
   26ea0:	008000f4 	movhi	r2,3
   26ea4:	10815e04 	addi	r2,r2,1400
   26ea8:	1421883a 	add	r16,r2,r16
   26eac:	80800017 	ldw	r2,0(r16)
   26eb0:	80c00117 	ldw	r3,4(r16)
   26eb4:	dfc00117 	ldw	ra,4(sp)
   26eb8:	dc000017 	ldw	r16,0(sp)
   26ebc:	dec00204 	addi	sp,sp,8
   26ec0:	f800283a 	ret

00026ec4 <__copybits>:
   26ec4:	297fffc4 	addi	r5,r5,-1
   26ec8:	280fd17a 	srai	r7,r5,5
   26ecc:	30c00417 	ldw	r3,16(r6)
   26ed0:	30800504 	addi	r2,r6,20
   26ed4:	39c00044 	addi	r7,r7,1
   26ed8:	18c7883a 	add	r3,r3,r3
   26edc:	39cf883a 	add	r7,r7,r7
   26ee0:	18c7883a 	add	r3,r3,r3
   26ee4:	39cf883a 	add	r7,r7,r7
   26ee8:	10c7883a 	add	r3,r2,r3
   26eec:	21cf883a 	add	r7,r4,r7
   26ef0:	10c00d2e 	bgeu	r2,r3,26f28 <__copybits+0x64>
   26ef4:	200b883a 	mov	r5,r4
   26ef8:	12000017 	ldw	r8,0(r2)
   26efc:	29400104 	addi	r5,r5,4
   26f00:	10800104 	addi	r2,r2,4
   26f04:	2a3fff15 	stw	r8,-4(r5)
   26f08:	10fffb36 	bltu	r2,r3,26ef8 <_gp+0xfffecb2c>
   26f0c:	1985c83a 	sub	r2,r3,r6
   26f10:	10bffac4 	addi	r2,r2,-21
   26f14:	1004d0ba 	srli	r2,r2,2
   26f18:	10800044 	addi	r2,r2,1
   26f1c:	1085883a 	add	r2,r2,r2
   26f20:	1085883a 	add	r2,r2,r2
   26f24:	2089883a 	add	r4,r4,r2
   26f28:	21c0032e 	bgeu	r4,r7,26f38 <__copybits+0x74>
   26f2c:	20000015 	stw	zero,0(r4)
   26f30:	21000104 	addi	r4,r4,4
   26f34:	21fffd36 	bltu	r4,r7,26f2c <_gp+0xfffecb60>
   26f38:	f800283a 	ret

00026f3c <__any_on>:
   26f3c:	20c00417 	ldw	r3,16(r4)
   26f40:	2805d17a 	srai	r2,r5,5
   26f44:	21000504 	addi	r4,r4,20
   26f48:	18800d0e 	bge	r3,r2,26f80 <__any_on+0x44>
   26f4c:	18c7883a 	add	r3,r3,r3
   26f50:	18c7883a 	add	r3,r3,r3
   26f54:	20c7883a 	add	r3,r4,r3
   26f58:	20c0192e 	bgeu	r4,r3,26fc0 <__any_on+0x84>
   26f5c:	18bfff17 	ldw	r2,-4(r3)
   26f60:	18ffff04 	addi	r3,r3,-4
   26f64:	1000041e 	bne	r2,zero,26f78 <__any_on+0x3c>
   26f68:	20c0142e 	bgeu	r4,r3,26fbc <__any_on+0x80>
   26f6c:	18ffff04 	addi	r3,r3,-4
   26f70:	19400017 	ldw	r5,0(r3)
   26f74:	283ffc26 	beq	r5,zero,26f68 <_gp+0xfffecb9c>
   26f78:	00800044 	movi	r2,1
   26f7c:	f800283a 	ret
   26f80:	10c00a0e 	bge	r2,r3,26fac <__any_on+0x70>
   26f84:	1085883a 	add	r2,r2,r2
   26f88:	1085883a 	add	r2,r2,r2
   26f8c:	294007cc 	andi	r5,r5,31
   26f90:	2087883a 	add	r3,r4,r2
   26f94:	283ff026 	beq	r5,zero,26f58 <_gp+0xfffecb8c>
   26f98:	19800017 	ldw	r6,0(r3)
   26f9c:	3144d83a 	srl	r2,r6,r5
   26fa0:	114a983a 	sll	r5,r2,r5
   26fa4:	29bff41e 	bne	r5,r6,26f78 <_gp+0xfffecbac>
   26fa8:	003feb06 	br	26f58 <_gp+0xfffecb8c>
   26fac:	1085883a 	add	r2,r2,r2
   26fb0:	1085883a 	add	r2,r2,r2
   26fb4:	2087883a 	add	r3,r4,r2
   26fb8:	003fe706 	br	26f58 <_gp+0xfffecb8c>
   26fbc:	f800283a 	ret
   26fc0:	0005883a 	mov	r2,zero
   26fc4:	f800283a 	ret

00026fc8 <_realloc_r>:
   26fc8:	defff604 	addi	sp,sp,-40
   26fcc:	dcc00315 	stw	r19,12(sp)
   26fd0:	dc400115 	stw	r17,4(sp)
   26fd4:	dfc00915 	stw	ra,36(sp)
   26fd8:	df000815 	stw	fp,32(sp)
   26fdc:	ddc00715 	stw	r23,28(sp)
   26fe0:	dd800615 	stw	r22,24(sp)
   26fe4:	dd400515 	stw	r21,20(sp)
   26fe8:	dd000415 	stw	r20,16(sp)
   26fec:	dc800215 	stw	r18,8(sp)
   26ff0:	dc000015 	stw	r16,0(sp)
   26ff4:	2827883a 	mov	r19,r5
   26ff8:	3023883a 	mov	r17,r6
   26ffc:	2800bf26 	beq	r5,zero,272fc <_realloc_r+0x334>
   27000:	2025883a 	mov	r18,r4
   27004:	002ce180 	call	2ce18 <__malloc_lock>
   27008:	98ffff17 	ldw	r3,-4(r19)
   2700c:	01bfff04 	movi	r6,-4
   27010:	890002c4 	addi	r4,r17,11
   27014:	01c00584 	movi	r7,22
   27018:	9d7ffe04 	addi	r21,r19,-8
   2701c:	19a0703a 	and	r16,r3,r6
   27020:	39003f2e 	bgeu	r7,r4,27120 <_realloc_r+0x158>
   27024:	053ffe04 	movi	r20,-8
   27028:	2528703a 	and	r20,r4,r20
   2702c:	a00f883a 	mov	r7,r20
   27030:	a0008216 	blt	r20,zero,2723c <_realloc_r+0x274>
   27034:	a4408136 	bltu	r20,r17,2723c <_realloc_r+0x274>
   27038:	81c03c0e 	bge	r16,r7,2712c <_realloc_r+0x164>
   2703c:	070000f4 	movhi	fp,3
   27040:	e7032804 	addi	fp,fp,3232
   27044:	e1000217 	ldw	r4,8(fp)
   27048:	ac05883a 	add	r2,r21,r16
   2704c:	2080bf26 	beq	r4,r2,2734c <_realloc_r+0x384>
   27050:	11000117 	ldw	r4,4(r2)
   27054:	023fff84 	movi	r8,-2
   27058:	2210703a 	and	r8,r4,r8
   2705c:	1211883a 	add	r8,r2,r8
   27060:	41400117 	ldw	r5,4(r8)
   27064:	2940004c 	andi	r5,r5,1
   27068:	28004a1e 	bne	r5,zero,27194 <_realloc_r+0x1cc>
   2706c:	017fff04 	movi	r5,-4
   27070:	2148703a 	and	r4,r4,r5
   27074:	2409883a 	add	r4,r4,r16
   27078:	21c0ad0e 	bge	r4,r7,27330 <_realloc_r+0x368>
   2707c:	18c0004c 	andi	r3,r3,1
   27080:	18007f1e 	bne	r3,zero,27280 <_realloc_r+0x2b8>
   27084:	9dfffe17 	ldw	r23,-8(r19)
   27088:	adefc83a 	sub	r23,r21,r23
   2708c:	bd800117 	ldw	r22,4(r23)
   27090:	b14a703a 	and	r5,r22,r5
   27094:	216d883a 	add	r22,r4,r5
   27098:	b1c04516 	blt	r22,r7,271b0 <_realloc_r+0x1e8>
   2709c:	10c00317 	ldw	r3,12(r2)
   270a0:	10800217 	ldw	r2,8(r2)
   270a4:	81bfff04 	addi	r6,r16,-4
   270a8:	bc400204 	addi	r17,r23,8
   270ac:	10c00315 	stw	r3,12(r2)
   270b0:	18800215 	stw	r2,8(r3)
   270b4:	b9400217 	ldw	r5,8(r23)
   270b8:	b8c00317 	ldw	r3,12(r23)
   270bc:	00800904 	movi	r2,36
   270c0:	28c00315 	stw	r3,12(r5)
   270c4:	19400215 	stw	r5,8(r3)
   270c8:	1180ef36 	bltu	r2,r6,27488 <_realloc_r+0x4c0>
   270cc:	008004c4 	movi	r2,19
   270d0:	1180da2e 	bgeu	r2,r6,2743c <_realloc_r+0x474>
   270d4:	98800017 	ldw	r2,0(r19)
   270d8:	b8800215 	stw	r2,8(r23)
   270dc:	98800117 	ldw	r2,4(r19)
   270e0:	b8800315 	stw	r2,12(r23)
   270e4:	008006c4 	movi	r2,27
   270e8:	1180fc2e 	bgeu	r2,r6,274dc <_realloc_r+0x514>
   270ec:	98800217 	ldw	r2,8(r19)
   270f0:	b8800415 	stw	r2,16(r23)
   270f4:	98800317 	ldw	r2,12(r19)
   270f8:	b8800515 	stw	r2,20(r23)
   270fc:	00800904 	movi	r2,36
   27100:	3080421e 	bne	r6,r2,2720c <_realloc_r+0x244>
   27104:	98800417 	ldw	r2,16(r19)
   27108:	9cc00604 	addi	r19,r19,24
   2710c:	b8c00804 	addi	r3,r23,32
   27110:	b8800615 	stw	r2,24(r23)
   27114:	98bfff17 	ldw	r2,-4(r19)
   27118:	b8800715 	stw	r2,28(r23)
   2711c:	00003d06 	br	27214 <_realloc_r+0x24c>
   27120:	01c00404 	movi	r7,16
   27124:	3829883a 	mov	r20,r7
   27128:	003fc206 	br	27034 <_gp+0xfffecc68>
   2712c:	9823883a 	mov	r17,r19
   27130:	850fc83a 	sub	r7,r16,r20
   27134:	008003c4 	movi	r2,15
   27138:	18c0004c 	andi	r3,r3,1
   2713c:	11c04336 	bltu	r2,r7,2724c <_realloc_r+0x284>
   27140:	1c06b03a 	or	r3,r3,r16
   27144:	a8c00115 	stw	r3,4(r21)
   27148:	ac21883a 	add	r16,r21,r16
   2714c:	80c00117 	ldw	r3,4(r16)
   27150:	18c00054 	ori	r3,r3,1
   27154:	80c00115 	stw	r3,4(r16)
   27158:	9009883a 	mov	r4,r18
   2715c:	002ce380 	call	2ce38 <__malloc_unlock>
   27160:	8805883a 	mov	r2,r17
   27164:	dfc00917 	ldw	ra,36(sp)
   27168:	df000817 	ldw	fp,32(sp)
   2716c:	ddc00717 	ldw	r23,28(sp)
   27170:	dd800617 	ldw	r22,24(sp)
   27174:	dd400517 	ldw	r21,20(sp)
   27178:	dd000417 	ldw	r20,16(sp)
   2717c:	dcc00317 	ldw	r19,12(sp)
   27180:	dc800217 	ldw	r18,8(sp)
   27184:	dc400117 	ldw	r17,4(sp)
   27188:	dc000017 	ldw	r16,0(sp)
   2718c:	dec00a04 	addi	sp,sp,40
   27190:	f800283a 	ret
   27194:	18c0004c 	andi	r3,r3,1
   27198:	1800391e 	bne	r3,zero,27280 <_realloc_r+0x2b8>
   2719c:	9dfffe17 	ldw	r23,-8(r19)
   271a0:	00bfff04 	movi	r2,-4
   271a4:	adefc83a 	sub	r23,r21,r23
   271a8:	b9400117 	ldw	r5,4(r23)
   271ac:	288a703a 	and	r5,r5,r2
   271b0:	2c2d883a 	add	r22,r5,r16
   271b4:	b1c03216 	blt	r22,r7,27280 <_realloc_r+0x2b8>
   271b8:	b8800317 	ldw	r2,12(r23)
   271bc:	b8c00217 	ldw	r3,8(r23)
   271c0:	81bfff04 	addi	r6,r16,-4
   271c4:	01000904 	movi	r4,36
   271c8:	18800315 	stw	r2,12(r3)
   271cc:	10c00215 	stw	r3,8(r2)
   271d0:	bc400204 	addi	r17,r23,8
   271d4:	2180ac36 	bltu	r4,r6,27488 <_realloc_r+0x4c0>
   271d8:	008004c4 	movi	r2,19
   271dc:	1180972e 	bgeu	r2,r6,2743c <_realloc_r+0x474>
   271e0:	98800017 	ldw	r2,0(r19)
   271e4:	b8800215 	stw	r2,8(r23)
   271e8:	98800117 	ldw	r2,4(r19)
   271ec:	b8800315 	stw	r2,12(r23)
   271f0:	008006c4 	movi	r2,27
   271f4:	1180b92e 	bgeu	r2,r6,274dc <_realloc_r+0x514>
   271f8:	98800217 	ldw	r2,8(r19)
   271fc:	b8800415 	stw	r2,16(r23)
   27200:	98800317 	ldw	r2,12(r19)
   27204:	b8800515 	stw	r2,20(r23)
   27208:	313fbe26 	beq	r6,r4,27104 <_gp+0xfffecd38>
   2720c:	b8c00604 	addi	r3,r23,24
   27210:	9cc00404 	addi	r19,r19,16
   27214:	98800017 	ldw	r2,0(r19)
   27218:	b021883a 	mov	r16,r22
   2721c:	b82b883a 	mov	r21,r23
   27220:	18800015 	stw	r2,0(r3)
   27224:	98800117 	ldw	r2,4(r19)
   27228:	18800115 	stw	r2,4(r3)
   2722c:	98800217 	ldw	r2,8(r19)
   27230:	18800215 	stw	r2,8(r3)
   27234:	b8c00117 	ldw	r3,4(r23)
   27238:	003fbd06 	br	27130 <_gp+0xfffecd64>
   2723c:	00800304 	movi	r2,12
   27240:	90800015 	stw	r2,0(r18)
   27244:	0005883a 	mov	r2,zero
   27248:	003fc606 	br	27164 <_gp+0xfffecd98>
   2724c:	1d06b03a 	or	r3,r3,r20
   27250:	ad0b883a 	add	r5,r21,r20
   27254:	a8c00115 	stw	r3,4(r21)
   27258:	38800054 	ori	r2,r7,1
   2725c:	28800115 	stw	r2,4(r5)
   27260:	29cf883a 	add	r7,r5,r7
   27264:	38800117 	ldw	r2,4(r7)
   27268:	9009883a 	mov	r4,r18
   2726c:	29400204 	addi	r5,r5,8
   27270:	10800054 	ori	r2,r2,1
   27274:	38800115 	stw	r2,4(r7)
   27278:	00248580 	call	24858 <_free_r>
   2727c:	003fb606 	br	27158 <_gp+0xfffecd8c>
   27280:	880b883a 	mov	r5,r17
   27284:	9009883a 	mov	r4,r18
   27288:	00253f40 	call	253f4 <_malloc_r>
   2728c:	1023883a 	mov	r17,r2
   27290:	1000aa26 	beq	r2,zero,2753c <_realloc_r+0x574>
   27294:	98ffff17 	ldw	r3,-4(r19)
   27298:	113ffe04 	addi	r4,r2,-8
   2729c:	00bfff84 	movi	r2,-2
   272a0:	1884703a 	and	r2,r3,r2
   272a4:	a885883a 	add	r2,r21,r2
   272a8:	20808626 	beq	r4,r2,274c4 <_realloc_r+0x4fc>
   272ac:	81bfff04 	addi	r6,r16,-4
   272b0:	00800904 	movi	r2,36
   272b4:	11807036 	bltu	r2,r6,27478 <_realloc_r+0x4b0>
   272b8:	00c004c4 	movi	r3,19
   272bc:	19805636 	bltu	r3,r6,27418 <_realloc_r+0x450>
   272c0:	8805883a 	mov	r2,r17
   272c4:	9807883a 	mov	r3,r19
   272c8:	19000017 	ldw	r4,0(r3)
   272cc:	11000015 	stw	r4,0(r2)
   272d0:	19000117 	ldw	r4,4(r3)
   272d4:	11000115 	stw	r4,4(r2)
   272d8:	18c00217 	ldw	r3,8(r3)
   272dc:	10c00215 	stw	r3,8(r2)
   272e0:	980b883a 	mov	r5,r19
   272e4:	9009883a 	mov	r4,r18
   272e8:	00248580 	call	24858 <_free_r>
   272ec:	9009883a 	mov	r4,r18
   272f0:	002ce380 	call	2ce38 <__malloc_unlock>
   272f4:	8805883a 	mov	r2,r17
   272f8:	003f9a06 	br	27164 <_gp+0xfffecd98>
   272fc:	300b883a 	mov	r5,r6
   27300:	dfc00917 	ldw	ra,36(sp)
   27304:	df000817 	ldw	fp,32(sp)
   27308:	ddc00717 	ldw	r23,28(sp)
   2730c:	dd800617 	ldw	r22,24(sp)
   27310:	dd400517 	ldw	r21,20(sp)
   27314:	dd000417 	ldw	r20,16(sp)
   27318:	dcc00317 	ldw	r19,12(sp)
   2731c:	dc800217 	ldw	r18,8(sp)
   27320:	dc400117 	ldw	r17,4(sp)
   27324:	dc000017 	ldw	r16,0(sp)
   27328:	dec00a04 	addi	sp,sp,40
   2732c:	00253f41 	jmpi	253f4 <_malloc_r>
   27330:	11400317 	ldw	r5,12(r2)
   27334:	10800217 	ldw	r2,8(r2)
   27338:	9823883a 	mov	r17,r19
   2733c:	2021883a 	mov	r16,r4
   27340:	11400315 	stw	r5,12(r2)
   27344:	28800215 	stw	r2,8(r5)
   27348:	003f7906 	br	27130 <_gp+0xfffecd64>
   2734c:	21000117 	ldw	r4,4(r4)
   27350:	00bfff04 	movi	r2,-4
   27354:	a1800404 	addi	r6,r20,16
   27358:	2088703a 	and	r4,r4,r2
   2735c:	2409883a 	add	r4,r4,r16
   27360:	2180380e 	bge	r4,r6,27444 <_realloc_r+0x47c>
   27364:	18c0004c 	andi	r3,r3,1
   27368:	183fc51e 	bne	r3,zero,27280 <_gp+0xfffeceb4>
   2736c:	9dfffe17 	ldw	r23,-8(r19)
   27370:	adefc83a 	sub	r23,r21,r23
   27374:	b9400117 	ldw	r5,4(r23)
   27378:	288a703a 	and	r5,r5,r2
   2737c:	216d883a 	add	r22,r4,r5
   27380:	b1bf8b16 	blt	r22,r6,271b0 <_gp+0xfffecde4>
   27384:	b8800317 	ldw	r2,12(r23)
   27388:	b8c00217 	ldw	r3,8(r23)
   2738c:	81bfff04 	addi	r6,r16,-4
   27390:	01000904 	movi	r4,36
   27394:	18800315 	stw	r2,12(r3)
   27398:	10c00215 	stw	r3,8(r2)
   2739c:	bc400204 	addi	r17,r23,8
   273a0:	21805a36 	bltu	r4,r6,2750c <_realloc_r+0x544>
   273a4:	008004c4 	movi	r2,19
   273a8:	1180562e 	bgeu	r2,r6,27504 <_realloc_r+0x53c>
   273ac:	98800017 	ldw	r2,0(r19)
   273b0:	b8800215 	stw	r2,8(r23)
   273b4:	98800117 	ldw	r2,4(r19)
   273b8:	b8800315 	stw	r2,12(r23)
   273bc:	008006c4 	movi	r2,27
   273c0:	11805636 	bltu	r2,r6,2751c <_realloc_r+0x554>
   273c4:	b8800404 	addi	r2,r23,16
   273c8:	9cc00204 	addi	r19,r19,8
   273cc:	98c00017 	ldw	r3,0(r19)
   273d0:	10c00015 	stw	r3,0(r2)
   273d4:	98c00117 	ldw	r3,4(r19)
   273d8:	10c00115 	stw	r3,4(r2)
   273dc:	98c00217 	ldw	r3,8(r19)
   273e0:	10c00215 	stw	r3,8(r2)
   273e4:	bd07883a 	add	r3,r23,r20
   273e8:	b505c83a 	sub	r2,r22,r20
   273ec:	e0c00215 	stw	r3,8(fp)
   273f0:	10800054 	ori	r2,r2,1
   273f4:	18800115 	stw	r2,4(r3)
   273f8:	b8800117 	ldw	r2,4(r23)
   273fc:	9009883a 	mov	r4,r18
   27400:	1080004c 	andi	r2,r2,1
   27404:	a0a8b03a 	or	r20,r20,r2
   27408:	bd000115 	stw	r20,4(r23)
   2740c:	002ce380 	call	2ce38 <__malloc_unlock>
   27410:	8805883a 	mov	r2,r17
   27414:	003f5306 	br	27164 <_gp+0xfffecd98>
   27418:	98c00017 	ldw	r3,0(r19)
   2741c:	88c00015 	stw	r3,0(r17)
   27420:	98c00117 	ldw	r3,4(r19)
   27424:	88c00115 	stw	r3,4(r17)
   27428:	00c006c4 	movi	r3,27
   2742c:	19801d36 	bltu	r3,r6,274a4 <_realloc_r+0x4dc>
   27430:	88800204 	addi	r2,r17,8
   27434:	98c00204 	addi	r3,r19,8
   27438:	003fa306 	br	272c8 <_gp+0xfffecefc>
   2743c:	8807883a 	mov	r3,r17
   27440:	003f7406 	br	27214 <_gp+0xfffece48>
   27444:	ad2b883a 	add	r21,r21,r20
   27448:	2505c83a 	sub	r2,r4,r20
   2744c:	e5400215 	stw	r21,8(fp)
   27450:	10800054 	ori	r2,r2,1
   27454:	a8800115 	stw	r2,4(r21)
   27458:	98bfff17 	ldw	r2,-4(r19)
   2745c:	9009883a 	mov	r4,r18
   27460:	1080004c 	andi	r2,r2,1
   27464:	a0a8b03a 	or	r20,r20,r2
   27468:	9d3fff15 	stw	r20,-4(r19)
   2746c:	002ce380 	call	2ce38 <__malloc_unlock>
   27470:	9805883a 	mov	r2,r19
   27474:	003f3b06 	br	27164 <_gp+0xfffecd98>
   27478:	8809883a 	mov	r4,r17
   2747c:	980b883a 	mov	r5,r19
   27480:	0025dbc0 	call	25dbc <memmove>
   27484:	003f9606 	br	272e0 <_gp+0xfffecf14>
   27488:	8809883a 	mov	r4,r17
   2748c:	980b883a 	mov	r5,r19
   27490:	0025dbc0 	call	25dbc <memmove>
   27494:	b8c00117 	ldw	r3,4(r23)
   27498:	b021883a 	mov	r16,r22
   2749c:	b82b883a 	mov	r21,r23
   274a0:	003f2306 	br	27130 <_gp+0xfffecd64>
   274a4:	98c00217 	ldw	r3,8(r19)
   274a8:	88c00215 	stw	r3,8(r17)
   274ac:	98c00317 	ldw	r3,12(r19)
   274b0:	88c00315 	stw	r3,12(r17)
   274b4:	30800c26 	beq	r6,r2,274e8 <_realloc_r+0x520>
   274b8:	88800404 	addi	r2,r17,16
   274bc:	98c00404 	addi	r3,r19,16
   274c0:	003f8106 	br	272c8 <_gp+0xfffecefc>
   274c4:	893fff17 	ldw	r4,-4(r17)
   274c8:	00bfff04 	movi	r2,-4
   274cc:	9823883a 	mov	r17,r19
   274d0:	2084703a 	and	r2,r4,r2
   274d4:	80a1883a 	add	r16,r16,r2
   274d8:	003f1506 	br	27130 <_gp+0xfffecd64>
   274dc:	b8c00404 	addi	r3,r23,16
   274e0:	9cc00204 	addi	r19,r19,8
   274e4:	003f4b06 	br	27214 <_gp+0xfffece48>
   274e8:	99000417 	ldw	r4,16(r19)
   274ec:	88800604 	addi	r2,r17,24
   274f0:	98c00604 	addi	r3,r19,24
   274f4:	89000415 	stw	r4,16(r17)
   274f8:	99000517 	ldw	r4,20(r19)
   274fc:	89000515 	stw	r4,20(r17)
   27500:	003f7106 	br	272c8 <_gp+0xfffecefc>
   27504:	8805883a 	mov	r2,r17
   27508:	003fb006 	br	273cc <_gp+0xfffed000>
   2750c:	8809883a 	mov	r4,r17
   27510:	980b883a 	mov	r5,r19
   27514:	0025dbc0 	call	25dbc <memmove>
   27518:	003fb206 	br	273e4 <_gp+0xfffed018>
   2751c:	98800217 	ldw	r2,8(r19)
   27520:	b8800415 	stw	r2,16(r23)
   27524:	98800317 	ldw	r2,12(r19)
   27528:	b8800515 	stw	r2,20(r23)
   2752c:	31000726 	beq	r6,r4,2754c <_realloc_r+0x584>
   27530:	b8800604 	addi	r2,r23,24
   27534:	9cc00404 	addi	r19,r19,16
   27538:	003fa406 	br	273cc <_gp+0xfffed000>
   2753c:	9009883a 	mov	r4,r18
   27540:	002ce380 	call	2ce38 <__malloc_unlock>
   27544:	0005883a 	mov	r2,zero
   27548:	003f0606 	br	27164 <_gp+0xfffecd98>
   2754c:	98c00417 	ldw	r3,16(r19)
   27550:	9cc00604 	addi	r19,r19,24
   27554:	b8800804 	addi	r2,r23,32
   27558:	b8c00615 	stw	r3,24(r23)
   2755c:	98ffff17 	ldw	r3,-4(r19)
   27560:	b8c00715 	stw	r3,28(r23)
   27564:	003f9906 	br	273cc <_gp+0xfffed000>

00027568 <__fpclassifyd>:
   27568:	00a00034 	movhi	r2,32768
   2756c:	10bfffc4 	addi	r2,r2,-1
   27570:	2884703a 	and	r2,r5,r2
   27574:	10000726 	beq	r2,zero,27594 <__fpclassifyd+0x2c>
   27578:	00fffc34 	movhi	r3,65520
   2757c:	019ff834 	movhi	r6,32736
   27580:	28c7883a 	add	r3,r5,r3
   27584:	31bfffc4 	addi	r6,r6,-1
   27588:	30c00536 	bltu	r6,r3,275a0 <__fpclassifyd+0x38>
   2758c:	00800104 	movi	r2,4
   27590:	f800283a 	ret
   27594:	2000021e 	bne	r4,zero,275a0 <__fpclassifyd+0x38>
   27598:	00800084 	movi	r2,2
   2759c:	f800283a 	ret
   275a0:	00dffc34 	movhi	r3,32752
   275a4:	019ff834 	movhi	r6,32736
   275a8:	28cb883a 	add	r5,r5,r3
   275ac:	31bfffc4 	addi	r6,r6,-1
   275b0:	317ff62e 	bgeu	r6,r5,2758c <_gp+0xfffed1c0>
   275b4:	01400434 	movhi	r5,16
   275b8:	297fffc4 	addi	r5,r5,-1
   275bc:	28800236 	bltu	r5,r2,275c8 <__fpclassifyd+0x60>
   275c0:	008000c4 	movi	r2,3
   275c4:	f800283a 	ret
   275c8:	10c00226 	beq	r2,r3,275d4 <__fpclassifyd+0x6c>
   275cc:	0005883a 	mov	r2,zero
   275d0:	f800283a 	ret
   275d4:	2005003a 	cmpeq	r2,r4,zero
   275d8:	f800283a 	ret

000275dc <_sbrk_r>:
   275dc:	defffd04 	addi	sp,sp,-12
   275e0:	dc000015 	stw	r16,0(sp)
   275e4:	040000f4 	movhi	r16,3
   275e8:	dc400115 	stw	r17,4(sp)
   275ec:	84100f04 	addi	r16,r16,16444
   275f0:	2023883a 	mov	r17,r4
   275f4:	2809883a 	mov	r4,r5
   275f8:	dfc00215 	stw	ra,8(sp)
   275fc:	80000015 	stw	zero,0(r16)
   27600:	002d2700 	call	2d270 <sbrk>
   27604:	00ffffc4 	movi	r3,-1
   27608:	10c00526 	beq	r2,r3,27620 <_sbrk_r+0x44>
   2760c:	dfc00217 	ldw	ra,8(sp)
   27610:	dc400117 	ldw	r17,4(sp)
   27614:	dc000017 	ldw	r16,0(sp)
   27618:	dec00304 	addi	sp,sp,12
   2761c:	f800283a 	ret
   27620:	80c00017 	ldw	r3,0(r16)
   27624:	183ff926 	beq	r3,zero,2760c <_gp+0xfffed240>
   27628:	88c00015 	stw	r3,0(r17)
   2762c:	003ff706 	br	2760c <_gp+0xfffed240>

00027630 <__sread>:
   27630:	defffe04 	addi	sp,sp,-8
   27634:	dc000015 	stw	r16,0(sp)
   27638:	2821883a 	mov	r16,r5
   2763c:	2940038f 	ldh	r5,14(r5)
   27640:	dfc00115 	stw	ra,4(sp)
   27644:	00292100 	call	29210 <_read_r>
   27648:	10000716 	blt	r2,zero,27668 <__sread+0x38>
   2764c:	80c01417 	ldw	r3,80(r16)
   27650:	1887883a 	add	r3,r3,r2
   27654:	80c01415 	stw	r3,80(r16)
   27658:	dfc00117 	ldw	ra,4(sp)
   2765c:	dc000017 	ldw	r16,0(sp)
   27660:	dec00204 	addi	sp,sp,8
   27664:	f800283a 	ret
   27668:	80c0030b 	ldhu	r3,12(r16)
   2766c:	18fbffcc 	andi	r3,r3,61439
   27670:	80c0030d 	sth	r3,12(r16)
   27674:	dfc00117 	ldw	ra,4(sp)
   27678:	dc000017 	ldw	r16,0(sp)
   2767c:	dec00204 	addi	sp,sp,8
   27680:	f800283a 	ret

00027684 <__seofread>:
   27684:	0005883a 	mov	r2,zero
   27688:	f800283a 	ret

0002768c <__swrite>:
   2768c:	2880030b 	ldhu	r2,12(r5)
   27690:	defffb04 	addi	sp,sp,-20
   27694:	dcc00315 	stw	r19,12(sp)
   27698:	dc800215 	stw	r18,8(sp)
   2769c:	dc400115 	stw	r17,4(sp)
   276a0:	dc000015 	stw	r16,0(sp)
   276a4:	dfc00415 	stw	ra,16(sp)
   276a8:	10c0400c 	andi	r3,r2,256
   276ac:	2821883a 	mov	r16,r5
   276b0:	2027883a 	mov	r19,r4
   276b4:	3025883a 	mov	r18,r6
   276b8:	3823883a 	mov	r17,r7
   276bc:	18000526 	beq	r3,zero,276d4 <__swrite+0x48>
   276c0:	2940038f 	ldh	r5,14(r5)
   276c4:	000d883a 	mov	r6,zero
   276c8:	01c00084 	movi	r7,2
   276cc:	00291b40 	call	291b4 <_lseek_r>
   276d0:	8080030b 	ldhu	r2,12(r16)
   276d4:	8140038f 	ldh	r5,14(r16)
   276d8:	10bbffcc 	andi	r2,r2,61439
   276dc:	9809883a 	mov	r4,r19
   276e0:	900d883a 	mov	r6,r18
   276e4:	880f883a 	mov	r7,r17
   276e8:	8080030d 	sth	r2,12(r16)
   276ec:	dfc00417 	ldw	ra,16(sp)
   276f0:	dcc00317 	ldw	r19,12(sp)
   276f4:	dc800217 	ldw	r18,8(sp)
   276f8:	dc400117 	ldw	r17,4(sp)
   276fc:	dc000017 	ldw	r16,0(sp)
   27700:	dec00504 	addi	sp,sp,20
   27704:	0028ca41 	jmpi	28ca4 <_write_r>

00027708 <__sseek>:
   27708:	defffe04 	addi	sp,sp,-8
   2770c:	dc000015 	stw	r16,0(sp)
   27710:	2821883a 	mov	r16,r5
   27714:	2940038f 	ldh	r5,14(r5)
   27718:	dfc00115 	stw	ra,4(sp)
   2771c:	00291b40 	call	291b4 <_lseek_r>
   27720:	00ffffc4 	movi	r3,-1
   27724:	10c00826 	beq	r2,r3,27748 <__sseek+0x40>
   27728:	80c0030b 	ldhu	r3,12(r16)
   2772c:	80801415 	stw	r2,80(r16)
   27730:	18c40014 	ori	r3,r3,4096
   27734:	80c0030d 	sth	r3,12(r16)
   27738:	dfc00117 	ldw	ra,4(sp)
   2773c:	dc000017 	ldw	r16,0(sp)
   27740:	dec00204 	addi	sp,sp,8
   27744:	f800283a 	ret
   27748:	80c0030b 	ldhu	r3,12(r16)
   2774c:	18fbffcc 	andi	r3,r3,61439
   27750:	80c0030d 	sth	r3,12(r16)
   27754:	dfc00117 	ldw	ra,4(sp)
   27758:	dc000017 	ldw	r16,0(sp)
   2775c:	dec00204 	addi	sp,sp,8
   27760:	f800283a 	ret

00027764 <__sclose>:
   27764:	2940038f 	ldh	r5,14(r5)
   27768:	0028d001 	jmpi	28d00 <_close_r>

0002776c <strcmp>:
   2776c:	2144b03a 	or	r2,r4,r5
   27770:	108000cc 	andi	r2,r2,3
   27774:	1000171e 	bne	r2,zero,277d4 <strcmp+0x68>
   27778:	20800017 	ldw	r2,0(r4)
   2777c:	28c00017 	ldw	r3,0(r5)
   27780:	10c0141e 	bne	r2,r3,277d4 <strcmp+0x68>
   27784:	027fbff4 	movhi	r9,65279
   27788:	4a7fbfc4 	addi	r9,r9,-257
   2778c:	0086303a 	nor	r3,zero,r2
   27790:	02202074 	movhi	r8,32897
   27794:	1245883a 	add	r2,r2,r9
   27798:	42202004 	addi	r8,r8,-32640
   2779c:	10c4703a 	and	r2,r2,r3
   277a0:	1204703a 	and	r2,r2,r8
   277a4:	10000226 	beq	r2,zero,277b0 <strcmp+0x44>
   277a8:	00001706 	br	27808 <strcmp+0x9c>
   277ac:	1000161e 	bne	r2,zero,27808 <strcmp+0x9c>
   277b0:	21000104 	addi	r4,r4,4
   277b4:	20c00017 	ldw	r3,0(r4)
   277b8:	29400104 	addi	r5,r5,4
   277bc:	29800017 	ldw	r6,0(r5)
   277c0:	1a4f883a 	add	r7,r3,r9
   277c4:	00c4303a 	nor	r2,zero,r3
   277c8:	3884703a 	and	r2,r7,r2
   277cc:	1204703a 	and	r2,r2,r8
   277d0:	19bff626 	beq	r3,r6,277ac <_gp+0xfffed3e0>
   277d4:	20800007 	ldb	r2,0(r4)
   277d8:	1000051e 	bne	r2,zero,277f0 <strcmp+0x84>
   277dc:	00000606 	br	277f8 <strcmp+0x8c>
   277e0:	21000044 	addi	r4,r4,1
   277e4:	20800007 	ldb	r2,0(r4)
   277e8:	29400044 	addi	r5,r5,1
   277ec:	10000226 	beq	r2,zero,277f8 <strcmp+0x8c>
   277f0:	28c00007 	ldb	r3,0(r5)
   277f4:	10fffa26 	beq	r2,r3,277e0 <_gp+0xfffed414>
   277f8:	20800003 	ldbu	r2,0(r4)
   277fc:	28c00003 	ldbu	r3,0(r5)
   27800:	10c5c83a 	sub	r2,r2,r3
   27804:	f800283a 	ret
   27808:	0005883a 	mov	r2,zero
   2780c:	f800283a 	ret

00027810 <__sprint_r.part.0>:
   27810:	28801917 	ldw	r2,100(r5)
   27814:	defff604 	addi	sp,sp,-40
   27818:	dd400515 	stw	r21,20(sp)
   2781c:	dcc00315 	stw	r19,12(sp)
   27820:	dfc00915 	stw	ra,36(sp)
   27824:	df000815 	stw	fp,32(sp)
   27828:	ddc00715 	stw	r23,28(sp)
   2782c:	dd800615 	stw	r22,24(sp)
   27830:	dd000415 	stw	r20,16(sp)
   27834:	dc800215 	stw	r18,8(sp)
   27838:	dc400115 	stw	r17,4(sp)
   2783c:	dc000015 	stw	r16,0(sp)
   27840:	1088000c 	andi	r2,r2,8192
   27844:	2827883a 	mov	r19,r5
   27848:	302b883a 	mov	r21,r6
   2784c:	10002d26 	beq	r2,zero,27904 <__sprint_r.part.0+0xf4>
   27850:	30800217 	ldw	r2,8(r6)
   27854:	35800017 	ldw	r22,0(r6)
   27858:	10002826 	beq	r2,zero,278fc <__sprint_r.part.0+0xec>
   2785c:	2029883a 	mov	r20,r4
   27860:	b5c00104 	addi	r23,r22,4
   27864:	04bfffc4 	movi	r18,-1
   27868:	bc400017 	ldw	r17,0(r23)
   2786c:	b4000017 	ldw	r16,0(r22)
   27870:	0039883a 	mov	fp,zero
   27874:	8822d0ba 	srli	r17,r17,2
   27878:	04400316 	blt	zero,r17,27888 <__sprint_r.part.0+0x78>
   2787c:	00001706 	br	278dc <__sprint_r.part.0+0xcc>
   27880:	84000104 	addi	r16,r16,4
   27884:	8f001526 	beq	r17,fp,278dc <__sprint_r.part.0+0xcc>
   27888:	81400017 	ldw	r5,0(r16)
   2788c:	a009883a 	mov	r4,r20
   27890:	980d883a 	mov	r6,r19
   27894:	0028f2c0 	call	28f2c <_fputwc_r>
   27898:	e7000044 	addi	fp,fp,1
   2789c:	14bff81e 	bne	r2,r18,27880 <_gp+0xfffed4b4>
   278a0:	9005883a 	mov	r2,r18
   278a4:	a8000215 	stw	zero,8(r21)
   278a8:	a8000115 	stw	zero,4(r21)
   278ac:	dfc00917 	ldw	ra,36(sp)
   278b0:	df000817 	ldw	fp,32(sp)
   278b4:	ddc00717 	ldw	r23,28(sp)
   278b8:	dd800617 	ldw	r22,24(sp)
   278bc:	dd400517 	ldw	r21,20(sp)
   278c0:	dd000417 	ldw	r20,16(sp)
   278c4:	dcc00317 	ldw	r19,12(sp)
   278c8:	dc800217 	ldw	r18,8(sp)
   278cc:	dc400117 	ldw	r17,4(sp)
   278d0:	dc000017 	ldw	r16,0(sp)
   278d4:	dec00a04 	addi	sp,sp,40
   278d8:	f800283a 	ret
   278dc:	a8c00217 	ldw	r3,8(r21)
   278e0:	8c63883a 	add	r17,r17,r17
   278e4:	8c63883a 	add	r17,r17,r17
   278e8:	1c45c83a 	sub	r2,r3,r17
   278ec:	a8800215 	stw	r2,8(r21)
   278f0:	b5800204 	addi	r22,r22,8
   278f4:	bdc00204 	addi	r23,r23,8
   278f8:	103fdb1e 	bne	r2,zero,27868 <_gp+0xfffed49c>
   278fc:	0005883a 	mov	r2,zero
   27900:	003fe806 	br	278a4 <_gp+0xfffed4d8>
   27904:	0024b480 	call	24b48 <__sfvwrite_r>
   27908:	003fe606 	br	278a4 <_gp+0xfffed4d8>

0002790c <__sprint_r>:
   2790c:	30c00217 	ldw	r3,8(r6)
   27910:	18000126 	beq	r3,zero,27918 <__sprint_r+0xc>
   27914:	00278101 	jmpi	27810 <__sprint_r.part.0>
   27918:	30000115 	stw	zero,4(r6)
   2791c:	0005883a 	mov	r2,zero
   27920:	f800283a 	ret

00027924 <___vfiprintf_internal_r>:
   27924:	defeca04 	addi	sp,sp,-1240
   27928:	dd813215 	stw	r22,1224(sp)
   2792c:	dd013015 	stw	r20,1216(sp)
   27930:	dfc13515 	stw	ra,1236(sp)
   27934:	df013415 	stw	fp,1232(sp)
   27938:	ddc13315 	stw	r23,1228(sp)
   2793c:	dd413115 	stw	r21,1220(sp)
   27940:	dcc12f15 	stw	r19,1212(sp)
   27944:	dc812e15 	stw	r18,1208(sp)
   27948:	dc412d15 	stw	r17,1204(sp)
   2794c:	dc012c15 	stw	r16,1200(sp)
   27950:	d9012015 	stw	r4,1152(sp)
   27954:	d9c12115 	stw	r7,1156(sp)
   27958:	2829883a 	mov	r20,r5
   2795c:	302d883a 	mov	r22,r6
   27960:	20000226 	beq	r4,zero,2796c <___vfiprintf_internal_r+0x48>
   27964:	20800e17 	ldw	r2,56(r4)
   27968:	1001d326 	beq	r2,zero,280b8 <___vfiprintf_internal_r+0x794>
   2796c:	a0c0030b 	ldhu	r3,12(r20)
   27970:	1908000c 	andi	r4,r3,8192
   27974:	1805883a 	mov	r2,r3
   27978:	2000071e 	bne	r4,zero,27998 <___vfiprintf_internal_r+0x74>
   2797c:	a1001917 	ldw	r4,100(r20)
   27980:	18880014 	ori	r2,r3,8192
   27984:	00f7ffc4 	movi	r3,-8193
   27988:	20c8703a 	and	r4,r4,r3
   2798c:	a080030d 	sth	r2,12(r20)
   27990:	1007883a 	mov	r3,r2
   27994:	a1001915 	stw	r4,100(r20)
   27998:	1100020c 	andi	r4,r2,8
   2799c:	20018926 	beq	r4,zero,27fc4 <___vfiprintf_internal_r+0x6a0>
   279a0:	a1000417 	ldw	r4,16(r20)
   279a4:	20018726 	beq	r4,zero,27fc4 <___vfiprintf_internal_r+0x6a0>
   279a8:	1080068c 	andi	r2,r2,26
   279ac:	01000284 	movi	r4,10
   279b0:	11018d26 	beq	r2,r4,27fe8 <___vfiprintf_internal_r+0x6c4>
   279b4:	da810a04 	addi	r10,sp,1064
   279b8:	dac109c4 	addi	r11,sp,1063
   279bc:	070000f4 	movhi	fp,3
   279c0:	05c000f4 	movhi	r23,3
   279c4:	da811e15 	stw	r10,1144(sp)
   279c8:	52d5c83a 	sub	r10,r10,r11
   279cc:	e7019404 	addi	fp,fp,1616
   279d0:	bdc19004 	addi	r23,r23,1600
   279d4:	dac11f15 	stw	r11,1148(sp)
   279d8:	dec11a15 	stw	sp,1128(sp)
   279dc:	d8011c15 	stw	zero,1136(sp)
   279e0:	d8011b15 	stw	zero,1132(sp)
   279e4:	d8012615 	stw	zero,1176(sp)
   279e8:	d8012215 	stw	zero,1160(sp)
   279ec:	da812715 	stw	r10,1180(sp)
   279f0:	d811883a 	mov	r8,sp
   279f4:	b021883a 	mov	r16,r22
   279f8:	80800007 	ldb	r2,0(r16)
   279fc:	10039c26 	beq	r2,zero,28870 <___vfiprintf_internal_r+0xf4c>
   27a00:	01000944 	movi	r4,37
   27a04:	11039a26 	beq	r2,r4,28870 <___vfiprintf_internal_r+0xf4c>
   27a08:	8005883a 	mov	r2,r16
   27a0c:	00000106 	br	27a14 <___vfiprintf_internal_r+0xf0>
   27a10:	19000326 	beq	r3,r4,27a20 <___vfiprintf_internal_r+0xfc>
   27a14:	10800044 	addi	r2,r2,1
   27a18:	10c00007 	ldb	r3,0(r2)
   27a1c:	183ffc1e 	bne	r3,zero,27a10 <_gp+0xfffed644>
   27a20:	1425c83a 	sub	r18,r2,r16
   27a24:	1023883a 	mov	r17,r2
   27a28:	90001026 	beq	r18,zero,27a6c <___vfiprintf_internal_r+0x148>
   27a2c:	d8c11c17 	ldw	r3,1136(sp)
   27a30:	d8811b17 	ldw	r2,1132(sp)
   27a34:	44000015 	stw	r16,0(r8)
   27a38:	90c7883a 	add	r3,r18,r3
   27a3c:	10800044 	addi	r2,r2,1
   27a40:	44800115 	stw	r18,4(r8)
   27a44:	d8c11c15 	stw	r3,1136(sp)
   27a48:	d8811b15 	stw	r2,1132(sp)
   27a4c:	010001c4 	movi	r4,7
   27a50:	2080750e 	bge	r4,r2,27c28 <___vfiprintf_internal_r+0x304>
   27a54:	18039d1e 	bne	r3,zero,288cc <___vfiprintf_internal_r+0xfa8>
   27a58:	dac12217 	ldw	r11,1160(sp)
   27a5c:	d8011b15 	stw	zero,1132(sp)
   27a60:	d811883a 	mov	r8,sp
   27a64:	5c97883a 	add	r11,r11,r18
   27a68:	dac12215 	stw	r11,1160(sp)
   27a6c:	88800007 	ldb	r2,0(r17)
   27a70:	1002e026 	beq	r2,zero,285f4 <___vfiprintf_internal_r+0xcd0>
   27a74:	88c00047 	ldb	r3,1(r17)
   27a78:	8c000044 	addi	r16,r17,1
   27a7c:	d8011d85 	stb	zero,1142(sp)
   27a80:	000d883a 	mov	r6,zero
   27a84:	027fffc4 	movi	r9,-1
   27a88:	0027883a 	mov	r19,zero
   27a8c:	002b883a 	mov	r21,zero
   27a90:	01001604 	movi	r4,88
   27a94:	01400244 	movi	r5,9
   27a98:	03000a84 	movi	r12,42
   27a9c:	01c01b04 	movi	r7,108
   27aa0:	84000044 	addi	r16,r16,1
   27aa4:	18bff804 	addi	r2,r3,-32
   27aa8:	20825f36 	bltu	r4,r2,28428 <___vfiprintf_internal_r+0xb04>
   27aac:	100490ba 	slli	r2,r2,2
   27ab0:	028000b4 	movhi	r10,2
   27ab4:	529eb104 	addi	r10,r10,31428
   27ab8:	1285883a 	add	r2,r2,r10
   27abc:	10800017 	ldw	r2,0(r2)
   27ac0:	1000683a 	jmp	r2
   27ac4:	00028298 	cmpnei	zero,zero,2570
   27ac8:	00028428 	cmpgeui	zero,zero,2576
   27acc:	00028428 	cmpgeui	zero,zero,2576
   27ad0:	0002841c 	xori	zero,zero,2576
   27ad4:	00028428 	cmpgeui	zero,zero,2576
   27ad8:	00028428 	cmpgeui	zero,zero,2576
   27adc:	00028428 	cmpgeui	zero,zero,2576
   27ae0:	00028428 	cmpgeui	zero,zero,2576
   27ae4:	00028428 	cmpgeui	zero,zero,2576
   27ae8:	00028428 	cmpgeui	zero,zero,2576
   27aec:	000283f4 	movhi	zero,2575
   27af0:	00028410 	cmplti	zero,zero,2576
   27af4:	00028428 	cmpgeui	zero,zero,2576
   27af8:	000280c8 	cmpgei	zero,zero,2563
   27afc:	00028228 	cmpgeui	zero,zero,2568
   27b00:	00028428 	cmpgeui	zero,zero,2576
   27b04:	000281ac 	andhi	zero,zero,2566
   27b08:	000281b8 	rdprs	zero,zero,2566
   27b0c:	000281b8 	rdprs	zero,zero,2566
   27b10:	000281b8 	rdprs	zero,zero,2566
   27b14:	000281b8 	rdprs	zero,zero,2566
   27b18:	000281b8 	rdprs	zero,zero,2566
   27b1c:	000281b8 	rdprs	zero,zero,2566
   27b20:	000281b8 	rdprs	zero,zero,2566
   27b24:	000281b8 	rdprs	zero,zero,2566
   27b28:	000281b8 	rdprs	zero,zero,2566
   27b2c:	00028428 	cmpgeui	zero,zero,2576
   27b30:	00028428 	cmpgeui	zero,zero,2576
   27b34:	00028428 	cmpgeui	zero,zero,2576
   27b38:	00028428 	cmpgeui	zero,zero,2576
   27b3c:	00028428 	cmpgeui	zero,zero,2576
   27b40:	00028428 	cmpgeui	zero,zero,2576
   27b44:	00028428 	cmpgeui	zero,zero,2576
   27b48:	00028428 	cmpgeui	zero,zero,2576
   27b4c:	00028428 	cmpgeui	zero,zero,2576
   27b50:	00028428 	cmpgeui	zero,zero,2576
   27b54:	000281e4 	muli	zero,zero,2567
   27b58:	00028428 	cmpgeui	zero,zero,2576
   27b5c:	00028428 	cmpgeui	zero,zero,2576
   27b60:	00028428 	cmpgeui	zero,zero,2576
   27b64:	00028428 	cmpgeui	zero,zero,2576
   27b68:	00028428 	cmpgeui	zero,zero,2576
   27b6c:	00028428 	cmpgeui	zero,zero,2576
   27b70:	00028428 	cmpgeui	zero,zero,2576
   27b74:	00028428 	cmpgeui	zero,zero,2576
   27b78:	00028428 	cmpgeui	zero,zero,2576
   27b7c:	00028428 	cmpgeui	zero,zero,2576
   27b80:	00027c78 	rdprs	zero,zero,2545
   27b84:	00028428 	cmpgeui	zero,zero,2576
   27b88:	00028428 	cmpgeui	zero,zero,2576
   27b8c:	00028428 	cmpgeui	zero,zero,2576
   27b90:	00028428 	cmpgeui	zero,zero,2576
   27b94:	00028428 	cmpgeui	zero,zero,2576
   27b98:	00027c3c 	xorhi	zero,zero,2544
   27b9c:	00028428 	cmpgeui	zero,zero,2576
   27ba0:	00028428 	cmpgeui	zero,zero,2576
   27ba4:	00028124 	muli	zero,zero,2564
   27ba8:	00028428 	cmpgeui	zero,zero,2576
   27bac:	00028428 	cmpgeui	zero,zero,2576
   27bb0:	00028428 	cmpgeui	zero,zero,2576
   27bb4:	00028428 	cmpgeui	zero,zero,2576
   27bb8:	00028428 	cmpgeui	zero,zero,2576
   27bbc:	00028428 	cmpgeui	zero,zero,2576
   27bc0:	00028428 	cmpgeui	zero,zero,2576
   27bc4:	00028428 	cmpgeui	zero,zero,2576
   27bc8:	00028428 	cmpgeui	zero,zero,2576
   27bcc:	00028428 	cmpgeui	zero,zero,2576
   27bd0:	0002817c 	xorhi	zero,zero,2565
   27bd4:	00028314 	movui	zero,2572
   27bd8:	00028428 	cmpgeui	zero,zero,2576
   27bdc:	00028428 	cmpgeui	zero,zero,2576
   27be0:	00028428 	cmpgeui	zero,zero,2576
   27be4:	0002839c 	xori	zero,zero,2574
   27be8:	00028314 	movui	zero,2572
   27bec:	00028428 	cmpgeui	zero,zero,2576
   27bf0:	00028428 	cmpgeui	zero,zero,2576
   27bf4:	000283a8 	cmpgeui	zero,zero,2574
   27bf8:	00028428 	cmpgeui	zero,zero,2576
   27bfc:	00028268 	cmpgeui	zero,zero,2569
   27c00:	00027c7c 	xorhi	zero,zero,2545
   27c04:	00028350 	cmplti	zero,zero,2573
   27c08:	00028390 	cmplti	zero,zero,2574
   27c0c:	00028428 	cmpgeui	zero,zero,2576
   27c10:	000282b4 	movhi	zero,2570
   27c14:	00028428 	cmpgeui	zero,zero,2576
   27c18:	00027c40 	call	27c4 <__reset-0x1d83c>
   27c1c:	00028428 	cmpgeui	zero,zero,2576
   27c20:	00028428 	cmpgeui	zero,zero,2576
   27c24:	000283b8 	rdprs	zero,zero,2574
   27c28:	42000204 	addi	r8,r8,8
   27c2c:	dac12217 	ldw	r11,1160(sp)
   27c30:	5c97883a 	add	r11,r11,r18
   27c34:	dac12215 	stw	r11,1160(sp)
   27c38:	003f8c06 	br	27a6c <_gp+0xfffed6a0>
   27c3c:	ad400414 	ori	r21,r21,16
   27c40:	a880080c 	andi	r2,r21,32
   27c44:	10012f1e 	bne	r2,zero,28104 <___vfiprintf_internal_r+0x7e0>
   27c48:	a880040c 	andi	r2,r21,16
   27c4c:	1001ff1e 	bne	r2,zero,2844c <___vfiprintf_internal_r+0xb28>
   27c50:	a880100c 	andi	r2,r21,64
   27c54:	1001fd26 	beq	r2,zero,2844c <___vfiprintf_internal_r+0xb28>
   27c58:	da812117 	ldw	r10,1156(sp)
   27c5c:	002d883a 	mov	r22,zero
   27c60:	00800044 	movi	r2,1
   27c64:	5480000b 	ldhu	r18,0(r10)
   27c68:	52800104 	addi	r10,r10,4
   27c6c:	da812115 	stw	r10,1156(sp)
   27c70:	9009883a 	mov	r4,r18
   27c74:	00000a06 	br	27ca0 <___vfiprintf_internal_r+0x37c>
   27c78:	ad400414 	ori	r21,r21,16
   27c7c:	a880080c 	andi	r2,r21,32
   27c80:	10011426 	beq	r2,zero,280d4 <___vfiprintf_internal_r+0x7b0>
   27c84:	da812117 	ldw	r10,1156(sp)
   27c88:	0005883a 	mov	r2,zero
   27c8c:	54800017 	ldw	r18,0(r10)
   27c90:	55800117 	ldw	r22,4(r10)
   27c94:	52800204 	addi	r10,r10,8
   27c98:	da812115 	stw	r10,1156(sp)
   27c9c:	9588b03a 	or	r4,r18,r22
   27ca0:	d8011d85 	stb	zero,1142(sp)
   27ca4:	4823883a 	mov	r17,r9
   27ca8:	0019883a 	mov	r12,zero
   27cac:	48000216 	blt	r9,zero,27cb8 <___vfiprintf_internal_r+0x394>
   27cb0:	00ffdfc4 	movi	r3,-129
   27cb4:	a8ea703a 	and	r21,r21,r3
   27cb8:	2002221e 	bne	r4,zero,28544 <___vfiprintf_internal_r+0xc20>
   27cbc:	4802c726 	beq	r9,zero,287dc <___vfiprintf_internal_r+0xeb8>
   27cc0:	10803fcc 	andi	r2,r2,255
   27cc4:	00c00044 	movi	r3,1
   27cc8:	10c24426 	beq	r2,r3,285dc <___vfiprintf_internal_r+0xcb8>
   27ccc:	00c00084 	movi	r3,2
   27cd0:	10c2cc26 	beq	r2,r3,28804 <___vfiprintf_internal_r+0xee0>
   27cd4:	d8c10a04 	addi	r3,sp,1064
   27cd8:	9008d0fa 	srli	r4,r18,3
   27cdc:	b00a977a 	slli	r5,r22,29
   27ce0:	b02cd0fa 	srli	r22,r22,3
   27ce4:	948001cc 	andi	r18,r18,7
   27ce8:	90800c04 	addi	r2,r18,48
   27cec:	18ffffc4 	addi	r3,r3,-1
   27cf0:	2924b03a 	or	r18,r5,r4
   27cf4:	18800005 	stb	r2,0(r3)
   27cf8:	9588b03a 	or	r4,r18,r22
   27cfc:	203ff61e 	bne	r4,zero,27cd8 <_gp+0xfffed90c>
   27d00:	a900004c 	andi	r4,r21,1
   27d04:	d8c12415 	stw	r3,1168(sp)
   27d08:	2002fb1e 	bne	r4,zero,288f8 <___vfiprintf_internal_r+0xfd4>
   27d0c:	da811e17 	ldw	r10,1144(sp)
   27d10:	50e3c83a 	sub	r17,r10,r3
   27d14:	8825883a 	mov	r18,r17
   27d18:	8a40010e 	bge	r17,r9,27d20 <___vfiprintf_internal_r+0x3fc>
   27d1c:	4825883a 	mov	r18,r9
   27d20:	63003fcc 	andi	r12,r12,255
   27d24:	6300201c 	xori	r12,r12,128
   27d28:	633fe004 	addi	r12,r12,-128
   27d2c:	60000126 	beq	r12,zero,27d34 <___vfiprintf_internal_r+0x410>
   27d30:	94800044 	addi	r18,r18,1
   27d34:	ab80008c 	andi	r14,r21,2
   27d38:	70000126 	beq	r14,zero,27d40 <___vfiprintf_internal_r+0x41c>
   27d3c:	94800084 	addi	r18,r18,2
   27d40:	ad80210c 	andi	r22,r21,132
   27d44:	b001df1e 	bne	r22,zero,284c4 <___vfiprintf_internal_r+0xba0>
   27d48:	9c8fc83a 	sub	r7,r19,r18
   27d4c:	01c1dd0e 	bge	zero,r7,284c4 <___vfiprintf_internal_r+0xba0>
   27d50:	03000404 	movi	r12,16
   27d54:	d8811c17 	ldw	r2,1136(sp)
   27d58:	61c3920e 	bge	r12,r7,28ba4 <___vfiprintf_internal_r+0x1280>
   27d5c:	028000f4 	movhi	r10,3
   27d60:	52819404 	addi	r10,r10,1616
   27d64:	dc012915 	stw	r16,1188(sp)
   27d68:	d9811b17 	ldw	r6,1132(sp)
   27d6c:	da812315 	stw	r10,1164(sp)
   27d70:	00c001c4 	movi	r3,7
   27d74:	da412515 	stw	r9,1172(sp)
   27d78:	db812815 	stw	r14,1184(sp)
   27d7c:	3821883a 	mov	r16,r7
   27d80:	00000506 	br	27d98 <___vfiprintf_internal_r+0x474>
   27d84:	31400084 	addi	r5,r6,2
   27d88:	42000204 	addi	r8,r8,8
   27d8c:	200d883a 	mov	r6,r4
   27d90:	843ffc04 	addi	r16,r16,-16
   27d94:	64000d0e 	bge	r12,r16,27dcc <___vfiprintf_internal_r+0x4a8>
   27d98:	10800404 	addi	r2,r2,16
   27d9c:	31000044 	addi	r4,r6,1
   27da0:	47000015 	stw	fp,0(r8)
   27da4:	43000115 	stw	r12,4(r8)
   27da8:	d8811c15 	stw	r2,1136(sp)
   27dac:	d9011b15 	stw	r4,1132(sp)
   27db0:	193ff40e 	bge	r3,r4,27d84 <_gp+0xfffed9b8>
   27db4:	1001b51e 	bne	r2,zero,2848c <___vfiprintf_internal_r+0xb68>
   27db8:	843ffc04 	addi	r16,r16,-16
   27dbc:	000d883a 	mov	r6,zero
   27dc0:	01400044 	movi	r5,1
   27dc4:	d811883a 	mov	r8,sp
   27dc8:	643ff316 	blt	r12,r16,27d98 <_gp+0xfffed9cc>
   27dcc:	800f883a 	mov	r7,r16
   27dd0:	da412517 	ldw	r9,1172(sp)
   27dd4:	db812817 	ldw	r14,1184(sp)
   27dd8:	dc012917 	ldw	r16,1188(sp)
   27ddc:	dac12317 	ldw	r11,1164(sp)
   27de0:	3887883a 	add	r3,r7,r2
   27de4:	41c00115 	stw	r7,4(r8)
   27de8:	42c00015 	stw	r11,0(r8)
   27dec:	d8c11c15 	stw	r3,1136(sp)
   27df0:	d9411b15 	stw	r5,1132(sp)
   27df4:	008001c4 	movi	r2,7
   27df8:	11429316 	blt	r2,r5,28848 <___vfiprintf_internal_r+0xf24>
   27dfc:	d9011d87 	ldb	r4,1142(sp)
   27e00:	42000204 	addi	r8,r8,8
   27e04:	28800044 	addi	r2,r5,1
   27e08:	2001b31e 	bne	r4,zero,284d8 <___vfiprintf_internal_r+0xbb4>
   27e0c:	70000c26 	beq	r14,zero,27e40 <___vfiprintf_internal_r+0x51c>
   27e10:	d9011d04 	addi	r4,sp,1140
   27e14:	18c00084 	addi	r3,r3,2
   27e18:	41000015 	stw	r4,0(r8)
   27e1c:	01000084 	movi	r4,2
   27e20:	41000115 	stw	r4,4(r8)
   27e24:	d8c11c15 	stw	r3,1136(sp)
   27e28:	d8811b15 	stw	r2,1132(sp)
   27e2c:	010001c4 	movi	r4,7
   27e30:	20826516 	blt	r4,r2,287c8 <___vfiprintf_internal_r+0xea4>
   27e34:	100b883a 	mov	r5,r2
   27e38:	42000204 	addi	r8,r8,8
   27e3c:	10800044 	addi	r2,r2,1
   27e40:	01002004 	movi	r4,128
   27e44:	b1021a26 	beq	r22,r4,286b0 <___vfiprintf_internal_r+0xd8c>
   27e48:	4c6dc83a 	sub	r22,r9,r17
   27e4c:	0580230e 	bge	zero,r22,27edc <___vfiprintf_internal_r+0x5b8>
   27e50:	01c00404 	movi	r7,16
   27e54:	3d83300e 	bge	r7,r22,28b18 <___vfiprintf_internal_r+0x11f4>
   27e58:	008000f4 	movhi	r2,3
   27e5c:	10819004 	addi	r2,r2,1600
   27e60:	d8812315 	stw	r2,1164(sp)
   27e64:	030001c4 	movi	r12,7
   27e68:	00000506 	br	27e80 <___vfiprintf_internal_r+0x55c>
   27e6c:	28800084 	addi	r2,r5,2
   27e70:	42000204 	addi	r8,r8,8
   27e74:	200b883a 	mov	r5,r4
   27e78:	b5bffc04 	addi	r22,r22,-16
   27e7c:	3d800d0e 	bge	r7,r22,27eb4 <___vfiprintf_internal_r+0x590>
   27e80:	18c00404 	addi	r3,r3,16
   27e84:	29000044 	addi	r4,r5,1
   27e88:	45c00015 	stw	r23,0(r8)
   27e8c:	41c00115 	stw	r7,4(r8)
   27e90:	d8c11c15 	stw	r3,1136(sp)
   27e94:	d9011b15 	stw	r4,1132(sp)
   27e98:	613ff40e 	bge	r12,r4,27e6c <_gp+0xfffedaa0>
   27e9c:	18019b1e 	bne	r3,zero,2850c <___vfiprintf_internal_r+0xbe8>
   27ea0:	b5bffc04 	addi	r22,r22,-16
   27ea4:	000b883a 	mov	r5,zero
   27ea8:	00800044 	movi	r2,1
   27eac:	d811883a 	mov	r8,sp
   27eb0:	3dbff316 	blt	r7,r22,27e80 <_gp+0xfffedab4>
   27eb4:	da812317 	ldw	r10,1164(sp)
   27eb8:	1d87883a 	add	r3,r3,r22
   27ebc:	45800115 	stw	r22,4(r8)
   27ec0:	42800015 	stw	r10,0(r8)
   27ec4:	d8c11c15 	stw	r3,1136(sp)
   27ec8:	d8811b15 	stw	r2,1132(sp)
   27ecc:	010001c4 	movi	r4,7
   27ed0:	2081dd16 	blt	r4,r2,28648 <___vfiprintf_internal_r+0xd24>
   27ed4:	42000204 	addi	r8,r8,8
   27ed8:	10800044 	addi	r2,r2,1
   27edc:	da812417 	ldw	r10,1168(sp)
   27ee0:	1c47883a 	add	r3,r3,r17
   27ee4:	44400115 	stw	r17,4(r8)
   27ee8:	42800015 	stw	r10,0(r8)
   27eec:	d8c11c15 	stw	r3,1136(sp)
   27ef0:	d8811b15 	stw	r2,1132(sp)
   27ef4:	010001c4 	movi	r4,7
   27ef8:	2081dc0e 	bge	r4,r2,2866c <___vfiprintf_internal_r+0xd48>
   27efc:	1802611e 	bne	r3,zero,28884 <___vfiprintf_internal_r+0xf60>
   27f00:	d8011b15 	stw	zero,1132(sp)
   27f04:	aac0010c 	andi	r11,r21,4
   27f08:	58002726 	beq	r11,zero,27fa8 <___vfiprintf_internal_r+0x684>
   27f0c:	9ca3c83a 	sub	r17,r19,r18
   27f10:	d811883a 	mov	r8,sp
   27f14:	0443510e 	bge	zero,r17,28c5c <___vfiprintf_internal_r+0x1338>
   27f18:	01c00404 	movi	r7,16
   27f1c:	3c43320e 	bge	r7,r17,28be8 <___vfiprintf_internal_r+0x12c4>
   27f20:	008000f4 	movhi	r2,3
   27f24:	10819404 	addi	r2,r2,1616
   27f28:	d9011b17 	ldw	r4,1132(sp)
   27f2c:	d8812315 	stw	r2,1164(sp)
   27f30:	382d883a 	mov	r22,r7
   27f34:	054001c4 	movi	r21,7
   27f38:	00000506 	br	27f50 <___vfiprintf_internal_r+0x62c>
   27f3c:	21400084 	addi	r5,r4,2
   27f40:	42000204 	addi	r8,r8,8
   27f44:	1009883a 	mov	r4,r2
   27f48:	8c7ffc04 	addi	r17,r17,-16
   27f4c:	b4400d0e 	bge	r22,r17,27f84 <___vfiprintf_internal_r+0x660>
   27f50:	18c00404 	addi	r3,r3,16
   27f54:	20800044 	addi	r2,r4,1
   27f58:	47000015 	stw	fp,0(r8)
   27f5c:	45800115 	stw	r22,4(r8)
   27f60:	d8c11c15 	stw	r3,1136(sp)
   27f64:	d8811b15 	stw	r2,1132(sp)
   27f68:	a8bff40e 	bge	r21,r2,27f3c <_gp+0xfffedb70>
   27f6c:	1801ac1e 	bne	r3,zero,28620 <___vfiprintf_internal_r+0xcfc>
   27f70:	8c7ffc04 	addi	r17,r17,-16
   27f74:	0009883a 	mov	r4,zero
   27f78:	01400044 	movi	r5,1
   27f7c:	d811883a 	mov	r8,sp
   27f80:	b47ff316 	blt	r22,r17,27f50 <_gp+0xfffedb84>
   27f84:	da812317 	ldw	r10,1164(sp)
   27f88:	1c47883a 	add	r3,r3,r17
   27f8c:	44400115 	stw	r17,4(r8)
   27f90:	42800015 	stw	r10,0(r8)
   27f94:	d8c11c15 	stw	r3,1136(sp)
   27f98:	d9411b15 	stw	r5,1132(sp)
   27f9c:	008001c4 	movi	r2,7
   27fa0:	1141b70e 	bge	r2,r5,28680 <___vfiprintf_internal_r+0xd5c>
   27fa4:	1802cf1e 	bne	r3,zero,28ae4 <___vfiprintf_internal_r+0x11c0>
   27fa8:	94c2ca16 	blt	r18,r19,28ad4 <___vfiprintf_internal_r+0x11b0>
   27fac:	dac12217 	ldw	r11,1160(sp)
   27fb0:	5c97883a 	add	r11,r11,r18
   27fb4:	dac12215 	stw	r11,1160(sp)
   27fb8:	d8011b15 	stw	zero,1132(sp)
   27fbc:	d811883a 	mov	r8,sp
   27fc0:	003e8d06 	br	279f8 <_gp+0xfffed62c>
   27fc4:	d9012017 	ldw	r4,1152(sp)
   27fc8:	a00b883a 	mov	r5,r20
   27fcc:	00226e40 	call	226e4 <__swsetup_r>
   27fd0:	10002c1e 	bne	r2,zero,28084 <___vfiprintf_internal_r+0x760>
   27fd4:	a0c0030b 	ldhu	r3,12(r20)
   27fd8:	01000284 	movi	r4,10
   27fdc:	1805883a 	mov	r2,r3
   27fe0:	1080068c 	andi	r2,r2,26
   27fe4:	113e731e 	bne	r2,r4,279b4 <_gp+0xfffed5e8>
   27fe8:	a080038b 	ldhu	r2,14(r20)
   27fec:	113fffcc 	andi	r4,r2,65535
   27ff0:	2120001c 	xori	r4,r4,32768
   27ff4:	21200004 	addi	r4,r4,-32768
   27ff8:	203e6e16 	blt	r4,zero,279b4 <_gp+0xfffed5e8>
   27ffc:	a3001917 	ldw	r12,100(r20)
   28000:	a2c00717 	ldw	r11,28(r20)
   28004:	a2800917 	ldw	r10,36(r20)
   28008:	d9012017 	ldw	r4,1152(sp)
   2800c:	d9c12117 	ldw	r7,1156(sp)
   28010:	02410004 	movi	r9,1024
   28014:	18ffff4c 	andi	r3,r3,65533
   28018:	da4b883a 	add	r5,sp,r9
   2801c:	b00d883a 	mov	r6,r22
   28020:	d8c1030d 	sth	r3,1036(sp)
   28024:	db011915 	stw	r12,1124(sp)
   28028:	d881038d 	sth	r2,1038(sp)
   2802c:	dac10715 	stw	r11,1052(sp)
   28030:	da810915 	stw	r10,1060(sp)
   28034:	dec10015 	stw	sp,1024(sp)
   28038:	dec10415 	stw	sp,1040(sp)
   2803c:	da410215 	stw	r9,1032(sp)
   28040:	da410515 	stw	r9,1044(sp)
   28044:	d8010615 	stw	zero,1048(sp)
   28048:	00279240 	call	27924 <___vfiprintf_internal_r>
   2804c:	1021883a 	mov	r16,r2
   28050:	10000416 	blt	r2,zero,28064 <___vfiprintf_internal_r+0x740>
   28054:	d9012017 	ldw	r4,1152(sp)
   28058:	d9410004 	addi	r5,sp,1024
   2805c:	002413c0 	call	2413c <_fflush_r>
   28060:	1002fc1e 	bne	r2,zero,28c54 <___vfiprintf_internal_r+0x1330>
   28064:	d881030b 	ldhu	r2,1036(sp)
   28068:	1080100c 	andi	r2,r2,64
   2806c:	10000326 	beq	r2,zero,2807c <___vfiprintf_internal_r+0x758>
   28070:	a080030b 	ldhu	r2,12(r20)
   28074:	10801014 	ori	r2,r2,64
   28078:	a080030d 	sth	r2,12(r20)
   2807c:	8005883a 	mov	r2,r16
   28080:	00000106 	br	28088 <___vfiprintf_internal_r+0x764>
   28084:	00bfffc4 	movi	r2,-1
   28088:	dfc13517 	ldw	ra,1236(sp)
   2808c:	df013417 	ldw	fp,1232(sp)
   28090:	ddc13317 	ldw	r23,1228(sp)
   28094:	dd813217 	ldw	r22,1224(sp)
   28098:	dd413117 	ldw	r21,1220(sp)
   2809c:	dd013017 	ldw	r20,1216(sp)
   280a0:	dcc12f17 	ldw	r19,1212(sp)
   280a4:	dc812e17 	ldw	r18,1208(sp)
   280a8:	dc412d17 	ldw	r17,1204(sp)
   280ac:	dc012c17 	ldw	r16,1200(sp)
   280b0:	dec13604 	addi	sp,sp,1240
   280b4:	f800283a 	ret
   280b8:	00246e40 	call	246e4 <__sinit>
   280bc:	003e2b06 	br	2796c <_gp+0xfffed5a0>
   280c0:	04e7c83a 	sub	r19,zero,r19
   280c4:	d8812115 	stw	r2,1156(sp)
   280c8:	ad400114 	ori	r21,r21,4
   280cc:	80c00007 	ldb	r3,0(r16)
   280d0:	003e7306 	br	27aa0 <_gp+0xfffed6d4>
   280d4:	a880040c 	andi	r2,r21,16
   280d8:	1000e41e 	bne	r2,zero,2846c <___vfiprintf_internal_r+0xb48>
   280dc:	a880100c 	andi	r2,r21,64
   280e0:	1000e226 	beq	r2,zero,2846c <___vfiprintf_internal_r+0xb48>
   280e4:	da812117 	ldw	r10,1156(sp)
   280e8:	002d883a 	mov	r22,zero
   280ec:	0005883a 	mov	r2,zero
   280f0:	5480000b 	ldhu	r18,0(r10)
   280f4:	52800104 	addi	r10,r10,4
   280f8:	da812115 	stw	r10,1156(sp)
   280fc:	9009883a 	mov	r4,r18
   28100:	003ee706 	br	27ca0 <_gp+0xfffed8d4>
   28104:	da812117 	ldw	r10,1156(sp)
   28108:	00800044 	movi	r2,1
   2810c:	54800017 	ldw	r18,0(r10)
   28110:	55800117 	ldw	r22,4(r10)
   28114:	52800204 	addi	r10,r10,8
   28118:	da812115 	stw	r10,1156(sp)
   2811c:	9588b03a 	or	r4,r18,r22
   28120:	003edf06 	br	27ca0 <_gp+0xfffed8d4>
   28124:	02c000f4 	movhi	r11,3
   28128:	5ac12a04 	addi	r11,r11,1192
   2812c:	d9811d85 	stb	r6,1142(sp)
   28130:	dac12615 	stw	r11,1176(sp)
   28134:	a900080c 	andi	r4,r21,32
   28138:	d8812117 	ldw	r2,1156(sp)
   2813c:	2000a526 	beq	r4,zero,283d4 <___vfiprintf_internal_r+0xab0>
   28140:	da812117 	ldw	r10,1156(sp)
   28144:	14800017 	ldw	r18,0(r2)
   28148:	15800117 	ldw	r22,4(r2)
   2814c:	52800204 	addi	r10,r10,8
   28150:	da812115 	stw	r10,1156(sp)
   28154:	a880004c 	andi	r2,r21,1
   28158:	1001d926 	beq	r2,zero,288c0 <___vfiprintf_internal_r+0xf9c>
   2815c:	9588b03a 	or	r4,r18,r22
   28160:	20024426 	beq	r4,zero,28a74 <___vfiprintf_internal_r+0x1150>
   28164:	00800c04 	movi	r2,48
   28168:	d8811d05 	stb	r2,1140(sp)
   2816c:	d8c11d45 	stb	r3,1141(sp)
   28170:	ad400094 	ori	r21,r21,2
   28174:	00800084 	movi	r2,2
   28178:	003ec906 	br	27ca0 <_gp+0xfffed8d4>
   2817c:	da812117 	ldw	r10,1156(sp)
   28180:	04800044 	movi	r18,1
   28184:	dac10004 	addi	r11,sp,1024
   28188:	50800017 	ldw	r2,0(r10)
   2818c:	52800104 	addi	r10,r10,4
   28190:	d8011d85 	stb	zero,1142(sp)
   28194:	d8810005 	stb	r2,1024(sp)
   28198:	da812115 	stw	r10,1156(sp)
   2819c:	9023883a 	mov	r17,r18
   281a0:	dac12415 	stw	r11,1168(sp)
   281a4:	0013883a 	mov	r9,zero
   281a8:	003ee206 	br	27d34 <_gp+0xfffed968>
   281ac:	ad402014 	ori	r21,r21,128
   281b0:	80c00007 	ldb	r3,0(r16)
   281b4:	003e3a06 	br	27aa0 <_gp+0xfffed6d4>
   281b8:	8015883a 	mov	r10,r16
   281bc:	0027883a 	mov	r19,zero
   281c0:	18bff404 	addi	r2,r3,-48
   281c4:	50c00007 	ldb	r3,0(r10)
   281c8:	9cc002a4 	muli	r19,r19,10
   281cc:	84000044 	addi	r16,r16,1
   281d0:	8015883a 	mov	r10,r16
   281d4:	98a7883a 	add	r19,r19,r2
   281d8:	18bff404 	addi	r2,r3,-48
   281dc:	28bff92e 	bgeu	r5,r2,281c4 <_gp+0xfffeddf8>
   281e0:	003e3006 	br	27aa4 <_gp+0xfffed6d8>
   281e4:	ad400414 	ori	r21,r21,16
   281e8:	d9811d85 	stb	r6,1142(sp)
   281ec:	a880080c 	andi	r2,r21,32
   281f0:	d8c12117 	ldw	r3,1156(sp)
   281f4:	10004b26 	beq	r2,zero,28324 <___vfiprintf_internal_r+0xa00>
   281f8:	da812117 	ldw	r10,1156(sp)
   281fc:	18800117 	ldw	r2,4(r3)
   28200:	1c800017 	ldw	r18,0(r3)
   28204:	52800204 	addi	r10,r10,8
   28208:	da812115 	stw	r10,1156(sp)
   2820c:	102d883a 	mov	r22,r2
   28210:	1001f116 	blt	r2,zero,289d8 <___vfiprintf_internal_r+0x10b4>
   28214:	db011d83 	ldbu	r12,1142(sp)
   28218:	4823883a 	mov	r17,r9
   2821c:	00800044 	movi	r2,1
   28220:	9588b03a 	or	r4,r18,r22
   28224:	003ea106 	br	27cac <_gp+0xfffed8e0>
   28228:	80c00007 	ldb	r3,0(r16)
   2822c:	82800044 	addi	r10,r16,1
   28230:	1b027f26 	beq	r3,r12,28c30 <___vfiprintf_internal_r+0x130c>
   28234:	18bff404 	addi	r2,r3,-48
   28238:	5021883a 	mov	r16,r10
   2823c:	0013883a 	mov	r9,zero
   28240:	28be1836 	bltu	r5,r2,27aa4 <_gp+0xfffed6d8>
   28244:	80c00007 	ldb	r3,0(r16)
   28248:	4a4002a4 	muli	r9,r9,10
   2824c:	84000044 	addi	r16,r16,1
   28250:	1253883a 	add	r9,r2,r9
   28254:	18bff404 	addi	r2,r3,-48
   28258:	28bffa2e 	bgeu	r5,r2,28244 <_gp+0xfffede78>
   2825c:	483e110e 	bge	r9,zero,27aa4 <_gp+0xfffed6d8>
   28260:	027fffc4 	movi	r9,-1
   28264:	003e0f06 	br	27aa4 <_gp+0xfffed6d8>
   28268:	d9811d85 	stb	r6,1142(sp)
   2826c:	a880080c 	andi	r2,r21,32
   28270:	1001ee26 	beq	r2,zero,28a2c <___vfiprintf_internal_r+0x1108>
   28274:	da812117 	ldw	r10,1156(sp)
   28278:	dac12217 	ldw	r11,1160(sp)
   2827c:	50800017 	ldw	r2,0(r10)
   28280:	5807d7fa 	srai	r3,r11,31
   28284:	52800104 	addi	r10,r10,4
   28288:	da812115 	stw	r10,1156(sp)
   2828c:	12c00015 	stw	r11,0(r2)
   28290:	10c00115 	stw	r3,4(r2)
   28294:	003dd806 	br	279f8 <_gp+0xfffed62c>
   28298:	30803fcc 	andi	r2,r6,255
   2829c:	1080201c 	xori	r2,r2,128
   282a0:	10bfe004 	addi	r2,r2,-128
   282a4:	1001df1e 	bne	r2,zero,28a24 <___vfiprintf_internal_r+0x1100>
   282a8:	01800804 	movi	r6,32
   282ac:	80c00007 	ldb	r3,0(r16)
   282b0:	003dfb06 	br	27aa0 <_gp+0xfffed6d4>
   282b4:	da812117 	ldw	r10,1156(sp)
   282b8:	dac12117 	ldw	r11,1156(sp)
   282bc:	d8011d85 	stb	zero,1142(sp)
   282c0:	52800017 	ldw	r10,0(r10)
   282c4:	5d800104 	addi	r22,r11,4
   282c8:	da812415 	stw	r10,1168(sp)
   282cc:	50023b26 	beq	r10,zero,28bbc <___vfiprintf_internal_r+0x1298>
   282d0:	d9012417 	ldw	r4,1168(sp)
   282d4:	48021f16 	blt	r9,zero,28b54 <___vfiprintf_internal_r+0x1230>
   282d8:	480d883a 	mov	r6,r9
   282dc:	000b883a 	mov	r5,zero
   282e0:	da012a15 	stw	r8,1192(sp)
   282e4:	da412b15 	stw	r9,1196(sp)
   282e8:	0025b9c0 	call	25b9c <memchr>
   282ec:	da012a17 	ldw	r8,1192(sp)
   282f0:	da412b17 	ldw	r9,1196(sp)
   282f4:	10024726 	beq	r2,zero,28c14 <___vfiprintf_internal_r+0x12f0>
   282f8:	d8c12417 	ldw	r3,1168(sp)
   282fc:	10e3c83a 	sub	r17,r2,r3
   28300:	4c41f616 	blt	r9,r17,28adc <___vfiprintf_internal_r+0x11b8>
   28304:	db011d83 	ldbu	r12,1142(sp)
   28308:	dd812115 	stw	r22,1156(sp)
   2830c:	0013883a 	mov	r9,zero
   28310:	003e8006 	br	27d14 <_gp+0xfffed948>
   28314:	d9811d85 	stb	r6,1142(sp)
   28318:	a880080c 	andi	r2,r21,32
   2831c:	d8c12117 	ldw	r3,1156(sp)
   28320:	103fb51e 	bne	r2,zero,281f8 <_gp+0xfffede2c>
   28324:	a880040c 	andi	r2,r21,16
   28328:	10015e1e 	bne	r2,zero,288a4 <___vfiprintf_internal_r+0xf80>
   2832c:	a880100c 	andi	r2,r21,64
   28330:	10015c26 	beq	r2,zero,288a4 <___vfiprintf_internal_r+0xf80>
   28334:	1c80000f 	ldh	r18,0(r3)
   28338:	da812117 	ldw	r10,1156(sp)
   2833c:	902dd7fa 	srai	r22,r18,31
   28340:	52800104 	addi	r10,r10,4
   28344:	da812115 	stw	r10,1156(sp)
   28348:	b005883a 	mov	r2,r22
   2834c:	003fb006 	br	28210 <_gp+0xfffede44>
   28350:	da812117 	ldw	r10,1156(sp)
   28354:	00800c04 	movi	r2,48
   28358:	02c000f4 	movhi	r11,3
   2835c:	54800017 	ldw	r18,0(r10)
   28360:	d8811d05 	stb	r2,1140(sp)
   28364:	52800104 	addi	r10,r10,4
   28368:	00801e04 	movi	r2,120
   2836c:	5ac12f04 	addi	r11,r11,1212
   28370:	d8811d45 	stb	r2,1141(sp)
   28374:	002d883a 	mov	r22,zero
   28378:	ad400094 	ori	r21,r21,2
   2837c:	da812115 	stw	r10,1156(sp)
   28380:	dac12615 	stw	r11,1176(sp)
   28384:	00800084 	movi	r2,2
   28388:	9009883a 	mov	r4,r18
   2838c:	003e4406 	br	27ca0 <_gp+0xfffed8d4>
   28390:	ad400814 	ori	r21,r21,32
   28394:	80c00007 	ldb	r3,0(r16)
   28398:	003dc106 	br	27aa0 <_gp+0xfffed6d4>
   2839c:	ad401014 	ori	r21,r21,64
   283a0:	80c00007 	ldb	r3,0(r16)
   283a4:	003dbe06 	br	27aa0 <_gp+0xfffed6d4>
   283a8:	80c00007 	ldb	r3,0(r16)
   283ac:	19c1de26 	beq	r3,r7,28b28 <___vfiprintf_internal_r+0x1204>
   283b0:	ad400414 	ori	r21,r21,16
   283b4:	003dba06 	br	27aa0 <_gp+0xfffed6d4>
   283b8:	008000f4 	movhi	r2,3
   283bc:	10812f04 	addi	r2,r2,1212
   283c0:	d8812615 	stw	r2,1176(sp)
   283c4:	d9811d85 	stb	r6,1142(sp)
   283c8:	a900080c 	andi	r4,r21,32
   283cc:	d8812117 	ldw	r2,1156(sp)
   283d0:	203f5b1e 	bne	r4,zero,28140 <_gp+0xfffedd74>
   283d4:	a900040c 	andi	r4,r21,16
   283d8:	2001a826 	beq	r4,zero,28a7c <___vfiprintf_internal_r+0x1158>
   283dc:	dac12117 	ldw	r11,1156(sp)
   283e0:	14800017 	ldw	r18,0(r2)
   283e4:	002d883a 	mov	r22,zero
   283e8:	5ac00104 	addi	r11,r11,4
   283ec:	dac12115 	stw	r11,1156(sp)
   283f0:	003f5806 	br	28154 <_gp+0xfffedd88>
   283f4:	da812117 	ldw	r10,1156(sp)
   283f8:	54c00017 	ldw	r19,0(r10)
   283fc:	50800104 	addi	r2,r10,4
   28400:	983f2f16 	blt	r19,zero,280c0 <_gp+0xfffedcf4>
   28404:	d8812115 	stw	r2,1156(sp)
   28408:	80c00007 	ldb	r3,0(r16)
   2840c:	003da406 	br	27aa0 <_gp+0xfffed6d4>
   28410:	01800ac4 	movi	r6,43
   28414:	80c00007 	ldb	r3,0(r16)
   28418:	003da106 	br	27aa0 <_gp+0xfffed6d4>
   2841c:	ad400054 	ori	r21,r21,1
   28420:	80c00007 	ldb	r3,0(r16)
   28424:	003d9e06 	br	27aa0 <_gp+0xfffed6d4>
   28428:	d9811d85 	stb	r6,1142(sp)
   2842c:	18007126 	beq	r3,zero,285f4 <___vfiprintf_internal_r+0xcd0>
   28430:	04800044 	movi	r18,1
   28434:	d8c10005 	stb	r3,1024(sp)
   28438:	d8c10004 	addi	r3,sp,1024
   2843c:	d8011d85 	stb	zero,1142(sp)
   28440:	9023883a 	mov	r17,r18
   28444:	d8c12415 	stw	r3,1168(sp)
   28448:	003f5606 	br	281a4 <_gp+0xfffeddd8>
   2844c:	dac12117 	ldw	r11,1156(sp)
   28450:	002d883a 	mov	r22,zero
   28454:	00800044 	movi	r2,1
   28458:	5c800017 	ldw	r18,0(r11)
   2845c:	5ac00104 	addi	r11,r11,4
   28460:	dac12115 	stw	r11,1156(sp)
   28464:	9009883a 	mov	r4,r18
   28468:	003e0d06 	br	27ca0 <_gp+0xfffed8d4>
   2846c:	dac12117 	ldw	r11,1156(sp)
   28470:	002d883a 	mov	r22,zero
   28474:	0005883a 	mov	r2,zero
   28478:	5c800017 	ldw	r18,0(r11)
   2847c:	5ac00104 	addi	r11,r11,4
   28480:	dac12115 	stw	r11,1156(sp)
   28484:	9009883a 	mov	r4,r18
   28488:	003e0506 	br	27ca0 <_gp+0xfffed8d4>
   2848c:	d9012017 	ldw	r4,1152(sp)
   28490:	a00b883a 	mov	r5,r20
   28494:	d9811a04 	addi	r6,sp,1128
   28498:	d8c12a15 	stw	r3,1192(sp)
   2849c:	db012b15 	stw	r12,1196(sp)
   284a0:	00278100 	call	27810 <__sprint_r.part.0>
   284a4:	d8c12a17 	ldw	r3,1192(sp)
   284a8:	db012b17 	ldw	r12,1196(sp)
   284ac:	1000571e 	bne	r2,zero,2860c <___vfiprintf_internal_r+0xce8>
   284b0:	d9811b17 	ldw	r6,1132(sp)
   284b4:	d8811c17 	ldw	r2,1136(sp)
   284b8:	d811883a 	mov	r8,sp
   284bc:	31400044 	addi	r5,r6,1
   284c0:	003e3306 	br	27d90 <_gp+0xfffed9c4>
   284c4:	d9411b17 	ldw	r5,1132(sp)
   284c8:	d8c11c17 	ldw	r3,1136(sp)
   284cc:	28800044 	addi	r2,r5,1
   284d0:	d9011d87 	ldb	r4,1142(sp)
   284d4:	203e4d26 	beq	r4,zero,27e0c <_gp+0xfffeda40>
   284d8:	01000044 	movi	r4,1
   284dc:	d9411d84 	addi	r5,sp,1142
   284e0:	1907883a 	add	r3,r3,r4
   284e4:	41400015 	stw	r5,0(r8)
   284e8:	41000115 	stw	r4,4(r8)
   284ec:	d8c11c15 	stw	r3,1136(sp)
   284f0:	d8811b15 	stw	r2,1132(sp)
   284f4:	014001c4 	movi	r5,7
   284f8:	2880aa16 	blt	r5,r2,287a4 <___vfiprintf_internal_r+0xe80>
   284fc:	100b883a 	mov	r5,r2
   28500:	42000204 	addi	r8,r8,8
   28504:	10800044 	addi	r2,r2,1
   28508:	003e4006 	br	27e0c <_gp+0xfffeda40>
   2850c:	d9012017 	ldw	r4,1152(sp)
   28510:	a00b883a 	mov	r5,r20
   28514:	d9811a04 	addi	r6,sp,1128
   28518:	d9c12a15 	stw	r7,1192(sp)
   2851c:	db012b15 	stw	r12,1196(sp)
   28520:	00278100 	call	27810 <__sprint_r.part.0>
   28524:	d9c12a17 	ldw	r7,1192(sp)
   28528:	db012b17 	ldw	r12,1196(sp)
   2852c:	1000371e 	bne	r2,zero,2860c <___vfiprintf_internal_r+0xce8>
   28530:	d9411b17 	ldw	r5,1132(sp)
   28534:	d8c11c17 	ldw	r3,1136(sp)
   28538:	d811883a 	mov	r8,sp
   2853c:	28800044 	addi	r2,r5,1
   28540:	003e4d06 	br	27e78 <_gp+0xfffedaac>
   28544:	10803fcc 	andi	r2,r2,255
   28548:	00c00044 	movi	r3,1
   2854c:	10fddf1e 	bne	r2,r3,27ccc <_gp+0xfffed900>
   28550:	b000021e 	bne	r22,zero,2855c <___vfiprintf_internal_r+0xc38>
   28554:	00800244 	movi	r2,9
   28558:	1480202e 	bgeu	r2,r18,285dc <___vfiprintf_internal_r+0xcb8>
   2855c:	dc012515 	stw	r16,1172(sp)
   28560:	dc410a04 	addi	r17,sp,1064
   28564:	9021883a 	mov	r16,r18
   28568:	da012415 	stw	r8,1168(sp)
   2856c:	b025883a 	mov	r18,r22
   28570:	da412315 	stw	r9,1164(sp)
   28574:	602d883a 	mov	r22,r12
   28578:	8009883a 	mov	r4,r16
   2857c:	900b883a 	mov	r5,r18
   28580:	01800284 	movi	r6,10
   28584:	000f883a 	mov	r7,zero
   28588:	0029b9c0 	call	29b9c <__umoddi3>
   2858c:	10800c04 	addi	r2,r2,48
   28590:	8c7fffc4 	addi	r17,r17,-1
   28594:	8009883a 	mov	r4,r16
   28598:	900b883a 	mov	r5,r18
   2859c:	01800284 	movi	r6,10
   285a0:	000f883a 	mov	r7,zero
   285a4:	88800005 	stb	r2,0(r17)
   285a8:	00295dc0 	call	295dc <__udivdi3>
   285ac:	1021883a 	mov	r16,r2
   285b0:	10c4b03a 	or	r2,r2,r3
   285b4:	1825883a 	mov	r18,r3
   285b8:	103fef1e 	bne	r2,zero,28578 <_gp+0xfffee1ac>
   285bc:	da811e17 	ldw	r10,1144(sp)
   285c0:	da012417 	ldw	r8,1168(sp)
   285c4:	da412317 	ldw	r9,1164(sp)
   285c8:	dc412415 	stw	r17,1168(sp)
   285cc:	b019883a 	mov	r12,r22
   285d0:	dc012517 	ldw	r16,1172(sp)
   285d4:	5463c83a 	sub	r17,r10,r17
   285d8:	003dce06 	br	27d14 <_gp+0xfffed948>
   285dc:	94800c04 	addi	r18,r18,48
   285e0:	d8c109c4 	addi	r3,sp,1063
   285e4:	dc8109c5 	stb	r18,1063(sp)
   285e8:	dc412717 	ldw	r17,1180(sp)
   285ec:	d8c12415 	stw	r3,1168(sp)
   285f0:	003dc806 	br	27d14 <_gp+0xfffed948>
   285f4:	d8811c17 	ldw	r2,1136(sp)
   285f8:	10000426 	beq	r2,zero,2860c <___vfiprintf_internal_r+0xce8>
   285fc:	d9012017 	ldw	r4,1152(sp)
   28600:	a00b883a 	mov	r5,r20
   28604:	d9811a04 	addi	r6,sp,1128
   28608:	00278100 	call	27810 <__sprint_r.part.0>
   2860c:	a080030b 	ldhu	r2,12(r20)
   28610:	1080100c 	andi	r2,r2,64
   28614:	103e9b1e 	bne	r2,zero,28084 <_gp+0xfffedcb8>
   28618:	d8812217 	ldw	r2,1160(sp)
   2861c:	003e9a06 	br	28088 <_gp+0xfffedcbc>
   28620:	d9012017 	ldw	r4,1152(sp)
   28624:	a00b883a 	mov	r5,r20
   28628:	d9811a04 	addi	r6,sp,1128
   2862c:	00278100 	call	27810 <__sprint_r.part.0>
   28630:	103ff61e 	bne	r2,zero,2860c <_gp+0xfffee240>
   28634:	d9011b17 	ldw	r4,1132(sp)
   28638:	d8c11c17 	ldw	r3,1136(sp)
   2863c:	d811883a 	mov	r8,sp
   28640:	21400044 	addi	r5,r4,1
   28644:	003e4006 	br	27f48 <_gp+0xfffedb7c>
   28648:	1800d61e 	bne	r3,zero,289a4 <___vfiprintf_internal_r+0x1080>
   2864c:	dac12417 	ldw	r11,1168(sp)
   28650:	00800044 	movi	r2,1
   28654:	dc400115 	stw	r17,4(sp)
   28658:	dac00015 	stw	r11,0(sp)
   2865c:	dc411c15 	stw	r17,1136(sp)
   28660:	d8811b15 	stw	r2,1132(sp)
   28664:	8807883a 	mov	r3,r17
   28668:	d811883a 	mov	r8,sp
   2866c:	42000204 	addi	r8,r8,8
   28670:	aac0010c 	andi	r11,r21,4
   28674:	58000226 	beq	r11,zero,28680 <___vfiprintf_internal_r+0xd5c>
   28678:	9ca3c83a 	sub	r17,r19,r18
   2867c:	047e2616 	blt	zero,r17,27f18 <_gp+0xfffedb4c>
   28680:	94c0010e 	bge	r18,r19,28688 <___vfiprintf_internal_r+0xd64>
   28684:	9825883a 	mov	r18,r19
   28688:	da812217 	ldw	r10,1160(sp)
   2868c:	5495883a 	add	r10,r10,r18
   28690:	da812215 	stw	r10,1160(sp)
   28694:	183e4826 	beq	r3,zero,27fb8 <_gp+0xfffedbec>
   28698:	d9012017 	ldw	r4,1152(sp)
   2869c:	a00b883a 	mov	r5,r20
   286a0:	d9811a04 	addi	r6,sp,1128
   286a4:	00278100 	call	27810 <__sprint_r.part.0>
   286a8:	103e4326 	beq	r2,zero,27fb8 <_gp+0xfffedbec>
   286ac:	003fd706 	br	2860c <_gp+0xfffee240>
   286b0:	9cadc83a 	sub	r22,r19,r18
   286b4:	05bde40e 	bge	zero,r22,27e48 <_gp+0xfffeda7c>
   286b8:	03000404 	movi	r12,16
   286bc:	6581500e 	bge	r12,r22,28c00 <___vfiprintf_internal_r+0x12dc>
   286c0:	008000f4 	movhi	r2,3
   286c4:	10819004 	addi	r2,r2,1600
   286c8:	d8812315 	stw	r2,1164(sp)
   286cc:	8005883a 	mov	r2,r16
   286d0:	038001c4 	movi	r14,7
   286d4:	b021883a 	mov	r16,r22
   286d8:	da412515 	stw	r9,1172(sp)
   286dc:	102d883a 	mov	r22,r2
   286e0:	00000506 	br	286f8 <___vfiprintf_internal_r+0xdd4>
   286e4:	29000084 	addi	r4,r5,2
   286e8:	42000204 	addi	r8,r8,8
   286ec:	100b883a 	mov	r5,r2
   286f0:	843ffc04 	addi	r16,r16,-16
   286f4:	64000d0e 	bge	r12,r16,2872c <___vfiprintf_internal_r+0xe08>
   286f8:	18c00404 	addi	r3,r3,16
   286fc:	28800044 	addi	r2,r5,1
   28700:	45c00015 	stw	r23,0(r8)
   28704:	43000115 	stw	r12,4(r8)
   28708:	d8c11c15 	stw	r3,1136(sp)
   2870c:	d8811b15 	stw	r2,1132(sp)
   28710:	70bff40e 	bge	r14,r2,286e4 <_gp+0xfffee318>
   28714:	1800151e 	bne	r3,zero,2876c <___vfiprintf_internal_r+0xe48>
   28718:	843ffc04 	addi	r16,r16,-16
   2871c:	000b883a 	mov	r5,zero
   28720:	01000044 	movi	r4,1
   28724:	d811883a 	mov	r8,sp
   28728:	643ff316 	blt	r12,r16,286f8 <_gp+0xfffee32c>
   2872c:	da412517 	ldw	r9,1172(sp)
   28730:	b005883a 	mov	r2,r22
   28734:	802d883a 	mov	r22,r16
   28738:	1021883a 	mov	r16,r2
   2873c:	da812317 	ldw	r10,1164(sp)
   28740:	1d87883a 	add	r3,r3,r22
   28744:	45800115 	stw	r22,4(r8)
   28748:	42800015 	stw	r10,0(r8)
   2874c:	d8c11c15 	stw	r3,1136(sp)
   28750:	d9011b15 	stw	r4,1132(sp)
   28754:	008001c4 	movi	r2,7
   28758:	11008d16 	blt	r2,r4,28990 <___vfiprintf_internal_r+0x106c>
   2875c:	42000204 	addi	r8,r8,8
   28760:	20800044 	addi	r2,r4,1
   28764:	200b883a 	mov	r5,r4
   28768:	003db706 	br	27e48 <_gp+0xfffeda7c>
   2876c:	d9012017 	ldw	r4,1152(sp)
   28770:	a00b883a 	mov	r5,r20
   28774:	d9811a04 	addi	r6,sp,1128
   28778:	db012b15 	stw	r12,1196(sp)
   2877c:	db812a15 	stw	r14,1192(sp)
   28780:	00278100 	call	27810 <__sprint_r.part.0>
   28784:	db012b17 	ldw	r12,1196(sp)
   28788:	db812a17 	ldw	r14,1192(sp)
   2878c:	103f9f1e 	bne	r2,zero,2860c <_gp+0xfffee240>
   28790:	d9411b17 	ldw	r5,1132(sp)
   28794:	d8c11c17 	ldw	r3,1136(sp)
   28798:	d811883a 	mov	r8,sp
   2879c:	29000044 	addi	r4,r5,1
   287a0:	003fd306 	br	286f0 <_gp+0xfffee324>
   287a4:	18006c1e 	bne	r3,zero,28958 <___vfiprintf_internal_r+0x1034>
   287a8:	70004f26 	beq	r14,zero,288e8 <___vfiprintf_internal_r+0xfc4>
   287ac:	d8811d04 	addi	r2,sp,1140
   287b0:	00c00084 	movi	r3,2
   287b4:	d8800015 	stw	r2,0(sp)
   287b8:	d8c00115 	stw	r3,4(sp)
   287bc:	2005883a 	mov	r2,r4
   287c0:	d811883a 	mov	r8,sp
   287c4:	003d9b06 	br	27e34 <_gp+0xfffeda68>
   287c8:	1800571e 	bne	r3,zero,28928 <___vfiprintf_internal_r+0x1004>
   287cc:	000b883a 	mov	r5,zero
   287d0:	00800044 	movi	r2,1
   287d4:	d811883a 	mov	r8,sp
   287d8:	003d9906 	br	27e40 <_gp+0xfffeda74>
   287dc:	10803fcc 	andi	r2,r2,255
   287e0:	1000251e 	bne	r2,zero,28878 <___vfiprintf_internal_r+0xf54>
   287e4:	a880004c 	andi	r2,r21,1
   287e8:	10007826 	beq	r2,zero,289cc <___vfiprintf_internal_r+0x10a8>
   287ec:	00800c04 	movi	r2,48
   287f0:	d8c109c4 	addi	r3,sp,1063
   287f4:	d88109c5 	stb	r2,1063(sp)
   287f8:	dc412717 	ldw	r17,1180(sp)
   287fc:	d8c12415 	stw	r3,1168(sp)
   28800:	003d4406 	br	27d14 <_gp+0xfffed948>
   28804:	d9012617 	ldw	r4,1176(sp)
   28808:	dc410a04 	addi	r17,sp,1064
   2880c:	908003cc 	andi	r2,r18,15
   28810:	b006973a 	slli	r3,r22,28
   28814:	2085883a 	add	r2,r4,r2
   28818:	9024d13a 	srli	r18,r18,4
   2881c:	10800003 	ldbu	r2,0(r2)
   28820:	b02cd13a 	srli	r22,r22,4
   28824:	8c7fffc4 	addi	r17,r17,-1
   28828:	1ca4b03a 	or	r18,r3,r18
   2882c:	88800005 	stb	r2,0(r17)
   28830:	9584b03a 	or	r2,r18,r22
   28834:	103ff51e 	bne	r2,zero,2880c <_gp+0xfffee440>
   28838:	dac11e17 	ldw	r11,1144(sp)
   2883c:	dc412415 	stw	r17,1168(sp)
   28840:	5c63c83a 	sub	r17,r11,r17
   28844:	003d3306 	br	27d14 <_gp+0xfffed948>
   28848:	1800941e 	bne	r3,zero,28a9c <___vfiprintf_internal_r+0x1178>
   2884c:	d8811d87 	ldb	r2,1142(sp)
   28850:	10006b26 	beq	r2,zero,28a00 <___vfiprintf_internal_r+0x10dc>
   28854:	00c00044 	movi	r3,1
   28858:	d9011d84 	addi	r4,sp,1142
   2885c:	1805883a 	mov	r2,r3
   28860:	d9000015 	stw	r4,0(sp)
   28864:	d8c00115 	stw	r3,4(sp)
   28868:	d811883a 	mov	r8,sp
   2886c:	003f2306 	br	284fc <_gp+0xfffee130>
   28870:	8023883a 	mov	r17,r16
   28874:	003c7d06 	br	27a6c <_gp+0xfffed6a0>
   28878:	da810a04 	addi	r10,sp,1064
   2887c:	da812415 	stw	r10,1168(sp)
   28880:	003d2406 	br	27d14 <_gp+0xfffed948>
   28884:	d9012017 	ldw	r4,1152(sp)
   28888:	a00b883a 	mov	r5,r20
   2888c:	d9811a04 	addi	r6,sp,1128
   28890:	00278100 	call	27810 <__sprint_r.part.0>
   28894:	103f5d1e 	bne	r2,zero,2860c <_gp+0xfffee240>
   28898:	d8c11c17 	ldw	r3,1136(sp)
   2889c:	d811883a 	mov	r8,sp
   288a0:	003f7306 	br	28670 <_gp+0xfffee2a4>
   288a4:	1c800017 	ldw	r18,0(r3)
   288a8:	dac12117 	ldw	r11,1156(sp)
   288ac:	902dd7fa 	srai	r22,r18,31
   288b0:	5ac00104 	addi	r11,r11,4
   288b4:	dac12115 	stw	r11,1156(sp)
   288b8:	b005883a 	mov	r2,r22
   288bc:	003e5406 	br	28210 <_gp+0xfffede44>
   288c0:	00800084 	movi	r2,2
   288c4:	9588b03a 	or	r4,r18,r22
   288c8:	003cf506 	br	27ca0 <_gp+0xfffed8d4>
   288cc:	d9012017 	ldw	r4,1152(sp)
   288d0:	a00b883a 	mov	r5,r20
   288d4:	d9811a04 	addi	r6,sp,1128
   288d8:	00278100 	call	27810 <__sprint_r.part.0>
   288dc:	103f4b1e 	bne	r2,zero,2860c <_gp+0xfffee240>
   288e0:	d811883a 	mov	r8,sp
   288e4:	003cd106 	br	27c2c <_gp+0xfffed860>
   288e8:	000b883a 	mov	r5,zero
   288ec:	2005883a 	mov	r2,r4
   288f0:	d811883a 	mov	r8,sp
   288f4:	003d5206 	br	27e40 <_gp+0xfffeda74>
   288f8:	10803fcc 	andi	r2,r2,255
   288fc:	1080201c 	xori	r2,r2,128
   28900:	10bfe004 	addi	r2,r2,-128
   28904:	01000c04 	movi	r4,48
   28908:	11008e26 	beq	r2,r4,28b44 <___vfiprintf_internal_r+0x1220>
   2890c:	da812417 	ldw	r10,1168(sp)
   28910:	dac11e17 	ldw	r11,1144(sp)
   28914:	193fffc5 	stb	r4,-1(r3)
   28918:	52bfffc4 	addi	r10,r10,-1
   2891c:	da812415 	stw	r10,1168(sp)
   28920:	5aa3c83a 	sub	r17,r11,r10
   28924:	003cfb06 	br	27d14 <_gp+0xfffed948>
   28928:	d9012017 	ldw	r4,1152(sp)
   2892c:	a00b883a 	mov	r5,r20
   28930:	d9811a04 	addi	r6,sp,1128
   28934:	da412b15 	stw	r9,1196(sp)
   28938:	00278100 	call	27810 <__sprint_r.part.0>
   2893c:	da412b17 	ldw	r9,1196(sp)
   28940:	103f321e 	bne	r2,zero,2860c <_gp+0xfffee240>
   28944:	d9411b17 	ldw	r5,1132(sp)
   28948:	d8c11c17 	ldw	r3,1136(sp)
   2894c:	d811883a 	mov	r8,sp
   28950:	28800044 	addi	r2,r5,1
   28954:	003d3a06 	br	27e40 <_gp+0xfffeda74>
   28958:	d9012017 	ldw	r4,1152(sp)
   2895c:	a00b883a 	mov	r5,r20
   28960:	d9811a04 	addi	r6,sp,1128
   28964:	da412b15 	stw	r9,1196(sp)
   28968:	db812a15 	stw	r14,1192(sp)
   2896c:	00278100 	call	27810 <__sprint_r.part.0>
   28970:	da412b17 	ldw	r9,1196(sp)
   28974:	db812a17 	ldw	r14,1192(sp)
   28978:	103f241e 	bne	r2,zero,2860c <_gp+0xfffee240>
   2897c:	d9411b17 	ldw	r5,1132(sp)
   28980:	d8c11c17 	ldw	r3,1136(sp)
   28984:	d811883a 	mov	r8,sp
   28988:	28800044 	addi	r2,r5,1
   2898c:	003d1f06 	br	27e0c <_gp+0xfffeda40>
   28990:	1800781e 	bne	r3,zero,28b74 <___vfiprintf_internal_r+0x1250>
   28994:	000b883a 	mov	r5,zero
   28998:	00800044 	movi	r2,1
   2899c:	d811883a 	mov	r8,sp
   289a0:	003d2906 	br	27e48 <_gp+0xfffeda7c>
   289a4:	d9012017 	ldw	r4,1152(sp)
   289a8:	a00b883a 	mov	r5,r20
   289ac:	d9811a04 	addi	r6,sp,1128
   289b0:	00278100 	call	27810 <__sprint_r.part.0>
   289b4:	103f151e 	bne	r2,zero,2860c <_gp+0xfffee240>
   289b8:	d8811b17 	ldw	r2,1132(sp)
   289bc:	d8c11c17 	ldw	r3,1136(sp)
   289c0:	d811883a 	mov	r8,sp
   289c4:	10800044 	addi	r2,r2,1
   289c8:	003d4406 	br	27edc <_gp+0xfffedb10>
   289cc:	dac10a04 	addi	r11,sp,1064
   289d0:	dac12415 	stw	r11,1168(sp)
   289d4:	003ccf06 	br	27d14 <_gp+0xfffed948>
   289d8:	04a5c83a 	sub	r18,zero,r18
   289dc:	9004c03a 	cmpne	r2,r18,zero
   289e0:	05adc83a 	sub	r22,zero,r22
   289e4:	b0adc83a 	sub	r22,r22,r2
   289e8:	03000b44 	movi	r12,45
   289ec:	db011d85 	stb	r12,1142(sp)
   289f0:	4823883a 	mov	r17,r9
   289f4:	00800044 	movi	r2,1
   289f8:	9588b03a 	or	r4,r18,r22
   289fc:	003cab06 	br	27cac <_gp+0xfffed8e0>
   28a00:	000b883a 	mov	r5,zero
   28a04:	00800044 	movi	r2,1
   28a08:	d811883a 	mov	r8,sp
   28a0c:	703d0c26 	beq	r14,zero,27e40 <_gp+0xfffeda74>
   28a10:	00c00084 	movi	r3,2
   28a14:	d9011d04 	addi	r4,sp,1140
   28a18:	d9000015 	stw	r4,0(sp)
   28a1c:	d8c00115 	stw	r3,4(sp)
   28a20:	003d0406 	br	27e34 <_gp+0xfffeda68>
   28a24:	80c00007 	ldb	r3,0(r16)
   28a28:	003c1d06 	br	27aa0 <_gp+0xfffed6d4>
   28a2c:	a880040c 	andi	r2,r21,16
   28a30:	1000091e 	bne	r2,zero,28a58 <___vfiprintf_internal_r+0x1134>
   28a34:	aac0100c 	andi	r11,r21,64
   28a38:	58000726 	beq	r11,zero,28a58 <___vfiprintf_internal_r+0x1134>
   28a3c:	da812117 	ldw	r10,1156(sp)
   28a40:	dac12217 	ldw	r11,1160(sp)
   28a44:	50800017 	ldw	r2,0(r10)
   28a48:	52800104 	addi	r10,r10,4
   28a4c:	da812115 	stw	r10,1156(sp)
   28a50:	12c0000d 	sth	r11,0(r2)
   28a54:	003be806 	br	279f8 <_gp+0xfffed62c>
   28a58:	da812117 	ldw	r10,1156(sp)
   28a5c:	dac12217 	ldw	r11,1160(sp)
   28a60:	50800017 	ldw	r2,0(r10)
   28a64:	52800104 	addi	r10,r10,4
   28a68:	da812115 	stw	r10,1156(sp)
   28a6c:	12c00015 	stw	r11,0(r2)
   28a70:	003be106 	br	279f8 <_gp+0xfffed62c>
   28a74:	00800084 	movi	r2,2
   28a78:	003c8906 	br	27ca0 <_gp+0xfffed8d4>
   28a7c:	a900100c 	andi	r4,r21,64
   28a80:	20001f26 	beq	r4,zero,28b00 <___vfiprintf_internal_r+0x11dc>
   28a84:	da812117 	ldw	r10,1156(sp)
   28a88:	1480000b 	ldhu	r18,0(r2)
   28a8c:	002d883a 	mov	r22,zero
   28a90:	52800104 	addi	r10,r10,4
   28a94:	da812115 	stw	r10,1156(sp)
   28a98:	003dae06 	br	28154 <_gp+0xfffedd88>
   28a9c:	d9012017 	ldw	r4,1152(sp)
   28aa0:	a00b883a 	mov	r5,r20
   28aa4:	d9811a04 	addi	r6,sp,1128
   28aa8:	da412b15 	stw	r9,1196(sp)
   28aac:	db812a15 	stw	r14,1192(sp)
   28ab0:	00278100 	call	27810 <__sprint_r.part.0>
   28ab4:	da412b17 	ldw	r9,1196(sp)
   28ab8:	db812a17 	ldw	r14,1192(sp)
   28abc:	103ed31e 	bne	r2,zero,2860c <_gp+0xfffee240>
   28ac0:	d9411b17 	ldw	r5,1132(sp)
   28ac4:	d8c11c17 	ldw	r3,1136(sp)
   28ac8:	d811883a 	mov	r8,sp
   28acc:	28800044 	addi	r2,r5,1
   28ad0:	003e7f06 	br	284d0 <_gp+0xfffee104>
   28ad4:	9825883a 	mov	r18,r19
   28ad8:	003d3406 	br	27fac <_gp+0xfffedbe0>
   28adc:	4823883a 	mov	r17,r9
   28ae0:	003e0806 	br	28304 <_gp+0xfffedf38>
   28ae4:	d9012017 	ldw	r4,1152(sp)
   28ae8:	a00b883a 	mov	r5,r20
   28aec:	d9811a04 	addi	r6,sp,1128
   28af0:	00278100 	call	27810 <__sprint_r.part.0>
   28af4:	103ec51e 	bne	r2,zero,2860c <_gp+0xfffee240>
   28af8:	d8c11c17 	ldw	r3,1136(sp)
   28afc:	003ee006 	br	28680 <_gp+0xfffee2b4>
   28b00:	dac12117 	ldw	r11,1156(sp)
   28b04:	14800017 	ldw	r18,0(r2)
   28b08:	002d883a 	mov	r22,zero
   28b0c:	5ac00104 	addi	r11,r11,4
   28b10:	dac12115 	stw	r11,1156(sp)
   28b14:	003d8f06 	br	28154 <_gp+0xfffedd88>
   28b18:	02c000f4 	movhi	r11,3
   28b1c:	5ac19004 	addi	r11,r11,1600
   28b20:	dac12315 	stw	r11,1164(sp)
   28b24:	003ce306 	br	27eb4 <_gp+0xfffedae8>
   28b28:	80c00043 	ldbu	r3,1(r16)
   28b2c:	ad400814 	ori	r21,r21,32
   28b30:	84000044 	addi	r16,r16,1
   28b34:	18c03fcc 	andi	r3,r3,255
   28b38:	18c0201c 	xori	r3,r3,128
   28b3c:	18ffe004 	addi	r3,r3,-128
   28b40:	003bd706 	br	27aa0 <_gp+0xfffed6d4>
   28b44:	dac11e17 	ldw	r11,1144(sp)
   28b48:	d8c12417 	ldw	r3,1168(sp)
   28b4c:	58e3c83a 	sub	r17,r11,r3
   28b50:	003c7006 	br	27d14 <_gp+0xfffed948>
   28b54:	da012a15 	stw	r8,1192(sp)
   28b58:	002062c0 	call	2062c <strlen>
   28b5c:	1023883a 	mov	r17,r2
   28b60:	db011d83 	ldbu	r12,1142(sp)
   28b64:	dd812115 	stw	r22,1156(sp)
   28b68:	0013883a 	mov	r9,zero
   28b6c:	da012a17 	ldw	r8,1192(sp)
   28b70:	003c6806 	br	27d14 <_gp+0xfffed948>
   28b74:	d9012017 	ldw	r4,1152(sp)
   28b78:	a00b883a 	mov	r5,r20
   28b7c:	d9811a04 	addi	r6,sp,1128
   28b80:	da412b15 	stw	r9,1196(sp)
   28b84:	00278100 	call	27810 <__sprint_r.part.0>
   28b88:	da412b17 	ldw	r9,1196(sp)
   28b8c:	103e9f1e 	bne	r2,zero,2860c <_gp+0xfffee240>
   28b90:	d9411b17 	ldw	r5,1132(sp)
   28b94:	d8c11c17 	ldw	r3,1136(sp)
   28b98:	d811883a 	mov	r8,sp
   28b9c:	28800044 	addi	r2,r5,1
   28ba0:	003ca906 	br	27e48 <_gp+0xfffeda7c>
   28ba4:	d9411b17 	ldw	r5,1132(sp)
   28ba8:	010000f4 	movhi	r4,3
   28bac:	21019404 	addi	r4,r4,1616
   28bb0:	d9012315 	stw	r4,1164(sp)
   28bb4:	29400044 	addi	r5,r5,1
   28bb8:	003c8806 	br	27ddc <_gp+0xfffeda10>
   28bbc:	00800184 	movi	r2,6
   28bc0:	1240012e 	bgeu	r2,r9,28bc8 <___vfiprintf_internal_r+0x12a4>
   28bc4:	1013883a 	mov	r9,r2
   28bc8:	4823883a 	mov	r17,r9
   28bcc:	4825883a 	mov	r18,r9
   28bd0:	48001516 	blt	r9,zero,28c28 <___vfiprintf_internal_r+0x1304>
   28bd4:	008000f4 	movhi	r2,3
   28bd8:	10813404 	addi	r2,r2,1232
   28bdc:	dd812115 	stw	r22,1156(sp)
   28be0:	d8812415 	stw	r2,1168(sp)
   28be4:	003d6f06 	br	281a4 <_gp+0xfffeddd8>
   28be8:	d9411b17 	ldw	r5,1132(sp)
   28bec:	02c000f4 	movhi	r11,3
   28bf0:	5ac19404 	addi	r11,r11,1616
   28bf4:	dac12315 	stw	r11,1164(sp)
   28bf8:	29400044 	addi	r5,r5,1
   28bfc:	003ce106 	br	27f84 <_gp+0xfffedbb8>
   28c00:	010000f4 	movhi	r4,3
   28c04:	21019004 	addi	r4,r4,1600
   28c08:	d9012315 	stw	r4,1164(sp)
   28c0c:	1009883a 	mov	r4,r2
   28c10:	003eca06 	br	2873c <_gp+0xfffee370>
   28c14:	4823883a 	mov	r17,r9
   28c18:	db011d83 	ldbu	r12,1142(sp)
   28c1c:	dd812115 	stw	r22,1156(sp)
   28c20:	0013883a 	mov	r9,zero
   28c24:	003c3b06 	br	27d14 <_gp+0xfffed948>
   28c28:	0025883a 	mov	r18,zero
   28c2c:	003fe906 	br	28bd4 <_gp+0xfffee808>
   28c30:	dac12117 	ldw	r11,1156(sp)
   28c34:	8005883a 	mov	r2,r16
   28c38:	5021883a 	mov	r16,r10
   28c3c:	5a400017 	ldw	r9,0(r11)
   28c40:	58c00104 	addi	r3,r11,4
   28c44:	d8c12115 	stw	r3,1156(sp)
   28c48:	48000a16 	blt	r9,zero,28c74 <___vfiprintf_internal_r+0x1350>
   28c4c:	10c00047 	ldb	r3,1(r2)
   28c50:	003b9306 	br	27aa0 <_gp+0xfffed6d4>
   28c54:	043fffc4 	movi	r16,-1
   28c58:	003d0206 	br	28064 <_gp+0xfffedc98>
   28c5c:	94c0010e 	bge	r18,r19,28c64 <___vfiprintf_internal_r+0x1340>
   28c60:	9825883a 	mov	r18,r19
   28c64:	da812217 	ldw	r10,1160(sp)
   28c68:	5495883a 	add	r10,r10,r18
   28c6c:	da812215 	stw	r10,1160(sp)
   28c70:	003cd106 	br	27fb8 <_gp+0xfffedbec>
   28c74:	027fffc4 	movi	r9,-1
   28c78:	10c00047 	ldb	r3,1(r2)
   28c7c:	003b8806 	br	27aa0 <_gp+0xfffed6d4>

00028c80 <__vfiprintf_internal>:
   28c80:	2007883a 	mov	r3,r4
   28c84:	010000f4 	movhi	r4,3
   28c88:	2108f404 	addi	r4,r4,9168
   28c8c:	21000017 	ldw	r4,0(r4)
   28c90:	2805883a 	mov	r2,r5
   28c94:	300f883a 	mov	r7,r6
   28c98:	180b883a 	mov	r5,r3
   28c9c:	100d883a 	mov	r6,r2
   28ca0:	00279241 	jmpi	27924 <___vfiprintf_internal_r>

00028ca4 <_write_r>:
   28ca4:	defffd04 	addi	sp,sp,-12
   28ca8:	dc000015 	stw	r16,0(sp)
   28cac:	040000f4 	movhi	r16,3
   28cb0:	dc400115 	stw	r17,4(sp)
   28cb4:	84100f04 	addi	r16,r16,16444
   28cb8:	2023883a 	mov	r17,r4
   28cbc:	2809883a 	mov	r4,r5
   28cc0:	300b883a 	mov	r5,r6
   28cc4:	380d883a 	mov	r6,r7
   28cc8:	dfc00215 	stw	ra,8(sp)
   28ccc:	80000015 	stw	zero,0(r16)
   28cd0:	002d3700 	call	2d370 <write>
   28cd4:	00ffffc4 	movi	r3,-1
   28cd8:	10c00526 	beq	r2,r3,28cf0 <_write_r+0x4c>
   28cdc:	dfc00217 	ldw	ra,8(sp)
   28ce0:	dc400117 	ldw	r17,4(sp)
   28ce4:	dc000017 	ldw	r16,0(sp)
   28ce8:	dec00304 	addi	sp,sp,12
   28cec:	f800283a 	ret
   28cf0:	80c00017 	ldw	r3,0(r16)
   28cf4:	183ff926 	beq	r3,zero,28cdc <_gp+0xfffee910>
   28cf8:	88c00015 	stw	r3,0(r17)
   28cfc:	003ff706 	br	28cdc <_gp+0xfffee910>

00028d00 <_close_r>:
   28d00:	defffd04 	addi	sp,sp,-12
   28d04:	dc000015 	stw	r16,0(sp)
   28d08:	040000f4 	movhi	r16,3
   28d0c:	dc400115 	stw	r17,4(sp)
   28d10:	84100f04 	addi	r16,r16,16444
   28d14:	2023883a 	mov	r17,r4
   28d18:	2809883a 	mov	r4,r5
   28d1c:	dfc00215 	stw	ra,8(sp)
   28d20:	80000015 	stw	zero,0(r16)
   28d24:	002c8a80 	call	2c8a8 <close>
   28d28:	00ffffc4 	movi	r3,-1
   28d2c:	10c00526 	beq	r2,r3,28d44 <_close_r+0x44>
   28d30:	dfc00217 	ldw	ra,8(sp)
   28d34:	dc400117 	ldw	r17,4(sp)
   28d38:	dc000017 	ldw	r16,0(sp)
   28d3c:	dec00304 	addi	sp,sp,12
   28d40:	f800283a 	ret
   28d44:	80c00017 	ldw	r3,0(r16)
   28d48:	183ff926 	beq	r3,zero,28d30 <_gp+0xfffee964>
   28d4c:	88c00015 	stw	r3,0(r17)
   28d50:	003ff706 	br	28d30 <_gp+0xfffee964>

00028d54 <_calloc_r>:
   28d54:	298b383a 	mul	r5,r5,r6
   28d58:	defffe04 	addi	sp,sp,-8
   28d5c:	dc000015 	stw	r16,0(sp)
   28d60:	dfc00115 	stw	ra,4(sp)
   28d64:	00253f40 	call	253f4 <_malloc_r>
   28d68:	1021883a 	mov	r16,r2
   28d6c:	10002826 	beq	r2,zero,28e10 <_calloc_r+0xbc>
   28d70:	11bfff17 	ldw	r6,-4(r2)
   28d74:	00bfff04 	movi	r2,-4
   28d78:	00c00904 	movi	r3,36
   28d7c:	308c703a 	and	r6,r6,r2
   28d80:	308d883a 	add	r6,r6,r2
   28d84:	19801436 	bltu	r3,r6,28dd8 <_calloc_r+0x84>
   28d88:	008004c4 	movi	r2,19
   28d8c:	11800936 	bltu	r2,r6,28db4 <_calloc_r+0x60>
   28d90:	8005883a 	mov	r2,r16
   28d94:	10000015 	stw	zero,0(r2)
   28d98:	10000115 	stw	zero,4(r2)
   28d9c:	10000215 	stw	zero,8(r2)
   28da0:	8005883a 	mov	r2,r16
   28da4:	dfc00117 	ldw	ra,4(sp)
   28da8:	dc000017 	ldw	r16,0(sp)
   28dac:	dec00204 	addi	sp,sp,8
   28db0:	f800283a 	ret
   28db4:	80000015 	stw	zero,0(r16)
   28db8:	80000115 	stw	zero,4(r16)
   28dbc:	008006c4 	movi	r2,27
   28dc0:	11800d2e 	bgeu	r2,r6,28df8 <_calloc_r+0xa4>
   28dc4:	80000215 	stw	zero,8(r16)
   28dc8:	80000315 	stw	zero,12(r16)
   28dcc:	30c00c26 	beq	r6,r3,28e00 <_calloc_r+0xac>
   28dd0:	80800404 	addi	r2,r16,16
   28dd4:	003fef06 	br	28d94 <_gp+0xfffee9c8>
   28dd8:	8009883a 	mov	r4,r16
   28ddc:	000b883a 	mov	r5,zero
   28de0:	0025f180 	call	25f18 <memset>
   28de4:	8005883a 	mov	r2,r16
   28de8:	dfc00117 	ldw	ra,4(sp)
   28dec:	dc000017 	ldw	r16,0(sp)
   28df0:	dec00204 	addi	sp,sp,8
   28df4:	f800283a 	ret
   28df8:	80800204 	addi	r2,r16,8
   28dfc:	003fe506 	br	28d94 <_gp+0xfffee9c8>
   28e00:	80000415 	stw	zero,16(r16)
   28e04:	80800604 	addi	r2,r16,24
   28e08:	80000515 	stw	zero,20(r16)
   28e0c:	003fe106 	br	28d94 <_gp+0xfffee9c8>
   28e10:	0005883a 	mov	r2,zero
   28e14:	003fe306 	br	28da4 <_gp+0xfffee9d8>

00028e18 <_fclose_r>:
   28e18:	28003226 	beq	r5,zero,28ee4 <_fclose_r+0xcc>
   28e1c:	defffc04 	addi	sp,sp,-16
   28e20:	dc400115 	stw	r17,4(sp)
   28e24:	2023883a 	mov	r17,r4
   28e28:	dc000015 	stw	r16,0(sp)
   28e2c:	dfc00315 	stw	ra,12(sp)
   28e30:	dc800215 	stw	r18,8(sp)
   28e34:	2821883a 	mov	r16,r5
   28e38:	00246f40 	call	246f4 <__sfp_lock_acquire>
   28e3c:	88000226 	beq	r17,zero,28e48 <_fclose_r+0x30>
   28e40:	88800e17 	ldw	r2,56(r17)
   28e44:	10002926 	beq	r2,zero,28eec <_fclose_r+0xd4>
   28e48:	8080030f 	ldh	r2,12(r16)
   28e4c:	10002226 	beq	r2,zero,28ed8 <_fclose_r+0xc0>
   28e50:	8809883a 	mov	r4,r17
   28e54:	800b883a 	mov	r5,r16
   28e58:	002413c0 	call	2413c <_fflush_r>
   28e5c:	1025883a 	mov	r18,r2
   28e60:	80800b17 	ldw	r2,44(r16)
   28e64:	10000426 	beq	r2,zero,28e78 <_fclose_r+0x60>
   28e68:	81400717 	ldw	r5,28(r16)
   28e6c:	8809883a 	mov	r4,r17
   28e70:	103ee83a 	callr	r2
   28e74:	10002616 	blt	r2,zero,28f10 <_fclose_r+0xf8>
   28e78:	8080030b 	ldhu	r2,12(r16)
   28e7c:	1080200c 	andi	r2,r2,128
   28e80:	10001f1e 	bne	r2,zero,28f00 <_fclose_r+0xe8>
   28e84:	81400c17 	ldw	r5,48(r16)
   28e88:	28000526 	beq	r5,zero,28ea0 <_fclose_r+0x88>
   28e8c:	80801004 	addi	r2,r16,64
   28e90:	28800226 	beq	r5,r2,28e9c <_fclose_r+0x84>
   28e94:	8809883a 	mov	r4,r17
   28e98:	00248580 	call	24858 <_free_r>
   28e9c:	80000c15 	stw	zero,48(r16)
   28ea0:	81401117 	ldw	r5,68(r16)
   28ea4:	28000326 	beq	r5,zero,28eb4 <_fclose_r+0x9c>
   28ea8:	8809883a 	mov	r4,r17
   28eac:	00248580 	call	24858 <_free_r>
   28eb0:	80001115 	stw	zero,68(r16)
   28eb4:	8000030d 	sth	zero,12(r16)
   28eb8:	00246f80 	call	246f8 <__sfp_lock_release>
   28ebc:	9005883a 	mov	r2,r18
   28ec0:	dfc00317 	ldw	ra,12(sp)
   28ec4:	dc800217 	ldw	r18,8(sp)
   28ec8:	dc400117 	ldw	r17,4(sp)
   28ecc:	dc000017 	ldw	r16,0(sp)
   28ed0:	dec00404 	addi	sp,sp,16
   28ed4:	f800283a 	ret
   28ed8:	00246f80 	call	246f8 <__sfp_lock_release>
   28edc:	0005883a 	mov	r2,zero
   28ee0:	003ff706 	br	28ec0 <_gp+0xfffeeaf4>
   28ee4:	0005883a 	mov	r2,zero
   28ee8:	f800283a 	ret
   28eec:	8809883a 	mov	r4,r17
   28ef0:	00246e40 	call	246e4 <__sinit>
   28ef4:	8080030f 	ldh	r2,12(r16)
   28ef8:	103fd51e 	bne	r2,zero,28e50 <_gp+0xfffeea84>
   28efc:	003ff606 	br	28ed8 <_gp+0xfffeeb0c>
   28f00:	81400417 	ldw	r5,16(r16)
   28f04:	8809883a 	mov	r4,r17
   28f08:	00248580 	call	24858 <_free_r>
   28f0c:	003fdd06 	br	28e84 <_gp+0xfffeeab8>
   28f10:	04bfffc4 	movi	r18,-1
   28f14:	003fd806 	br	28e78 <_gp+0xfffeeaac>

00028f18 <fclose>:
   28f18:	008000f4 	movhi	r2,3
   28f1c:	1088f404 	addi	r2,r2,9168
   28f20:	200b883a 	mov	r5,r4
   28f24:	11000017 	ldw	r4,0(r2)
   28f28:	0028e181 	jmpi	28e18 <_fclose_r>

00028f2c <_fputwc_r>:
   28f2c:	3080030b 	ldhu	r2,12(r6)
   28f30:	defff804 	addi	sp,sp,-32
   28f34:	dcc00415 	stw	r19,16(sp)
   28f38:	dc800315 	stw	r18,12(sp)
   28f3c:	dc000115 	stw	r16,4(sp)
   28f40:	dfc00715 	stw	ra,28(sp)
   28f44:	dd400615 	stw	r21,24(sp)
   28f48:	dd000515 	stw	r20,20(sp)
   28f4c:	dc400215 	stw	r17,8(sp)
   28f50:	10c8000c 	andi	r3,r2,8192
   28f54:	3021883a 	mov	r16,r6
   28f58:	2027883a 	mov	r19,r4
   28f5c:	2825883a 	mov	r18,r5
   28f60:	1800051e 	bne	r3,zero,28f78 <_fputwc_r+0x4c>
   28f64:	30c01917 	ldw	r3,100(r6)
   28f68:	10880014 	ori	r2,r2,8192
   28f6c:	3080030d 	sth	r2,12(r6)
   28f70:	18880014 	ori	r2,r3,8192
   28f74:	30801915 	stw	r2,100(r6)
   28f78:	00251e40 	call	251e4 <__locale_mb_cur_max>
   28f7c:	00c00044 	movi	r3,1
   28f80:	10c03e26 	beq	r2,r3,2907c <_fputwc_r+0x150>
   28f84:	9809883a 	mov	r4,r19
   28f88:	d80b883a 	mov	r5,sp
   28f8c:	900d883a 	mov	r6,r18
   28f90:	81c01704 	addi	r7,r16,92
   28f94:	00293dc0 	call	293dc <_wcrtomb_r>
   28f98:	1029883a 	mov	r20,r2
   28f9c:	00bfffc4 	movi	r2,-1
   28fa0:	a0802026 	beq	r20,r2,29024 <_fputwc_r+0xf8>
   28fa4:	d9400003 	ldbu	r5,0(sp)
   28fa8:	a0001c26 	beq	r20,zero,2901c <_fputwc_r+0xf0>
   28fac:	0023883a 	mov	r17,zero
   28fb0:	05400284 	movi	r21,10
   28fb4:	00000906 	br	28fdc <_fputwc_r+0xb0>
   28fb8:	80800017 	ldw	r2,0(r16)
   28fbc:	11400005 	stb	r5,0(r2)
   28fc0:	80c00017 	ldw	r3,0(r16)
   28fc4:	18c00044 	addi	r3,r3,1
   28fc8:	80c00015 	stw	r3,0(r16)
   28fcc:	8c400044 	addi	r17,r17,1
   28fd0:	dc45883a 	add	r2,sp,r17
   28fd4:	8d00112e 	bgeu	r17,r20,2901c <_fputwc_r+0xf0>
   28fd8:	11400003 	ldbu	r5,0(r2)
   28fdc:	80c00217 	ldw	r3,8(r16)
   28fe0:	18ffffc4 	addi	r3,r3,-1
   28fe4:	80c00215 	stw	r3,8(r16)
   28fe8:	183ff30e 	bge	r3,zero,28fb8 <_gp+0xfffeebec>
   28fec:	80800617 	ldw	r2,24(r16)
   28ff0:	18801916 	blt	r3,r2,29058 <_fputwc_r+0x12c>
   28ff4:	80800017 	ldw	r2,0(r16)
   28ff8:	11400005 	stb	r5,0(r2)
   28ffc:	80800017 	ldw	r2,0(r16)
   29000:	10c00003 	ldbu	r3,0(r2)
   29004:	10800044 	addi	r2,r2,1
   29008:	1d402326 	beq	r3,r21,29098 <_fputwc_r+0x16c>
   2900c:	80800015 	stw	r2,0(r16)
   29010:	8c400044 	addi	r17,r17,1
   29014:	dc45883a 	add	r2,sp,r17
   29018:	8d3fef36 	bltu	r17,r20,28fd8 <_gp+0xfffeec0c>
   2901c:	9005883a 	mov	r2,r18
   29020:	00000406 	br	29034 <_fputwc_r+0x108>
   29024:	80c0030b 	ldhu	r3,12(r16)
   29028:	a005883a 	mov	r2,r20
   2902c:	18c01014 	ori	r3,r3,64
   29030:	80c0030d 	sth	r3,12(r16)
   29034:	dfc00717 	ldw	ra,28(sp)
   29038:	dd400617 	ldw	r21,24(sp)
   2903c:	dd000517 	ldw	r20,20(sp)
   29040:	dcc00417 	ldw	r19,16(sp)
   29044:	dc800317 	ldw	r18,12(sp)
   29048:	dc400217 	ldw	r17,8(sp)
   2904c:	dc000117 	ldw	r16,4(sp)
   29050:	dec00804 	addi	sp,sp,32
   29054:	f800283a 	ret
   29058:	9809883a 	mov	r4,r19
   2905c:	29403fcc 	andi	r5,r5,255
   29060:	800d883a 	mov	r6,r16
   29064:	002926c0 	call	2926c <__swbuf_r>
   29068:	10bfffe0 	cmpeqi	r2,r2,-1
   2906c:	10803fcc 	andi	r2,r2,255
   29070:	103fd626 	beq	r2,zero,28fcc <_gp+0xfffeec00>
   29074:	00bfffc4 	movi	r2,-1
   29078:	003fee06 	br	29034 <_gp+0xfffeec68>
   2907c:	90ffffc4 	addi	r3,r18,-1
   29080:	01003f84 	movi	r4,254
   29084:	20ffbf36 	bltu	r4,r3,28f84 <_gp+0xfffeebb8>
   29088:	900b883a 	mov	r5,r18
   2908c:	dc800005 	stb	r18,0(sp)
   29090:	1029883a 	mov	r20,r2
   29094:	003fc506 	br	28fac <_gp+0xfffeebe0>
   29098:	9809883a 	mov	r4,r19
   2909c:	a80b883a 	mov	r5,r21
   290a0:	800d883a 	mov	r6,r16
   290a4:	002926c0 	call	2926c <__swbuf_r>
   290a8:	10bfffe0 	cmpeqi	r2,r2,-1
   290ac:	003fef06 	br	2906c <_gp+0xfffeeca0>

000290b0 <fputwc>:
   290b0:	defffc04 	addi	sp,sp,-16
   290b4:	dc000115 	stw	r16,4(sp)
   290b8:	040000f4 	movhi	r16,3
   290bc:	8408f404 	addi	r16,r16,9168
   290c0:	dc400215 	stw	r17,8(sp)
   290c4:	2023883a 	mov	r17,r4
   290c8:	81000017 	ldw	r4,0(r16)
   290cc:	dfc00315 	stw	ra,12(sp)
   290d0:	280d883a 	mov	r6,r5
   290d4:	20000626 	beq	r4,zero,290f0 <fputwc+0x40>
   290d8:	20800e17 	ldw	r2,56(r4)
   290dc:	1000041e 	bne	r2,zero,290f0 <fputwc+0x40>
   290e0:	d9400015 	stw	r5,0(sp)
   290e4:	00246e40 	call	246e4 <__sinit>
   290e8:	81000017 	ldw	r4,0(r16)
   290ec:	d9800017 	ldw	r6,0(sp)
   290f0:	880b883a 	mov	r5,r17
   290f4:	dfc00317 	ldw	ra,12(sp)
   290f8:	dc400217 	ldw	r17,8(sp)
   290fc:	dc000117 	ldw	r16,4(sp)
   29100:	dec00404 	addi	sp,sp,16
   29104:	0028f2c1 	jmpi	28f2c <_fputwc_r>

00029108 <_fstat_r>:
   29108:	defffd04 	addi	sp,sp,-12
   2910c:	dc000015 	stw	r16,0(sp)
   29110:	040000f4 	movhi	r16,3
   29114:	dc400115 	stw	r17,4(sp)
   29118:	84100f04 	addi	r16,r16,16444
   2911c:	2023883a 	mov	r17,r4
   29120:	2809883a 	mov	r4,r5
   29124:	300b883a 	mov	r5,r6
   29128:	dfc00215 	stw	ra,8(sp)
   2912c:	80000015 	stw	zero,0(r16)
   29130:	002c9f40 	call	2c9f4 <fstat>
   29134:	00ffffc4 	movi	r3,-1
   29138:	10c00526 	beq	r2,r3,29150 <_fstat_r+0x48>
   2913c:	dfc00217 	ldw	ra,8(sp)
   29140:	dc400117 	ldw	r17,4(sp)
   29144:	dc000017 	ldw	r16,0(sp)
   29148:	dec00304 	addi	sp,sp,12
   2914c:	f800283a 	ret
   29150:	80c00017 	ldw	r3,0(r16)
   29154:	183ff926 	beq	r3,zero,2913c <_gp+0xfffeed70>
   29158:	88c00015 	stw	r3,0(r17)
   2915c:	003ff706 	br	2913c <_gp+0xfffeed70>

00029160 <_isatty_r>:
   29160:	defffd04 	addi	sp,sp,-12
   29164:	dc000015 	stw	r16,0(sp)
   29168:	040000f4 	movhi	r16,3
   2916c:	dc400115 	stw	r17,4(sp)
   29170:	84100f04 	addi	r16,r16,16444
   29174:	2023883a 	mov	r17,r4
   29178:	2809883a 	mov	r4,r5
   2917c:	dfc00215 	stw	ra,8(sp)
   29180:	80000015 	stw	zero,0(r16)
   29184:	002caf40 	call	2caf4 <isatty>
   29188:	00ffffc4 	movi	r3,-1
   2918c:	10c00526 	beq	r2,r3,291a4 <_isatty_r+0x44>
   29190:	dfc00217 	ldw	ra,8(sp)
   29194:	dc400117 	ldw	r17,4(sp)
   29198:	dc000017 	ldw	r16,0(sp)
   2919c:	dec00304 	addi	sp,sp,12
   291a0:	f800283a 	ret
   291a4:	80c00017 	ldw	r3,0(r16)
   291a8:	183ff926 	beq	r3,zero,29190 <_gp+0xfffeedc4>
   291ac:	88c00015 	stw	r3,0(r17)
   291b0:	003ff706 	br	29190 <_gp+0xfffeedc4>

000291b4 <_lseek_r>:
   291b4:	defffd04 	addi	sp,sp,-12
   291b8:	dc000015 	stw	r16,0(sp)
   291bc:	040000f4 	movhi	r16,3
   291c0:	dc400115 	stw	r17,4(sp)
   291c4:	84100f04 	addi	r16,r16,16444
   291c8:	2023883a 	mov	r17,r4
   291cc:	2809883a 	mov	r4,r5
   291d0:	300b883a 	mov	r5,r6
   291d4:	380d883a 	mov	r6,r7
   291d8:	dfc00215 	stw	ra,8(sp)
   291dc:	80000015 	stw	zero,0(r16)
   291e0:	002cccc0 	call	2cccc <lseek>
   291e4:	00ffffc4 	movi	r3,-1
   291e8:	10c00526 	beq	r2,r3,29200 <_lseek_r+0x4c>
   291ec:	dfc00217 	ldw	ra,8(sp)
   291f0:	dc400117 	ldw	r17,4(sp)
   291f4:	dc000017 	ldw	r16,0(sp)
   291f8:	dec00304 	addi	sp,sp,12
   291fc:	f800283a 	ret
   29200:	80c00017 	ldw	r3,0(r16)
   29204:	183ff926 	beq	r3,zero,291ec <_gp+0xfffeee20>
   29208:	88c00015 	stw	r3,0(r17)
   2920c:	003ff706 	br	291ec <_gp+0xfffeee20>

00029210 <_read_r>:
   29210:	defffd04 	addi	sp,sp,-12
   29214:	dc000015 	stw	r16,0(sp)
   29218:	040000f4 	movhi	r16,3
   2921c:	dc400115 	stw	r17,4(sp)
   29220:	84100f04 	addi	r16,r16,16444
   29224:	2023883a 	mov	r17,r4
   29228:	2809883a 	mov	r4,r5
   2922c:	300b883a 	mov	r5,r6
   29230:	380d883a 	mov	r6,r7
   29234:	dfc00215 	stw	ra,8(sp)
   29238:	80000015 	stw	zero,0(r16)
   2923c:	002d1140 	call	2d114 <read>
   29240:	00ffffc4 	movi	r3,-1
   29244:	10c00526 	beq	r2,r3,2925c <_read_r+0x4c>
   29248:	dfc00217 	ldw	ra,8(sp)
   2924c:	dc400117 	ldw	r17,4(sp)
   29250:	dc000017 	ldw	r16,0(sp)
   29254:	dec00304 	addi	sp,sp,12
   29258:	f800283a 	ret
   2925c:	80c00017 	ldw	r3,0(r16)
   29260:	183ff926 	beq	r3,zero,29248 <_gp+0xfffeee7c>
   29264:	88c00015 	stw	r3,0(r17)
   29268:	003ff706 	br	29248 <_gp+0xfffeee7c>

0002926c <__swbuf_r>:
   2926c:	defffc04 	addi	sp,sp,-16
   29270:	dc800215 	stw	r18,8(sp)
   29274:	dc400115 	stw	r17,4(sp)
   29278:	dc000015 	stw	r16,0(sp)
   2927c:	dfc00315 	stw	ra,12(sp)
   29280:	2025883a 	mov	r18,r4
   29284:	2823883a 	mov	r17,r5
   29288:	3021883a 	mov	r16,r6
   2928c:	20000226 	beq	r4,zero,29298 <__swbuf_r+0x2c>
   29290:	20800e17 	ldw	r2,56(r4)
   29294:	10004126 	beq	r2,zero,2939c <__swbuf_r+0x130>
   29298:	80c00617 	ldw	r3,24(r16)
   2929c:	8180030b 	ldhu	r6,12(r16)
   292a0:	80c00215 	stw	r3,8(r16)
   292a4:	30c0020c 	andi	r3,r6,8
   292a8:	18003526 	beq	r3,zero,29380 <__swbuf_r+0x114>
   292ac:	80c00417 	ldw	r3,16(r16)
   292b0:	18003326 	beq	r3,zero,29380 <__swbuf_r+0x114>
   292b4:	3088000c 	andi	r2,r6,8192
   292b8:	8c403fcc 	andi	r17,r17,255
   292bc:	10001726 	beq	r2,zero,2931c <__swbuf_r+0xb0>
   292c0:	80800017 	ldw	r2,0(r16)
   292c4:	81000517 	ldw	r4,20(r16)
   292c8:	10c7c83a 	sub	r3,r2,r3
   292cc:	19001d0e 	bge	r3,r4,29344 <__swbuf_r+0xd8>
   292d0:	18c00044 	addi	r3,r3,1
   292d4:	81400217 	ldw	r5,8(r16)
   292d8:	11000044 	addi	r4,r2,1
   292dc:	81000015 	stw	r4,0(r16)
   292e0:	297fffc4 	addi	r5,r5,-1
   292e4:	81400215 	stw	r5,8(r16)
   292e8:	14400005 	stb	r17,0(r2)
   292ec:	80800517 	ldw	r2,20(r16)
   292f0:	10c01d26 	beq	r2,r3,29368 <__swbuf_r+0xfc>
   292f4:	8080030b 	ldhu	r2,12(r16)
   292f8:	1080004c 	andi	r2,r2,1
   292fc:	1000181e 	bne	r2,zero,29360 <__swbuf_r+0xf4>
   29300:	8805883a 	mov	r2,r17
   29304:	dfc00317 	ldw	ra,12(sp)
   29308:	dc800217 	ldw	r18,8(sp)
   2930c:	dc400117 	ldw	r17,4(sp)
   29310:	dc000017 	ldw	r16,0(sp)
   29314:	dec00404 	addi	sp,sp,16
   29318:	f800283a 	ret
   2931c:	81001917 	ldw	r4,100(r16)
   29320:	00b7ffc4 	movi	r2,-8193
   29324:	31880014 	ori	r6,r6,8192
   29328:	2084703a 	and	r2,r4,r2
   2932c:	80801915 	stw	r2,100(r16)
   29330:	80800017 	ldw	r2,0(r16)
   29334:	81000517 	ldw	r4,20(r16)
   29338:	8180030d 	sth	r6,12(r16)
   2933c:	10c7c83a 	sub	r3,r2,r3
   29340:	193fe316 	blt	r3,r4,292d0 <_gp+0xfffeef04>
   29344:	9009883a 	mov	r4,r18
   29348:	800b883a 	mov	r5,r16
   2934c:	002413c0 	call	2413c <_fflush_r>
   29350:	1000091e 	bne	r2,zero,29378 <__swbuf_r+0x10c>
   29354:	80800017 	ldw	r2,0(r16)
   29358:	00c00044 	movi	r3,1
   2935c:	003fdd06 	br	292d4 <_gp+0xfffeef08>
   29360:	00800284 	movi	r2,10
   29364:	88bfe61e 	bne	r17,r2,29300 <_gp+0xfffeef34>
   29368:	9009883a 	mov	r4,r18
   2936c:	800b883a 	mov	r5,r16
   29370:	002413c0 	call	2413c <_fflush_r>
   29374:	103fe226 	beq	r2,zero,29300 <_gp+0xfffeef34>
   29378:	00bfffc4 	movi	r2,-1
   2937c:	003fe106 	br	29304 <_gp+0xfffeef38>
   29380:	9009883a 	mov	r4,r18
   29384:	800b883a 	mov	r5,r16
   29388:	00226e40 	call	226e4 <__swsetup_r>
   2938c:	1000051e 	bne	r2,zero,293a4 <__swbuf_r+0x138>
   29390:	8180030b 	ldhu	r6,12(r16)
   29394:	80c00417 	ldw	r3,16(r16)
   29398:	003fc606 	br	292b4 <_gp+0xfffeeee8>
   2939c:	00246e40 	call	246e4 <__sinit>
   293a0:	003fbd06 	br	29298 <_gp+0xfffeeecc>
   293a4:	80c0030b 	ldhu	r3,12(r16)
   293a8:	00bfffc4 	movi	r2,-1
   293ac:	18c01014 	ori	r3,r3,64
   293b0:	80c0030d 	sth	r3,12(r16)
   293b4:	00c00244 	movi	r3,9
   293b8:	90c00015 	stw	r3,0(r18)
   293bc:	003fd106 	br	29304 <_gp+0xfffeef38>

000293c0 <__swbuf>:
   293c0:	00c000f4 	movhi	r3,3
   293c4:	18c8f404 	addi	r3,r3,9168
   293c8:	2005883a 	mov	r2,r4
   293cc:	19000017 	ldw	r4,0(r3)
   293d0:	280d883a 	mov	r6,r5
   293d4:	100b883a 	mov	r5,r2
   293d8:	002926c1 	jmpi	2926c <__swbuf_r>

000293dc <_wcrtomb_r>:
   293dc:	defff604 	addi	sp,sp,-40
   293e0:	008000f4 	movhi	r2,3
   293e4:	dc800815 	stw	r18,32(sp)
   293e8:	dc400715 	stw	r17,28(sp)
   293ec:	dc000615 	stw	r16,24(sp)
   293f0:	1088f804 	addi	r2,r2,9184
   293f4:	dfc00915 	stw	ra,36(sp)
   293f8:	2021883a 	mov	r16,r4
   293fc:	3823883a 	mov	r17,r7
   29400:	14800017 	ldw	r18,0(r2)
   29404:	28001426 	beq	r5,zero,29458 <_wcrtomb_r+0x7c>
   29408:	d9400415 	stw	r5,16(sp)
   2940c:	d9800515 	stw	r6,20(sp)
   29410:	00251d80 	call	251d8 <__locale_charset>
   29414:	d9400417 	ldw	r5,16(sp)
   29418:	d9800517 	ldw	r6,20(sp)
   2941c:	8009883a 	mov	r4,r16
   29420:	dc400015 	stw	r17,0(sp)
   29424:	100f883a 	mov	r7,r2
   29428:	903ee83a 	callr	r18
   2942c:	00ffffc4 	movi	r3,-1
   29430:	10c0031e 	bne	r2,r3,29440 <_wcrtomb_r+0x64>
   29434:	88000015 	stw	zero,0(r17)
   29438:	00c02284 	movi	r3,138
   2943c:	80c00015 	stw	r3,0(r16)
   29440:	dfc00917 	ldw	ra,36(sp)
   29444:	dc800817 	ldw	r18,32(sp)
   29448:	dc400717 	ldw	r17,28(sp)
   2944c:	dc000617 	ldw	r16,24(sp)
   29450:	dec00a04 	addi	sp,sp,40
   29454:	f800283a 	ret
   29458:	00251d80 	call	251d8 <__locale_charset>
   2945c:	8009883a 	mov	r4,r16
   29460:	dc400015 	stw	r17,0(sp)
   29464:	d9400104 	addi	r5,sp,4
   29468:	000d883a 	mov	r6,zero
   2946c:	100f883a 	mov	r7,r2
   29470:	903ee83a 	callr	r18
   29474:	003fed06 	br	2942c <_gp+0xfffef060>

00029478 <wcrtomb>:
   29478:	defff504 	addi	sp,sp,-44
   2947c:	dc400515 	stw	r17,20(sp)
   29480:	dc000415 	stw	r16,16(sp)
   29484:	dfc00a15 	stw	ra,40(sp)
   29488:	dd400915 	stw	r21,36(sp)
   2948c:	dd000815 	stw	r20,32(sp)
   29490:	dcc00715 	stw	r19,28(sp)
   29494:	dc800615 	stw	r18,24(sp)
   29498:	2021883a 	mov	r16,r4
   2949c:	3023883a 	mov	r17,r6
   294a0:	20001d26 	beq	r4,zero,29518 <wcrtomb+0xa0>
   294a4:	048000f4 	movhi	r18,3
   294a8:	9488f404 	addi	r18,r18,9168
   294ac:	008000f4 	movhi	r2,3
   294b0:	95400017 	ldw	r21,0(r18)
   294b4:	1088f804 	addi	r2,r2,9184
   294b8:	15000017 	ldw	r20,0(r2)
   294bc:	2827883a 	mov	r19,r5
   294c0:	00251d80 	call	251d8 <__locale_charset>
   294c4:	a809883a 	mov	r4,r21
   294c8:	dc400015 	stw	r17,0(sp)
   294cc:	800b883a 	mov	r5,r16
   294d0:	980d883a 	mov	r6,r19
   294d4:	100f883a 	mov	r7,r2
   294d8:	a03ee83a 	callr	r20
   294dc:	00ffffc4 	movi	r3,-1
   294e0:	10c0041e 	bne	r2,r3,294f4 <wcrtomb+0x7c>
   294e4:	90c00017 	ldw	r3,0(r18)
   294e8:	01002284 	movi	r4,138
   294ec:	88000015 	stw	zero,0(r17)
   294f0:	19000015 	stw	r4,0(r3)
   294f4:	dfc00a17 	ldw	ra,40(sp)
   294f8:	dd400917 	ldw	r21,36(sp)
   294fc:	dd000817 	ldw	r20,32(sp)
   29500:	dcc00717 	ldw	r19,28(sp)
   29504:	dc800617 	ldw	r18,24(sp)
   29508:	dc400517 	ldw	r17,20(sp)
   2950c:	dc000417 	ldw	r16,16(sp)
   29510:	dec00b04 	addi	sp,sp,44
   29514:	f800283a 	ret
   29518:	048000f4 	movhi	r18,3
   2951c:	9488f404 	addi	r18,r18,9168
   29520:	008000f4 	movhi	r2,3
   29524:	94c00017 	ldw	r19,0(r18)
   29528:	1088f804 	addi	r2,r2,9184
   2952c:	14000017 	ldw	r16,0(r2)
   29530:	00251d80 	call	251d8 <__locale_charset>
   29534:	9809883a 	mov	r4,r19
   29538:	dc400015 	stw	r17,0(sp)
   2953c:	d9400104 	addi	r5,sp,4
   29540:	000d883a 	mov	r6,zero
   29544:	100f883a 	mov	r7,r2
   29548:	803ee83a 	callr	r16
   2954c:	003fe306 	br	294dc <_gp+0xfffef110>

00029550 <__ascii_wctomb>:
   29550:	28000526 	beq	r5,zero,29568 <__ascii_wctomb+0x18>
   29554:	00803fc4 	movi	r2,255
   29558:	11800536 	bltu	r2,r6,29570 <__ascii_wctomb+0x20>
   2955c:	29800005 	stb	r6,0(r5)
   29560:	00800044 	movi	r2,1
   29564:	f800283a 	ret
   29568:	0005883a 	mov	r2,zero
   2956c:	f800283a 	ret
   29570:	00802284 	movi	r2,138
   29574:	20800015 	stw	r2,0(r4)
   29578:	00bfffc4 	movi	r2,-1
   2957c:	f800283a 	ret

00029580 <_wctomb_r>:
   29580:	008000f4 	movhi	r2,3
   29584:	defff904 	addi	sp,sp,-28
   29588:	1088f804 	addi	r2,r2,9184
   2958c:	dfc00615 	stw	ra,24(sp)
   29590:	dc400515 	stw	r17,20(sp)
   29594:	dc000415 	stw	r16,16(sp)
   29598:	3823883a 	mov	r17,r7
   2959c:	14000017 	ldw	r16,0(r2)
   295a0:	d9000115 	stw	r4,4(sp)
   295a4:	d9400215 	stw	r5,8(sp)
   295a8:	d9800315 	stw	r6,12(sp)
   295ac:	00251d80 	call	251d8 <__locale_charset>
   295b0:	d9000117 	ldw	r4,4(sp)
   295b4:	d9400217 	ldw	r5,8(sp)
   295b8:	d9800317 	ldw	r6,12(sp)
   295bc:	dc400015 	stw	r17,0(sp)
   295c0:	100f883a 	mov	r7,r2
   295c4:	803ee83a 	callr	r16
   295c8:	dfc00617 	ldw	ra,24(sp)
   295cc:	dc400517 	ldw	r17,20(sp)
   295d0:	dc000417 	ldw	r16,16(sp)
   295d4:	dec00704 	addi	sp,sp,28
   295d8:	f800283a 	ret

000295dc <__udivdi3>:
   295dc:	defff504 	addi	sp,sp,-44
   295e0:	dcc00415 	stw	r19,16(sp)
   295e4:	dc000115 	stw	r16,4(sp)
   295e8:	dfc00a15 	stw	ra,40(sp)
   295ec:	df000915 	stw	fp,36(sp)
   295f0:	ddc00815 	stw	r23,32(sp)
   295f4:	dd800715 	stw	r22,28(sp)
   295f8:	dd400615 	stw	r21,24(sp)
   295fc:	dd000515 	stw	r20,20(sp)
   29600:	dc800315 	stw	r18,12(sp)
   29604:	dc400215 	stw	r17,8(sp)
   29608:	2027883a 	mov	r19,r4
   2960c:	2821883a 	mov	r16,r5
   29610:	3800421e 	bne	r7,zero,2971c <__udivdi3+0x140>
   29614:	3025883a 	mov	r18,r6
   29618:	2023883a 	mov	r17,r4
   2961c:	2980542e 	bgeu	r5,r6,29770 <__udivdi3+0x194>
   29620:	00bfffd4 	movui	r2,65535
   29624:	282d883a 	mov	r22,r5
   29628:	1180a836 	bltu	r2,r6,298cc <__udivdi3+0x2f0>
   2962c:	00803fc4 	movi	r2,255
   29630:	1181422e 	bgeu	r2,r6,29b3c <__udivdi3+0x560>
   29634:	00800204 	movi	r2,8
   29638:	1007883a 	mov	r3,r2
   2963c:	3084d83a 	srl	r2,r6,r2
   29640:	010000f4 	movhi	r4,3
   29644:	21019804 	addi	r4,r4,1632
   29648:	2085883a 	add	r2,r4,r2
   2964c:	10800003 	ldbu	r2,0(r2)
   29650:	10c7883a 	add	r3,r2,r3
   29654:	00800804 	movi	r2,32
   29658:	10c5c83a 	sub	r2,r2,r3
   2965c:	10000526 	beq	r2,zero,29674 <__udivdi3+0x98>
   29660:	80a0983a 	sll	r16,r16,r2
   29664:	98c6d83a 	srl	r3,r19,r3
   29668:	30a4983a 	sll	r18,r6,r2
   2966c:	98a2983a 	sll	r17,r19,r2
   29670:	80ecb03a 	or	r22,r16,r3
   29674:	902ad43a 	srli	r21,r18,16
   29678:	b009883a 	mov	r4,r22
   2967c:	953fffcc 	andi	r20,r18,65535
   29680:	a80b883a 	mov	r5,r21
   29684:	002a2500 	call	2a250 <__umodsi3>
   29688:	b009883a 	mov	r4,r22
   2968c:	a80b883a 	mov	r5,r21
   29690:	1027883a 	mov	r19,r2
   29694:	002a2480 	call	2a248 <__udivsi3>
   29698:	1021883a 	mov	r16,r2
   2969c:	8806d43a 	srli	r3,r17,16
   296a0:	9804943a 	slli	r2,r19,16
   296a4:	8527383a 	mul	r19,r16,r20
   296a8:	10c4b03a 	or	r2,r2,r3
   296ac:	14c0052e 	bgeu	r2,r19,296c4 <__udivdi3+0xe8>
   296b0:	1485883a 	add	r2,r2,r18
   296b4:	80ffffc4 	addi	r3,r16,-1
   296b8:	14800136 	bltu	r2,r18,296c0 <__udivdi3+0xe4>
   296bc:	14c13436 	bltu	r2,r19,29b90 <__udivdi3+0x5b4>
   296c0:	1821883a 	mov	r16,r3
   296c4:	14e7c83a 	sub	r19,r2,r19
   296c8:	9809883a 	mov	r4,r19
   296cc:	a80b883a 	mov	r5,r21
   296d0:	002a2500 	call	2a250 <__umodsi3>
   296d4:	102d883a 	mov	r22,r2
   296d8:	9809883a 	mov	r4,r19
   296dc:	a80b883a 	mov	r5,r21
   296e0:	002a2480 	call	2a248 <__udivsi3>
   296e4:	b02c943a 	slli	r22,r22,16
   296e8:	1529383a 	mul	r20,r2,r20
   296ec:	8c7fffcc 	andi	r17,r17,65535
   296f0:	b462b03a 	or	r17,r22,r17
   296f4:	8d00052e 	bgeu	r17,r20,2970c <__udivdi3+0x130>
   296f8:	8ca3883a 	add	r17,r17,r18
   296fc:	10ffffc4 	addi	r3,r2,-1
   29700:	8c80f636 	bltu	r17,r18,29adc <__udivdi3+0x500>
   29704:	8d00f52e 	bgeu	r17,r20,29adc <__udivdi3+0x500>
   29708:	10bfff84 	addi	r2,r2,-2
   2970c:	8020943a 	slli	r16,r16,16
   29710:	0007883a 	mov	r3,zero
   29714:	1404b03a 	or	r2,r2,r16
   29718:	00005b06 	br	29888 <__udivdi3+0x2ac>
   2971c:	29c05836 	bltu	r5,r7,29880 <__udivdi3+0x2a4>
   29720:	00bfffd4 	movui	r2,65535
   29724:	11c0642e 	bgeu	r2,r7,298b8 <__udivdi3+0x2dc>
   29728:	00804034 	movhi	r2,256
   2972c:	10bfffc4 	addi	r2,r2,-1
   29730:	11c0f32e 	bgeu	r2,r7,29b00 <__udivdi3+0x524>
   29734:	00c00604 	movi	r3,24
   29738:	180b883a 	mov	r5,r3
   2973c:	38c6d83a 	srl	r3,r7,r3
   29740:	008000f4 	movhi	r2,3
   29744:	10819804 	addi	r2,r2,1632
   29748:	10c7883a 	add	r3,r2,r3
   2974c:	18c00003 	ldbu	r3,0(r3)
   29750:	01000804 	movi	r4,32
   29754:	1947883a 	add	r3,r3,r5
   29758:	20e5c83a 	sub	r18,r4,r3
   2975c:	9000661e 	bne	r18,zero,298f8 <__udivdi3+0x31c>
   29760:	3c00f936 	bltu	r7,r16,29b48 <__udivdi3+0x56c>
   29764:	9985403a 	cmpgeu	r2,r19,r6
   29768:	0007883a 	mov	r3,zero
   2976c:	00004606 	br	29888 <__udivdi3+0x2ac>
   29770:	3000041e 	bne	r6,zero,29784 <__udivdi3+0x1a8>
   29774:	01000044 	movi	r4,1
   29778:	000b883a 	mov	r5,zero
   2977c:	002a2480 	call	2a248 <__udivsi3>
   29780:	1025883a 	mov	r18,r2
   29784:	00bfffd4 	movui	r2,65535
   29788:	1480562e 	bgeu	r2,r18,298e4 <__udivdi3+0x308>
   2978c:	00804034 	movhi	r2,256
   29790:	10bfffc4 	addi	r2,r2,-1
   29794:	1480e32e 	bgeu	r2,r18,29b24 <__udivdi3+0x548>
   29798:	00800604 	movi	r2,24
   2979c:	1007883a 	mov	r3,r2
   297a0:	9084d83a 	srl	r2,r18,r2
   297a4:	010000f4 	movhi	r4,3
   297a8:	21019804 	addi	r4,r4,1632
   297ac:	2085883a 	add	r2,r4,r2
   297b0:	10800003 	ldbu	r2,0(r2)
   297b4:	10c5883a 	add	r2,r2,r3
   297b8:	00c00804 	movi	r3,32
   297bc:	1887c83a 	sub	r3,r3,r2
   297c0:	1800911e 	bne	r3,zero,29a08 <__udivdi3+0x42c>
   297c4:	9028d43a 	srli	r20,r18,16
   297c8:	84a1c83a 	sub	r16,r16,r18
   297cc:	957fffcc 	andi	r21,r18,65535
   297d0:	00c00044 	movi	r3,1
   297d4:	8009883a 	mov	r4,r16
   297d8:	a00b883a 	mov	r5,r20
   297dc:	d8c00015 	stw	r3,0(sp)
   297e0:	002a2500 	call	2a250 <__umodsi3>
   297e4:	8009883a 	mov	r4,r16
   297e8:	a00b883a 	mov	r5,r20
   297ec:	1027883a 	mov	r19,r2
   297f0:	002a2480 	call	2a248 <__udivsi3>
   297f4:	1021883a 	mov	r16,r2
   297f8:	880cd43a 	srli	r6,r17,16
   297fc:	9804943a 	slli	r2,r19,16
   29800:	8567383a 	mul	r19,r16,r21
   29804:	d8c00017 	ldw	r3,0(sp)
   29808:	1188b03a 	or	r4,r2,r6
   2980c:	24c0052e 	bgeu	r4,r19,29824 <__udivdi3+0x248>
   29810:	2489883a 	add	r4,r4,r18
   29814:	80bfffc4 	addi	r2,r16,-1
   29818:	24800136 	bltu	r4,r18,29820 <__udivdi3+0x244>
   2981c:	24c0d936 	bltu	r4,r19,29b84 <__udivdi3+0x5a8>
   29820:	1021883a 	mov	r16,r2
   29824:	24e7c83a 	sub	r19,r4,r19
   29828:	9809883a 	mov	r4,r19
   2982c:	a00b883a 	mov	r5,r20
   29830:	d8c00015 	stw	r3,0(sp)
   29834:	002a2500 	call	2a250 <__umodsi3>
   29838:	102d883a 	mov	r22,r2
   2983c:	9809883a 	mov	r4,r19
   29840:	a00b883a 	mov	r5,r20
   29844:	002a2480 	call	2a248 <__udivsi3>
   29848:	b02c943a 	slli	r22,r22,16
   2984c:	156b383a 	mul	r21,r2,r21
   29850:	8c7fffcc 	andi	r17,r17,65535
   29854:	b462b03a 	or	r17,r22,r17
   29858:	d8c00017 	ldw	r3,0(sp)
   2985c:	8d40052e 	bgeu	r17,r21,29874 <__udivdi3+0x298>
   29860:	8ca3883a 	add	r17,r17,r18
   29864:	113fffc4 	addi	r4,r2,-1
   29868:	8c809a36 	bltu	r17,r18,29ad4 <__udivdi3+0x4f8>
   2986c:	8d40992e 	bgeu	r17,r21,29ad4 <__udivdi3+0x4f8>
   29870:	10bfff84 	addi	r2,r2,-2
   29874:	8020943a 	slli	r16,r16,16
   29878:	1404b03a 	or	r2,r2,r16
   2987c:	00000206 	br	29888 <__udivdi3+0x2ac>
   29880:	0007883a 	mov	r3,zero
   29884:	0005883a 	mov	r2,zero
   29888:	dfc00a17 	ldw	ra,40(sp)
   2988c:	df000917 	ldw	fp,36(sp)
   29890:	ddc00817 	ldw	r23,32(sp)
   29894:	dd800717 	ldw	r22,28(sp)
   29898:	dd400617 	ldw	r21,24(sp)
   2989c:	dd000517 	ldw	r20,20(sp)
   298a0:	dcc00417 	ldw	r19,16(sp)
   298a4:	dc800317 	ldw	r18,12(sp)
   298a8:	dc400217 	ldw	r17,8(sp)
   298ac:	dc000117 	ldw	r16,4(sp)
   298b0:	dec00b04 	addi	sp,sp,44
   298b4:	f800283a 	ret
   298b8:	00803fc4 	movi	r2,255
   298bc:	11c0932e 	bgeu	r2,r7,29b0c <__udivdi3+0x530>
   298c0:	00c00204 	movi	r3,8
   298c4:	180b883a 	mov	r5,r3
   298c8:	003f9c06 	br	2973c <_gp+0xfffef370>
   298cc:	00804034 	movhi	r2,256
   298d0:	10bfffc4 	addi	r2,r2,-1
   298d4:	1180902e 	bgeu	r2,r6,29b18 <__udivdi3+0x53c>
   298d8:	00800604 	movi	r2,24
   298dc:	1007883a 	mov	r3,r2
   298e0:	003f5606 	br	2963c <_gp+0xfffef270>
   298e4:	00803fc4 	movi	r2,255
   298e8:	1480912e 	bgeu	r2,r18,29b30 <__udivdi3+0x554>
   298ec:	00800204 	movi	r2,8
   298f0:	1007883a 	mov	r3,r2
   298f4:	003faa06 	br	297a0 <_gp+0xfffef3d4>
   298f8:	30eed83a 	srl	r23,r6,r3
   298fc:	3c8e983a 	sll	r7,r7,r18
   29900:	80f8d83a 	srl	fp,r16,r3
   29904:	98c6d83a 	srl	r3,r19,r3
   29908:	3deeb03a 	or	r23,r7,r23
   2990c:	b828d43a 	srli	r20,r23,16
   29910:	84a0983a 	sll	r16,r16,r18
   29914:	e009883a 	mov	r4,fp
   29918:	a00b883a 	mov	r5,r20
   2991c:	80e2b03a 	or	r17,r16,r3
   29920:	34aa983a 	sll	r21,r6,r18
   29924:	002a2500 	call	2a250 <__umodsi3>
   29928:	e009883a 	mov	r4,fp
   2992c:	a00b883a 	mov	r5,r20
   29930:	102d883a 	mov	r22,r2
   29934:	002a2480 	call	2a248 <__udivsi3>
   29938:	1021883a 	mov	r16,r2
   2993c:	bf3fffcc 	andi	fp,r23,65535
   29940:	b004943a 	slli	r2,r22,16
   29944:	8808d43a 	srli	r4,r17,16
   29948:	872d383a 	mul	r22,r16,fp
   2994c:	1104b03a 	or	r2,r2,r4
   29950:	1580042e 	bgeu	r2,r22,29964 <__udivdi3+0x388>
   29954:	15c5883a 	add	r2,r2,r23
   29958:	80ffffc4 	addi	r3,r16,-1
   2995c:	15c0812e 	bgeu	r2,r23,29b64 <__udivdi3+0x588>
   29960:	1821883a 	mov	r16,r3
   29964:	15adc83a 	sub	r22,r2,r22
   29968:	b009883a 	mov	r4,r22
   2996c:	a00b883a 	mov	r5,r20
   29970:	002a2500 	call	2a250 <__umodsi3>
   29974:	a00b883a 	mov	r5,r20
   29978:	b009883a 	mov	r4,r22
   2997c:	d8800015 	stw	r2,0(sp)
   29980:	002a2480 	call	2a248 <__udivsi3>
   29984:	d8c00017 	ldw	r3,0(sp)
   29988:	170b383a 	mul	r5,r2,fp
   2998c:	8c7fffcc 	andi	r17,r17,65535
   29990:	1806943a 	slli	r3,r3,16
   29994:	1c46b03a 	or	r3,r3,r17
   29998:	1940042e 	bgeu	r3,r5,299ac <__udivdi3+0x3d0>
   2999c:	1dc7883a 	add	r3,r3,r23
   299a0:	113fffc4 	addi	r4,r2,-1
   299a4:	1dc06b2e 	bgeu	r3,r23,29b54 <__udivdi3+0x578>
   299a8:	2005883a 	mov	r2,r4
   299ac:	8020943a 	slli	r16,r16,16
   299b0:	a9ffffcc 	andi	r7,r21,65535
   299b4:	a82ad43a 	srli	r21,r21,16
   299b8:	1404b03a 	or	r2,r2,r16
   299bc:	113fffcc 	andi	r4,r2,65535
   299c0:	100cd43a 	srli	r6,r2,16
   299c4:	21d3383a 	mul	r9,r4,r7
   299c8:	2549383a 	mul	r4,r4,r21
   299cc:	31cf383a 	mul	r7,r6,r7
   299d0:	4810d43a 	srli	r8,r9,16
   299d4:	1947c83a 	sub	r3,r3,r5
   299d8:	3909883a 	add	r4,r7,r4
   299dc:	2209883a 	add	r4,r4,r8
   299e0:	354d383a 	mul	r6,r6,r21
   299e4:	21c0022e 	bgeu	r4,r7,299f0 <__udivdi3+0x414>
   299e8:	01400074 	movhi	r5,1
   299ec:	314d883a 	add	r6,r6,r5
   299f0:	202ad43a 	srli	r21,r4,16
   299f4:	354d883a 	add	r6,r6,r21
   299f8:	19803f36 	bltu	r3,r6,29af8 <__udivdi3+0x51c>
   299fc:	19803926 	beq	r3,r6,29ae4 <__udivdi3+0x508>
   29a00:	0007883a 	mov	r3,zero
   29a04:	003fa006 	br	29888 <_gp+0xfffef4bc>
   29a08:	90e4983a 	sll	r18,r18,r3
   29a0c:	80aad83a 	srl	r21,r16,r2
   29a10:	80e0983a 	sll	r16,r16,r3
   29a14:	9028d43a 	srli	r20,r18,16
   29a18:	9884d83a 	srl	r2,r19,r2
   29a1c:	a809883a 	mov	r4,r21
   29a20:	a00b883a 	mov	r5,r20
   29a24:	80acb03a 	or	r22,r16,r2
   29a28:	98e2983a 	sll	r17,r19,r3
   29a2c:	002a2500 	call	2a250 <__umodsi3>
   29a30:	a809883a 	mov	r4,r21
   29a34:	a00b883a 	mov	r5,r20
   29a38:	1021883a 	mov	r16,r2
   29a3c:	002a2480 	call	2a248 <__udivsi3>
   29a40:	957fffcc 	andi	r21,r18,65535
   29a44:	8020943a 	slli	r16,r16,16
   29a48:	b00ad43a 	srli	r5,r22,16
   29a4c:	1567383a 	mul	r19,r2,r21
   29a50:	102f883a 	mov	r23,r2
   29a54:	8148b03a 	or	r4,r16,r5
   29a58:	24c0062e 	bgeu	r4,r19,29a74 <__udivdi3+0x498>
   29a5c:	2489883a 	add	r4,r4,r18
   29a60:	10bfffc4 	addi	r2,r2,-1
   29a64:	24804536 	bltu	r4,r18,29b7c <__udivdi3+0x5a0>
   29a68:	24c0442e 	bgeu	r4,r19,29b7c <__udivdi3+0x5a0>
   29a6c:	bdffff84 	addi	r23,r23,-2
   29a70:	2489883a 	add	r4,r4,r18
   29a74:	24e7c83a 	sub	r19,r4,r19
   29a78:	9809883a 	mov	r4,r19
   29a7c:	a00b883a 	mov	r5,r20
   29a80:	002a2500 	call	2a250 <__umodsi3>
   29a84:	1021883a 	mov	r16,r2
   29a88:	9809883a 	mov	r4,r19
   29a8c:	a00b883a 	mov	r5,r20
   29a90:	002a2480 	call	2a248 <__udivsi3>
   29a94:	8020943a 	slli	r16,r16,16
   29a98:	1007883a 	mov	r3,r2
   29a9c:	1545383a 	mul	r2,r2,r21
   29aa0:	b13fffcc 	andi	r4,r22,65535
   29aa4:	8108b03a 	or	r4,r16,r4
   29aa8:	2080062e 	bgeu	r4,r2,29ac4 <__udivdi3+0x4e8>
   29aac:	2489883a 	add	r4,r4,r18
   29ab0:	197fffc4 	addi	r5,r3,-1
   29ab4:	24802f36 	bltu	r4,r18,29b74 <__udivdi3+0x598>
   29ab8:	20802e2e 	bgeu	r4,r2,29b74 <__udivdi3+0x598>
   29abc:	18ffff84 	addi	r3,r3,-2
   29ac0:	2489883a 	add	r4,r4,r18
   29ac4:	b82e943a 	slli	r23,r23,16
   29ac8:	20a1c83a 	sub	r16,r4,r2
   29acc:	1dc6b03a 	or	r3,r3,r23
   29ad0:	003f4006 	br	297d4 <_gp+0xfffef408>
   29ad4:	2005883a 	mov	r2,r4
   29ad8:	003f6606 	br	29874 <_gp+0xfffef4a8>
   29adc:	1805883a 	mov	r2,r3
   29ae0:	003f0a06 	br	2970c <_gp+0xfffef340>
   29ae4:	2006943a 	slli	r3,r4,16
   29ae8:	9c88983a 	sll	r4,r19,r18
   29aec:	4a7fffcc 	andi	r9,r9,65535
   29af0:	1a47883a 	add	r3,r3,r9
   29af4:	20ffc22e 	bgeu	r4,r3,29a00 <_gp+0xfffef634>
   29af8:	10bfffc4 	addi	r2,r2,-1
   29afc:	003fc006 	br	29a00 <_gp+0xfffef634>
   29b00:	00c00404 	movi	r3,16
   29b04:	180b883a 	mov	r5,r3
   29b08:	003f0c06 	br	2973c <_gp+0xfffef370>
   29b0c:	0007883a 	mov	r3,zero
   29b10:	000b883a 	mov	r5,zero
   29b14:	003f0906 	br	2973c <_gp+0xfffef370>
   29b18:	00800404 	movi	r2,16
   29b1c:	1007883a 	mov	r3,r2
   29b20:	003ec606 	br	2963c <_gp+0xfffef270>
   29b24:	00800404 	movi	r2,16
   29b28:	1007883a 	mov	r3,r2
   29b2c:	003f1c06 	br	297a0 <_gp+0xfffef3d4>
   29b30:	0005883a 	mov	r2,zero
   29b34:	0007883a 	mov	r3,zero
   29b38:	003f1906 	br	297a0 <_gp+0xfffef3d4>
   29b3c:	0005883a 	mov	r2,zero
   29b40:	0007883a 	mov	r3,zero
   29b44:	003ebd06 	br	2963c <_gp+0xfffef270>
   29b48:	0007883a 	mov	r3,zero
   29b4c:	00800044 	movi	r2,1
   29b50:	003f4d06 	br	29888 <_gp+0xfffef4bc>
   29b54:	197f942e 	bgeu	r3,r5,299a8 <_gp+0xfffef5dc>
   29b58:	10bfff84 	addi	r2,r2,-2
   29b5c:	1dc7883a 	add	r3,r3,r23
   29b60:	003f9206 	br	299ac <_gp+0xfffef5e0>
   29b64:	15bf7e2e 	bgeu	r2,r22,29960 <_gp+0xfffef594>
   29b68:	843fff84 	addi	r16,r16,-2
   29b6c:	15c5883a 	add	r2,r2,r23
   29b70:	003f7c06 	br	29964 <_gp+0xfffef598>
   29b74:	2807883a 	mov	r3,r5
   29b78:	003fd206 	br	29ac4 <_gp+0xfffef6f8>
   29b7c:	102f883a 	mov	r23,r2
   29b80:	003fbc06 	br	29a74 <_gp+0xfffef6a8>
   29b84:	843fff84 	addi	r16,r16,-2
   29b88:	2489883a 	add	r4,r4,r18
   29b8c:	003f2506 	br	29824 <_gp+0xfffef458>
   29b90:	843fff84 	addi	r16,r16,-2
   29b94:	1485883a 	add	r2,r2,r18
   29b98:	003eca06 	br	296c4 <_gp+0xfffef2f8>

00029b9c <__umoddi3>:
   29b9c:	defff404 	addi	sp,sp,-48
   29ba0:	ddc00915 	stw	r23,36(sp)
   29ba4:	dc400315 	stw	r17,12(sp)
   29ba8:	dc000215 	stw	r16,8(sp)
   29bac:	dfc00b15 	stw	ra,44(sp)
   29bb0:	df000a15 	stw	fp,40(sp)
   29bb4:	dd800815 	stw	r22,32(sp)
   29bb8:	dd400715 	stw	r21,28(sp)
   29bbc:	dd000615 	stw	r20,24(sp)
   29bc0:	dcc00515 	stw	r19,20(sp)
   29bc4:	dc800415 	stw	r18,16(sp)
   29bc8:	2021883a 	mov	r16,r4
   29bcc:	2823883a 	mov	r17,r5
   29bd0:	282f883a 	mov	r23,r5
   29bd4:	3800381e 	bne	r7,zero,29cb8 <__umoddi3+0x11c>
   29bd8:	3027883a 	mov	r19,r6
   29bdc:	2029883a 	mov	r20,r4
   29be0:	29804e2e 	bgeu	r5,r6,29d1c <__umoddi3+0x180>
   29be4:	00bfffd4 	movui	r2,65535
   29be8:	11809c36 	bltu	r2,r6,29e5c <__umoddi3+0x2c0>
   29bec:	00803fc4 	movi	r2,255
   29bf0:	11813b2e 	bgeu	r2,r6,2a0e0 <__umoddi3+0x544>
   29bf4:	01400204 	movi	r5,8
   29bf8:	2805883a 	mov	r2,r5
   29bfc:	314ad83a 	srl	r5,r6,r5
   29c00:	00c000f4 	movhi	r3,3
   29c04:	18c19804 	addi	r3,r3,1632
   29c08:	194b883a 	add	r5,r3,r5
   29c0c:	29000003 	ldbu	r4,0(r5)
   29c10:	2089883a 	add	r4,r4,r2
   29c14:	00800804 	movi	r2,32
   29c18:	1105c83a 	sub	r2,r2,r4
   29c1c:	1000ec26 	beq	r2,zero,29fd0 <__umoddi3+0x434>
   29c20:	88a2983a 	sll	r17,r17,r2
   29c24:	8108d83a 	srl	r4,r16,r4
   29c28:	30a6983a 	sll	r19,r6,r2
   29c2c:	80a8983a 	sll	r20,r16,r2
   29c30:	1025883a 	mov	r18,r2
   29c34:	892eb03a 	or	r23,r17,r4
   29c38:	982cd43a 	srli	r22,r19,16
   29c3c:	b809883a 	mov	r4,r23
   29c40:	9d7fffcc 	andi	r21,r19,65535
   29c44:	b00b883a 	mov	r5,r22
   29c48:	002a2500 	call	2a250 <__umodsi3>
   29c4c:	b809883a 	mov	r4,r23
   29c50:	b00b883a 	mov	r5,r22
   29c54:	1021883a 	mov	r16,r2
   29c58:	002a2480 	call	2a248 <__udivsi3>
   29c5c:	8020943a 	slli	r16,r16,16
   29c60:	a00cd43a 	srli	r6,r20,16
   29c64:	1545383a 	mul	r2,r2,r21
   29c68:	8188b03a 	or	r4,r16,r6
   29c6c:	2080042e 	bgeu	r4,r2,29c80 <__umoddi3+0xe4>
   29c70:	24c9883a 	add	r4,r4,r19
   29c74:	24c00236 	bltu	r4,r19,29c80 <__umoddi3+0xe4>
   29c78:	2080012e 	bgeu	r4,r2,29c80 <__umoddi3+0xe4>
   29c7c:	24c9883a 	add	r4,r4,r19
   29c80:	20a3c83a 	sub	r17,r4,r2
   29c84:	8809883a 	mov	r4,r17
   29c88:	b00b883a 	mov	r5,r22
   29c8c:	002a2500 	call	2a250 <__umodsi3>
   29c90:	8809883a 	mov	r4,r17
   29c94:	b00b883a 	mov	r5,r22
   29c98:	1021883a 	mov	r16,r2
   29c9c:	002a2480 	call	2a248 <__udivsi3>
   29ca0:	8006943a 	slli	r3,r16,16
   29ca4:	1545383a 	mul	r2,r2,r21
   29ca8:	a13fffcc 	andi	r4,r20,65535
   29cac:	1906b03a 	or	r3,r3,r4
   29cb0:	1880532e 	bgeu	r3,r2,29e00 <__umoddi3+0x264>
   29cb4:	00004e06 	br	29df0 <__umoddi3+0x254>
   29cb8:	29c05536 	bltu	r5,r7,29e10 <__umoddi3+0x274>
   29cbc:	00bfffd4 	movui	r2,65535
   29cc0:	11c0612e 	bgeu	r2,r7,29e48 <__umoddi3+0x2ac>
   29cc4:	00804034 	movhi	r2,256
   29cc8:	10bfffc4 	addi	r2,r2,-1
   29ccc:	11c0f82e 	bgeu	r2,r7,2a0b0 <__umoddi3+0x514>
   29cd0:	01400604 	movi	r5,24
   29cd4:	282b883a 	mov	r21,r5
   29cd8:	394ad83a 	srl	r5,r7,r5
   29cdc:	00c000f4 	movhi	r3,3
   29ce0:	18c19804 	addi	r3,r3,1632
   29ce4:	194b883a 	add	r5,r3,r5
   29ce8:	28800003 	ldbu	r2,0(r5)
   29cec:	00c00804 	movi	r3,32
   29cf0:	156b883a 	add	r21,r2,r21
   29cf4:	1d69c83a 	sub	r20,r3,r21
   29cf8:	a000631e 	bne	r20,zero,29e88 <__umoddi3+0x2ec>
   29cfc:	3c400136 	bltu	r7,r17,29d04 <__umoddi3+0x168>
   29d00:	81810436 	bltu	r16,r6,2a114 <__umoddi3+0x578>
   29d04:	8185c83a 	sub	r2,r16,r6
   29d08:	89e3c83a 	sub	r17,r17,r7
   29d0c:	8087803a 	cmpltu	r3,r16,r2
   29d10:	88efc83a 	sub	r23,r17,r3
   29d14:	b807883a 	mov	r3,r23
   29d18:	00003f06 	br	29e18 <__umoddi3+0x27c>
   29d1c:	3000041e 	bne	r6,zero,29d30 <__umoddi3+0x194>
   29d20:	01000044 	movi	r4,1
   29d24:	000b883a 	mov	r5,zero
   29d28:	002a2480 	call	2a248 <__udivsi3>
   29d2c:	1027883a 	mov	r19,r2
   29d30:	00bfffd4 	movui	r2,65535
   29d34:	14c04f2e 	bgeu	r2,r19,29e74 <__umoddi3+0x2d8>
   29d38:	00804034 	movhi	r2,256
   29d3c:	10bfffc4 	addi	r2,r2,-1
   29d40:	14c0e42e 	bgeu	r2,r19,2a0d4 <__umoddi3+0x538>
   29d44:	00800604 	movi	r2,24
   29d48:	1007883a 	mov	r3,r2
   29d4c:	9884d83a 	srl	r2,r19,r2
   29d50:	010000f4 	movhi	r4,3
   29d54:	21019804 	addi	r4,r4,1632
   29d58:	2085883a 	add	r2,r4,r2
   29d5c:	11000003 	ldbu	r4,0(r2)
   29d60:	00800804 	movi	r2,32
   29d64:	20c7883a 	add	r3,r4,r3
   29d68:	10c5c83a 	sub	r2,r2,r3
   29d6c:	10009a1e 	bne	r2,zero,29fd8 <__umoddi3+0x43c>
   29d70:	982cd43a 	srli	r22,r19,16
   29d74:	8ce3c83a 	sub	r17,r17,r19
   29d78:	9c3fffcc 	andi	r16,r19,65535
   29d7c:	0025883a 	mov	r18,zero
   29d80:	8809883a 	mov	r4,r17
   29d84:	b00b883a 	mov	r5,r22
   29d88:	002a2500 	call	2a250 <__umodsi3>
   29d8c:	8809883a 	mov	r4,r17
   29d90:	b00b883a 	mov	r5,r22
   29d94:	102b883a 	mov	r21,r2
   29d98:	002a2480 	call	2a248 <__udivsi3>
   29d9c:	a806943a 	slli	r3,r21,16
   29da0:	a008d43a 	srli	r4,r20,16
   29da4:	1405383a 	mul	r2,r2,r16
   29da8:	190cb03a 	or	r6,r3,r4
   29dac:	3080032e 	bgeu	r6,r2,29dbc <__umoddi3+0x220>
   29db0:	34cd883a 	add	r6,r6,r19
   29db4:	34c00136 	bltu	r6,r19,29dbc <__umoddi3+0x220>
   29db8:	3080d436 	bltu	r6,r2,2a10c <__umoddi3+0x570>
   29dbc:	30abc83a 	sub	r21,r6,r2
   29dc0:	a809883a 	mov	r4,r21
   29dc4:	b00b883a 	mov	r5,r22
   29dc8:	002a2500 	call	2a250 <__umodsi3>
   29dcc:	1023883a 	mov	r17,r2
   29dd0:	a809883a 	mov	r4,r21
   29dd4:	b00b883a 	mov	r5,r22
   29dd8:	002a2480 	call	2a248 <__udivsi3>
   29ddc:	8822943a 	slli	r17,r17,16
   29de0:	1405383a 	mul	r2,r2,r16
   29de4:	a13fffcc 	andi	r4,r20,65535
   29de8:	8906b03a 	or	r3,r17,r4
   29dec:	1880042e 	bgeu	r3,r2,29e00 <__umoddi3+0x264>
   29df0:	1cc7883a 	add	r3,r3,r19
   29df4:	1cc00236 	bltu	r3,r19,29e00 <__umoddi3+0x264>
   29df8:	1880012e 	bgeu	r3,r2,29e00 <__umoddi3+0x264>
   29dfc:	1cc7883a 	add	r3,r3,r19
   29e00:	1887c83a 	sub	r3,r3,r2
   29e04:	1c84d83a 	srl	r2,r3,r18
   29e08:	0007883a 	mov	r3,zero
   29e0c:	00000206 	br	29e18 <__umoddi3+0x27c>
   29e10:	2005883a 	mov	r2,r4
   29e14:	2807883a 	mov	r3,r5
   29e18:	dfc00b17 	ldw	ra,44(sp)
   29e1c:	df000a17 	ldw	fp,40(sp)
   29e20:	ddc00917 	ldw	r23,36(sp)
   29e24:	dd800817 	ldw	r22,32(sp)
   29e28:	dd400717 	ldw	r21,28(sp)
   29e2c:	dd000617 	ldw	r20,24(sp)
   29e30:	dcc00517 	ldw	r19,20(sp)
   29e34:	dc800417 	ldw	r18,16(sp)
   29e38:	dc400317 	ldw	r17,12(sp)
   29e3c:	dc000217 	ldw	r16,8(sp)
   29e40:	dec00c04 	addi	sp,sp,48
   29e44:	f800283a 	ret
   29e48:	00803fc4 	movi	r2,255
   29e4c:	11c0952e 	bgeu	r2,r7,2a0a4 <__umoddi3+0x508>
   29e50:	01400204 	movi	r5,8
   29e54:	282b883a 	mov	r21,r5
   29e58:	003f9f06 	br	29cd8 <_gp+0xfffef90c>
   29e5c:	00804034 	movhi	r2,256
   29e60:	10bfffc4 	addi	r2,r2,-1
   29e64:	1180952e 	bgeu	r2,r6,2a0bc <__umoddi3+0x520>
   29e68:	01400604 	movi	r5,24
   29e6c:	2805883a 	mov	r2,r5
   29e70:	003f6206 	br	29bfc <_gp+0xfffef830>
   29e74:	00803fc4 	movi	r2,255
   29e78:	14c0932e 	bgeu	r2,r19,2a0c8 <__umoddi3+0x52c>
   29e7c:	00800204 	movi	r2,8
   29e80:	1007883a 	mov	r3,r2
   29e84:	003fb106 	br	29d4c <_gp+0xfffef980>
   29e88:	3548d83a 	srl	r4,r6,r21
   29e8c:	3d0e983a 	sll	r7,r7,r20
   29e90:	8d10983a 	sll	r8,r17,r20
   29e94:	8d6cd83a 	srl	r22,r17,r21
   29e98:	3922b03a 	or	r17,r7,r4
   29e9c:	882ed43a 	srli	r23,r17,16
   29ea0:	8564d83a 	srl	r18,r16,r21
   29ea4:	b009883a 	mov	r4,r22
   29ea8:	b80b883a 	mov	r5,r23
   29eac:	44a4b03a 	or	r18,r8,r18
   29eb0:	3526983a 	sll	r19,r6,r20
   29eb4:	002a2500 	call	2a250 <__umodsi3>
   29eb8:	b009883a 	mov	r4,r22
   29ebc:	b80b883a 	mov	r5,r23
   29ec0:	1039883a 	mov	fp,r2
   29ec4:	002a2480 	call	2a248 <__udivsi3>
   29ec8:	102d883a 	mov	r22,r2
   29ecc:	8a3fffcc 	andi	r8,r17,65535
   29ed0:	e004943a 	slli	r2,fp,16
   29ed4:	900cd43a 	srli	r6,r18,16
   29ed8:	b239383a 	mul	fp,r22,r8
   29edc:	8520983a 	sll	r16,r16,r20
   29ee0:	118ab03a 	or	r5,r2,r6
   29ee4:	2f00042e 	bgeu	r5,fp,29ef8 <__umoddi3+0x35c>
   29ee8:	2c4b883a 	add	r5,r5,r17
   29eec:	b0bfffc4 	addi	r2,r22,-1
   29ef0:	2c40822e 	bgeu	r5,r17,2a0fc <__umoddi3+0x560>
   29ef4:	102d883a 	mov	r22,r2
   29ef8:	2f39c83a 	sub	fp,r5,fp
   29efc:	e009883a 	mov	r4,fp
   29f00:	b80b883a 	mov	r5,r23
   29f04:	da000115 	stw	r8,4(sp)
   29f08:	002a2500 	call	2a250 <__umodsi3>
   29f0c:	e009883a 	mov	r4,fp
   29f10:	b80b883a 	mov	r5,r23
   29f14:	d8800015 	stw	r2,0(sp)
   29f18:	002a2480 	call	2a248 <__udivsi3>
   29f1c:	d9800017 	ldw	r6,0(sp)
   29f20:	da000117 	ldw	r8,4(sp)
   29f24:	94bfffcc 	andi	r18,r18,65535
   29f28:	300c943a 	slli	r6,r6,16
   29f2c:	1209383a 	mul	r4,r2,r8
   29f30:	3490b03a 	or	r8,r6,r18
   29f34:	4100042e 	bgeu	r8,r4,29f48 <__umoddi3+0x3ac>
   29f38:	4451883a 	add	r8,r8,r17
   29f3c:	10ffffc4 	addi	r3,r2,-1
   29f40:	44406a2e 	bgeu	r8,r17,2a0ec <__umoddi3+0x550>
   29f44:	1805883a 	mov	r2,r3
   29f48:	b012943a 	slli	r9,r22,16
   29f4c:	9abfffcc 	andi	r10,r19,65535
   29f50:	980ed43a 	srli	r7,r19,16
   29f54:	124ab03a 	or	r5,r2,r9
   29f58:	2a7fffcc 	andi	r9,r5,65535
   29f5c:	280ad43a 	srli	r5,r5,16
   29f60:	4a8d383a 	mul	r6,r9,r10
   29f64:	49d3383a 	mul	r9,r9,r7
   29f68:	2a95383a 	mul	r10,r5,r10
   29f6c:	3004d43a 	srli	r2,r6,16
   29f70:	4111c83a 	sub	r8,r8,r4
   29f74:	5253883a 	add	r9,r10,r9
   29f78:	4893883a 	add	r9,r9,r2
   29f7c:	29cb383a 	mul	r5,r5,r7
   29f80:	4a80022e 	bgeu	r9,r10,29f8c <__umoddi3+0x3f0>
   29f84:	00800074 	movhi	r2,1
   29f88:	288b883a 	add	r5,r5,r2
   29f8c:	4808d43a 	srli	r4,r9,16
   29f90:	4812943a 	slli	r9,r9,16
   29f94:	31bfffcc 	andi	r6,r6,65535
   29f98:	290b883a 	add	r5,r5,r4
   29f9c:	498d883a 	add	r6,r9,r6
   29fa0:	41403a36 	bltu	r8,r5,2a08c <__umoddi3+0x4f0>
   29fa4:	41405d26 	beq	r8,r5,2a11c <__umoddi3+0x580>
   29fa8:	4149c83a 	sub	r4,r8,r5
   29fac:	300f883a 	mov	r7,r6
   29fb0:	81cfc83a 	sub	r7,r16,r7
   29fb4:	81c7803a 	cmpltu	r3,r16,r7
   29fb8:	20c7c83a 	sub	r3,r4,r3
   29fbc:	1d44983a 	sll	r2,r3,r21
   29fc0:	3d0ed83a 	srl	r7,r7,r20
   29fc4:	1d06d83a 	srl	r3,r3,r20
   29fc8:	11c4b03a 	or	r2,r2,r7
   29fcc:	003f9206 	br	29e18 <_gp+0xfffefa4c>
   29fd0:	0025883a 	mov	r18,zero
   29fd4:	003f1806 	br	29c38 <_gp+0xfffef86c>
   29fd8:	98a6983a 	sll	r19,r19,r2
   29fdc:	88e8d83a 	srl	r20,r17,r3
   29fe0:	80c6d83a 	srl	r3,r16,r3
   29fe4:	982cd43a 	srli	r22,r19,16
   29fe8:	88a2983a 	sll	r17,r17,r2
   29fec:	a009883a 	mov	r4,r20
   29ff0:	b00b883a 	mov	r5,r22
   29ff4:	88eab03a 	or	r21,r17,r3
   29ff8:	1025883a 	mov	r18,r2
   29ffc:	002a2500 	call	2a250 <__umodsi3>
   2a000:	a009883a 	mov	r4,r20
   2a004:	b00b883a 	mov	r5,r22
   2a008:	1023883a 	mov	r17,r2
   2a00c:	002a2480 	call	2a248 <__udivsi3>
   2a010:	9f3fffcc 	andi	fp,r19,65535
   2a014:	8822943a 	slli	r17,r17,16
   2a018:	a80ad43a 	srli	r5,r21,16
   2a01c:	1705383a 	mul	r2,r2,fp
   2a020:	84a8983a 	sll	r20,r16,r18
   2a024:	8948b03a 	or	r4,r17,r5
   2a028:	2080042e 	bgeu	r4,r2,2a03c <__umoddi3+0x4a0>
   2a02c:	24c9883a 	add	r4,r4,r19
   2a030:	24c00236 	bltu	r4,r19,2a03c <__umoddi3+0x4a0>
   2a034:	2080012e 	bgeu	r4,r2,2a03c <__umoddi3+0x4a0>
   2a038:	24c9883a 	add	r4,r4,r19
   2a03c:	20afc83a 	sub	r23,r4,r2
   2a040:	b809883a 	mov	r4,r23
   2a044:	b00b883a 	mov	r5,r22
   2a048:	002a2500 	call	2a250 <__umodsi3>
   2a04c:	1023883a 	mov	r17,r2
   2a050:	b809883a 	mov	r4,r23
   2a054:	b00b883a 	mov	r5,r22
   2a058:	002a2480 	call	2a248 <__udivsi3>
   2a05c:	8822943a 	slli	r17,r17,16
   2a060:	1705383a 	mul	r2,r2,fp
   2a064:	a93fffcc 	andi	r4,r21,65535
   2a068:	8908b03a 	or	r4,r17,r4
   2a06c:	2080042e 	bgeu	r4,r2,2a080 <__umoddi3+0x4e4>
   2a070:	24c9883a 	add	r4,r4,r19
   2a074:	24c00236 	bltu	r4,r19,2a080 <__umoddi3+0x4e4>
   2a078:	2080012e 	bgeu	r4,r2,2a080 <__umoddi3+0x4e4>
   2a07c:	24c9883a 	add	r4,r4,r19
   2a080:	20a3c83a 	sub	r17,r4,r2
   2a084:	e021883a 	mov	r16,fp
   2a088:	003f3d06 	br	29d80 <_gp+0xfffef9b4>
   2a08c:	34cfc83a 	sub	r7,r6,r19
   2a090:	2c4bc83a 	sub	r5,r5,r17
   2a094:	31cd803a 	cmpltu	r6,r6,r7
   2a098:	298dc83a 	sub	r6,r5,r6
   2a09c:	4189c83a 	sub	r4,r8,r6
   2a0a0:	003fc306 	br	29fb0 <_gp+0xfffefbe4>
   2a0a4:	000b883a 	mov	r5,zero
   2a0a8:	002b883a 	mov	r21,zero
   2a0ac:	003f0a06 	br	29cd8 <_gp+0xfffef90c>
   2a0b0:	01400404 	movi	r5,16
   2a0b4:	282b883a 	mov	r21,r5
   2a0b8:	003f0706 	br	29cd8 <_gp+0xfffef90c>
   2a0bc:	01400404 	movi	r5,16
   2a0c0:	2805883a 	mov	r2,r5
   2a0c4:	003ecd06 	br	29bfc <_gp+0xfffef830>
   2a0c8:	0005883a 	mov	r2,zero
   2a0cc:	0007883a 	mov	r3,zero
   2a0d0:	003f1e06 	br	29d4c <_gp+0xfffef980>
   2a0d4:	00800404 	movi	r2,16
   2a0d8:	1007883a 	mov	r3,r2
   2a0dc:	003f1b06 	br	29d4c <_gp+0xfffef980>
   2a0e0:	000b883a 	mov	r5,zero
   2a0e4:	0005883a 	mov	r2,zero
   2a0e8:	003ec406 	br	29bfc <_gp+0xfffef830>
   2a0ec:	413f952e 	bgeu	r8,r4,29f44 <_gp+0xfffefb78>
   2a0f0:	10bfff84 	addi	r2,r2,-2
   2a0f4:	4451883a 	add	r8,r8,r17
   2a0f8:	003f9306 	br	29f48 <_gp+0xfffefb7c>
   2a0fc:	2f3f7d2e 	bgeu	r5,fp,29ef4 <_gp+0xfffefb28>
   2a100:	b5bfff84 	addi	r22,r22,-2
   2a104:	2c4b883a 	add	r5,r5,r17
   2a108:	003f7b06 	br	29ef8 <_gp+0xfffefb2c>
   2a10c:	34cd883a 	add	r6,r6,r19
   2a110:	003f2a06 	br	29dbc <_gp+0xfffef9f0>
   2a114:	8005883a 	mov	r2,r16
   2a118:	003efe06 	br	29d14 <_gp+0xfffef948>
   2a11c:	81bfdb36 	bltu	r16,r6,2a08c <_gp+0xfffefcc0>
   2a120:	300f883a 	mov	r7,r6
   2a124:	0009883a 	mov	r4,zero
   2a128:	003fa106 	br	29fb0 <_gp+0xfffefbe4>

0002a12c <udivmodsi4>:
   2a12c:	2900182e 	bgeu	r5,r4,2a190 <udivmodsi4+0x64>
   2a130:	28001716 	blt	r5,zero,2a190 <udivmodsi4+0x64>
   2a134:	00800804 	movi	r2,32
   2a138:	00c00044 	movi	r3,1
   2a13c:	00000206 	br	2a148 <udivmodsi4+0x1c>
   2a140:	10001126 	beq	r2,zero,2a188 <udivmodsi4+0x5c>
   2a144:	28000516 	blt	r5,zero,2a15c <udivmodsi4+0x30>
   2a148:	294b883a 	add	r5,r5,r5
   2a14c:	10bfffc4 	addi	r2,r2,-1
   2a150:	18c7883a 	add	r3,r3,r3
   2a154:	293ffa36 	bltu	r5,r4,2a140 <_gp+0xfffefd74>
   2a158:	18000b26 	beq	r3,zero,2a188 <udivmodsi4+0x5c>
   2a15c:	0005883a 	mov	r2,zero
   2a160:	21400236 	bltu	r4,r5,2a16c <udivmodsi4+0x40>
   2a164:	2149c83a 	sub	r4,r4,r5
   2a168:	10c4b03a 	or	r2,r2,r3
   2a16c:	1806d07a 	srli	r3,r3,1
   2a170:	280ad07a 	srli	r5,r5,1
   2a174:	183ffa1e 	bne	r3,zero,2a160 <_gp+0xfffefd94>
   2a178:	3000011e 	bne	r6,zero,2a180 <udivmodsi4+0x54>
   2a17c:	f800283a 	ret
   2a180:	2005883a 	mov	r2,r4
   2a184:	f800283a 	ret
   2a188:	0005883a 	mov	r2,zero
   2a18c:	003ffa06 	br	2a178 <_gp+0xfffefdac>
   2a190:	00c00044 	movi	r3,1
   2a194:	003ff106 	br	2a15c <_gp+0xfffefd90>

0002a198 <__divsi3>:
   2a198:	defffe04 	addi	sp,sp,-8
   2a19c:	dfc00115 	stw	ra,4(sp)
   2a1a0:	dc000015 	stw	r16,0(sp)
   2a1a4:	20000b16 	blt	r4,zero,2a1d4 <__divsi3+0x3c>
   2a1a8:	0021883a 	mov	r16,zero
   2a1ac:	28000c16 	blt	r5,zero,2a1e0 <__divsi3+0x48>
   2a1b0:	000d883a 	mov	r6,zero
   2a1b4:	002a12c0 	call	2a12c <udivmodsi4>
   2a1b8:	0407c83a 	sub	r3,zero,r16
   2a1bc:	1884f03a 	xor	r2,r3,r2
   2a1c0:	1405883a 	add	r2,r2,r16
   2a1c4:	dfc00117 	ldw	ra,4(sp)
   2a1c8:	dc000017 	ldw	r16,0(sp)
   2a1cc:	dec00204 	addi	sp,sp,8
   2a1d0:	f800283a 	ret
   2a1d4:	0109c83a 	sub	r4,zero,r4
   2a1d8:	04000044 	movi	r16,1
   2a1dc:	283ff40e 	bge	r5,zero,2a1b0 <_gp+0xfffefde4>
   2a1e0:	014bc83a 	sub	r5,zero,r5
   2a1e4:	8400005c 	xori	r16,r16,1
   2a1e8:	003ff106 	br	2a1b0 <_gp+0xfffefde4>

0002a1ec <__modsi3>:
   2a1ec:	defffd04 	addi	sp,sp,-12
   2a1f0:	dfc00215 	stw	ra,8(sp)
   2a1f4:	dc400115 	stw	r17,4(sp)
   2a1f8:	dc000015 	stw	r16,0(sp)
   2a1fc:	20000c16 	blt	r4,zero,2a230 <__modsi3+0x44>
   2a200:	0023883a 	mov	r17,zero
   2a204:	0021883a 	mov	r16,zero
   2a208:	28000d16 	blt	r5,zero,2a240 <__modsi3+0x54>
   2a20c:	01800044 	movi	r6,1
   2a210:	002a12c0 	call	2a12c <udivmodsi4>
   2a214:	1404f03a 	xor	r2,r2,r16
   2a218:	8885883a 	add	r2,r17,r2
   2a21c:	dfc00217 	ldw	ra,8(sp)
   2a220:	dc400117 	ldw	r17,4(sp)
   2a224:	dc000017 	ldw	r16,0(sp)
   2a228:	dec00304 	addi	sp,sp,12
   2a22c:	f800283a 	ret
   2a230:	0109c83a 	sub	r4,zero,r4
   2a234:	04400044 	movi	r17,1
   2a238:	043fffc4 	movi	r16,-1
   2a23c:	283ff30e 	bge	r5,zero,2a20c <_gp+0xfffefe40>
   2a240:	014bc83a 	sub	r5,zero,r5
   2a244:	003ff106 	br	2a20c <_gp+0xfffefe40>

0002a248 <__udivsi3>:
   2a248:	000d883a 	mov	r6,zero
   2a24c:	002a12c1 	jmpi	2a12c <udivmodsi4>

0002a250 <__umodsi3>:
   2a250:	01800044 	movi	r6,1
   2a254:	002a12c1 	jmpi	2a12c <udivmodsi4>

0002a258 <__adddf3>:
   2a258:	02000434 	movhi	r8,16
   2a25c:	423fffc4 	addi	r8,r8,-1
   2a260:	defffb04 	addi	sp,sp,-20
   2a264:	2a12703a 	and	r9,r5,r8
   2a268:	2806d7fa 	srli	r3,r5,31
   2a26c:	3a10703a 	and	r8,r7,r8
   2a270:	3804d53a 	srli	r2,r7,20
   2a274:	3014d77a 	srli	r10,r6,29
   2a278:	dc000015 	stw	r16,0(sp)
   2a27c:	481290fa 	slli	r9,r9,3
   2a280:	2820d53a 	srli	r16,r5,20
   2a284:	401090fa 	slli	r8,r8,3
   2a288:	200ad77a 	srli	r5,r4,29
   2a28c:	380ed7fa 	srli	r7,r7,31
   2a290:	dc800215 	stw	r18,8(sp)
   2a294:	dc400115 	stw	r17,4(sp)
   2a298:	dfc00415 	stw	ra,16(sp)
   2a29c:	dcc00315 	stw	r19,12(sp)
   2a2a0:	1c803fcc 	andi	r18,r3,255
   2a2a4:	8401ffcc 	andi	r16,r16,2047
   2a2a8:	494ab03a 	or	r5,r9,r5
   2a2ac:	202290fa 	slli	r17,r4,3
   2a2b0:	1081ffcc 	andi	r2,r2,2047
   2a2b4:	4290b03a 	or	r8,r8,r10
   2a2b8:	300c90fa 	slli	r6,r6,3
   2a2bc:	91c07026 	beq	r18,r7,2a480 <__adddf3+0x228>
   2a2c0:	8087c83a 	sub	r3,r16,r2
   2a2c4:	00c0b30e 	bge	zero,r3,2a594 <__adddf3+0x33c>
   2a2c8:	10002a1e 	bne	r2,zero,2a374 <__adddf3+0x11c>
   2a2cc:	4184b03a 	or	r2,r8,r6
   2a2d0:	1000991e 	bne	r2,zero,2a538 <__adddf3+0x2e0>
   2a2d4:	888001cc 	andi	r2,r17,7
   2a2d8:	10005b26 	beq	r2,zero,2a448 <__adddf3+0x1f0>
   2a2dc:	88c003cc 	andi	r3,r17,15
   2a2e0:	00800104 	movi	r2,4
   2a2e4:	18805826 	beq	r3,r2,2a448 <__adddf3+0x1f0>
   2a2e8:	89800104 	addi	r6,r17,4
   2a2ec:	3463803a 	cmpltu	r17,r6,r17
   2a2f0:	2c4b883a 	add	r5,r5,r17
   2a2f4:	2880202c 	andhi	r2,r5,128
   2a2f8:	9007883a 	mov	r3,r18
   2a2fc:	3023883a 	mov	r17,r6
   2a300:	10005426 	beq	r2,zero,2a454 <__adddf3+0x1fc>
   2a304:	84000044 	addi	r16,r16,1
   2a308:	0081ffc4 	movi	r2,2047
   2a30c:	8080c126 	beq	r16,r2,2a614 <__adddf3+0x3bc>
   2a310:	013fe034 	movhi	r4,65408
   2a314:	213fffc4 	addi	r4,r4,-1
   2a318:	290a703a 	and	r5,r5,r4
   2a31c:	2804977a 	slli	r2,r5,29
   2a320:	280a927a 	slli	r5,r5,9
   2a324:	8822d0fa 	srli	r17,r17,3
   2a328:	8401ffcc 	andi	r16,r16,2047
   2a32c:	2808d33a 	srli	r4,r5,12
   2a330:	1444b03a 	or	r2,r2,r17
   2a334:	8401ffcc 	andi	r16,r16,2047
   2a338:	800a953a 	slli	r5,r16,20
   2a33c:	18c03fcc 	andi	r3,r3,255
   2a340:	04000434 	movhi	r16,16
   2a344:	180697fa 	slli	r3,r3,31
   2a348:	843fffc4 	addi	r16,r16,-1
   2a34c:	2420703a 	and	r16,r4,r16
   2a350:	8160b03a 	or	r16,r16,r5
   2a354:	80c6b03a 	or	r3,r16,r3
   2a358:	dfc00417 	ldw	ra,16(sp)
   2a35c:	dcc00317 	ldw	r19,12(sp)
   2a360:	dc800217 	ldw	r18,8(sp)
   2a364:	dc400117 	ldw	r17,4(sp)
   2a368:	dc000017 	ldw	r16,0(sp)
   2a36c:	dec00504 	addi	sp,sp,20
   2a370:	f800283a 	ret
   2a374:	0081ffc4 	movi	r2,2047
   2a378:	80bfd626 	beq	r16,r2,2a2d4 <_gp+0xfffeff08>
   2a37c:	42002034 	orhi	r8,r8,128
   2a380:	00800e04 	movi	r2,56
   2a384:	10c0a616 	blt	r2,r3,2a620 <__adddf3+0x3c8>
   2a388:	008007c4 	movi	r2,31
   2a38c:	10c0c916 	blt	r2,r3,2a6b4 <__adddf3+0x45c>
   2a390:	00800804 	movi	r2,32
   2a394:	10c5c83a 	sub	r2,r2,r3
   2a398:	408e983a 	sll	r7,r8,r2
   2a39c:	30c8d83a 	srl	r4,r6,r3
   2a3a0:	3084983a 	sll	r2,r6,r2
   2a3a4:	40c6d83a 	srl	r3,r8,r3
   2a3a8:	390cb03a 	or	r6,r7,r4
   2a3ac:	1004c03a 	cmpne	r2,r2,zero
   2a3b0:	308cb03a 	or	r6,r6,r2
   2a3b4:	898dc83a 	sub	r6,r17,r6
   2a3b8:	89a3803a 	cmpltu	r17,r17,r6
   2a3bc:	28cbc83a 	sub	r5,r5,r3
   2a3c0:	2c4bc83a 	sub	r5,r5,r17
   2a3c4:	3023883a 	mov	r17,r6
   2a3c8:	2880202c 	andhi	r2,r5,128
   2a3cc:	10006d26 	beq	r2,zero,2a584 <__adddf3+0x32c>
   2a3d0:	04c02034 	movhi	r19,128
   2a3d4:	9cffffc4 	addi	r19,r19,-1
   2a3d8:	2ce6703a 	and	r19,r5,r19
   2a3dc:	98007e26 	beq	r19,zero,2a5d8 <__adddf3+0x380>
   2a3e0:	9809883a 	mov	r4,r19
   2a3e4:	002c7f40 	call	2c7f4 <__clzsi2>
   2a3e8:	10fffe04 	addi	r3,r2,-8
   2a3ec:	010007c4 	movi	r4,31
   2a3f0:	20c07f16 	blt	r4,r3,2a5f0 <__adddf3+0x398>
   2a3f4:	01400a04 	movi	r5,40
   2a3f8:	2885c83a 	sub	r2,r5,r2
   2a3fc:	888ad83a 	srl	r5,r17,r2
   2a400:	98e6983a 	sll	r19,r19,r3
   2a404:	88e2983a 	sll	r17,r17,r3
   2a408:	2ce6b03a 	or	r19,r5,r19
   2a40c:	1c007c16 	blt	r3,r16,2a600 <__adddf3+0x3a8>
   2a410:	1c21c83a 	sub	r16,r3,r16
   2a414:	81400044 	addi	r5,r16,1
   2a418:	00c007c4 	movi	r3,31
   2a41c:	19409816 	blt	r3,r5,2a680 <__adddf3+0x428>
   2a420:	1c21c83a 	sub	r16,r3,r16
   2a424:	8c08983a 	sll	r4,r17,r16
   2a428:	8946d83a 	srl	r3,r17,r5
   2a42c:	9c20983a 	sll	r16,r19,r16
   2a430:	2008c03a 	cmpne	r4,r4,zero
   2a434:	994ad83a 	srl	r5,r19,r5
   2a438:	1c06b03a 	or	r3,r3,r16
   2a43c:	1922b03a 	or	r17,r3,r4
   2a440:	0021883a 	mov	r16,zero
   2a444:	003fa306 	br	2a2d4 <_gp+0xfffeff08>
   2a448:	2880202c 	andhi	r2,r5,128
   2a44c:	9007883a 	mov	r3,r18
   2a450:	103fac1e 	bne	r2,zero,2a304 <_gp+0xfffeff38>
   2a454:	2804977a 	slli	r2,r5,29
   2a458:	8822d0fa 	srli	r17,r17,3
   2a45c:	0101ffc4 	movi	r4,2047
   2a460:	280ad0fa 	srli	r5,r5,3
   2a464:	1444b03a 	or	r2,r2,r17
   2a468:	81002c26 	beq	r16,r4,2a51c <__adddf3+0x2c4>
   2a46c:	8120703a 	and	r16,r16,r4
   2a470:	01000434 	movhi	r4,16
   2a474:	213fffc4 	addi	r4,r4,-1
   2a478:	2908703a 	and	r4,r5,r4
   2a47c:	003fad06 	br	2a334 <_gp+0xfffeff68>
   2a480:	8089c83a 	sub	r4,r16,r2
   2a484:	01006a0e 	bge	zero,r4,2a630 <__adddf3+0x3d8>
   2a488:	10003326 	beq	r2,zero,2a558 <__adddf3+0x300>
   2a48c:	0081ffc4 	movi	r2,2047
   2a490:	80bf9026 	beq	r16,r2,2a2d4 <_gp+0xfffeff08>
   2a494:	42002034 	orhi	r8,r8,128
   2a498:	00800e04 	movi	r2,56
   2a49c:	1100b116 	blt	r2,r4,2a764 <__adddf3+0x50c>
   2a4a0:	008007c4 	movi	r2,31
   2a4a4:	1100e216 	blt	r2,r4,2a830 <__adddf3+0x5d8>
   2a4a8:	00800804 	movi	r2,32
   2a4ac:	1105c83a 	sub	r2,r2,r4
   2a4b0:	4092983a 	sll	r9,r8,r2
   2a4b4:	310ed83a 	srl	r7,r6,r4
   2a4b8:	3084983a 	sll	r2,r6,r2
   2a4bc:	4110d83a 	srl	r8,r8,r4
   2a4c0:	49ccb03a 	or	r6,r9,r7
   2a4c4:	1004c03a 	cmpne	r2,r2,zero
   2a4c8:	308cb03a 	or	r6,r6,r2
   2a4cc:	344d883a 	add	r6,r6,r17
   2a4d0:	3463803a 	cmpltu	r17,r6,r17
   2a4d4:	414b883a 	add	r5,r8,r5
   2a4d8:	2c4b883a 	add	r5,r5,r17
   2a4dc:	3023883a 	mov	r17,r6
   2a4e0:	2880202c 	andhi	r2,r5,128
   2a4e4:	10002726 	beq	r2,zero,2a584 <__adddf3+0x32c>
   2a4e8:	84000044 	addi	r16,r16,1
   2a4ec:	0081ffc4 	movi	r2,2047
   2a4f0:	8080ae26 	beq	r16,r2,2a7ac <__adddf3+0x554>
   2a4f4:	00bfe034 	movhi	r2,65408
   2a4f8:	10bfffc4 	addi	r2,r2,-1
   2a4fc:	288a703a 	and	r5,r5,r2
   2a500:	880cd07a 	srli	r6,r17,1
   2a504:	280897fa 	slli	r4,r5,31
   2a508:	88c0004c 	andi	r3,r17,1
   2a50c:	30e2b03a 	or	r17,r6,r3
   2a510:	280ad07a 	srli	r5,r5,1
   2a514:	8922b03a 	or	r17,r17,r4
   2a518:	003f6e06 	br	2a2d4 <_gp+0xfffeff08>
   2a51c:	1148b03a 	or	r4,r2,r5
   2a520:	20003c26 	beq	r4,zero,2a614 <__adddf3+0x3bc>
   2a524:	29000234 	orhi	r4,r5,8
   2a528:	01400434 	movhi	r5,16
   2a52c:	297fffc4 	addi	r5,r5,-1
   2a530:	2148703a 	and	r4,r4,r5
   2a534:	003f7f06 	br	2a334 <_gp+0xfffeff68>
   2a538:	18ffffc4 	addi	r3,r3,-1
   2a53c:	18004d1e 	bne	r3,zero,2a674 <__adddf3+0x41c>
   2a540:	898dc83a 	sub	r6,r17,r6
   2a544:	89a3803a 	cmpltu	r17,r17,r6
   2a548:	2a0bc83a 	sub	r5,r5,r8
   2a54c:	2c4bc83a 	sub	r5,r5,r17
   2a550:	3023883a 	mov	r17,r6
   2a554:	003f9c06 	br	2a3c8 <_gp+0xfffefffc>
   2a558:	4184b03a 	or	r2,r8,r6
   2a55c:	103f5d26 	beq	r2,zero,2a2d4 <_gp+0xfffeff08>
   2a560:	213fffc4 	addi	r4,r4,-1
   2a564:	203fd926 	beq	r4,zero,2a4cc <_gp+0xffff0100>
   2a568:	0081ffc4 	movi	r2,2047
   2a56c:	80bfca1e 	bne	r16,r2,2a498 <_gp+0xffff00cc>
   2a570:	003f5806 	br	2a2d4 <_gp+0xfffeff08>
   2a574:	10c8b03a 	or	r4,r2,r3
   2a578:	20008b26 	beq	r4,zero,2a7a8 <__adddf3+0x550>
   2a57c:	100b883a 	mov	r5,r2
   2a580:	1823883a 	mov	r17,r3
   2a584:	888001cc 	andi	r2,r17,7
   2a588:	103f541e 	bne	r2,zero,2a2dc <_gp+0xfffeff10>
   2a58c:	9007883a 	mov	r3,r18
   2a590:	003fb006 	br	2a454 <_gp+0xffff0088>
   2a594:	1800531e 	bne	r3,zero,2a6e4 <__adddf3+0x48c>
   2a598:	80800044 	addi	r2,r16,1
   2a59c:	1081ffcc 	andi	r2,r2,2047
   2a5a0:	00c00044 	movi	r3,1
   2a5a4:	1880990e 	bge	r3,r2,2a80c <__adddf3+0x5b4>
   2a5a8:	8985c83a 	sub	r2,r17,r6
   2a5ac:	8887803a 	cmpltu	r3,r17,r2
   2a5b0:	2a27c83a 	sub	r19,r5,r8
   2a5b4:	98e7c83a 	sub	r19,r19,r3
   2a5b8:	98c0202c 	andhi	r3,r19,128
   2a5bc:	18006226 	beq	r3,zero,2a748 <__adddf3+0x4f0>
   2a5c0:	3463c83a 	sub	r17,r6,r17
   2a5c4:	4151c83a 	sub	r8,r8,r5
   2a5c8:	344d803a 	cmpltu	r6,r6,r17
   2a5cc:	41a7c83a 	sub	r19,r8,r6
   2a5d0:	3825883a 	mov	r18,r7
   2a5d4:	983f821e 	bne	r19,zero,2a3e0 <_gp+0xffff0014>
   2a5d8:	8809883a 	mov	r4,r17
   2a5dc:	002c7f40 	call	2c7f4 <__clzsi2>
   2a5e0:	10800804 	addi	r2,r2,32
   2a5e4:	10fffe04 	addi	r3,r2,-8
   2a5e8:	010007c4 	movi	r4,31
   2a5ec:	20ff810e 	bge	r4,r3,2a3f4 <_gp+0xffff0028>
   2a5f0:	14fff604 	addi	r19,r2,-40
   2a5f4:	8ce6983a 	sll	r19,r17,r19
   2a5f8:	0023883a 	mov	r17,zero
   2a5fc:	1c3f840e 	bge	r3,r16,2a410 <_gp+0xffff0044>
   2a600:	017fe034 	movhi	r5,65408
   2a604:	297fffc4 	addi	r5,r5,-1
   2a608:	80e1c83a 	sub	r16,r16,r3
   2a60c:	994a703a 	and	r5,r19,r5
   2a610:	003f3006 	br	2a2d4 <_gp+0xfffeff08>
   2a614:	0009883a 	mov	r4,zero
   2a618:	0005883a 	mov	r2,zero
   2a61c:	003f4506 	br	2a334 <_gp+0xfffeff68>
   2a620:	418cb03a 	or	r6,r8,r6
   2a624:	300cc03a 	cmpne	r6,r6,zero
   2a628:	0007883a 	mov	r3,zero
   2a62c:	003f6106 	br	2a3b4 <_gp+0xfffeffe8>
   2a630:	2000921e 	bne	r4,zero,2a87c <__adddf3+0x624>
   2a634:	80800044 	addi	r2,r16,1
   2a638:	11c1ffcc 	andi	r7,r2,2047
   2a63c:	01000044 	movi	r4,1
   2a640:	21c0610e 	bge	r4,r7,2a7c8 <__adddf3+0x570>
   2a644:	0101ffc4 	movi	r4,2047
   2a648:	1100a326 	beq	r2,r4,2a8d8 <__adddf3+0x680>
   2a64c:	344d883a 	add	r6,r6,r17
   2a650:	3463803a 	cmpltu	r17,r6,r17
   2a654:	414b883a 	add	r5,r8,r5
   2a658:	2c4b883a 	add	r5,r5,r17
   2a65c:	282297fa 	slli	r17,r5,31
   2a660:	300cd07a 	srli	r6,r6,1
   2a664:	280ad07a 	srli	r5,r5,1
   2a668:	1021883a 	mov	r16,r2
   2a66c:	89a2b03a 	or	r17,r17,r6
   2a670:	003f1806 	br	2a2d4 <_gp+0xfffeff08>
   2a674:	0081ffc4 	movi	r2,2047
   2a678:	80bf411e 	bne	r16,r2,2a380 <_gp+0xfffeffb4>
   2a67c:	003f1506 	br	2a2d4 <_gp+0xfffeff08>
   2a680:	80bff844 	addi	r2,r16,-31
   2a684:	00c00804 	movi	r3,32
   2a688:	9884d83a 	srl	r2,r19,r2
   2a68c:	28c04a26 	beq	r5,r3,2a7b8 <__adddf3+0x560>
   2a690:	00c00fc4 	movi	r3,63
   2a694:	1c21c83a 	sub	r16,r3,r16
   2a698:	9c26983a 	sll	r19,r19,r16
   2a69c:	9c62b03a 	or	r17,r19,r17
   2a6a0:	8822c03a 	cmpne	r17,r17,zero
   2a6a4:	88a2b03a 	or	r17,r17,r2
   2a6a8:	000b883a 	mov	r5,zero
   2a6ac:	0021883a 	mov	r16,zero
   2a6b0:	003fb406 	br	2a584 <_gp+0xffff01b8>
   2a6b4:	18bff804 	addi	r2,r3,-32
   2a6b8:	01000804 	movi	r4,32
   2a6bc:	4084d83a 	srl	r2,r8,r2
   2a6c0:	19003f26 	beq	r3,r4,2a7c0 <__adddf3+0x568>
   2a6c4:	01001004 	movi	r4,64
   2a6c8:	20c7c83a 	sub	r3,r4,r3
   2a6cc:	40d0983a 	sll	r8,r8,r3
   2a6d0:	418cb03a 	or	r6,r8,r6
   2a6d4:	300cc03a 	cmpne	r6,r6,zero
   2a6d8:	308cb03a 	or	r6,r6,r2
   2a6dc:	0007883a 	mov	r3,zero
   2a6e0:	003f3406 	br	2a3b4 <_gp+0xfffeffe8>
   2a6e4:	80002326 	beq	r16,zero,2a774 <__adddf3+0x51c>
   2a6e8:	0101ffc4 	movi	r4,2047
   2a6ec:	11005e26 	beq	r2,r4,2a868 <__adddf3+0x610>
   2a6f0:	00c7c83a 	sub	r3,zero,r3
   2a6f4:	29402034 	orhi	r5,r5,128
   2a6f8:	01000e04 	movi	r4,56
   2a6fc:	20c07216 	blt	r4,r3,2a8c8 <__adddf3+0x670>
   2a700:	010007c4 	movi	r4,31
   2a704:	20c0ce16 	blt	r4,r3,2aa40 <__adddf3+0x7e8>
   2a708:	01000804 	movi	r4,32
   2a70c:	20c9c83a 	sub	r4,r4,r3
   2a710:	2914983a 	sll	r10,r5,r4
   2a714:	88d2d83a 	srl	r9,r17,r3
   2a718:	8908983a 	sll	r4,r17,r4
   2a71c:	28c6d83a 	srl	r3,r5,r3
   2a720:	5262b03a 	or	r17,r10,r9
   2a724:	2008c03a 	cmpne	r4,r4,zero
   2a728:	8922b03a 	or	r17,r17,r4
   2a72c:	3463c83a 	sub	r17,r6,r17
   2a730:	40c7c83a 	sub	r3,r8,r3
   2a734:	344d803a 	cmpltu	r6,r6,r17
   2a738:	198bc83a 	sub	r5,r3,r6
   2a73c:	1021883a 	mov	r16,r2
   2a740:	3825883a 	mov	r18,r7
   2a744:	003f2006 	br	2a3c8 <_gp+0xfffefffc>
   2a748:	9886b03a 	or	r3,r19,r2
   2a74c:	1800141e 	bne	r3,zero,2a7a0 <__adddf3+0x548>
   2a750:	0007883a 	mov	r3,zero
   2a754:	000b883a 	mov	r5,zero
   2a758:	0023883a 	mov	r17,zero
   2a75c:	0021883a 	mov	r16,zero
   2a760:	003f3c06 	br	2a454 <_gp+0xffff0088>
   2a764:	418cb03a 	or	r6,r8,r6
   2a768:	300cc03a 	cmpne	r6,r6,zero
   2a76c:	0011883a 	mov	r8,zero
   2a770:	003f5606 	br	2a4cc <_gp+0xffff0100>
   2a774:	2c48b03a 	or	r4,r5,r17
   2a778:	20003b26 	beq	r4,zero,2a868 <__adddf3+0x610>
   2a77c:	00c6303a 	nor	r3,zero,r3
   2a780:	1800371e 	bne	r3,zero,2a860 <__adddf3+0x608>
   2a784:	3463c83a 	sub	r17,r6,r17
   2a788:	414bc83a 	sub	r5,r8,r5
   2a78c:	344d803a 	cmpltu	r6,r6,r17
   2a790:	298bc83a 	sub	r5,r5,r6
   2a794:	1021883a 	mov	r16,r2
   2a798:	3825883a 	mov	r18,r7
   2a79c:	003f0a06 	br	2a3c8 <_gp+0xfffefffc>
   2a7a0:	1023883a 	mov	r17,r2
   2a7a4:	003f0d06 	br	2a3dc <_gp+0xffff0010>
   2a7a8:	0007883a 	mov	r3,zero
   2a7ac:	000b883a 	mov	r5,zero
   2a7b0:	0023883a 	mov	r17,zero
   2a7b4:	003f2706 	br	2a454 <_gp+0xffff0088>
   2a7b8:	0027883a 	mov	r19,zero
   2a7bc:	003fb706 	br	2a69c <_gp+0xffff02d0>
   2a7c0:	0011883a 	mov	r8,zero
   2a7c4:	003fc206 	br	2a6d0 <_gp+0xffff0304>
   2a7c8:	2c44b03a 	or	r2,r5,r17
   2a7cc:	8000871e 	bne	r16,zero,2a9ec <__adddf3+0x794>
   2a7d0:	1000b126 	beq	r2,zero,2aa98 <__adddf3+0x840>
   2a7d4:	4184b03a 	or	r2,r8,r6
   2a7d8:	103ebe26 	beq	r2,zero,2a2d4 <_gp+0xfffeff08>
   2a7dc:	3445883a 	add	r2,r6,r17
   2a7e0:	1463803a 	cmpltu	r17,r2,r17
   2a7e4:	414b883a 	add	r5,r8,r5
   2a7e8:	2c4b883a 	add	r5,r5,r17
   2a7ec:	28c0202c 	andhi	r3,r5,128
   2a7f0:	1023883a 	mov	r17,r2
   2a7f4:	183f6326 	beq	r3,zero,2a584 <_gp+0xffff01b8>
   2a7f8:	00bfe034 	movhi	r2,65408
   2a7fc:	10bfffc4 	addi	r2,r2,-1
   2a800:	2021883a 	mov	r16,r4
   2a804:	288a703a 	and	r5,r5,r2
   2a808:	003eb206 	br	2a2d4 <_gp+0xfffeff08>
   2a80c:	2c44b03a 	or	r2,r5,r17
   2a810:	8000251e 	bne	r16,zero,2a8a8 <__adddf3+0x650>
   2a814:	10004b1e 	bne	r2,zero,2a944 <__adddf3+0x6ec>
   2a818:	4184b03a 	or	r2,r8,r6
   2a81c:	103fe226 	beq	r2,zero,2a7a8 <_gp+0xffff03dc>
   2a820:	400b883a 	mov	r5,r8
   2a824:	3023883a 	mov	r17,r6
   2a828:	3825883a 	mov	r18,r7
   2a82c:	003ea906 	br	2a2d4 <_gp+0xfffeff08>
   2a830:	20bff804 	addi	r2,r4,-32
   2a834:	01c00804 	movi	r7,32
   2a838:	4084d83a 	srl	r2,r8,r2
   2a83c:	21c07e26 	beq	r4,r7,2aa38 <__adddf3+0x7e0>
   2a840:	01c01004 	movi	r7,64
   2a844:	3909c83a 	sub	r4,r7,r4
   2a848:	4110983a 	sll	r8,r8,r4
   2a84c:	418cb03a 	or	r6,r8,r6
   2a850:	300cc03a 	cmpne	r6,r6,zero
   2a854:	308cb03a 	or	r6,r6,r2
   2a858:	0011883a 	mov	r8,zero
   2a85c:	003f1b06 	br	2a4cc <_gp+0xffff0100>
   2a860:	0101ffc4 	movi	r4,2047
   2a864:	113fa41e 	bne	r2,r4,2a6f8 <_gp+0xffff032c>
   2a868:	400b883a 	mov	r5,r8
   2a86c:	3023883a 	mov	r17,r6
   2a870:	1021883a 	mov	r16,r2
   2a874:	3825883a 	mov	r18,r7
   2a878:	003e9606 	br	2a2d4 <_gp+0xfffeff08>
   2a87c:	80001a1e 	bne	r16,zero,2a8e8 <__adddf3+0x690>
   2a880:	2c4eb03a 	or	r7,r5,r17
   2a884:	38005526 	beq	r7,zero,2a9dc <__adddf3+0x784>
   2a888:	0108303a 	nor	r4,zero,r4
   2a88c:	2000511e 	bne	r4,zero,2a9d4 <__adddf3+0x77c>
   2a890:	89a3883a 	add	r17,r17,r6
   2a894:	414b883a 	add	r5,r8,r5
   2a898:	898d803a 	cmpltu	r6,r17,r6
   2a89c:	298b883a 	add	r5,r5,r6
   2a8a0:	1021883a 	mov	r16,r2
   2a8a4:	003f0e06 	br	2a4e0 <_gp+0xffff0114>
   2a8a8:	1000341e 	bne	r2,zero,2a97c <__adddf3+0x724>
   2a8ac:	4184b03a 	or	r2,r8,r6
   2a8b0:	10006f26 	beq	r2,zero,2aa70 <__adddf3+0x818>
   2a8b4:	400b883a 	mov	r5,r8
   2a8b8:	3023883a 	mov	r17,r6
   2a8bc:	3825883a 	mov	r18,r7
   2a8c0:	0401ffc4 	movi	r16,2047
   2a8c4:	003e8306 	br	2a2d4 <_gp+0xfffeff08>
   2a8c8:	2c62b03a 	or	r17,r5,r17
   2a8cc:	8822c03a 	cmpne	r17,r17,zero
   2a8d0:	0007883a 	mov	r3,zero
   2a8d4:	003f9506 	br	2a72c <_gp+0xffff0360>
   2a8d8:	1021883a 	mov	r16,r2
   2a8dc:	000b883a 	mov	r5,zero
   2a8e0:	0023883a 	mov	r17,zero
   2a8e4:	003edb06 	br	2a454 <_gp+0xffff0088>
   2a8e8:	01c1ffc4 	movi	r7,2047
   2a8ec:	11c03b26 	beq	r2,r7,2a9dc <__adddf3+0x784>
   2a8f0:	0109c83a 	sub	r4,zero,r4
   2a8f4:	29402034 	orhi	r5,r5,128
   2a8f8:	01c00e04 	movi	r7,56
   2a8fc:	39006216 	blt	r7,r4,2aa88 <__adddf3+0x830>
   2a900:	01c007c4 	movi	r7,31
   2a904:	39006b16 	blt	r7,r4,2aab4 <__adddf3+0x85c>
   2a908:	01c00804 	movi	r7,32
   2a90c:	390fc83a 	sub	r7,r7,r4
   2a910:	29d4983a 	sll	r10,r5,r7
   2a914:	8912d83a 	srl	r9,r17,r4
   2a918:	89ce983a 	sll	r7,r17,r7
   2a91c:	2908d83a 	srl	r4,r5,r4
   2a920:	5262b03a 	or	r17,r10,r9
   2a924:	380ac03a 	cmpne	r5,r7,zero
   2a928:	8962b03a 	or	r17,r17,r5
   2a92c:	89a3883a 	add	r17,r17,r6
   2a930:	2211883a 	add	r8,r4,r8
   2a934:	898d803a 	cmpltu	r6,r17,r6
   2a938:	418b883a 	add	r5,r8,r6
   2a93c:	1021883a 	mov	r16,r2
   2a940:	003ee706 	br	2a4e0 <_gp+0xffff0114>
   2a944:	4184b03a 	or	r2,r8,r6
   2a948:	103e6226 	beq	r2,zero,2a2d4 <_gp+0xfffeff08>
   2a94c:	8987c83a 	sub	r3,r17,r6
   2a950:	88c9803a 	cmpltu	r4,r17,r3
   2a954:	2a05c83a 	sub	r2,r5,r8
   2a958:	1105c83a 	sub	r2,r2,r4
   2a95c:	1100202c 	andhi	r4,r2,128
   2a960:	203f0426 	beq	r4,zero,2a574 <_gp+0xffff01a8>
   2a964:	3463c83a 	sub	r17,r6,r17
   2a968:	414bc83a 	sub	r5,r8,r5
   2a96c:	344d803a 	cmpltu	r6,r6,r17
   2a970:	298bc83a 	sub	r5,r5,r6
   2a974:	3825883a 	mov	r18,r7
   2a978:	003e5606 	br	2a2d4 <_gp+0xfffeff08>
   2a97c:	4184b03a 	or	r2,r8,r6
   2a980:	10002b26 	beq	r2,zero,2aa30 <__adddf3+0x7d8>
   2a984:	2804d0fa 	srli	r2,r5,3
   2a988:	8822d0fa 	srli	r17,r17,3
   2a98c:	280a977a 	slli	r5,r5,29
   2a990:	10c0022c 	andhi	r3,r2,8
   2a994:	2c62b03a 	or	r17,r5,r17
   2a998:	18000826 	beq	r3,zero,2a9bc <__adddf3+0x764>
   2a99c:	4008d0fa 	srli	r4,r8,3
   2a9a0:	20c0022c 	andhi	r3,r4,8
   2a9a4:	1800051e 	bne	r3,zero,2a9bc <__adddf3+0x764>
   2a9a8:	300cd0fa 	srli	r6,r6,3
   2a9ac:	4010977a 	slli	r8,r8,29
   2a9b0:	2005883a 	mov	r2,r4
   2a9b4:	3825883a 	mov	r18,r7
   2a9b8:	41a2b03a 	or	r17,r8,r6
   2a9bc:	880ad77a 	srli	r5,r17,29
   2a9c0:	100490fa 	slli	r2,r2,3
   2a9c4:	882290fa 	slli	r17,r17,3
   2a9c8:	0401ffc4 	movi	r16,2047
   2a9cc:	288ab03a 	or	r5,r5,r2
   2a9d0:	003e4006 	br	2a2d4 <_gp+0xfffeff08>
   2a9d4:	01c1ffc4 	movi	r7,2047
   2a9d8:	11ffc71e 	bne	r2,r7,2a8f8 <_gp+0xffff052c>
   2a9dc:	400b883a 	mov	r5,r8
   2a9e0:	3023883a 	mov	r17,r6
   2a9e4:	1021883a 	mov	r16,r2
   2a9e8:	003e3a06 	br	2a2d4 <_gp+0xfffeff08>
   2a9ec:	10002d26 	beq	r2,zero,2aaa4 <__adddf3+0x84c>
   2a9f0:	4184b03a 	or	r2,r8,r6
   2a9f4:	10000e26 	beq	r2,zero,2aa30 <__adddf3+0x7d8>
   2a9f8:	2804d0fa 	srli	r2,r5,3
   2a9fc:	8822d0fa 	srli	r17,r17,3
   2aa00:	280a977a 	slli	r5,r5,29
   2aa04:	10c0022c 	andhi	r3,r2,8
   2aa08:	2c62b03a 	or	r17,r5,r17
   2aa0c:	183feb26 	beq	r3,zero,2a9bc <_gp+0xffff05f0>
   2aa10:	4008d0fa 	srli	r4,r8,3
   2aa14:	20c0022c 	andhi	r3,r4,8
   2aa18:	183fe81e 	bne	r3,zero,2a9bc <_gp+0xffff05f0>
   2aa1c:	300cd0fa 	srli	r6,r6,3
   2aa20:	4010977a 	slli	r8,r8,29
   2aa24:	2005883a 	mov	r2,r4
   2aa28:	41a2b03a 	or	r17,r8,r6
   2aa2c:	003fe306 	br	2a9bc <_gp+0xffff05f0>
   2aa30:	0401ffc4 	movi	r16,2047
   2aa34:	003e2706 	br	2a2d4 <_gp+0xfffeff08>
   2aa38:	0011883a 	mov	r8,zero
   2aa3c:	003f8306 	br	2a84c <_gp+0xffff0480>
   2aa40:	193ff804 	addi	r4,r3,-32
   2aa44:	02400804 	movi	r9,32
   2aa48:	2908d83a 	srl	r4,r5,r4
   2aa4c:	1a402526 	beq	r3,r9,2aae4 <__adddf3+0x88c>
   2aa50:	02401004 	movi	r9,64
   2aa54:	48c7c83a 	sub	r3,r9,r3
   2aa58:	28ca983a 	sll	r5,r5,r3
   2aa5c:	2c62b03a 	or	r17,r5,r17
   2aa60:	8822c03a 	cmpne	r17,r17,zero
   2aa64:	8922b03a 	or	r17,r17,r4
   2aa68:	0007883a 	mov	r3,zero
   2aa6c:	003f2f06 	br	2a72c <_gp+0xffff0360>
   2aa70:	01402034 	movhi	r5,128
   2aa74:	0007883a 	mov	r3,zero
   2aa78:	297fffc4 	addi	r5,r5,-1
   2aa7c:	047ffe04 	movi	r17,-8
   2aa80:	0401ffc4 	movi	r16,2047
   2aa84:	003e7306 	br	2a454 <_gp+0xffff0088>
   2aa88:	2c62b03a 	or	r17,r5,r17
   2aa8c:	8822c03a 	cmpne	r17,r17,zero
   2aa90:	0009883a 	mov	r4,zero
   2aa94:	003fa506 	br	2a92c <_gp+0xffff0560>
   2aa98:	400b883a 	mov	r5,r8
   2aa9c:	3023883a 	mov	r17,r6
   2aaa0:	003e0c06 	br	2a2d4 <_gp+0xfffeff08>
   2aaa4:	400b883a 	mov	r5,r8
   2aaa8:	3023883a 	mov	r17,r6
   2aaac:	0401ffc4 	movi	r16,2047
   2aab0:	003e0806 	br	2a2d4 <_gp+0xfffeff08>
   2aab4:	21fff804 	addi	r7,r4,-32
   2aab8:	02400804 	movi	r9,32
   2aabc:	29ced83a 	srl	r7,r5,r7
   2aac0:	22400a26 	beq	r4,r9,2aaec <__adddf3+0x894>
   2aac4:	02401004 	movi	r9,64
   2aac8:	4909c83a 	sub	r4,r9,r4
   2aacc:	290a983a 	sll	r5,r5,r4
   2aad0:	2c62b03a 	or	r17,r5,r17
   2aad4:	8822c03a 	cmpne	r17,r17,zero
   2aad8:	89e2b03a 	or	r17,r17,r7
   2aadc:	0009883a 	mov	r4,zero
   2aae0:	003f9206 	br	2a92c <_gp+0xffff0560>
   2aae4:	000b883a 	mov	r5,zero
   2aae8:	003fdc06 	br	2aa5c <_gp+0xffff0690>
   2aaec:	000b883a 	mov	r5,zero
   2aaf0:	003ff706 	br	2aad0 <_gp+0xffff0704>

0002aaf4 <__divdf3>:
   2aaf4:	defff204 	addi	sp,sp,-56
   2aaf8:	dd000815 	stw	r20,32(sp)
   2aafc:	2828d53a 	srli	r20,r5,20
   2ab00:	dd800a15 	stw	r22,40(sp)
   2ab04:	282cd7fa 	srli	r22,r5,31
   2ab08:	dc000415 	stw	r16,16(sp)
   2ab0c:	04000434 	movhi	r16,16
   2ab10:	df000c15 	stw	fp,48(sp)
   2ab14:	dcc00715 	stw	r19,28(sp)
   2ab18:	dc800615 	stw	r18,24(sp)
   2ab1c:	dc400515 	stw	r17,20(sp)
   2ab20:	843fffc4 	addi	r16,r16,-1
   2ab24:	dfc00d15 	stw	ra,52(sp)
   2ab28:	ddc00b15 	stw	r23,44(sp)
   2ab2c:	dd400915 	stw	r21,36(sp)
   2ab30:	a501ffcc 	andi	r20,r20,2047
   2ab34:	2025883a 	mov	r18,r4
   2ab38:	2027883a 	mov	r19,r4
   2ab3c:	2c22703a 	and	r17,r5,r16
   2ab40:	b7003fcc 	andi	fp,r22,255
   2ab44:	a0005e26 	beq	r20,zero,2acc0 <__divdf3+0x1cc>
   2ab48:	0081ffc4 	movi	r2,2047
   2ab4c:	a0803526 	beq	r20,r2,2ac24 <__divdf3+0x130>
   2ab50:	8c000434 	orhi	r16,r17,16
   2ab54:	2004d77a 	srli	r2,r4,29
   2ab58:	802090fa 	slli	r16,r16,3
   2ab5c:	202690fa 	slli	r19,r4,3
   2ab60:	a53f0044 	addi	r20,r20,-1023
   2ab64:	80a2b03a 	or	r17,r16,r2
   2ab68:	0025883a 	mov	r18,zero
   2ab6c:	0011883a 	mov	r8,zero
   2ab70:	380ad53a 	srli	r5,r7,20
   2ab74:	382ed7fa 	srli	r23,r7,31
   2ab78:	04000434 	movhi	r16,16
   2ab7c:	843fffc4 	addi	r16,r16,-1
   2ab80:	2941ffcc 	andi	r5,r5,2047
   2ab84:	302b883a 	mov	r21,r6
   2ab88:	3c20703a 	and	r16,r7,r16
   2ab8c:	ba403fcc 	andi	r9,r23,255
   2ab90:	28006726 	beq	r5,zero,2ad30 <__divdf3+0x23c>
   2ab94:	0081ffc4 	movi	r2,2047
   2ab98:	28805f26 	beq	r5,r2,2ad18 <__divdf3+0x224>
   2ab9c:	84000434 	orhi	r16,r16,16
   2aba0:	3004d77a 	srli	r2,r6,29
   2aba4:	802090fa 	slli	r16,r16,3
   2aba8:	302a90fa 	slli	r21,r6,3
   2abac:	297f0044 	addi	r5,r5,-1023
   2abb0:	80a0b03a 	or	r16,r16,r2
   2abb4:	000f883a 	mov	r7,zero
   2abb8:	3c86b03a 	or	r3,r7,r18
   2abbc:	180690ba 	slli	r3,r3,2
   2abc0:	008000f4 	movhi	r2,3
   2abc4:	10aaf904 	addi	r2,r2,-21532
   2abc8:	1887883a 	add	r3,r3,r2
   2abcc:	18c00017 	ldw	r3,0(r3)
   2abd0:	b5c8f03a 	xor	r4,r22,r23
   2abd4:	200d883a 	mov	r6,r4
   2abd8:	24803fcc 	andi	r18,r4,255
   2abdc:	a169c83a 	sub	r20,r20,r5
   2abe0:	1800683a 	jmp	r3
   2abe4:	0002ae2c 	andhi	zero,zero,2744
   2abe8:	0002ac5c 	xori	zero,zero,2737
   2abec:	0002adf0 	cmpltui	zero,zero,2743
   2abf0:	0002ac40 	call	2ac4 <__reset-0x1d53c>
   2abf4:	0002adf0 	cmpltui	zero,zero,2743
   2abf8:	0002adc4 	movi	zero,2743
   2abfc:	0002adf0 	cmpltui	zero,zero,2743
   2ac00:	0002ac40 	call	2ac4 <__reset-0x1d53c>
   2ac04:	0002ac5c 	xori	zero,zero,2737
   2ac08:	0002ac5c 	xori	zero,zero,2737
   2ac0c:	0002adc4 	movi	zero,2743
   2ac10:	0002ac40 	call	2ac4 <__reset-0x1d53c>
   2ac14:	0002ac50 	cmplti	zero,zero,2737
   2ac18:	0002ac50 	cmplti	zero,zero,2737
   2ac1c:	0002ac50 	cmplti	zero,zero,2737
   2ac20:	0002ae00 	call	2ae0 <__reset-0x1d520>
   2ac24:	8904b03a 	or	r2,r17,r4
   2ac28:	1000631e 	bne	r2,zero,2adb8 <__divdf3+0x2c4>
   2ac2c:	04800204 	movi	r18,8
   2ac30:	0023883a 	mov	r17,zero
   2ac34:	0027883a 	mov	r19,zero
   2ac38:	02000084 	movi	r8,2
   2ac3c:	003fcc06 	br	2ab70 <_gp+0xffff07a4>
   2ac40:	8023883a 	mov	r17,r16
   2ac44:	a827883a 	mov	r19,r21
   2ac48:	4839883a 	mov	fp,r9
   2ac4c:	3811883a 	mov	r8,r7
   2ac50:	00800084 	movi	r2,2
   2ac54:	40812a1e 	bne	r8,r2,2b100 <__divdf3+0x60c>
   2ac58:	e025883a 	mov	r18,fp
   2ac5c:	9180004c 	andi	r6,r18,1
   2ac60:	0101ffc4 	movi	r4,2047
   2ac64:	000b883a 	mov	r5,zero
   2ac68:	0027883a 	mov	r19,zero
   2ac6c:	2008953a 	slli	r4,r4,20
   2ac70:	30c03fcc 	andi	r3,r6,255
   2ac74:	04000434 	movhi	r16,16
   2ac78:	180697fa 	slli	r3,r3,31
   2ac7c:	843fffc4 	addi	r16,r16,-1
   2ac80:	2c20703a 	and	r16,r5,r16
   2ac84:	8120b03a 	or	r16,r16,r4
   2ac88:	80c6b03a 	or	r3,r16,r3
   2ac8c:	9805883a 	mov	r2,r19
   2ac90:	dfc00d17 	ldw	ra,52(sp)
   2ac94:	df000c17 	ldw	fp,48(sp)
   2ac98:	ddc00b17 	ldw	r23,44(sp)
   2ac9c:	dd800a17 	ldw	r22,40(sp)
   2aca0:	dd400917 	ldw	r21,36(sp)
   2aca4:	dd000817 	ldw	r20,32(sp)
   2aca8:	dcc00717 	ldw	r19,28(sp)
   2acac:	dc800617 	ldw	r18,24(sp)
   2acb0:	dc400517 	ldw	r17,20(sp)
   2acb4:	dc000417 	ldw	r16,16(sp)
   2acb8:	dec00e04 	addi	sp,sp,56
   2acbc:	f800283a 	ret
   2acc0:	8904b03a 	or	r2,r17,r4
   2acc4:	10003726 	beq	r2,zero,2ada4 <__divdf3+0x2b0>
   2acc8:	88011c26 	beq	r17,zero,2b13c <__divdf3+0x648>
   2accc:	8809883a 	mov	r4,r17
   2acd0:	d9800315 	stw	r6,12(sp)
   2acd4:	d9c00115 	stw	r7,4(sp)
   2acd8:	002c7f40 	call	2c7f4 <__clzsi2>
   2acdc:	d9800317 	ldw	r6,12(sp)
   2ace0:	d9c00117 	ldw	r7,4(sp)
   2ace4:	1007883a 	mov	r3,r2
   2ace8:	01000a04 	movi	r4,40
   2acec:	1cfffe04 	addi	r19,r3,-8
   2acf0:	20c9c83a 	sub	r4,r4,r3
   2acf4:	8cca983a 	sll	r5,r17,r19
   2acf8:	9108d83a 	srl	r4,r18,r4
   2acfc:	94e6983a 	sll	r19,r18,r19
   2ad00:	2162b03a 	or	r17,r4,r5
   2ad04:	053f0344 	movi	r20,-1011
   2ad08:	a0e9c83a 	sub	r20,r20,r3
   2ad0c:	0025883a 	mov	r18,zero
   2ad10:	0011883a 	mov	r8,zero
   2ad14:	003f9606 	br	2ab70 <_gp+0xffff07a4>
   2ad18:	8184b03a 	or	r2,r16,r6
   2ad1c:	10001f1e 	bne	r2,zero,2ad9c <__divdf3+0x2a8>
   2ad20:	0021883a 	mov	r16,zero
   2ad24:	002b883a 	mov	r21,zero
   2ad28:	01c00084 	movi	r7,2
   2ad2c:	003fa206 	br	2abb8 <_gp+0xffff07ec>
   2ad30:	8184b03a 	or	r2,r16,r6
   2ad34:	10001526 	beq	r2,zero,2ad8c <__divdf3+0x298>
   2ad38:	80010c26 	beq	r16,zero,2b16c <__divdf3+0x678>
   2ad3c:	8009883a 	mov	r4,r16
   2ad40:	d9800315 	stw	r6,12(sp)
   2ad44:	da000215 	stw	r8,8(sp)
   2ad48:	da400015 	stw	r9,0(sp)
   2ad4c:	002c7f40 	call	2c7f4 <__clzsi2>
   2ad50:	d9800317 	ldw	r6,12(sp)
   2ad54:	da000217 	ldw	r8,8(sp)
   2ad58:	da400017 	ldw	r9,0(sp)
   2ad5c:	1007883a 	mov	r3,r2
   2ad60:	01000a04 	movi	r4,40
   2ad64:	1d7ffe04 	addi	r21,r3,-8
   2ad68:	20c9c83a 	sub	r4,r4,r3
   2ad6c:	8560983a 	sll	r16,r16,r21
   2ad70:	3108d83a 	srl	r4,r6,r4
   2ad74:	356a983a 	sll	r21,r6,r21
   2ad78:	2420b03a 	or	r16,r4,r16
   2ad7c:	017f0344 	movi	r5,-1011
   2ad80:	28cbc83a 	sub	r5,r5,r3
   2ad84:	000f883a 	mov	r7,zero
   2ad88:	003f8b06 	br	2abb8 <_gp+0xffff07ec>
   2ad8c:	0021883a 	mov	r16,zero
   2ad90:	002b883a 	mov	r21,zero
   2ad94:	01c00044 	movi	r7,1
   2ad98:	003f8706 	br	2abb8 <_gp+0xffff07ec>
   2ad9c:	01c000c4 	movi	r7,3
   2ada0:	003f8506 	br	2abb8 <_gp+0xffff07ec>
   2ada4:	04800104 	movi	r18,4
   2ada8:	0023883a 	mov	r17,zero
   2adac:	0027883a 	mov	r19,zero
   2adb0:	02000044 	movi	r8,1
   2adb4:	003f6e06 	br	2ab70 <_gp+0xffff07a4>
   2adb8:	04800304 	movi	r18,12
   2adbc:	020000c4 	movi	r8,3
   2adc0:	003f6b06 	br	2ab70 <_gp+0xffff07a4>
   2adc4:	01400434 	movhi	r5,16
   2adc8:	000d883a 	mov	r6,zero
   2adcc:	297fffc4 	addi	r5,r5,-1
   2add0:	04ffffc4 	movi	r19,-1
   2add4:	0101ffc4 	movi	r4,2047
   2add8:	003fa406 	br	2ac6c <_gp+0xffff08a0>
   2addc:	043f0084 	movi	r16,-1022
   2ade0:	8521c83a 	sub	r16,r16,r20
   2ade4:	00800e04 	movi	r2,56
   2ade8:	1401200e 	bge	r2,r16,2b26c <__divdf3+0x778>
   2adec:	9180004c 	andi	r6,r18,1
   2adf0:	0009883a 	mov	r4,zero
   2adf4:	000b883a 	mov	r5,zero
   2adf8:	0027883a 	mov	r19,zero
   2adfc:	003f9b06 	br	2ac6c <_gp+0xffff08a0>
   2ae00:	8880022c 	andhi	r2,r17,8
   2ae04:	1000c726 	beq	r2,zero,2b124 <__divdf3+0x630>
   2ae08:	8080022c 	andhi	r2,r16,8
   2ae0c:	1000c51e 	bne	r2,zero,2b124 <__divdf3+0x630>
   2ae10:	00800434 	movhi	r2,16
   2ae14:	81400234 	orhi	r5,r16,8
   2ae18:	10bfffc4 	addi	r2,r2,-1
   2ae1c:	b80d883a 	mov	r6,r23
   2ae20:	288a703a 	and	r5,r5,r2
   2ae24:	a827883a 	mov	r19,r21
   2ae28:	003fea06 	br	2add4 <_gp+0xffff0a08>
   2ae2c:	8440ea36 	bltu	r16,r17,2b1d8 <__divdf3+0x6e4>
   2ae30:	8c00e826 	beq	r17,r16,2b1d4 <__divdf3+0x6e0>
   2ae34:	a53fffc4 	addi	r20,r20,-1
   2ae38:	882d883a 	mov	r22,r17
   2ae3c:	000d883a 	mov	r6,zero
   2ae40:	a804d63a 	srli	r2,r21,24
   2ae44:	8020923a 	slli	r16,r16,8
   2ae48:	b009883a 	mov	r4,r22
   2ae4c:	d9800315 	stw	r6,12(sp)
   2ae50:	1420b03a 	or	r16,r2,r16
   2ae54:	802ed43a 	srli	r23,r16,16
   2ae58:	873fffcc 	andi	fp,r16,65535
   2ae5c:	a82a923a 	slli	r21,r21,8
   2ae60:	b80b883a 	mov	r5,r23
   2ae64:	002a2480 	call	2a248 <__udivsi3>
   2ae68:	b009883a 	mov	r4,r22
   2ae6c:	b80b883a 	mov	r5,r23
   2ae70:	1023883a 	mov	r17,r2
   2ae74:	002a2500 	call	2a250 <__umodsi3>
   2ae78:	1004943a 	slli	r2,r2,16
   2ae7c:	9808d43a 	srli	r4,r19,16
   2ae80:	8f2d383a 	mul	r22,r17,fp
   2ae84:	d9800317 	ldw	r6,12(sp)
   2ae88:	1106b03a 	or	r3,r2,r4
   2ae8c:	1d80062e 	bgeu	r3,r22,2aea8 <__divdf3+0x3b4>
   2ae90:	1c07883a 	add	r3,r3,r16
   2ae94:	88bfffc4 	addi	r2,r17,-1
   2ae98:	1c00dc36 	bltu	r3,r16,2b20c <__divdf3+0x718>
   2ae9c:	1d80db2e 	bgeu	r3,r22,2b20c <__divdf3+0x718>
   2aea0:	8c7fff84 	addi	r17,r17,-2
   2aea4:	1c07883a 	add	r3,r3,r16
   2aea8:	1dadc83a 	sub	r22,r3,r22
   2aeac:	b009883a 	mov	r4,r22
   2aeb0:	b80b883a 	mov	r5,r23
   2aeb4:	d9800315 	stw	r6,12(sp)
   2aeb8:	002a2480 	call	2a248 <__udivsi3>
   2aebc:	b009883a 	mov	r4,r22
   2aec0:	b80b883a 	mov	r5,r23
   2aec4:	d8800015 	stw	r2,0(sp)
   2aec8:	002a2500 	call	2a250 <__umodsi3>
   2aecc:	da400017 	ldw	r9,0(sp)
   2aed0:	1004943a 	slli	r2,r2,16
   2aed4:	9cffffcc 	andi	r19,r19,65535
   2aed8:	4f07383a 	mul	r3,r9,fp
   2aedc:	14c8b03a 	or	r4,r2,r19
   2aee0:	d9800317 	ldw	r6,12(sp)
   2aee4:	20c0062e 	bgeu	r4,r3,2af00 <__divdf3+0x40c>
   2aee8:	2409883a 	add	r4,r4,r16
   2aeec:	48bfffc4 	addi	r2,r9,-1
   2aef0:	2400c436 	bltu	r4,r16,2b204 <__divdf3+0x710>
   2aef4:	20c0c32e 	bgeu	r4,r3,2b204 <__divdf3+0x710>
   2aef8:	4a7fff84 	addi	r9,r9,-2
   2aefc:	2409883a 	add	r4,r4,r16
   2af00:	8822943a 	slli	r17,r17,16
   2af04:	a80ed43a 	srli	r7,r21,16
   2af08:	aa3fffcc 	andi	r8,r21,65535
   2af0c:	4c62b03a 	or	r17,r9,r17
   2af10:	8816d43a 	srli	r11,r17,16
   2af14:	897fffcc 	andi	r5,r17,65535
   2af18:	2a15383a 	mul	r10,r5,r8
   2af1c:	5a19383a 	mul	r12,r11,r8
   2af20:	29cb383a 	mul	r5,r5,r7
   2af24:	5012d43a 	srli	r9,r10,16
   2af28:	20c5c83a 	sub	r2,r4,r3
   2af2c:	614b883a 	add	r5,r12,r5
   2af30:	2a4b883a 	add	r5,r5,r9
   2af34:	59c7383a 	mul	r3,r11,r7
   2af38:	2b00022e 	bgeu	r5,r12,2af44 <__divdf3+0x450>
   2af3c:	01000074 	movhi	r4,1
   2af40:	1907883a 	add	r3,r3,r4
   2af44:	2808d43a 	srli	r4,r5,16
   2af48:	280a943a 	slli	r5,r5,16
   2af4c:	54ffffcc 	andi	r19,r10,65535
   2af50:	1907883a 	add	r3,r3,r4
   2af54:	2ccb883a 	add	r5,r5,r19
   2af58:	10c09336 	bltu	r2,r3,2b1a8 <__divdf3+0x6b4>
   2af5c:	10c0ad26 	beq	r2,r3,2b214 <__divdf3+0x720>
   2af60:	10c7c83a 	sub	r3,r2,r3
   2af64:	3167c83a 	sub	r19,r6,r5
   2af68:	34ed803a 	cmpltu	r22,r6,r19
   2af6c:	1dadc83a 	sub	r22,r3,r22
   2af70:	b400b226 	beq	r22,r16,2b23c <__divdf3+0x748>
   2af74:	b009883a 	mov	r4,r22
   2af78:	b80b883a 	mov	r5,r23
   2af7c:	d9c00115 	stw	r7,4(sp)
   2af80:	da000215 	stw	r8,8(sp)
   2af84:	002a2480 	call	2a248 <__udivsi3>
   2af88:	b009883a 	mov	r4,r22
   2af8c:	b80b883a 	mov	r5,r23
   2af90:	d8800315 	stw	r2,12(sp)
   2af94:	002a2500 	call	2a250 <__umodsi3>
   2af98:	d9800317 	ldw	r6,12(sp)
   2af9c:	1004943a 	slli	r2,r2,16
   2afa0:	9808d43a 	srli	r4,r19,16
   2afa4:	372d383a 	mul	r22,r6,fp
   2afa8:	d9c00117 	ldw	r7,4(sp)
   2afac:	1106b03a 	or	r3,r2,r4
   2afb0:	da000217 	ldw	r8,8(sp)
   2afb4:	1d80062e 	bgeu	r3,r22,2afd0 <__divdf3+0x4dc>
   2afb8:	1c07883a 	add	r3,r3,r16
   2afbc:	30bfffc4 	addi	r2,r6,-1
   2afc0:	1c00a036 	bltu	r3,r16,2b244 <__divdf3+0x750>
   2afc4:	1d809f2e 	bgeu	r3,r22,2b244 <__divdf3+0x750>
   2afc8:	31bfff84 	addi	r6,r6,-2
   2afcc:	1c07883a 	add	r3,r3,r16
   2afd0:	1dadc83a 	sub	r22,r3,r22
   2afd4:	b009883a 	mov	r4,r22
   2afd8:	b80b883a 	mov	r5,r23
   2afdc:	d9800315 	stw	r6,12(sp)
   2afe0:	d9c00115 	stw	r7,4(sp)
   2afe4:	da000215 	stw	r8,8(sp)
   2afe8:	002a2480 	call	2a248 <__udivsi3>
   2afec:	b009883a 	mov	r4,r22
   2aff0:	b80b883a 	mov	r5,r23
   2aff4:	d8800015 	stw	r2,0(sp)
   2aff8:	002a2500 	call	2a250 <__umodsi3>
   2affc:	da400017 	ldw	r9,0(sp)
   2b000:	1004943a 	slli	r2,r2,16
   2b004:	993fffcc 	andi	r4,r19,65535
   2b008:	4f39383a 	mul	fp,r9,fp
   2b00c:	1106b03a 	or	r3,r2,r4
   2b010:	d9800317 	ldw	r6,12(sp)
   2b014:	d9c00117 	ldw	r7,4(sp)
   2b018:	da000217 	ldw	r8,8(sp)
   2b01c:	1f00062e 	bgeu	r3,fp,2b038 <__divdf3+0x544>
   2b020:	1c07883a 	add	r3,r3,r16
   2b024:	48bfffc4 	addi	r2,r9,-1
   2b028:	1c008836 	bltu	r3,r16,2b24c <__divdf3+0x758>
   2b02c:	1f00872e 	bgeu	r3,fp,2b24c <__divdf3+0x758>
   2b030:	4a7fff84 	addi	r9,r9,-2
   2b034:	1c07883a 	add	r3,r3,r16
   2b038:	3008943a 	slli	r4,r6,16
   2b03c:	1f07c83a 	sub	r3,r3,fp
   2b040:	4926b03a 	or	r19,r9,r4
   2b044:	993fffcc 	andi	r4,r19,65535
   2b048:	980cd43a 	srli	r6,r19,16
   2b04c:	220b383a 	mul	r5,r4,r8
   2b050:	21c5383a 	mul	r2,r4,r7
   2b054:	3211383a 	mul	r8,r6,r8
   2b058:	2808d43a 	srli	r4,r5,16
   2b05c:	31cf383a 	mul	r7,r6,r7
   2b060:	4085883a 	add	r2,r8,r2
   2b064:	1105883a 	add	r2,r2,r4
   2b068:	1200022e 	bgeu	r2,r8,2b074 <__divdf3+0x580>
   2b06c:	01000074 	movhi	r4,1
   2b070:	390f883a 	add	r7,r7,r4
   2b074:	1008d43a 	srli	r4,r2,16
   2b078:	1004943a 	slli	r2,r2,16
   2b07c:	297fffcc 	andi	r5,r5,65535
   2b080:	390f883a 	add	r7,r7,r4
   2b084:	1145883a 	add	r2,r2,r5
   2b088:	19c06536 	bltu	r3,r7,2b220 <__divdf3+0x72c>
   2b08c:	19c09f26 	beq	r3,r7,2b30c <__divdf3+0x818>
   2b090:	9cc00054 	ori	r19,r19,1
   2b094:	a100ffc4 	addi	r4,r20,1023
   2b098:	013f500e 	bge	zero,r4,2addc <_gp+0xffff0a10>
   2b09c:	988001cc 	andi	r2,r19,7
   2b0a0:	10000726 	beq	r2,zero,2b0c0 <__divdf3+0x5cc>
   2b0a4:	98c003cc 	andi	r3,r19,15
   2b0a8:	00800104 	movi	r2,4
   2b0ac:	18800426 	beq	r3,r2,2b0c0 <__divdf3+0x5cc>
   2b0b0:	9885883a 	add	r2,r19,r2
   2b0b4:	14e1803a 	cmpltu	r16,r2,r19
   2b0b8:	8c23883a 	add	r17,r17,r16
   2b0bc:	1027883a 	mov	r19,r2
   2b0c0:	8880402c 	andhi	r2,r17,256
   2b0c4:	10000426 	beq	r2,zero,2b0d8 <__divdf3+0x5e4>
   2b0c8:	00bfc034 	movhi	r2,65280
   2b0cc:	10bfffc4 	addi	r2,r2,-1
   2b0d0:	a1010004 	addi	r4,r20,1024
   2b0d4:	88a2703a 	and	r17,r17,r2
   2b0d8:	0081ff84 	movi	r2,2046
   2b0dc:	113edf16 	blt	r2,r4,2ac5c <_gp+0xffff0890>
   2b0e0:	9826d0fa 	srli	r19,r19,3
   2b0e4:	8804977a 	slli	r2,r17,29
   2b0e8:	8820927a 	slli	r16,r17,9
   2b0ec:	2101ffcc 	andi	r4,r4,2047
   2b0f0:	14e6b03a 	or	r19,r2,r19
   2b0f4:	800ad33a 	srli	r5,r16,12
   2b0f8:	9180004c 	andi	r6,r18,1
   2b0fc:	003edb06 	br	2ac6c <_gp+0xffff08a0>
   2b100:	008000c4 	movi	r2,3
   2b104:	4080a826 	beq	r8,r2,2b3a8 <__divdf3+0x8b4>
   2b108:	00800044 	movi	r2,1
   2b10c:	4080551e 	bne	r8,r2,2b264 <__divdf3+0x770>
   2b110:	e00d883a 	mov	r6,fp
   2b114:	0009883a 	mov	r4,zero
   2b118:	000b883a 	mov	r5,zero
   2b11c:	0027883a 	mov	r19,zero
   2b120:	003ed206 	br	2ac6c <_gp+0xffff08a0>
   2b124:	00800434 	movhi	r2,16
   2b128:	89400234 	orhi	r5,r17,8
   2b12c:	10bfffc4 	addi	r2,r2,-1
   2b130:	b00d883a 	mov	r6,r22
   2b134:	288a703a 	and	r5,r5,r2
   2b138:	003f2606 	br	2add4 <_gp+0xffff0a08>
   2b13c:	d9800315 	stw	r6,12(sp)
   2b140:	d9c00115 	stw	r7,4(sp)
   2b144:	002c7f40 	call	2c7f4 <__clzsi2>
   2b148:	10c00804 	addi	r3,r2,32
   2b14c:	010009c4 	movi	r4,39
   2b150:	d9800317 	ldw	r6,12(sp)
   2b154:	d9c00117 	ldw	r7,4(sp)
   2b158:	20fee30e 	bge	r4,r3,2ace8 <_gp+0xffff091c>
   2b15c:	117ffe04 	addi	r5,r2,-8
   2b160:	9162983a 	sll	r17,r18,r5
   2b164:	0027883a 	mov	r19,zero
   2b168:	003ee606 	br	2ad04 <_gp+0xffff0938>
   2b16c:	3009883a 	mov	r4,r6
   2b170:	d9800315 	stw	r6,12(sp)
   2b174:	da000215 	stw	r8,8(sp)
   2b178:	da400015 	stw	r9,0(sp)
   2b17c:	002c7f40 	call	2c7f4 <__clzsi2>
   2b180:	10c00804 	addi	r3,r2,32
   2b184:	010009c4 	movi	r4,39
   2b188:	d9800317 	ldw	r6,12(sp)
   2b18c:	da000217 	ldw	r8,8(sp)
   2b190:	da400017 	ldw	r9,0(sp)
   2b194:	20fef20e 	bge	r4,r3,2ad60 <_gp+0xffff0994>
   2b198:	10bffe04 	addi	r2,r2,-8
   2b19c:	a8a0983a 	sll	r16,r21,r2
   2b1a0:	002b883a 	mov	r21,zero
   2b1a4:	003ef506 	br	2ad7c <_gp+0xffff09b0>
   2b1a8:	354d883a 	add	r6,r6,r21
   2b1ac:	3549803a 	cmpltu	r4,r6,r21
   2b1b0:	2409883a 	add	r4,r4,r16
   2b1b4:	2089883a 	add	r4,r4,r2
   2b1b8:	88bfffc4 	addi	r2,r17,-1
   2b1bc:	81000c2e 	bgeu	r16,r4,2b1f0 <__divdf3+0x6fc>
   2b1c0:	20c04436 	bltu	r4,r3,2b2d4 <__divdf3+0x7e0>
   2b1c4:	19006f26 	beq	r3,r4,2b384 <__divdf3+0x890>
   2b1c8:	20c7c83a 	sub	r3,r4,r3
   2b1cc:	1023883a 	mov	r17,r2
   2b1d0:	003f6406 	br	2af64 <_gp+0xffff0b98>
   2b1d4:	9d7f1736 	bltu	r19,r21,2ae34 <_gp+0xffff0a68>
   2b1d8:	9806d07a 	srli	r3,r19,1
   2b1dc:	880497fa 	slli	r2,r17,31
   2b1e0:	980c97fa 	slli	r6,r19,31
   2b1e4:	882cd07a 	srli	r22,r17,1
   2b1e8:	18a6b03a 	or	r19,r3,r2
   2b1ec:	003f1406 	br	2ae40 <_gp+0xffff0a74>
   2b1f0:	243ff51e 	bne	r4,r16,2b1c8 <_gp+0xffff0dfc>
   2b1f4:	357ff22e 	bgeu	r6,r21,2b1c0 <_gp+0xffff0df4>
   2b1f8:	80c7c83a 	sub	r3,r16,r3
   2b1fc:	1023883a 	mov	r17,r2
   2b200:	003f5806 	br	2af64 <_gp+0xffff0b98>
   2b204:	1013883a 	mov	r9,r2
   2b208:	003f3d06 	br	2af00 <_gp+0xffff0b34>
   2b20c:	1023883a 	mov	r17,r2
   2b210:	003f2506 	br	2aea8 <_gp+0xffff0adc>
   2b214:	317fe436 	bltu	r6,r5,2b1a8 <_gp+0xffff0ddc>
   2b218:	0007883a 	mov	r3,zero
   2b21c:	003f5106 	br	2af64 <_gp+0xffff0b98>
   2b220:	1c07883a 	add	r3,r3,r16
   2b224:	993fffc4 	addi	r4,r19,-1
   2b228:	1c000a2e 	bgeu	r3,r16,2b254 <__divdf3+0x760>
   2b22c:	2027883a 	mov	r19,r4
   2b230:	19ff971e 	bne	r3,r7,2b090 <_gp+0xffff0cc4>
   2b234:	a8bf961e 	bne	r21,r2,2b090 <_gp+0xffff0cc4>
   2b238:	003f9606 	br	2b094 <_gp+0xffff0cc8>
   2b23c:	04ffffc4 	movi	r19,-1
   2b240:	003f9406 	br	2b094 <_gp+0xffff0cc8>
   2b244:	100d883a 	mov	r6,r2
   2b248:	003f6106 	br	2afd0 <_gp+0xffff0c04>
   2b24c:	1013883a 	mov	r9,r2
   2b250:	003f7906 	br	2b038 <_gp+0xffff0c6c>
   2b254:	19c02636 	bltu	r3,r7,2b2f0 <__divdf3+0x7fc>
   2b258:	38c04d26 	beq	r7,r3,2b390 <__divdf3+0x89c>
   2b25c:	2027883a 	mov	r19,r4
   2b260:	003f8b06 	br	2b090 <_gp+0xffff0cc4>
   2b264:	e025883a 	mov	r18,fp
   2b268:	003f8a06 	br	2b094 <_gp+0xffff0cc8>
   2b26c:	008007c4 	movi	r2,31
   2b270:	14002a16 	blt	r2,r16,2b31c <__divdf3+0x828>
   2b274:	a5010784 	addi	r20,r20,1054
   2b278:	8d04983a 	sll	r2,r17,r20
   2b27c:	9c06d83a 	srl	r3,r19,r16
   2b280:	9d28983a 	sll	r20,r19,r20
   2b284:	8c20d83a 	srl	r16,r17,r16
   2b288:	1886b03a 	or	r3,r3,r2
   2b28c:	a004c03a 	cmpne	r2,r20,zero
   2b290:	1884b03a 	or	r2,r3,r2
   2b294:	10c001cc 	andi	r3,r2,7
   2b298:	18000726 	beq	r3,zero,2b2b8 <__divdf3+0x7c4>
   2b29c:	110003cc 	andi	r4,r2,15
   2b2a0:	00c00104 	movi	r3,4
   2b2a4:	20c00426 	beq	r4,r3,2b2b8 <__divdf3+0x7c4>
   2b2a8:	10c00104 	addi	r3,r2,4
   2b2ac:	1885803a 	cmpltu	r2,r3,r2
   2b2b0:	80a1883a 	add	r16,r16,r2
   2b2b4:	1805883a 	mov	r2,r3
   2b2b8:	80c0202c 	andhi	r3,r16,128
   2b2bc:	18002d26 	beq	r3,zero,2b374 <__divdf3+0x880>
   2b2c0:	9180004c 	andi	r6,r18,1
   2b2c4:	01000044 	movi	r4,1
   2b2c8:	000b883a 	mov	r5,zero
   2b2cc:	0027883a 	mov	r19,zero
   2b2d0:	003e6606 	br	2ac6c <_gp+0xffff08a0>
   2b2d4:	354d883a 	add	r6,r6,r21
   2b2d8:	356d803a 	cmpltu	r22,r6,r21
   2b2dc:	b42d883a 	add	r22,r22,r16
   2b2e0:	b12d883a 	add	r22,r22,r4
   2b2e4:	8c7fff84 	addi	r17,r17,-2
   2b2e8:	b0c7c83a 	sub	r3,r22,r3
   2b2ec:	003f1d06 	br	2af64 <_gp+0xffff0b98>
   2b2f0:	ad4b883a 	add	r5,r21,r21
   2b2f4:	2d6b803a 	cmpltu	r21,r5,r21
   2b2f8:	ac2b883a 	add	r21,r21,r16
   2b2fc:	1d47883a 	add	r3,r3,r21
   2b300:	993fff84 	addi	r4,r19,-2
   2b304:	282b883a 	mov	r21,r5
   2b308:	003fc806 	br	2b22c <_gp+0xffff0e60>
   2b30c:	103fc41e 	bne	r2,zero,2b220 <_gp+0xffff0e54>
   2b310:	002b883a 	mov	r21,zero
   2b314:	a8bf5e1e 	bne	r21,r2,2b090 <_gp+0xffff0cc4>
   2b318:	003f5e06 	br	2b094 <_gp+0xffff0cc8>
   2b31c:	00bef884 	movi	r2,-1054
   2b320:	1505c83a 	sub	r2,r2,r20
   2b324:	00c00804 	movi	r3,32
   2b328:	8884d83a 	srl	r2,r17,r2
   2b32c:	80c01c26 	beq	r16,r3,2b3a0 <__divdf3+0x8ac>
   2b330:	a0c10f84 	addi	r3,r20,1086
   2b334:	88c6983a 	sll	r3,r17,r3
   2b338:	1cc6b03a 	or	r3,r3,r19
   2b33c:	1806c03a 	cmpne	r3,r3,zero
   2b340:	1884b03a 	or	r2,r3,r2
   2b344:	140001cc 	andi	r16,r2,7
   2b348:	8000061e 	bne	r16,zero,2b364 <__divdf3+0x870>
   2b34c:	000b883a 	mov	r5,zero
   2b350:	1004d0fa 	srli	r2,r2,3
   2b354:	9180004c 	andi	r6,r18,1
   2b358:	0009883a 	mov	r4,zero
   2b35c:	1426b03a 	or	r19,r2,r16
   2b360:	003e4206 	br	2ac6c <_gp+0xffff08a0>
   2b364:	110003cc 	andi	r4,r2,15
   2b368:	00c00104 	movi	r3,4
   2b36c:	0021883a 	mov	r16,zero
   2b370:	20ffcd1e 	bne	r4,r3,2b2a8 <_gp+0xffff0edc>
   2b374:	800a927a 	slli	r5,r16,9
   2b378:	8020977a 	slli	r16,r16,29
   2b37c:	280ad33a 	srli	r5,r5,12
   2b380:	003ff306 	br	2b350 <_gp+0xffff0f84>
   2b384:	317fd336 	bltu	r6,r5,2b2d4 <_gp+0xffff0f08>
   2b388:	1023883a 	mov	r17,r2
   2b38c:	003fa206 	br	2b218 <_gp+0xffff0e4c>
   2b390:	a8bfd736 	bltu	r21,r2,2b2f0 <_gp+0xffff0f24>
   2b394:	2027883a 	mov	r19,r4
   2b398:	a8bf3d1e 	bne	r21,r2,2b090 <_gp+0xffff0cc4>
   2b39c:	003f3d06 	br	2b094 <_gp+0xffff0cc8>
   2b3a0:	0007883a 	mov	r3,zero
   2b3a4:	003fe406 	br	2b338 <_gp+0xffff0f6c>
   2b3a8:	00800434 	movhi	r2,16
   2b3ac:	89400234 	orhi	r5,r17,8
   2b3b0:	10bfffc4 	addi	r2,r2,-1
   2b3b4:	e00d883a 	mov	r6,fp
   2b3b8:	288a703a 	and	r5,r5,r2
   2b3bc:	003e8506 	br	2add4 <_gp+0xffff0a08>

0002b3c0 <__eqdf2>:
   2b3c0:	2804d53a 	srli	r2,r5,20
   2b3c4:	3806d53a 	srli	r3,r7,20
   2b3c8:	02000434 	movhi	r8,16
   2b3cc:	423fffc4 	addi	r8,r8,-1
   2b3d0:	1081ffcc 	andi	r2,r2,2047
   2b3d4:	0241ffc4 	movi	r9,2047
   2b3d8:	2a14703a 	and	r10,r5,r8
   2b3dc:	18c1ffcc 	andi	r3,r3,2047
   2b3e0:	3a10703a 	and	r8,r7,r8
   2b3e4:	280ad7fa 	srli	r5,r5,31
   2b3e8:	380ed7fa 	srli	r7,r7,31
   2b3ec:	12400f26 	beq	r2,r9,2b42c <__eqdf2+0x6c>
   2b3f0:	0241ffc4 	movi	r9,2047
   2b3f4:	1a400326 	beq	r3,r9,2b404 <__eqdf2+0x44>
   2b3f8:	10c00526 	beq	r2,r3,2b410 <__eqdf2+0x50>
   2b3fc:	00800044 	movi	r2,1
   2b400:	f800283a 	ret
   2b404:	4192b03a 	or	r9,r8,r6
   2b408:	483ffc1e 	bne	r9,zero,2b3fc <_gp+0xffff1030>
   2b40c:	10fffb1e 	bne	r2,r3,2b3fc <_gp+0xffff1030>
   2b410:	523ffa1e 	bne	r10,r8,2b3fc <_gp+0xffff1030>
   2b414:	21bff91e 	bne	r4,r6,2b3fc <_gp+0xffff1030>
   2b418:	29c00826 	beq	r5,r7,2b43c <__eqdf2+0x7c>
   2b41c:	103ff71e 	bne	r2,zero,2b3fc <_gp+0xffff1030>
   2b420:	5104b03a 	or	r2,r10,r4
   2b424:	1004c03a 	cmpne	r2,r2,zero
   2b428:	f800283a 	ret
   2b42c:	5112b03a 	or	r9,r10,r4
   2b430:	483fef26 	beq	r9,zero,2b3f0 <_gp+0xffff1024>
   2b434:	00800044 	movi	r2,1
   2b438:	f800283a 	ret
   2b43c:	0005883a 	mov	r2,zero
   2b440:	f800283a 	ret

0002b444 <__gedf2>:
   2b444:	2804d53a 	srli	r2,r5,20
   2b448:	3806d53a 	srli	r3,r7,20
   2b44c:	02000434 	movhi	r8,16
   2b450:	423fffc4 	addi	r8,r8,-1
   2b454:	0241ffc4 	movi	r9,2047
   2b458:	1081ffcc 	andi	r2,r2,2047
   2b45c:	2a14703a 	and	r10,r5,r8
   2b460:	1a46703a 	and	r3,r3,r9
   2b464:	3a10703a 	and	r8,r7,r8
   2b468:	280ad7fa 	srli	r5,r5,31
   2b46c:	380ed7fa 	srli	r7,r7,31
   2b470:	12400b26 	beq	r2,r9,2b4a0 <__gedf2+0x5c>
   2b474:	1a401626 	beq	r3,r9,2b4d0 <__gedf2+0x8c>
   2b478:	10000c1e 	bne	r2,zero,2b4ac <__gedf2+0x68>
   2b47c:	5112b03a 	or	r9,r10,r4
   2b480:	4813003a 	cmpeq	r9,r9,zero
   2b484:	4817883a 	mov	r11,r9
   2b488:	18000c1e 	bne	r3,zero,2b4bc <__gedf2+0x78>
   2b48c:	4198b03a 	or	r12,r8,r6
   2b490:	60000a1e 	bne	r12,zero,2b4bc <__gedf2+0x78>
   2b494:	48001326 	beq	r9,zero,2b4e4 <__gedf2+0xa0>
   2b498:	0005883a 	mov	r2,zero
   2b49c:	f800283a 	ret
   2b4a0:	5112b03a 	or	r9,r10,r4
   2b4a4:	4800191e 	bne	r9,zero,2b50c <__gedf2+0xc8>
   2b4a8:	18800926 	beq	r3,r2,2b4d0 <__gedf2+0x8c>
   2b4ac:	18000b1e 	bne	r3,zero,2b4dc <__gedf2+0x98>
   2b4b0:	4192b03a 	or	r9,r8,r6
   2b4b4:	0017883a 	mov	r11,zero
   2b4b8:	48000a26 	beq	r9,zero,2b4e4 <__gedf2+0xa0>
   2b4bc:	39c03fcc 	andi	r7,r7,255
   2b4c0:	58000726 	beq	r11,zero,2b4e0 <__gedf2+0x9c>
   2b4c4:	3800081e 	bne	r7,zero,2b4e8 <__gedf2+0xa4>
   2b4c8:	00bfffc4 	movi	r2,-1
   2b4cc:	f800283a 	ret
   2b4d0:	4192b03a 	or	r9,r8,r6
   2b4d4:	48000d1e 	bne	r9,zero,2b50c <__gedf2+0xc8>
   2b4d8:	103fe826 	beq	r2,zero,2b47c <_gp+0xffff10b0>
   2b4dc:	39c03fcc 	andi	r7,r7,255
   2b4e0:	29c00326 	beq	r5,r7,2b4f0 <__gedf2+0xac>
   2b4e4:	283ff81e 	bne	r5,zero,2b4c8 <_gp+0xffff10fc>
   2b4e8:	00800044 	movi	r2,1
   2b4ec:	f800283a 	ret
   2b4f0:	18bffc16 	blt	r3,r2,2b4e4 <_gp+0xffff1118>
   2b4f4:	10c00316 	blt	r2,r3,2b504 <__gedf2+0xc0>
   2b4f8:	42bffa36 	bltu	r8,r10,2b4e4 <_gp+0xffff1118>
   2b4fc:	52000526 	beq	r10,r8,2b514 <__gedf2+0xd0>
   2b500:	523fe52e 	bgeu	r10,r8,2b498 <_gp+0xffff10cc>
   2b504:	283ff026 	beq	r5,zero,2b4c8 <_gp+0xffff10fc>
   2b508:	003ff706 	br	2b4e8 <_gp+0xffff111c>
   2b50c:	00bfff84 	movi	r2,-2
   2b510:	f800283a 	ret
   2b514:	313ff336 	bltu	r6,r4,2b4e4 <_gp+0xffff1118>
   2b518:	21bfdf2e 	bgeu	r4,r6,2b498 <_gp+0xffff10cc>
   2b51c:	283fea26 	beq	r5,zero,2b4c8 <_gp+0xffff10fc>
   2b520:	003ff106 	br	2b4e8 <_gp+0xffff111c>

0002b524 <__ledf2>:
   2b524:	2804d53a 	srli	r2,r5,20
   2b528:	3810d53a 	srli	r8,r7,20
   2b52c:	00c00434 	movhi	r3,16
   2b530:	18ffffc4 	addi	r3,r3,-1
   2b534:	0241ffc4 	movi	r9,2047
   2b538:	1081ffcc 	andi	r2,r2,2047
   2b53c:	28d4703a 	and	r10,r5,r3
   2b540:	4250703a 	and	r8,r8,r9
   2b544:	38c6703a 	and	r3,r7,r3
   2b548:	280ad7fa 	srli	r5,r5,31
   2b54c:	380ed7fa 	srli	r7,r7,31
   2b550:	12400b26 	beq	r2,r9,2b580 <__ledf2+0x5c>
   2b554:	42401926 	beq	r8,r9,2b5bc <__ledf2+0x98>
   2b558:	10000c1e 	bne	r2,zero,2b58c <__ledf2+0x68>
   2b55c:	5112b03a 	or	r9,r10,r4
   2b560:	4813003a 	cmpeq	r9,r9,zero
   2b564:	4817883a 	mov	r11,r9
   2b568:	40000f26 	beq	r8,zero,2b5a8 <__ledf2+0x84>
   2b56c:	39c03fcc 	andi	r7,r7,255
   2b570:	58001826 	beq	r11,zero,2b5d4 <__ledf2+0xb0>
   2b574:	38000a1e 	bne	r7,zero,2b5a0 <__ledf2+0x7c>
   2b578:	00bfffc4 	movi	r2,-1
   2b57c:	f800283a 	ret
   2b580:	5112b03a 	or	r9,r10,r4
   2b584:	48000f1e 	bne	r9,zero,2b5c4 <__ledf2+0xa0>
   2b588:	40800c26 	beq	r8,r2,2b5bc <__ledf2+0x98>
   2b58c:	4000101e 	bne	r8,zero,2b5d0 <__ledf2+0xac>
   2b590:	1992b03a 	or	r9,r3,r6
   2b594:	0017883a 	mov	r11,zero
   2b598:	483ff41e 	bne	r9,zero,2b56c <_gp+0xffff11a0>
   2b59c:	283ff61e 	bne	r5,zero,2b578 <_gp+0xffff11ac>
   2b5a0:	00800044 	movi	r2,1
   2b5a4:	f800283a 	ret
   2b5a8:	1998b03a 	or	r12,r3,r6
   2b5ac:	603fef1e 	bne	r12,zero,2b56c <_gp+0xffff11a0>
   2b5b0:	483ffa26 	beq	r9,zero,2b59c <_gp+0xffff11d0>
   2b5b4:	0005883a 	mov	r2,zero
   2b5b8:	f800283a 	ret
   2b5bc:	1992b03a 	or	r9,r3,r6
   2b5c0:	48000226 	beq	r9,zero,2b5cc <__ledf2+0xa8>
   2b5c4:	00800084 	movi	r2,2
   2b5c8:	f800283a 	ret
   2b5cc:	103fe326 	beq	r2,zero,2b55c <_gp+0xffff1190>
   2b5d0:	39c03fcc 	andi	r7,r7,255
   2b5d4:	29fff11e 	bne	r5,r7,2b59c <_gp+0xffff11d0>
   2b5d8:	40bff016 	blt	r8,r2,2b59c <_gp+0xffff11d0>
   2b5dc:	12000316 	blt	r2,r8,2b5ec <__ledf2+0xc8>
   2b5e0:	1abfee36 	bltu	r3,r10,2b59c <_gp+0xffff11d0>
   2b5e4:	50c00326 	beq	r10,r3,2b5f4 <__ledf2+0xd0>
   2b5e8:	50fff22e 	bgeu	r10,r3,2b5b4 <_gp+0xffff11e8>
   2b5ec:	283fe226 	beq	r5,zero,2b578 <_gp+0xffff11ac>
   2b5f0:	003feb06 	br	2b5a0 <_gp+0xffff11d4>
   2b5f4:	313fe936 	bltu	r6,r4,2b59c <_gp+0xffff11d0>
   2b5f8:	21bfee2e 	bgeu	r4,r6,2b5b4 <_gp+0xffff11e8>
   2b5fc:	283fde26 	beq	r5,zero,2b578 <_gp+0xffff11ac>
   2b600:	003fe706 	br	2b5a0 <_gp+0xffff11d4>

0002b604 <__muldf3>:
   2b604:	defff204 	addi	sp,sp,-56
   2b608:	2804d53a 	srli	r2,r5,20
   2b60c:	dd800a15 	stw	r22,40(sp)
   2b610:	282cd7fa 	srli	r22,r5,31
   2b614:	dc000415 	stw	r16,16(sp)
   2b618:	04000434 	movhi	r16,16
   2b61c:	df000c15 	stw	fp,48(sp)
   2b620:	dd000815 	stw	r20,32(sp)
   2b624:	dcc00715 	stw	r19,28(sp)
   2b628:	dc800615 	stw	r18,24(sp)
   2b62c:	dc400515 	stw	r17,20(sp)
   2b630:	843fffc4 	addi	r16,r16,-1
   2b634:	dfc00d15 	stw	ra,52(sp)
   2b638:	ddc00b15 	stw	r23,44(sp)
   2b63c:	dd400915 	stw	r21,36(sp)
   2b640:	1501ffcc 	andi	r20,r2,2047
   2b644:	2023883a 	mov	r17,r4
   2b648:	2025883a 	mov	r18,r4
   2b64c:	2c20703a 	and	r16,r5,r16
   2b650:	b027883a 	mov	r19,r22
   2b654:	b7003fcc 	andi	fp,r22,255
   2b658:	a0005926 	beq	r20,zero,2b7c0 <__muldf3+0x1bc>
   2b65c:	0081ffc4 	movi	r2,2047
   2b660:	a0803426 	beq	r20,r2,2b734 <__muldf3+0x130>
   2b664:	84000434 	orhi	r16,r16,16
   2b668:	2004d77a 	srli	r2,r4,29
   2b66c:	802090fa 	slli	r16,r16,3
   2b670:	202490fa 	slli	r18,r4,3
   2b674:	a53f0044 	addi	r20,r20,-1023
   2b678:	80a0b03a 	or	r16,r16,r2
   2b67c:	002b883a 	mov	r21,zero
   2b680:	0015883a 	mov	r10,zero
   2b684:	3812d53a 	srli	r9,r7,20
   2b688:	3806d7fa 	srli	r3,r7,31
   2b68c:	02000434 	movhi	r8,16
   2b690:	423fffc4 	addi	r8,r8,-1
   2b694:	4941ffcc 	andi	r5,r9,2047
   2b698:	302f883a 	mov	r23,r6
   2b69c:	3a22703a 	and	r17,r7,r8
   2b6a0:	1ac03fcc 	andi	r11,r3,255
   2b6a4:	28006226 	beq	r5,zero,2b830 <__muldf3+0x22c>
   2b6a8:	0081ffc4 	movi	r2,2047
   2b6ac:	28805a26 	beq	r5,r2,2b818 <__muldf3+0x214>
   2b6b0:	8a000434 	orhi	r8,r17,16
   2b6b4:	3004d77a 	srli	r2,r6,29
   2b6b8:	401090fa 	slli	r8,r8,3
   2b6bc:	302e90fa 	slli	r23,r6,3
   2b6c0:	297f0044 	addi	r5,r5,-1023
   2b6c4:	40a2b03a 	or	r17,r8,r2
   2b6c8:	0013883a 	mov	r9,zero
   2b6cc:	4d4cb03a 	or	r6,r9,r21
   2b6d0:	300c90ba 	slli	r6,r6,2
   2b6d4:	020000f4 	movhi	r8,3
   2b6d8:	422dbd04 	addi	r8,r8,-18700
   2b6dc:	320d883a 	add	r6,r6,r8
   2b6e0:	31800017 	ldw	r6,0(r6)
   2b6e4:	a14b883a 	add	r5,r20,r5
   2b6e8:	1dacf03a 	xor	r22,r3,r22
   2b6ec:	2b000044 	addi	r12,r5,1
   2b6f0:	3000683a 	jmp	r6
   2b6f4:	0002b930 	cmpltui	zero,zero,2788
   2b6f8:	0002b91c 	xori	zero,zero,2788
   2b6fc:	0002b91c 	xori	zero,zero,2788
   2b700:	0002b908 	cmpgei	zero,zero,2788
   2b704:	0002b750 	cmplti	zero,zero,2781
   2b708:	0002b750 	cmplti	zero,zero,2781
   2b70c:	0002b8f0 	cmpltui	zero,zero,2787
   2b710:	0002b908 	cmpgei	zero,zero,2788
   2b714:	0002b750 	cmplti	zero,zero,2781
   2b718:	0002b8f0 	cmpltui	zero,zero,2787
   2b71c:	0002b750 	cmplti	zero,zero,2781
   2b720:	0002b908 	cmpgei	zero,zero,2788
   2b724:	0002b754 	movui	zero,2781
   2b728:	0002b754 	movui	zero,2781
   2b72c:	0002b754 	movui	zero,2781
   2b730:	0002bb2c 	andhi	zero,zero,2796
   2b734:	8104b03a 	or	r2,r16,r4
   2b738:	10006a1e 	bne	r2,zero,2b8e4 <__muldf3+0x2e0>
   2b73c:	05400204 	movi	r21,8
   2b740:	0021883a 	mov	r16,zero
   2b744:	0025883a 	mov	r18,zero
   2b748:	02800084 	movi	r10,2
   2b74c:	003fcd06 	br	2b684 <_gp+0xffff12b8>
   2b750:	b039883a 	mov	fp,r22
   2b754:	00800084 	movi	r2,2
   2b758:	50804e1e 	bne	r10,r2,2b894 <__muldf3+0x290>
   2b75c:	e4c0004c 	andi	r19,fp,1
   2b760:	0101ffc4 	movi	r4,2047
   2b764:	0021883a 	mov	r16,zero
   2b768:	0025883a 	mov	r18,zero
   2b76c:	2008953a 	slli	r4,r4,20
   2b770:	98c03fcc 	andi	r3,r19,255
   2b774:	01400434 	movhi	r5,16
   2b778:	297fffc4 	addi	r5,r5,-1
   2b77c:	180697fa 	slli	r3,r3,31
   2b780:	8160703a 	and	r16,r16,r5
   2b784:	8120b03a 	or	r16,r16,r4
   2b788:	80c6b03a 	or	r3,r16,r3
   2b78c:	9005883a 	mov	r2,r18
   2b790:	dfc00d17 	ldw	ra,52(sp)
   2b794:	df000c17 	ldw	fp,48(sp)
   2b798:	ddc00b17 	ldw	r23,44(sp)
   2b79c:	dd800a17 	ldw	r22,40(sp)
   2b7a0:	dd400917 	ldw	r21,36(sp)
   2b7a4:	dd000817 	ldw	r20,32(sp)
   2b7a8:	dcc00717 	ldw	r19,28(sp)
   2b7ac:	dc800617 	ldw	r18,24(sp)
   2b7b0:	dc400517 	ldw	r17,20(sp)
   2b7b4:	dc000417 	ldw	r16,16(sp)
   2b7b8:	dec00e04 	addi	sp,sp,56
   2b7bc:	f800283a 	ret
   2b7c0:	8104b03a 	or	r2,r16,r4
   2b7c4:	10004226 	beq	r2,zero,2b8d0 <__muldf3+0x2cc>
   2b7c8:	8000f926 	beq	r16,zero,2bbb0 <__muldf3+0x5ac>
   2b7cc:	8009883a 	mov	r4,r16
   2b7d0:	d9800315 	stw	r6,12(sp)
   2b7d4:	d9c00015 	stw	r7,0(sp)
   2b7d8:	002c7f40 	call	2c7f4 <__clzsi2>
   2b7dc:	d9800317 	ldw	r6,12(sp)
   2b7e0:	d9c00017 	ldw	r7,0(sp)
   2b7e4:	1007883a 	mov	r3,r2
   2b7e8:	01000a04 	movi	r4,40
   2b7ec:	18bffe04 	addi	r2,r3,-8
   2b7f0:	20c9c83a 	sub	r4,r4,r3
   2b7f4:	80a0983a 	sll	r16,r16,r2
   2b7f8:	8908d83a 	srl	r4,r17,r4
   2b7fc:	88a4983a 	sll	r18,r17,r2
   2b800:	2420b03a 	or	r16,r4,r16
   2b804:	017f0344 	movi	r5,-1011
   2b808:	28e9c83a 	sub	r20,r5,r3
   2b80c:	002b883a 	mov	r21,zero
   2b810:	0015883a 	mov	r10,zero
   2b814:	003f9b06 	br	2b684 <_gp+0xffff12b8>
   2b818:	8984b03a 	or	r2,r17,r6
   2b81c:	10002a1e 	bne	r2,zero,2b8c8 <__muldf3+0x2c4>
   2b820:	0023883a 	mov	r17,zero
   2b824:	002f883a 	mov	r23,zero
   2b828:	02400084 	movi	r9,2
   2b82c:	003fa706 	br	2b6cc <_gp+0xffff1300>
   2b830:	8984b03a 	or	r2,r17,r6
   2b834:	10002026 	beq	r2,zero,2b8b8 <__muldf3+0x2b4>
   2b838:	8800cc26 	beq	r17,zero,2bb6c <__muldf3+0x568>
   2b83c:	8809883a 	mov	r4,r17
   2b840:	d8c00215 	stw	r3,8(sp)
   2b844:	d9800315 	stw	r6,12(sp)
   2b848:	da800015 	stw	r10,0(sp)
   2b84c:	dac00115 	stw	r11,4(sp)
   2b850:	002c7f40 	call	2c7f4 <__clzsi2>
   2b854:	d8c00217 	ldw	r3,8(sp)
   2b858:	d9800317 	ldw	r6,12(sp)
   2b85c:	da800017 	ldw	r10,0(sp)
   2b860:	dac00117 	ldw	r11,4(sp)
   2b864:	1009883a 	mov	r4,r2
   2b868:	01400a04 	movi	r5,40
   2b86c:	25fffe04 	addi	r23,r4,-8
   2b870:	290bc83a 	sub	r5,r5,r4
   2b874:	8dd0983a 	sll	r8,r17,r23
   2b878:	314ad83a 	srl	r5,r6,r5
   2b87c:	35ee983a 	sll	r23,r6,r23
   2b880:	2a22b03a 	or	r17,r5,r8
   2b884:	017f0344 	movi	r5,-1011
   2b888:	290bc83a 	sub	r5,r5,r4
   2b88c:	0013883a 	mov	r9,zero
   2b890:	003f8e06 	br	2b6cc <_gp+0xffff1300>
   2b894:	008000c4 	movi	r2,3
   2b898:	50811d26 	beq	r10,r2,2bd10 <__muldf3+0x70c>
   2b89c:	00800044 	movi	r2,1
   2b8a0:	5080e01e 	bne	r10,r2,2bc24 <__muldf3+0x620>
   2b8a4:	e0a6703a 	and	r19,fp,r2
   2b8a8:	0009883a 	mov	r4,zero
   2b8ac:	0021883a 	mov	r16,zero
   2b8b0:	0025883a 	mov	r18,zero
   2b8b4:	003fad06 	br	2b76c <_gp+0xffff13a0>
   2b8b8:	0023883a 	mov	r17,zero
   2b8bc:	002f883a 	mov	r23,zero
   2b8c0:	02400044 	movi	r9,1
   2b8c4:	003f8106 	br	2b6cc <_gp+0xffff1300>
   2b8c8:	024000c4 	movi	r9,3
   2b8cc:	003f7f06 	br	2b6cc <_gp+0xffff1300>
   2b8d0:	05400104 	movi	r21,4
   2b8d4:	0021883a 	mov	r16,zero
   2b8d8:	0025883a 	mov	r18,zero
   2b8dc:	02800044 	movi	r10,1
   2b8e0:	003f6806 	br	2b684 <_gp+0xffff12b8>
   2b8e4:	05400304 	movi	r21,12
   2b8e8:	028000c4 	movi	r10,3
   2b8ec:	003f6506 	br	2b684 <_gp+0xffff12b8>
   2b8f0:	04000434 	movhi	r16,16
   2b8f4:	0027883a 	mov	r19,zero
   2b8f8:	843fffc4 	addi	r16,r16,-1
   2b8fc:	04bfffc4 	movi	r18,-1
   2b900:	0101ffc4 	movi	r4,2047
   2b904:	003f9906 	br	2b76c <_gp+0xffff13a0>
   2b908:	8821883a 	mov	r16,r17
   2b90c:	b825883a 	mov	r18,r23
   2b910:	5839883a 	mov	fp,r11
   2b914:	4815883a 	mov	r10,r9
   2b918:	003f8e06 	br	2b754 <_gp+0xffff1388>
   2b91c:	8821883a 	mov	r16,r17
   2b920:	b825883a 	mov	r18,r23
   2b924:	b039883a 	mov	fp,r22
   2b928:	4815883a 	mov	r10,r9
   2b92c:	003f8906 	br	2b754 <_gp+0xffff1388>
   2b930:	b80cd43a 	srli	r6,r23,16
   2b934:	9006d43a 	srli	r3,r18,16
   2b938:	90bfffcc 	andi	r2,r18,65535
   2b93c:	bdffffcc 	andi	r23,r23,65535
   2b940:	b891383a 	mul	r8,r23,r2
   2b944:	b8c9383a 	mul	r4,r23,r3
   2b948:	309b383a 	mul	r13,r6,r2
   2b94c:	400ed43a 	srli	r7,r8,16
   2b950:	30df383a 	mul	r15,r6,r3
   2b954:	235b883a 	add	r13,r4,r13
   2b958:	69db883a 	add	r13,r13,r7
   2b95c:	6900022e 	bgeu	r13,r4,2b968 <__muldf3+0x364>
   2b960:	01000074 	movhi	r4,1
   2b964:	791f883a 	add	r15,r15,r4
   2b968:	8828d43a 	srli	r20,r17,16
   2b96c:	8c7fffcc 	andi	r17,r17,65535
   2b970:	888f383a 	mul	r7,r17,r2
   2b974:	88d3383a 	mul	r9,r17,r3
   2b978:	a0a5383a 	mul	r18,r20,r2
   2b97c:	3816d43a 	srli	r11,r7,16
   2b980:	6814943a 	slli	r10,r13,16
   2b984:	4ca5883a 	add	r18,r9,r18
   2b988:	423fffcc 	andi	r8,r8,65535
   2b98c:	92e5883a 	add	r18,r18,r11
   2b990:	6808d43a 	srli	r4,r13,16
   2b994:	5215883a 	add	r10,r10,r8
   2b998:	a0c7383a 	mul	r3,r20,r3
   2b99c:	9240022e 	bgeu	r18,r9,2b9a8 <__muldf3+0x3a4>
   2b9a0:	00800074 	movhi	r2,1
   2b9a4:	1887883a 	add	r3,r3,r2
   2b9a8:	802ad43a 	srli	r21,r16,16
   2b9ac:	80bfffcc 	andi	r2,r16,65535
   2b9b0:	b893383a 	mul	r9,r23,r2
   2b9b4:	3091383a 	mul	r8,r6,r2
   2b9b8:	bd6f383a 	mul	r23,r23,r21
   2b9bc:	9026943a 	slli	r19,r18,16
   2b9c0:	481ad43a 	srli	r13,r9,16
   2b9c4:	9024d43a 	srli	r18,r18,16
   2b9c8:	39ffffcc 	andi	r7,r7,65535
   2b9cc:	ba11883a 	add	r8,r23,r8
   2b9d0:	99e7883a 	add	r19,r19,r7
   2b9d4:	4351883a 	add	r8,r8,r13
   2b9d8:	1c97883a 	add	r11,r3,r18
   2b9dc:	354d383a 	mul	r6,r6,r21
   2b9e0:	9925883a 	add	r18,r19,r4
   2b9e4:	45c0022e 	bgeu	r8,r23,2b9f0 <__muldf3+0x3ec>
   2b9e8:	00c00074 	movhi	r3,1
   2b9ec:	30cd883a 	add	r6,r6,r3
   2b9f0:	8889383a 	mul	r4,r17,r2
   2b9f4:	8d63383a 	mul	r17,r17,r21
   2b9f8:	a085383a 	mul	r2,r20,r2
   2b9fc:	200ed43a 	srli	r7,r4,16
   2ba00:	401cd43a 	srli	r14,r8,16
   2ba04:	401a943a 	slli	r13,r8,16
   2ba08:	8885883a 	add	r2,r17,r2
   2ba0c:	4a3fffcc 	andi	r8,r9,65535
   2ba10:	11c5883a 	add	r2,r2,r7
   2ba14:	339d883a 	add	r14,r6,r14
   2ba18:	6a11883a 	add	r8,r13,r8
   2ba1c:	a561383a 	mul	r16,r20,r21
   2ba20:	1440022e 	bgeu	r2,r17,2ba2c <__muldf3+0x428>
   2ba24:	00c00074 	movhi	r3,1
   2ba28:	80e1883a 	add	r16,r16,r3
   2ba2c:	1006943a 	slli	r3,r2,16
   2ba30:	213fffcc 	andi	r4,r4,65535
   2ba34:	93db883a 	add	r13,r18,r15
   2ba38:	1909883a 	add	r4,r3,r4
   2ba3c:	22c7883a 	add	r3,r4,r11
   2ba40:	6cd3803a 	cmpltu	r9,r13,r19
   2ba44:	6a09883a 	add	r4,r13,r8
   2ba48:	1a5b883a 	add	r13,r3,r9
   2ba4c:	2211803a 	cmpltu	r8,r4,r8
   2ba50:	734d883a 	add	r6,r14,r13
   2ba54:	100ed43a 	srli	r7,r2,16
   2ba58:	6a53803a 	cmpltu	r9,r13,r9
   2ba5c:	3205883a 	add	r2,r6,r8
   2ba60:	1ac7803a 	cmpltu	r3,r3,r11
   2ba64:	1211803a 	cmpltu	r8,r2,r8
   2ba68:	48c6b03a 	or	r3,r9,r3
   2ba6c:	338d803a 	cmpltu	r6,r6,r14
   2ba70:	19c7883a 	add	r3,r3,r7
   2ba74:	418cb03a 	or	r6,r8,r6
   2ba78:	1987883a 	add	r3,r3,r6
   2ba7c:	2024927a 	slli	r18,r4,9
   2ba80:	1c07883a 	add	r3,r3,r16
   2ba84:	1806927a 	slli	r3,r3,9
   2ba88:	1020d5fa 	srli	r16,r2,23
   2ba8c:	2008d5fa 	srli	r4,r4,23
   2ba90:	9294b03a 	or	r10,r18,r10
   2ba94:	1004927a 	slli	r2,r2,9
   2ba98:	5024c03a 	cmpne	r18,r10,zero
   2ba9c:	1c20b03a 	or	r16,r3,r16
   2baa0:	9108b03a 	or	r4,r18,r4
   2baa4:	80c0402c 	andhi	r3,r16,256
   2baa8:	20a4b03a 	or	r18,r4,r2
   2baac:	18000726 	beq	r3,zero,2bacc <__muldf3+0x4c8>
   2bab0:	9006d07a 	srli	r3,r18,1
   2bab4:	800897fa 	slli	r4,r16,31
   2bab8:	9080004c 	andi	r2,r18,1
   2babc:	8020d07a 	srli	r16,r16,1
   2bac0:	10c4b03a 	or	r2,r2,r3
   2bac4:	1124b03a 	or	r18,r2,r4
   2bac8:	600b883a 	mov	r5,r12
   2bacc:	2900ffc4 	addi	r4,r5,1023
   2bad0:	01004b0e 	bge	zero,r4,2bc00 <__muldf3+0x5fc>
   2bad4:	908001cc 	andi	r2,r18,7
   2bad8:	10000726 	beq	r2,zero,2baf8 <__muldf3+0x4f4>
   2badc:	90c003cc 	andi	r3,r18,15
   2bae0:	00800104 	movi	r2,4
   2bae4:	18800426 	beq	r3,r2,2baf8 <__muldf3+0x4f4>
   2bae8:	9087883a 	add	r3,r18,r2
   2baec:	1c85803a 	cmpltu	r2,r3,r18
   2baf0:	80a1883a 	add	r16,r16,r2
   2baf4:	1825883a 	mov	r18,r3
   2baf8:	8080402c 	andhi	r2,r16,256
   2bafc:	10000426 	beq	r2,zero,2bb10 <__muldf3+0x50c>
   2bb00:	00bfc034 	movhi	r2,65280
   2bb04:	10bfffc4 	addi	r2,r2,-1
   2bb08:	29010004 	addi	r4,r5,1024
   2bb0c:	80a0703a 	and	r16,r16,r2
   2bb10:	0081ff84 	movi	r2,2046
   2bb14:	1100320e 	bge	r2,r4,2bbe0 <__muldf3+0x5dc>
   2bb18:	b4c0004c 	andi	r19,r22,1
   2bb1c:	0101ffc4 	movi	r4,2047
   2bb20:	0021883a 	mov	r16,zero
   2bb24:	0025883a 	mov	r18,zero
   2bb28:	003f1006 	br	2b76c <_gp+0xffff13a0>
   2bb2c:	8080022c 	andhi	r2,r16,8
   2bb30:	10000926 	beq	r2,zero,2bb58 <__muldf3+0x554>
   2bb34:	8880022c 	andhi	r2,r17,8
   2bb38:	1000071e 	bne	r2,zero,2bb58 <__muldf3+0x554>
   2bb3c:	00800434 	movhi	r2,16
   2bb40:	8c000234 	orhi	r16,r17,8
   2bb44:	10bfffc4 	addi	r2,r2,-1
   2bb48:	1827883a 	mov	r19,r3
   2bb4c:	80a0703a 	and	r16,r16,r2
   2bb50:	b825883a 	mov	r18,r23
   2bb54:	003f6a06 	br	2b900 <_gp+0xffff1534>
   2bb58:	00800434 	movhi	r2,16
   2bb5c:	84000234 	orhi	r16,r16,8
   2bb60:	10bfffc4 	addi	r2,r2,-1
   2bb64:	80a0703a 	and	r16,r16,r2
   2bb68:	003f6506 	br	2b900 <_gp+0xffff1534>
   2bb6c:	3009883a 	mov	r4,r6
   2bb70:	d8c00215 	stw	r3,8(sp)
   2bb74:	d9800315 	stw	r6,12(sp)
   2bb78:	da800015 	stw	r10,0(sp)
   2bb7c:	dac00115 	stw	r11,4(sp)
   2bb80:	002c7f40 	call	2c7f4 <__clzsi2>
   2bb84:	11000804 	addi	r4,r2,32
   2bb88:	014009c4 	movi	r5,39
   2bb8c:	d8c00217 	ldw	r3,8(sp)
   2bb90:	d9800317 	ldw	r6,12(sp)
   2bb94:	da800017 	ldw	r10,0(sp)
   2bb98:	dac00117 	ldw	r11,4(sp)
   2bb9c:	293f320e 	bge	r5,r4,2b868 <_gp+0xffff149c>
   2bba0:	10bffe04 	addi	r2,r2,-8
   2bba4:	b8a2983a 	sll	r17,r23,r2
   2bba8:	002f883a 	mov	r23,zero
   2bbac:	003f3506 	br	2b884 <_gp+0xffff14b8>
   2bbb0:	d9800315 	stw	r6,12(sp)
   2bbb4:	d9c00015 	stw	r7,0(sp)
   2bbb8:	002c7f40 	call	2c7f4 <__clzsi2>
   2bbbc:	10c00804 	addi	r3,r2,32
   2bbc0:	010009c4 	movi	r4,39
   2bbc4:	d9800317 	ldw	r6,12(sp)
   2bbc8:	d9c00017 	ldw	r7,0(sp)
   2bbcc:	20ff060e 	bge	r4,r3,2b7e8 <_gp+0xffff141c>
   2bbd0:	10bffe04 	addi	r2,r2,-8
   2bbd4:	88a0983a 	sll	r16,r17,r2
   2bbd8:	0025883a 	mov	r18,zero
   2bbdc:	003f0906 	br	2b804 <_gp+0xffff1438>
   2bbe0:	9004d0fa 	srli	r2,r18,3
   2bbe4:	8024977a 	slli	r18,r16,29
   2bbe8:	8020927a 	slli	r16,r16,9
   2bbec:	2101ffcc 	andi	r4,r4,2047
   2bbf0:	90a4b03a 	or	r18,r18,r2
   2bbf4:	8020d33a 	srli	r16,r16,12
   2bbf8:	b4c0004c 	andi	r19,r22,1
   2bbfc:	003edb06 	br	2b76c <_gp+0xffff13a0>
   2bc00:	00ff0084 	movi	r3,-1022
   2bc04:	1947c83a 	sub	r3,r3,r5
   2bc08:	00800e04 	movi	r2,56
   2bc0c:	10c0080e 	bge	r2,r3,2bc30 <__muldf3+0x62c>
   2bc10:	b4c0004c 	andi	r19,r22,1
   2bc14:	0009883a 	mov	r4,zero
   2bc18:	0021883a 	mov	r16,zero
   2bc1c:	0025883a 	mov	r18,zero
   2bc20:	003ed206 	br	2b76c <_gp+0xffff13a0>
   2bc24:	600b883a 	mov	r5,r12
   2bc28:	e02d883a 	mov	r22,fp
   2bc2c:	003fa706 	br	2bacc <_gp+0xffff1700>
   2bc30:	008007c4 	movi	r2,31
   2bc34:	10c01816 	blt	r2,r3,2bc98 <__muldf3+0x694>
   2bc38:	29410784 	addi	r5,r5,1054
   2bc3c:	8144983a 	sll	r2,r16,r5
   2bc40:	90c8d83a 	srl	r4,r18,r3
   2bc44:	914a983a 	sll	r5,r18,r5
   2bc48:	80c6d83a 	srl	r3,r16,r3
   2bc4c:	2088b03a 	or	r4,r4,r2
   2bc50:	2804c03a 	cmpne	r2,r5,zero
   2bc54:	2084b03a 	or	r2,r4,r2
   2bc58:	110001cc 	andi	r4,r2,7
   2bc5c:	20000726 	beq	r4,zero,2bc7c <__muldf3+0x678>
   2bc60:	114003cc 	andi	r5,r2,15
   2bc64:	01000104 	movi	r4,4
   2bc68:	29000426 	beq	r5,r4,2bc7c <__muldf3+0x678>
   2bc6c:	11000104 	addi	r4,r2,4
   2bc70:	2085803a 	cmpltu	r2,r4,r2
   2bc74:	1887883a 	add	r3,r3,r2
   2bc78:	2005883a 	mov	r2,r4
   2bc7c:	1900202c 	andhi	r4,r3,128
   2bc80:	20001826 	beq	r4,zero,2bce4 <__muldf3+0x6e0>
   2bc84:	b4c0004c 	andi	r19,r22,1
   2bc88:	01000044 	movi	r4,1
   2bc8c:	0021883a 	mov	r16,zero
   2bc90:	0025883a 	mov	r18,zero
   2bc94:	003eb506 	br	2b76c <_gp+0xffff13a0>
   2bc98:	00bef884 	movi	r2,-1054
   2bc9c:	1145c83a 	sub	r2,r2,r5
   2bca0:	8088d83a 	srl	r4,r16,r2
   2bca4:	00800804 	movi	r2,32
   2bca8:	18801726 	beq	r3,r2,2bd08 <__muldf3+0x704>
   2bcac:	28810f84 	addi	r2,r5,1086
   2bcb0:	8084983a 	sll	r2,r16,r2
   2bcb4:	1484b03a 	or	r2,r2,r18
   2bcb8:	1004c03a 	cmpne	r2,r2,zero
   2bcbc:	1104b03a 	or	r2,r2,r4
   2bcc0:	10c001cc 	andi	r3,r2,7
   2bcc4:	18000b1e 	bne	r3,zero,2bcf4 <__muldf3+0x6f0>
   2bcc8:	0021883a 	mov	r16,zero
   2bccc:	1004d0fa 	srli	r2,r2,3
   2bcd0:	b4c0004c 	andi	r19,r22,1
   2bcd4:	0009883a 	mov	r4,zero
   2bcd8:	10e4b03a 	or	r18,r2,r3
   2bcdc:	003ea306 	br	2b76c <_gp+0xffff13a0>
   2bce0:	0007883a 	mov	r3,zero
   2bce4:	1820927a 	slli	r16,r3,9
   2bce8:	1806977a 	slli	r3,r3,29
   2bcec:	8020d33a 	srli	r16,r16,12
   2bcf0:	003ff606 	br	2bccc <_gp+0xffff1900>
   2bcf4:	110003cc 	andi	r4,r2,15
   2bcf8:	00c00104 	movi	r3,4
   2bcfc:	20fff826 	beq	r4,r3,2bce0 <_gp+0xffff1914>
   2bd00:	0007883a 	mov	r3,zero
   2bd04:	003fd906 	br	2bc6c <_gp+0xffff18a0>
   2bd08:	0005883a 	mov	r2,zero
   2bd0c:	003fe906 	br	2bcb4 <_gp+0xffff18e8>
   2bd10:	00800434 	movhi	r2,16
   2bd14:	84000234 	orhi	r16,r16,8
   2bd18:	10bfffc4 	addi	r2,r2,-1
   2bd1c:	e4c0004c 	andi	r19,fp,1
   2bd20:	80a0703a 	and	r16,r16,r2
   2bd24:	003ef606 	br	2b900 <_gp+0xffff1534>

0002bd28 <__subdf3>:
   2bd28:	00c00434 	movhi	r3,16
   2bd2c:	18ffffc4 	addi	r3,r3,-1
   2bd30:	defffb04 	addi	sp,sp,-20
   2bd34:	28d2703a 	and	r9,r5,r3
   2bd38:	3814d53a 	srli	r10,r7,20
   2bd3c:	38c6703a 	and	r3,r7,r3
   2bd40:	3004d77a 	srli	r2,r6,29
   2bd44:	dc800215 	stw	r18,8(sp)
   2bd48:	dc000015 	stw	r16,0(sp)
   2bd4c:	2824d7fa 	srli	r18,r5,31
   2bd50:	2820d53a 	srli	r16,r5,20
   2bd54:	481290fa 	slli	r9,r9,3
   2bd58:	200ad77a 	srli	r5,r4,29
   2bd5c:	180690fa 	slli	r3,r3,3
   2bd60:	dc400115 	stw	r17,4(sp)
   2bd64:	dfc00415 	stw	ra,16(sp)
   2bd68:	202290fa 	slli	r17,r4,3
   2bd6c:	dcc00315 	stw	r19,12(sp)
   2bd70:	5281ffcc 	andi	r10,r10,2047
   2bd74:	0101ffc4 	movi	r4,2047
   2bd78:	9011883a 	mov	r8,r18
   2bd7c:	8401ffcc 	andi	r16,r16,2047
   2bd80:	94803fcc 	andi	r18,r18,255
   2bd84:	494ab03a 	or	r5,r9,r5
   2bd88:	380ed7fa 	srli	r7,r7,31
   2bd8c:	1886b03a 	or	r3,r3,r2
   2bd90:	300c90fa 	slli	r6,r6,3
   2bd94:	51009026 	beq	r10,r4,2bfd8 <__subdf3+0x2b0>
   2bd98:	39c0005c 	xori	r7,r7,1
   2bd9c:	8285c83a 	sub	r2,r16,r10
   2bda0:	91c06f26 	beq	r18,r7,2bf60 <__subdf3+0x238>
   2bda4:	0080b10e 	bge	zero,r2,2c06c <__subdf3+0x344>
   2bda8:	50002a1e 	bne	r10,zero,2be54 <__subdf3+0x12c>
   2bdac:	1988b03a 	or	r4,r3,r6
   2bdb0:	2000941e 	bne	r4,zero,2c004 <__subdf3+0x2dc>
   2bdb4:	888001cc 	andi	r2,r17,7
   2bdb8:	10005b26 	beq	r2,zero,2bf28 <__subdf3+0x200>
   2bdbc:	88c003cc 	andi	r3,r17,15
   2bdc0:	00800104 	movi	r2,4
   2bdc4:	18805826 	beq	r3,r2,2bf28 <__subdf3+0x200>
   2bdc8:	88c00104 	addi	r3,r17,4
   2bdcc:	1c63803a 	cmpltu	r17,r3,r17
   2bdd0:	2c4b883a 	add	r5,r5,r17
   2bdd4:	2880202c 	andhi	r2,r5,128
   2bdd8:	9200004c 	andi	r8,r18,1
   2bddc:	1823883a 	mov	r17,r3
   2bde0:	10005426 	beq	r2,zero,2bf34 <__subdf3+0x20c>
   2bde4:	84000044 	addi	r16,r16,1
   2bde8:	0081ffc4 	movi	r2,2047
   2bdec:	8080bf26 	beq	r16,r2,2c0ec <__subdf3+0x3c4>
   2bdf0:	013fe034 	movhi	r4,65408
   2bdf4:	213fffc4 	addi	r4,r4,-1
   2bdf8:	290a703a 	and	r5,r5,r4
   2bdfc:	2804977a 	slli	r2,r5,29
   2be00:	280a927a 	slli	r5,r5,9
   2be04:	8822d0fa 	srli	r17,r17,3
   2be08:	8401ffcc 	andi	r16,r16,2047
   2be0c:	2808d33a 	srli	r4,r5,12
   2be10:	1444b03a 	or	r2,r2,r17
   2be14:	8401ffcc 	andi	r16,r16,2047
   2be18:	800a953a 	slli	r5,r16,20
   2be1c:	40c03fcc 	andi	r3,r8,255
   2be20:	04000434 	movhi	r16,16
   2be24:	180697fa 	slli	r3,r3,31
   2be28:	843fffc4 	addi	r16,r16,-1
   2be2c:	2420703a 	and	r16,r4,r16
   2be30:	8160b03a 	or	r16,r16,r5
   2be34:	80c6b03a 	or	r3,r16,r3
   2be38:	dfc00417 	ldw	ra,16(sp)
   2be3c:	dcc00317 	ldw	r19,12(sp)
   2be40:	dc800217 	ldw	r18,8(sp)
   2be44:	dc400117 	ldw	r17,4(sp)
   2be48:	dc000017 	ldw	r16,0(sp)
   2be4c:	dec00504 	addi	sp,sp,20
   2be50:	f800283a 	ret
   2be54:	0101ffc4 	movi	r4,2047
   2be58:	813fd626 	beq	r16,r4,2bdb4 <_gp+0xffff19e8>
   2be5c:	18c02034 	orhi	r3,r3,128
   2be60:	01000e04 	movi	r4,56
   2be64:	2080a416 	blt	r4,r2,2c0f8 <__subdf3+0x3d0>
   2be68:	010007c4 	movi	r4,31
   2be6c:	2080c716 	blt	r4,r2,2c18c <__subdf3+0x464>
   2be70:	01000804 	movi	r4,32
   2be74:	2089c83a 	sub	r4,r4,r2
   2be78:	1910983a 	sll	r8,r3,r4
   2be7c:	308ed83a 	srl	r7,r6,r2
   2be80:	3108983a 	sll	r4,r6,r4
   2be84:	1884d83a 	srl	r2,r3,r2
   2be88:	41ccb03a 	or	r6,r8,r7
   2be8c:	2008c03a 	cmpne	r4,r4,zero
   2be90:	310cb03a 	or	r6,r6,r4
   2be94:	898dc83a 	sub	r6,r17,r6
   2be98:	89a3803a 	cmpltu	r17,r17,r6
   2be9c:	288bc83a 	sub	r5,r5,r2
   2bea0:	2c4bc83a 	sub	r5,r5,r17
   2bea4:	3023883a 	mov	r17,r6
   2bea8:	2880202c 	andhi	r2,r5,128
   2beac:	10006b26 	beq	r2,zero,2c05c <__subdf3+0x334>
   2beb0:	04c02034 	movhi	r19,128
   2beb4:	9cffffc4 	addi	r19,r19,-1
   2beb8:	2ce6703a 	and	r19,r5,r19
   2bebc:	98007c26 	beq	r19,zero,2c0b0 <__subdf3+0x388>
   2bec0:	9809883a 	mov	r4,r19
   2bec4:	002c7f40 	call	2c7f4 <__clzsi2>
   2bec8:	10fffe04 	addi	r3,r2,-8
   2becc:	010007c4 	movi	r4,31
   2bed0:	20c07d16 	blt	r4,r3,2c0c8 <__subdf3+0x3a0>
   2bed4:	01400a04 	movi	r5,40
   2bed8:	2885c83a 	sub	r2,r5,r2
   2bedc:	888ad83a 	srl	r5,r17,r2
   2bee0:	98e6983a 	sll	r19,r19,r3
   2bee4:	88e2983a 	sll	r17,r17,r3
   2bee8:	2ce6b03a 	or	r19,r5,r19
   2beec:	1c007a16 	blt	r3,r16,2c0d8 <__subdf3+0x3b0>
   2bef0:	1c21c83a 	sub	r16,r3,r16
   2bef4:	81400044 	addi	r5,r16,1
   2bef8:	00c007c4 	movi	r3,31
   2befc:	19409616 	blt	r3,r5,2c158 <__subdf3+0x430>
   2bf00:	1c21c83a 	sub	r16,r3,r16
   2bf04:	8c08983a 	sll	r4,r17,r16
   2bf08:	8946d83a 	srl	r3,r17,r5
   2bf0c:	9c20983a 	sll	r16,r19,r16
   2bf10:	2008c03a 	cmpne	r4,r4,zero
   2bf14:	994ad83a 	srl	r5,r19,r5
   2bf18:	1c06b03a 	or	r3,r3,r16
   2bf1c:	1922b03a 	or	r17,r3,r4
   2bf20:	0021883a 	mov	r16,zero
   2bf24:	003fa306 	br	2bdb4 <_gp+0xffff19e8>
   2bf28:	2880202c 	andhi	r2,r5,128
   2bf2c:	9200004c 	andi	r8,r18,1
   2bf30:	103fac1e 	bne	r2,zero,2bde4 <_gp+0xffff1a18>
   2bf34:	2804977a 	slli	r2,r5,29
   2bf38:	8822d0fa 	srli	r17,r17,3
   2bf3c:	00c1ffc4 	movi	r3,2047
   2bf40:	280ad0fa 	srli	r5,r5,3
   2bf44:	1444b03a 	or	r2,r2,r17
   2bf48:	80c02726 	beq	r16,r3,2bfe8 <__subdf3+0x2c0>
   2bf4c:	01000434 	movhi	r4,16
   2bf50:	213fffc4 	addi	r4,r4,-1
   2bf54:	80e0703a 	and	r16,r16,r3
   2bf58:	2908703a 	and	r4,r5,r4
   2bf5c:	003fad06 	br	2be14 <_gp+0xffff1a48>
   2bf60:	0080690e 	bge	zero,r2,2c108 <__subdf3+0x3e0>
   2bf64:	50002f26 	beq	r10,zero,2c024 <__subdf3+0x2fc>
   2bf68:	0101ffc4 	movi	r4,2047
   2bf6c:	813f9126 	beq	r16,r4,2bdb4 <_gp+0xffff19e8>
   2bf70:	18c02034 	orhi	r3,r3,128
   2bf74:	01000e04 	movi	r4,56
   2bf78:	2080b00e 	bge	r4,r2,2c23c <__subdf3+0x514>
   2bf7c:	198cb03a 	or	r6,r3,r6
   2bf80:	300ec03a 	cmpne	r7,r6,zero
   2bf84:	0005883a 	mov	r2,zero
   2bf88:	3c4f883a 	add	r7,r7,r17
   2bf8c:	3c63803a 	cmpltu	r17,r7,r17
   2bf90:	114b883a 	add	r5,r2,r5
   2bf94:	2c4b883a 	add	r5,r5,r17
   2bf98:	3823883a 	mov	r17,r7
   2bf9c:	2880202c 	andhi	r2,r5,128
   2bfa0:	10002e26 	beq	r2,zero,2c05c <__subdf3+0x334>
   2bfa4:	84000044 	addi	r16,r16,1
   2bfa8:	0081ffc4 	movi	r2,2047
   2bfac:	8080de26 	beq	r16,r2,2c328 <__subdf3+0x600>
   2bfb0:	00bfe034 	movhi	r2,65408
   2bfb4:	10bfffc4 	addi	r2,r2,-1
   2bfb8:	288a703a 	and	r5,r5,r2
   2bfbc:	880cd07a 	srli	r6,r17,1
   2bfc0:	280897fa 	slli	r4,r5,31
   2bfc4:	88c0004c 	andi	r3,r17,1
   2bfc8:	30e2b03a 	or	r17,r6,r3
   2bfcc:	280ad07a 	srli	r5,r5,1
   2bfd0:	8922b03a 	or	r17,r17,r4
   2bfd4:	003f7706 	br	2bdb4 <_gp+0xffff19e8>
   2bfd8:	1984b03a 	or	r2,r3,r6
   2bfdc:	103f6e26 	beq	r2,zero,2bd98 <_gp+0xffff19cc>
   2bfe0:	39c03fcc 	andi	r7,r7,255
   2bfe4:	003f6d06 	br	2bd9c <_gp+0xffff19d0>
   2bfe8:	1146b03a 	or	r3,r2,r5
   2bfec:	18003f26 	beq	r3,zero,2c0ec <__subdf3+0x3c4>
   2bff0:	00c00434 	movhi	r3,16
   2bff4:	29000234 	orhi	r4,r5,8
   2bff8:	18ffffc4 	addi	r3,r3,-1
   2bffc:	20c8703a 	and	r4,r4,r3
   2c000:	003f8406 	br	2be14 <_gp+0xffff1a48>
   2c004:	10bfffc4 	addi	r2,r2,-1
   2c008:	1000501e 	bne	r2,zero,2c14c <__subdf3+0x424>
   2c00c:	898fc83a 	sub	r7,r17,r6
   2c010:	89e3803a 	cmpltu	r17,r17,r7
   2c014:	28cbc83a 	sub	r5,r5,r3
   2c018:	2c4bc83a 	sub	r5,r5,r17
   2c01c:	3823883a 	mov	r17,r7
   2c020:	003fa106 	br	2bea8 <_gp+0xffff1adc>
   2c024:	1988b03a 	or	r4,r3,r6
   2c028:	203f6226 	beq	r4,zero,2bdb4 <_gp+0xffff19e8>
   2c02c:	10bfffc4 	addi	r2,r2,-1
   2c030:	10009b1e 	bne	r2,zero,2c2a0 <__subdf3+0x578>
   2c034:	344d883a 	add	r6,r6,r17
   2c038:	3463803a 	cmpltu	r17,r6,r17
   2c03c:	194b883a 	add	r5,r3,r5
   2c040:	2c4b883a 	add	r5,r5,r17
   2c044:	3023883a 	mov	r17,r6
   2c048:	003fd406 	br	2bf9c <_gp+0xffff1bd0>
   2c04c:	1106b03a 	or	r3,r2,r4
   2c050:	1800b426 	beq	r3,zero,2c324 <__subdf3+0x5fc>
   2c054:	100b883a 	mov	r5,r2
   2c058:	2023883a 	mov	r17,r4
   2c05c:	888001cc 	andi	r2,r17,7
   2c060:	103f561e 	bne	r2,zero,2bdbc <_gp+0xffff19f0>
   2c064:	9200004c 	andi	r8,r18,1
   2c068:	003fb206 	br	2bf34 <_gp+0xffff1b68>
   2c06c:	1000531e 	bne	r2,zero,2c1bc <__subdf3+0x494>
   2c070:	80800044 	addi	r2,r16,1
   2c074:	1081ffcc 	andi	r2,r2,2047
   2c078:	01000044 	movi	r4,1
   2c07c:	2080a00e 	bge	r4,r2,2c300 <__subdf3+0x5d8>
   2c080:	8985c83a 	sub	r2,r17,r6
   2c084:	8889803a 	cmpltu	r4,r17,r2
   2c088:	28e7c83a 	sub	r19,r5,r3
   2c08c:	9927c83a 	sub	r19,r19,r4
   2c090:	9900202c 	andhi	r4,r19,128
   2c094:	20006226 	beq	r4,zero,2c220 <__subdf3+0x4f8>
   2c098:	3463c83a 	sub	r17,r6,r17
   2c09c:	194bc83a 	sub	r5,r3,r5
   2c0a0:	344d803a 	cmpltu	r6,r6,r17
   2c0a4:	29a7c83a 	sub	r19,r5,r6
   2c0a8:	3825883a 	mov	r18,r7
   2c0ac:	983f841e 	bne	r19,zero,2bec0 <_gp+0xffff1af4>
   2c0b0:	8809883a 	mov	r4,r17
   2c0b4:	002c7f40 	call	2c7f4 <__clzsi2>
   2c0b8:	10800804 	addi	r2,r2,32
   2c0bc:	10fffe04 	addi	r3,r2,-8
   2c0c0:	010007c4 	movi	r4,31
   2c0c4:	20ff830e 	bge	r4,r3,2bed4 <_gp+0xffff1b08>
   2c0c8:	14fff604 	addi	r19,r2,-40
   2c0cc:	8ce6983a 	sll	r19,r17,r19
   2c0d0:	0023883a 	mov	r17,zero
   2c0d4:	1c3f860e 	bge	r3,r16,2bef0 <_gp+0xffff1b24>
   2c0d8:	017fe034 	movhi	r5,65408
   2c0dc:	297fffc4 	addi	r5,r5,-1
   2c0e0:	80e1c83a 	sub	r16,r16,r3
   2c0e4:	994a703a 	and	r5,r19,r5
   2c0e8:	003f3206 	br	2bdb4 <_gp+0xffff19e8>
   2c0ec:	0009883a 	mov	r4,zero
   2c0f0:	0005883a 	mov	r2,zero
   2c0f4:	003f4706 	br	2be14 <_gp+0xffff1a48>
   2c0f8:	198cb03a 	or	r6,r3,r6
   2c0fc:	300cc03a 	cmpne	r6,r6,zero
   2c100:	0005883a 	mov	r2,zero
   2c104:	003f6306 	br	2be94 <_gp+0xffff1ac8>
   2c108:	10009d1e 	bne	r2,zero,2c380 <__subdf3+0x658>
   2c10c:	81c00044 	addi	r7,r16,1
   2c110:	3881ffcc 	andi	r2,r7,2047
   2c114:	02400044 	movi	r9,1
   2c118:	4880680e 	bge	r9,r2,2c2bc <__subdf3+0x594>
   2c11c:	0081ffc4 	movi	r2,2047
   2c120:	3880ae26 	beq	r7,r2,2c3dc <__subdf3+0x6b4>
   2c124:	344d883a 	add	r6,r6,r17
   2c128:	3463803a 	cmpltu	r17,r6,r17
   2c12c:	194b883a 	add	r5,r3,r5
   2c130:	2c4b883a 	add	r5,r5,r17
   2c134:	282297fa 	slli	r17,r5,31
   2c138:	300cd07a 	srli	r6,r6,1
   2c13c:	280ad07a 	srli	r5,r5,1
   2c140:	3821883a 	mov	r16,r7
   2c144:	89a2b03a 	or	r17,r17,r6
   2c148:	003f1a06 	br	2bdb4 <_gp+0xffff19e8>
   2c14c:	0101ffc4 	movi	r4,2047
   2c150:	813f431e 	bne	r16,r4,2be60 <_gp+0xffff1a94>
   2c154:	003f1706 	br	2bdb4 <_gp+0xffff19e8>
   2c158:	80bff844 	addi	r2,r16,-31
   2c15c:	00c00804 	movi	r3,32
   2c160:	9884d83a 	srl	r2,r19,r2
   2c164:	28c05126 	beq	r5,r3,2c2ac <__subdf3+0x584>
   2c168:	00c00fc4 	movi	r3,63
   2c16c:	1c21c83a 	sub	r16,r3,r16
   2c170:	9c26983a 	sll	r19,r19,r16
   2c174:	9c62b03a 	or	r17,r19,r17
   2c178:	8822c03a 	cmpne	r17,r17,zero
   2c17c:	88a2b03a 	or	r17,r17,r2
   2c180:	000b883a 	mov	r5,zero
   2c184:	0021883a 	mov	r16,zero
   2c188:	003fb406 	br	2c05c <_gp+0xffff1c90>
   2c18c:	113ff804 	addi	r4,r2,-32
   2c190:	01c00804 	movi	r7,32
   2c194:	1908d83a 	srl	r4,r3,r4
   2c198:	11c04626 	beq	r2,r7,2c2b4 <__subdf3+0x58c>
   2c19c:	01c01004 	movi	r7,64
   2c1a0:	3885c83a 	sub	r2,r7,r2
   2c1a4:	1884983a 	sll	r2,r3,r2
   2c1a8:	118cb03a 	or	r6,r2,r6
   2c1ac:	300cc03a 	cmpne	r6,r6,zero
   2c1b0:	310cb03a 	or	r6,r6,r4
   2c1b4:	0005883a 	mov	r2,zero
   2c1b8:	003f3606 	br	2be94 <_gp+0xffff1ac8>
   2c1bc:	80002b26 	beq	r16,zero,2c26c <__subdf3+0x544>
   2c1c0:	0101ffc4 	movi	r4,2047
   2c1c4:	51006926 	beq	r10,r4,2c36c <__subdf3+0x644>
   2c1c8:	0085c83a 	sub	r2,zero,r2
   2c1cc:	29402034 	orhi	r5,r5,128
   2c1d0:	01000e04 	movi	r4,56
   2c1d4:	20807d16 	blt	r4,r2,2c3cc <__subdf3+0x6a4>
   2c1d8:	010007c4 	movi	r4,31
   2c1dc:	2080d916 	blt	r4,r2,2c544 <__subdf3+0x81c>
   2c1e0:	01000804 	movi	r4,32
   2c1e4:	2089c83a 	sub	r4,r4,r2
   2c1e8:	2912983a 	sll	r9,r5,r4
   2c1ec:	8890d83a 	srl	r8,r17,r2
   2c1f0:	8908983a 	sll	r4,r17,r4
   2c1f4:	2884d83a 	srl	r2,r5,r2
   2c1f8:	4a22b03a 	or	r17,r9,r8
   2c1fc:	2008c03a 	cmpne	r4,r4,zero
   2c200:	8922b03a 	or	r17,r17,r4
   2c204:	3463c83a 	sub	r17,r6,r17
   2c208:	1885c83a 	sub	r2,r3,r2
   2c20c:	344d803a 	cmpltu	r6,r6,r17
   2c210:	118bc83a 	sub	r5,r2,r6
   2c214:	5021883a 	mov	r16,r10
   2c218:	3825883a 	mov	r18,r7
   2c21c:	003f2206 	br	2bea8 <_gp+0xffff1adc>
   2c220:	9886b03a 	or	r3,r19,r2
   2c224:	18001c1e 	bne	r3,zero,2c298 <__subdf3+0x570>
   2c228:	0011883a 	mov	r8,zero
   2c22c:	000b883a 	mov	r5,zero
   2c230:	0023883a 	mov	r17,zero
   2c234:	0021883a 	mov	r16,zero
   2c238:	003f3e06 	br	2bf34 <_gp+0xffff1b68>
   2c23c:	010007c4 	movi	r4,31
   2c240:	20803c16 	blt	r4,r2,2c334 <__subdf3+0x60c>
   2c244:	01000804 	movi	r4,32
   2c248:	2089c83a 	sub	r4,r4,r2
   2c24c:	1912983a 	sll	r9,r3,r4
   2c250:	308ed83a 	srl	r7,r6,r2
   2c254:	3108983a 	sll	r4,r6,r4
   2c258:	1884d83a 	srl	r2,r3,r2
   2c25c:	49ceb03a 	or	r7,r9,r7
   2c260:	2008c03a 	cmpne	r4,r4,zero
   2c264:	390eb03a 	or	r7,r7,r4
   2c268:	003f4706 	br	2bf88 <_gp+0xffff1bbc>
   2c26c:	2c48b03a 	or	r4,r5,r17
   2c270:	20003e26 	beq	r4,zero,2c36c <__subdf3+0x644>
   2c274:	0084303a 	nor	r2,zero,r2
   2c278:	10003a1e 	bne	r2,zero,2c364 <__subdf3+0x63c>
   2c27c:	3463c83a 	sub	r17,r6,r17
   2c280:	194bc83a 	sub	r5,r3,r5
   2c284:	344d803a 	cmpltu	r6,r6,r17
   2c288:	298bc83a 	sub	r5,r5,r6
   2c28c:	5021883a 	mov	r16,r10
   2c290:	3825883a 	mov	r18,r7
   2c294:	003f0406 	br	2bea8 <_gp+0xffff1adc>
   2c298:	1023883a 	mov	r17,r2
   2c29c:	003f0706 	br	2bebc <_gp+0xffff1af0>
   2c2a0:	0101ffc4 	movi	r4,2047
   2c2a4:	813f331e 	bne	r16,r4,2bf74 <_gp+0xffff1ba8>
   2c2a8:	003ec206 	br	2bdb4 <_gp+0xffff19e8>
   2c2ac:	0027883a 	mov	r19,zero
   2c2b0:	003fb006 	br	2c174 <_gp+0xffff1da8>
   2c2b4:	0005883a 	mov	r2,zero
   2c2b8:	003fbb06 	br	2c1a8 <_gp+0xffff1ddc>
   2c2bc:	2c44b03a 	or	r2,r5,r17
   2c2c0:	80008b1e 	bne	r16,zero,2c4f0 <__subdf3+0x7c8>
   2c2c4:	1000b526 	beq	r2,zero,2c59c <__subdf3+0x874>
   2c2c8:	1984b03a 	or	r2,r3,r6
   2c2cc:	103eb926 	beq	r2,zero,2bdb4 <_gp+0xffff19e8>
   2c2d0:	3449883a 	add	r4,r6,r17
   2c2d4:	2463803a 	cmpltu	r17,r4,r17
   2c2d8:	194b883a 	add	r5,r3,r5
   2c2dc:	2c4b883a 	add	r5,r5,r17
   2c2e0:	2880202c 	andhi	r2,r5,128
   2c2e4:	2023883a 	mov	r17,r4
   2c2e8:	103f5c26 	beq	r2,zero,2c05c <_gp+0xffff1c90>
   2c2ec:	00bfe034 	movhi	r2,65408
   2c2f0:	10bfffc4 	addi	r2,r2,-1
   2c2f4:	4821883a 	mov	r16,r9
   2c2f8:	288a703a 	and	r5,r5,r2
   2c2fc:	003ead06 	br	2bdb4 <_gp+0xffff19e8>
   2c300:	2c44b03a 	or	r2,r5,r17
   2c304:	8000291e 	bne	r16,zero,2c3ac <__subdf3+0x684>
   2c308:	10004f1e 	bne	r2,zero,2c448 <__subdf3+0x720>
   2c30c:	1984b03a 	or	r2,r3,r6
   2c310:	10000426 	beq	r2,zero,2c324 <__subdf3+0x5fc>
   2c314:	180b883a 	mov	r5,r3
   2c318:	3023883a 	mov	r17,r6
   2c31c:	3825883a 	mov	r18,r7
   2c320:	003ea406 	br	2bdb4 <_gp+0xffff19e8>
   2c324:	0011883a 	mov	r8,zero
   2c328:	000b883a 	mov	r5,zero
   2c32c:	0023883a 	mov	r17,zero
   2c330:	003f0006 	br	2bf34 <_gp+0xffff1b68>
   2c334:	11fff804 	addi	r7,r2,-32
   2c338:	19c8d83a 	srl	r4,r3,r7
   2c33c:	01c00804 	movi	r7,32
   2c340:	11c07e26 	beq	r2,r7,2c53c <__subdf3+0x814>
   2c344:	01c01004 	movi	r7,64
   2c348:	3885c83a 	sub	r2,r7,r2
   2c34c:	1884983a 	sll	r2,r3,r2
   2c350:	118cb03a 	or	r6,r2,r6
   2c354:	300ec03a 	cmpne	r7,r6,zero
   2c358:	390eb03a 	or	r7,r7,r4
   2c35c:	0005883a 	mov	r2,zero
   2c360:	003f0906 	br	2bf88 <_gp+0xffff1bbc>
   2c364:	0101ffc4 	movi	r4,2047
   2c368:	513f991e 	bne	r10,r4,2c1d0 <_gp+0xffff1e04>
   2c36c:	180b883a 	mov	r5,r3
   2c370:	3023883a 	mov	r17,r6
   2c374:	5021883a 	mov	r16,r10
   2c378:	3825883a 	mov	r18,r7
   2c37c:	003e8d06 	br	2bdb4 <_gp+0xffff19e8>
   2c380:	80001a1e 	bne	r16,zero,2c3ec <__subdf3+0x6c4>
   2c384:	2c48b03a 	or	r4,r5,r17
   2c388:	20005526 	beq	r4,zero,2c4e0 <__subdf3+0x7b8>
   2c38c:	0084303a 	nor	r2,zero,r2
   2c390:	1000511e 	bne	r2,zero,2c4d8 <__subdf3+0x7b0>
   2c394:	89a3883a 	add	r17,r17,r6
   2c398:	194b883a 	add	r5,r3,r5
   2c39c:	898d803a 	cmpltu	r6,r17,r6
   2c3a0:	298b883a 	add	r5,r5,r6
   2c3a4:	5021883a 	mov	r16,r10
   2c3a8:	003efc06 	br	2bf9c <_gp+0xffff1bd0>
   2c3ac:	1000341e 	bne	r2,zero,2c480 <__subdf3+0x758>
   2c3b0:	1984b03a 	or	r2,r3,r6
   2c3b4:	10006f26 	beq	r2,zero,2c574 <__subdf3+0x84c>
   2c3b8:	180b883a 	mov	r5,r3
   2c3bc:	3023883a 	mov	r17,r6
   2c3c0:	3825883a 	mov	r18,r7
   2c3c4:	0401ffc4 	movi	r16,2047
   2c3c8:	003e7a06 	br	2bdb4 <_gp+0xffff19e8>
   2c3cc:	2c62b03a 	or	r17,r5,r17
   2c3d0:	8822c03a 	cmpne	r17,r17,zero
   2c3d4:	0005883a 	mov	r2,zero
   2c3d8:	003f8a06 	br	2c204 <_gp+0xffff1e38>
   2c3dc:	3821883a 	mov	r16,r7
   2c3e0:	000b883a 	mov	r5,zero
   2c3e4:	0023883a 	mov	r17,zero
   2c3e8:	003ed206 	br	2bf34 <_gp+0xffff1b68>
   2c3ec:	0101ffc4 	movi	r4,2047
   2c3f0:	51003b26 	beq	r10,r4,2c4e0 <__subdf3+0x7b8>
   2c3f4:	0085c83a 	sub	r2,zero,r2
   2c3f8:	29402034 	orhi	r5,r5,128
   2c3fc:	01000e04 	movi	r4,56
   2c400:	20806216 	blt	r4,r2,2c58c <__subdf3+0x864>
   2c404:	010007c4 	movi	r4,31
   2c408:	20806b16 	blt	r4,r2,2c5b8 <__subdf3+0x890>
   2c40c:	01000804 	movi	r4,32
   2c410:	2089c83a 	sub	r4,r4,r2
   2c414:	2912983a 	sll	r9,r5,r4
   2c418:	888ed83a 	srl	r7,r17,r2
   2c41c:	8908983a 	sll	r4,r17,r4
   2c420:	2884d83a 	srl	r2,r5,r2
   2c424:	49e2b03a 	or	r17,r9,r7
   2c428:	2008c03a 	cmpne	r4,r4,zero
   2c42c:	8922b03a 	or	r17,r17,r4
   2c430:	89a3883a 	add	r17,r17,r6
   2c434:	10c5883a 	add	r2,r2,r3
   2c438:	898d803a 	cmpltu	r6,r17,r6
   2c43c:	118b883a 	add	r5,r2,r6
   2c440:	5021883a 	mov	r16,r10
   2c444:	003ed506 	br	2bf9c <_gp+0xffff1bd0>
   2c448:	1984b03a 	or	r2,r3,r6
   2c44c:	103e5926 	beq	r2,zero,2bdb4 <_gp+0xffff19e8>
   2c450:	8989c83a 	sub	r4,r17,r6
   2c454:	8911803a 	cmpltu	r8,r17,r4
   2c458:	28c5c83a 	sub	r2,r5,r3
   2c45c:	1205c83a 	sub	r2,r2,r8
   2c460:	1200202c 	andhi	r8,r2,128
   2c464:	403ef926 	beq	r8,zero,2c04c <_gp+0xffff1c80>
   2c468:	3463c83a 	sub	r17,r6,r17
   2c46c:	194bc83a 	sub	r5,r3,r5
   2c470:	344d803a 	cmpltu	r6,r6,r17
   2c474:	298bc83a 	sub	r5,r5,r6
   2c478:	3825883a 	mov	r18,r7
   2c47c:	003e4d06 	br	2bdb4 <_gp+0xffff19e8>
   2c480:	1984b03a 	or	r2,r3,r6
   2c484:	10002b26 	beq	r2,zero,2c534 <__subdf3+0x80c>
   2c488:	2808d0fa 	srli	r4,r5,3
   2c48c:	8822d0fa 	srli	r17,r17,3
   2c490:	280a977a 	slli	r5,r5,29
   2c494:	2080022c 	andhi	r2,r4,8
   2c498:	2c62b03a 	or	r17,r5,r17
   2c49c:	10000826 	beq	r2,zero,2c4c0 <__subdf3+0x798>
   2c4a0:	1810d0fa 	srli	r8,r3,3
   2c4a4:	4080022c 	andhi	r2,r8,8
   2c4a8:	1000051e 	bne	r2,zero,2c4c0 <__subdf3+0x798>
   2c4ac:	300cd0fa 	srli	r6,r6,3
   2c4b0:	1804977a 	slli	r2,r3,29
   2c4b4:	4009883a 	mov	r4,r8
   2c4b8:	3825883a 	mov	r18,r7
   2c4bc:	11a2b03a 	or	r17,r2,r6
   2c4c0:	880ad77a 	srli	r5,r17,29
   2c4c4:	200890fa 	slli	r4,r4,3
   2c4c8:	882290fa 	slli	r17,r17,3
   2c4cc:	0401ffc4 	movi	r16,2047
   2c4d0:	290ab03a 	or	r5,r5,r4
   2c4d4:	003e3706 	br	2bdb4 <_gp+0xffff19e8>
   2c4d8:	0101ffc4 	movi	r4,2047
   2c4dc:	513fc71e 	bne	r10,r4,2c3fc <_gp+0xffff2030>
   2c4e0:	180b883a 	mov	r5,r3
   2c4e4:	3023883a 	mov	r17,r6
   2c4e8:	5021883a 	mov	r16,r10
   2c4ec:	003e3106 	br	2bdb4 <_gp+0xffff19e8>
   2c4f0:	10002d26 	beq	r2,zero,2c5a8 <__subdf3+0x880>
   2c4f4:	1984b03a 	or	r2,r3,r6
   2c4f8:	10000e26 	beq	r2,zero,2c534 <__subdf3+0x80c>
   2c4fc:	2808d0fa 	srli	r4,r5,3
   2c500:	8822d0fa 	srli	r17,r17,3
   2c504:	280a977a 	slli	r5,r5,29
   2c508:	2080022c 	andhi	r2,r4,8
   2c50c:	2c62b03a 	or	r17,r5,r17
   2c510:	103feb26 	beq	r2,zero,2c4c0 <_gp+0xffff20f4>
   2c514:	180ed0fa 	srli	r7,r3,3
   2c518:	3880022c 	andhi	r2,r7,8
   2c51c:	103fe81e 	bne	r2,zero,2c4c0 <_gp+0xffff20f4>
   2c520:	300cd0fa 	srli	r6,r6,3
   2c524:	1804977a 	slli	r2,r3,29
   2c528:	3809883a 	mov	r4,r7
   2c52c:	11a2b03a 	or	r17,r2,r6
   2c530:	003fe306 	br	2c4c0 <_gp+0xffff20f4>
   2c534:	0401ffc4 	movi	r16,2047
   2c538:	003e1e06 	br	2bdb4 <_gp+0xffff19e8>
   2c53c:	0005883a 	mov	r2,zero
   2c540:	003f8306 	br	2c350 <_gp+0xffff1f84>
   2c544:	113ff804 	addi	r4,r2,-32
   2c548:	02000804 	movi	r8,32
   2c54c:	2908d83a 	srl	r4,r5,r4
   2c550:	12002526 	beq	r2,r8,2c5e8 <__subdf3+0x8c0>
   2c554:	02001004 	movi	r8,64
   2c558:	4085c83a 	sub	r2,r8,r2
   2c55c:	288a983a 	sll	r5,r5,r2
   2c560:	2c62b03a 	or	r17,r5,r17
   2c564:	8822c03a 	cmpne	r17,r17,zero
   2c568:	8922b03a 	or	r17,r17,r4
   2c56c:	0005883a 	mov	r2,zero
   2c570:	003f2406 	br	2c204 <_gp+0xffff1e38>
   2c574:	01402034 	movhi	r5,128
   2c578:	0011883a 	mov	r8,zero
   2c57c:	297fffc4 	addi	r5,r5,-1
   2c580:	047ffe04 	movi	r17,-8
   2c584:	0401ffc4 	movi	r16,2047
   2c588:	003e6a06 	br	2bf34 <_gp+0xffff1b68>
   2c58c:	2c62b03a 	or	r17,r5,r17
   2c590:	8822c03a 	cmpne	r17,r17,zero
   2c594:	0005883a 	mov	r2,zero
   2c598:	003fa506 	br	2c430 <_gp+0xffff2064>
   2c59c:	180b883a 	mov	r5,r3
   2c5a0:	3023883a 	mov	r17,r6
   2c5a4:	003e0306 	br	2bdb4 <_gp+0xffff19e8>
   2c5a8:	180b883a 	mov	r5,r3
   2c5ac:	3023883a 	mov	r17,r6
   2c5b0:	0401ffc4 	movi	r16,2047
   2c5b4:	003dff06 	br	2bdb4 <_gp+0xffff19e8>
   2c5b8:	113ff804 	addi	r4,r2,-32
   2c5bc:	01c00804 	movi	r7,32
   2c5c0:	2908d83a 	srl	r4,r5,r4
   2c5c4:	11c00a26 	beq	r2,r7,2c5f0 <__subdf3+0x8c8>
   2c5c8:	01c01004 	movi	r7,64
   2c5cc:	3885c83a 	sub	r2,r7,r2
   2c5d0:	288a983a 	sll	r5,r5,r2
   2c5d4:	2c62b03a 	or	r17,r5,r17
   2c5d8:	8822c03a 	cmpne	r17,r17,zero
   2c5dc:	8922b03a 	or	r17,r17,r4
   2c5e0:	0005883a 	mov	r2,zero
   2c5e4:	003f9206 	br	2c430 <_gp+0xffff2064>
   2c5e8:	000b883a 	mov	r5,zero
   2c5ec:	003fdc06 	br	2c560 <_gp+0xffff2194>
   2c5f0:	000b883a 	mov	r5,zero
   2c5f4:	003ff706 	br	2c5d4 <_gp+0xffff2208>

0002c5f8 <__fixdfsi>:
   2c5f8:	2806d53a 	srli	r3,r5,20
   2c5fc:	00800434 	movhi	r2,16
   2c600:	10bfffc4 	addi	r2,r2,-1
   2c604:	18c1ffcc 	andi	r3,r3,2047
   2c608:	0180ff84 	movi	r6,1022
   2c60c:	2884703a 	and	r2,r5,r2
   2c610:	280ad7fa 	srli	r5,r5,31
   2c614:	30c0130e 	bge	r6,r3,2c664 <__fixdfsi+0x6c>
   2c618:	01810744 	movi	r6,1053
   2c61c:	30c00d16 	blt	r6,r3,2c654 <__fixdfsi+0x5c>
   2c620:	01810cc4 	movi	r6,1075
   2c624:	30cdc83a 	sub	r6,r6,r3
   2c628:	01c007c4 	movi	r7,31
   2c62c:	10800434 	orhi	r2,r2,16
   2c630:	39800e0e 	bge	r7,r6,2c66c <__fixdfsi+0x74>
   2c634:	010104c4 	movi	r4,1043
   2c638:	20c7c83a 	sub	r3,r4,r3
   2c63c:	10c6d83a 	srl	r3,r2,r3
   2c640:	29403fcc 	andi	r5,r5,255
   2c644:	0145c83a 	sub	r2,zero,r5
   2c648:	1884f03a 	xor	r2,r3,r2
   2c64c:	1145883a 	add	r2,r2,r5
   2c650:	f800283a 	ret
   2c654:	00a00034 	movhi	r2,32768
   2c658:	10bfffc4 	addi	r2,r2,-1
   2c65c:	2885883a 	add	r2,r5,r2
   2c660:	f800283a 	ret
   2c664:	0005883a 	mov	r2,zero
   2c668:	f800283a 	ret
   2c66c:	18fefb44 	addi	r3,r3,-1043
   2c670:	2188d83a 	srl	r4,r4,r6
   2c674:	10c6983a 	sll	r3,r2,r3
   2c678:	20c6b03a 	or	r3,r4,r3
   2c67c:	003ff006 	br	2c640 <_gp+0xffff2274>

0002c680 <__floatsidf>:
   2c680:	defffd04 	addi	sp,sp,-12
   2c684:	dc400115 	stw	r17,4(sp)
   2c688:	dfc00215 	stw	ra,8(sp)
   2c68c:	dc000015 	stw	r16,0(sp)
   2c690:	2023883a 	mov	r17,r4
   2c694:	20001426 	beq	r4,zero,2c6e8 <__floatsidf+0x68>
   2c698:	2020d7fa 	srli	r16,r4,31
   2c69c:	80000126 	beq	r16,zero,2c6a4 <__floatsidf+0x24>
   2c6a0:	0123c83a 	sub	r17,zero,r4
   2c6a4:	8809883a 	mov	r4,r17
   2c6a8:	002c7f40 	call	2c7f4 <__clzsi2>
   2c6ac:	01410784 	movi	r5,1054
   2c6b0:	00c00284 	movi	r3,10
   2c6b4:	288bc83a 	sub	r5,r5,r2
   2c6b8:	18801c16 	blt	r3,r2,2c72c <__floatsidf+0xac>
   2c6bc:	00c002c4 	movi	r3,11
   2c6c0:	1887c83a 	sub	r3,r3,r2
   2c6c4:	88c8d83a 	srl	r4,r17,r3
   2c6c8:	00c00434 	movhi	r3,16
   2c6cc:	18ffffc4 	addi	r3,r3,-1
   2c6d0:	10800544 	addi	r2,r2,21
   2c6d4:	20c8703a 	and	r4,r4,r3
   2c6d8:	8884983a 	sll	r2,r17,r2
   2c6dc:	28c1ffcc 	andi	r3,r5,2047
   2c6e0:	800d883a 	mov	r6,r16
   2c6e4:	00000406 	br	2c6f8 <__floatsidf+0x78>
   2c6e8:	000d883a 	mov	r6,zero
   2c6ec:	0007883a 	mov	r3,zero
   2c6f0:	0009883a 	mov	r4,zero
   2c6f4:	0005883a 	mov	r2,zero
   2c6f8:	180a953a 	slli	r5,r3,20
   2c6fc:	31803fcc 	andi	r6,r6,255
   2c700:	00c00434 	movhi	r3,16
   2c704:	300c97fa 	slli	r6,r6,31
   2c708:	18ffffc4 	addi	r3,r3,-1
   2c70c:	20c6703a 	and	r3,r4,r3
   2c710:	1946b03a 	or	r3,r3,r5
   2c714:	1986b03a 	or	r3,r3,r6
   2c718:	dfc00217 	ldw	ra,8(sp)
   2c71c:	dc400117 	ldw	r17,4(sp)
   2c720:	dc000017 	ldw	r16,0(sp)
   2c724:	dec00304 	addi	sp,sp,12
   2c728:	f800283a 	ret
   2c72c:	10fffd44 	addi	r3,r2,-11
   2c730:	88c8983a 	sll	r4,r17,r3
   2c734:	00800434 	movhi	r2,16
   2c738:	10bfffc4 	addi	r2,r2,-1
   2c73c:	2088703a 	and	r4,r4,r2
   2c740:	28c1ffcc 	andi	r3,r5,2047
   2c744:	800d883a 	mov	r6,r16
   2c748:	0005883a 	mov	r2,zero
   2c74c:	003fea06 	br	2c6f8 <_gp+0xffff232c>

0002c750 <__floatunsidf>:
   2c750:	defffe04 	addi	sp,sp,-8
   2c754:	dc000015 	stw	r16,0(sp)
   2c758:	dfc00115 	stw	ra,4(sp)
   2c75c:	2021883a 	mov	r16,r4
   2c760:	20001026 	beq	r4,zero,2c7a4 <__floatunsidf+0x54>
   2c764:	002c7f40 	call	2c7f4 <__clzsi2>
   2c768:	01410784 	movi	r5,1054
   2c76c:	100d883a 	mov	r6,r2
   2c770:	288bc83a 	sub	r5,r5,r2
   2c774:	00800284 	movi	r2,10
   2c778:	11801616 	blt	r2,r6,2c7d4 <__floatunsidf+0x84>
   2c77c:	008002c4 	movi	r2,11
   2c780:	1185c83a 	sub	r2,r2,r6
   2c784:	8084d83a 	srl	r2,r16,r2
   2c788:	00c00434 	movhi	r3,16
   2c78c:	31c00544 	addi	r7,r6,21
   2c790:	18ffffc4 	addi	r3,r3,-1
   2c794:	81e0983a 	sll	r16,r16,r7
   2c798:	10cc703a 	and	r6,r2,r3
   2c79c:	2941ffcc 	andi	r5,r5,2047
   2c7a0:	00000206 	br	2c7ac <__floatunsidf+0x5c>
   2c7a4:	000b883a 	mov	r5,zero
   2c7a8:	000d883a 	mov	r6,zero
   2c7ac:	280a953a 	slli	r5,r5,20
   2c7b0:	00c00434 	movhi	r3,16
   2c7b4:	18ffffc4 	addi	r3,r3,-1
   2c7b8:	30c6703a 	and	r3,r6,r3
   2c7bc:	8005883a 	mov	r2,r16
   2c7c0:	1946b03a 	or	r3,r3,r5
   2c7c4:	dfc00117 	ldw	ra,4(sp)
   2c7c8:	dc000017 	ldw	r16,0(sp)
   2c7cc:	dec00204 	addi	sp,sp,8
   2c7d0:	f800283a 	ret
   2c7d4:	31bffd44 	addi	r6,r6,-11
   2c7d8:	818c983a 	sll	r6,r16,r6
   2c7dc:	00800434 	movhi	r2,16
   2c7e0:	10bfffc4 	addi	r2,r2,-1
   2c7e4:	2941ffcc 	andi	r5,r5,2047
   2c7e8:	0021883a 	mov	r16,zero
   2c7ec:	308c703a 	and	r6,r6,r2
   2c7f0:	003fee06 	br	2c7ac <_gp+0xffff23e0>

0002c7f4 <__clzsi2>:
   2c7f4:	00bfffd4 	movui	r2,65535
   2c7f8:	11000b36 	bltu	r2,r4,2c828 <__clzsi2+0x34>
   2c7fc:	00803fc4 	movi	r2,255
   2c800:	1100122e 	bgeu	r2,r4,2c84c <__clzsi2+0x58>
   2c804:	00c00204 	movi	r3,8
   2c808:	01400604 	movi	r5,24
   2c80c:	20c8d83a 	srl	r4,r4,r3
   2c810:	008000f4 	movhi	r2,3
   2c814:	10819804 	addi	r2,r2,1632
   2c818:	1109883a 	add	r4,r2,r4
   2c81c:	20800003 	ldbu	r2,0(r4)
   2c820:	2885c83a 	sub	r2,r5,r2
   2c824:	f800283a 	ret
   2c828:	00804034 	movhi	r2,256
   2c82c:	10bfffc4 	addi	r2,r2,-1
   2c830:	11000336 	bltu	r2,r4,2c840 <__clzsi2+0x4c>
   2c834:	00c00404 	movi	r3,16
   2c838:	180b883a 	mov	r5,r3
   2c83c:	003ff306 	br	2c80c <_gp+0xffff2440>
   2c840:	00c00604 	movi	r3,24
   2c844:	01400204 	movi	r5,8
   2c848:	003ff006 	br	2c80c <_gp+0xffff2440>
   2c84c:	0007883a 	mov	r3,zero
   2c850:	01400804 	movi	r5,32
   2c854:	003fed06 	br	2c80c <_gp+0xffff2440>

0002c858 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2c858:	defffe04 	addi	sp,sp,-8
   2c85c:	dfc00115 	stw	ra,4(sp)
   2c860:	df000015 	stw	fp,0(sp)
   2c864:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2c868:	008000f4 	movhi	r2,3
   2c86c:	1088fe04 	addi	r2,r2,9208
   2c870:	10800017 	ldw	r2,0(r2)
   2c874:	10000526 	beq	r2,zero,2c88c <alt_get_errno+0x34>
   2c878:	008000f4 	movhi	r2,3
   2c87c:	1088fe04 	addi	r2,r2,9208
   2c880:	10800017 	ldw	r2,0(r2)
   2c884:	103ee83a 	callr	r2
   2c888:	00000206 	br	2c894 <alt_get_errno+0x3c>
   2c88c:	008000f4 	movhi	r2,3
   2c890:	10900f04 	addi	r2,r2,16444
}
   2c894:	e037883a 	mov	sp,fp
   2c898:	dfc00117 	ldw	ra,4(sp)
   2c89c:	df000017 	ldw	fp,0(sp)
   2c8a0:	dec00204 	addi	sp,sp,8
   2c8a4:	f800283a 	ret

0002c8a8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2c8a8:	defffb04 	addi	sp,sp,-20
   2c8ac:	dfc00415 	stw	ra,16(sp)
   2c8b0:	df000315 	stw	fp,12(sp)
   2c8b4:	df000304 	addi	fp,sp,12
   2c8b8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2c8bc:	e0bfff17 	ldw	r2,-4(fp)
   2c8c0:	10000616 	blt	r2,zero,2c8dc <close+0x34>
   2c8c4:	e0bfff17 	ldw	r2,-4(fp)
   2c8c8:	10c00324 	muli	r3,r2,12
   2c8cc:	008000f4 	movhi	r2,3
   2c8d0:	10843404 	addi	r2,r2,4304
   2c8d4:	1885883a 	add	r2,r3,r2
   2c8d8:	00000106 	br	2c8e0 <close+0x38>
   2c8dc:	0005883a 	mov	r2,zero
   2c8e0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2c8e4:	e0bffd17 	ldw	r2,-12(fp)
   2c8e8:	10001926 	beq	r2,zero,2c950 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2c8ec:	e0bffd17 	ldw	r2,-12(fp)
   2c8f0:	10800017 	ldw	r2,0(r2)
   2c8f4:	10800417 	ldw	r2,16(r2)
   2c8f8:	10000626 	beq	r2,zero,2c914 <close+0x6c>
   2c8fc:	e0bffd17 	ldw	r2,-12(fp)
   2c900:	10800017 	ldw	r2,0(r2)
   2c904:	10800417 	ldw	r2,16(r2)
   2c908:	e13ffd17 	ldw	r4,-12(fp)
   2c90c:	103ee83a 	callr	r2
   2c910:	00000106 	br	2c918 <close+0x70>
   2c914:	0005883a 	mov	r2,zero
   2c918:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2c91c:	e13fff17 	ldw	r4,-4(fp)
   2c920:	002d2100 	call	2d210 <alt_release_fd>
    if (rval < 0)
   2c924:	e0bffe17 	ldw	r2,-8(fp)
   2c928:	1000070e 	bge	r2,zero,2c948 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   2c92c:	002c8580 	call	2c858 <alt_get_errno>
   2c930:	1007883a 	mov	r3,r2
   2c934:	e0bffe17 	ldw	r2,-8(fp)
   2c938:	0085c83a 	sub	r2,zero,r2
   2c93c:	18800015 	stw	r2,0(r3)
      return -1;
   2c940:	00bfffc4 	movi	r2,-1
   2c944:	00000706 	br	2c964 <close+0xbc>
    }
    return 0;
   2c948:	0005883a 	mov	r2,zero
   2c94c:	00000506 	br	2c964 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2c950:	002c8580 	call	2c858 <alt_get_errno>
   2c954:	1007883a 	mov	r3,r2
   2c958:	00801444 	movi	r2,81
   2c95c:	18800015 	stw	r2,0(r3)
    return -1;
   2c960:	00bfffc4 	movi	r2,-1
  }
}
   2c964:	e037883a 	mov	sp,fp
   2c968:	dfc00117 	ldw	ra,4(sp)
   2c96c:	df000017 	ldw	fp,0(sp)
   2c970:	dec00204 	addi	sp,sp,8
   2c974:	f800283a 	ret

0002c978 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2c978:	defffc04 	addi	sp,sp,-16
   2c97c:	df000315 	stw	fp,12(sp)
   2c980:	df000304 	addi	fp,sp,12
   2c984:	e13ffd15 	stw	r4,-12(fp)
   2c988:	e17ffe15 	stw	r5,-8(fp)
   2c98c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2c990:	e0bfff17 	ldw	r2,-4(fp)
}
   2c994:	e037883a 	mov	sp,fp
   2c998:	df000017 	ldw	fp,0(sp)
   2c99c:	dec00104 	addi	sp,sp,4
   2c9a0:	f800283a 	ret

0002c9a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2c9a4:	defffe04 	addi	sp,sp,-8
   2c9a8:	dfc00115 	stw	ra,4(sp)
   2c9ac:	df000015 	stw	fp,0(sp)
   2c9b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2c9b4:	008000f4 	movhi	r2,3
   2c9b8:	1088fe04 	addi	r2,r2,9208
   2c9bc:	10800017 	ldw	r2,0(r2)
   2c9c0:	10000526 	beq	r2,zero,2c9d8 <alt_get_errno+0x34>
   2c9c4:	008000f4 	movhi	r2,3
   2c9c8:	1088fe04 	addi	r2,r2,9208
   2c9cc:	10800017 	ldw	r2,0(r2)
   2c9d0:	103ee83a 	callr	r2
   2c9d4:	00000206 	br	2c9e0 <alt_get_errno+0x3c>
   2c9d8:	008000f4 	movhi	r2,3
   2c9dc:	10900f04 	addi	r2,r2,16444
}
   2c9e0:	e037883a 	mov	sp,fp
   2c9e4:	dfc00117 	ldw	ra,4(sp)
   2c9e8:	df000017 	ldw	fp,0(sp)
   2c9ec:	dec00204 	addi	sp,sp,8
   2c9f0:	f800283a 	ret

0002c9f4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2c9f4:	defffb04 	addi	sp,sp,-20
   2c9f8:	dfc00415 	stw	ra,16(sp)
   2c9fc:	df000315 	stw	fp,12(sp)
   2ca00:	df000304 	addi	fp,sp,12
   2ca04:	e13ffe15 	stw	r4,-8(fp)
   2ca08:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2ca0c:	e0bffe17 	ldw	r2,-8(fp)
   2ca10:	10000616 	blt	r2,zero,2ca2c <fstat+0x38>
   2ca14:	e0bffe17 	ldw	r2,-8(fp)
   2ca18:	10c00324 	muli	r3,r2,12
   2ca1c:	008000f4 	movhi	r2,3
   2ca20:	10843404 	addi	r2,r2,4304
   2ca24:	1885883a 	add	r2,r3,r2
   2ca28:	00000106 	br	2ca30 <fstat+0x3c>
   2ca2c:	0005883a 	mov	r2,zero
   2ca30:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2ca34:	e0bffd17 	ldw	r2,-12(fp)
   2ca38:	10001026 	beq	r2,zero,2ca7c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2ca3c:	e0bffd17 	ldw	r2,-12(fp)
   2ca40:	10800017 	ldw	r2,0(r2)
   2ca44:	10800817 	ldw	r2,32(r2)
   2ca48:	10000726 	beq	r2,zero,2ca68 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   2ca4c:	e0bffd17 	ldw	r2,-12(fp)
   2ca50:	10800017 	ldw	r2,0(r2)
   2ca54:	10800817 	ldw	r2,32(r2)
   2ca58:	e13ffd17 	ldw	r4,-12(fp)
   2ca5c:	e17fff17 	ldw	r5,-4(fp)
   2ca60:	103ee83a 	callr	r2
   2ca64:	00000a06 	br	2ca90 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2ca68:	e0bfff17 	ldw	r2,-4(fp)
   2ca6c:	00c80004 	movi	r3,8192
   2ca70:	10c00115 	stw	r3,4(r2)
      return 0;
   2ca74:	0005883a 	mov	r2,zero
   2ca78:	00000506 	br	2ca90 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2ca7c:	002c9a40 	call	2c9a4 <alt_get_errno>
   2ca80:	1007883a 	mov	r3,r2
   2ca84:	00801444 	movi	r2,81
   2ca88:	18800015 	stw	r2,0(r3)
    return -1;
   2ca8c:	00bfffc4 	movi	r2,-1
  }
}
   2ca90:	e037883a 	mov	sp,fp
   2ca94:	dfc00117 	ldw	ra,4(sp)
   2ca98:	df000017 	ldw	fp,0(sp)
   2ca9c:	dec00204 	addi	sp,sp,8
   2caa0:	f800283a 	ret

0002caa4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2caa4:	defffe04 	addi	sp,sp,-8
   2caa8:	dfc00115 	stw	ra,4(sp)
   2caac:	df000015 	stw	fp,0(sp)
   2cab0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2cab4:	008000f4 	movhi	r2,3
   2cab8:	1088fe04 	addi	r2,r2,9208
   2cabc:	10800017 	ldw	r2,0(r2)
   2cac0:	10000526 	beq	r2,zero,2cad8 <alt_get_errno+0x34>
   2cac4:	008000f4 	movhi	r2,3
   2cac8:	1088fe04 	addi	r2,r2,9208
   2cacc:	10800017 	ldw	r2,0(r2)
   2cad0:	103ee83a 	callr	r2
   2cad4:	00000206 	br	2cae0 <alt_get_errno+0x3c>
   2cad8:	008000f4 	movhi	r2,3
   2cadc:	10900f04 	addi	r2,r2,16444
}
   2cae0:	e037883a 	mov	sp,fp
   2cae4:	dfc00117 	ldw	ra,4(sp)
   2cae8:	df000017 	ldw	fp,0(sp)
   2caec:	dec00204 	addi	sp,sp,8
   2caf0:	f800283a 	ret

0002caf4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2caf4:	deffed04 	addi	sp,sp,-76
   2caf8:	dfc01215 	stw	ra,72(sp)
   2cafc:	df001115 	stw	fp,68(sp)
   2cb00:	df001104 	addi	fp,sp,68
   2cb04:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2cb08:	e0bfff17 	ldw	r2,-4(fp)
   2cb0c:	10000616 	blt	r2,zero,2cb28 <isatty+0x34>
   2cb10:	e0bfff17 	ldw	r2,-4(fp)
   2cb14:	10c00324 	muli	r3,r2,12
   2cb18:	008000f4 	movhi	r2,3
   2cb1c:	10843404 	addi	r2,r2,4304
   2cb20:	1885883a 	add	r2,r3,r2
   2cb24:	00000106 	br	2cb2c <isatty+0x38>
   2cb28:	0005883a 	mov	r2,zero
   2cb2c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2cb30:	e0bfef17 	ldw	r2,-68(fp)
   2cb34:	10000e26 	beq	r2,zero,2cb70 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2cb38:	e0bfef17 	ldw	r2,-68(fp)
   2cb3c:	10800017 	ldw	r2,0(r2)
   2cb40:	10800817 	ldw	r2,32(r2)
   2cb44:	1000021e 	bne	r2,zero,2cb50 <isatty+0x5c>
    {
      return 1;
   2cb48:	00800044 	movi	r2,1
   2cb4c:	00000d06 	br	2cb84 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2cb50:	e0bff004 	addi	r2,fp,-64
   2cb54:	e13fff17 	ldw	r4,-4(fp)
   2cb58:	100b883a 	mov	r5,r2
   2cb5c:	002c9f40 	call	2c9f4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2cb60:	e0bff117 	ldw	r2,-60(fp)
   2cb64:	10880020 	cmpeqi	r2,r2,8192
   2cb68:	10803fcc 	andi	r2,r2,255
   2cb6c:	00000506 	br	2cb84 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2cb70:	002caa40 	call	2caa4 <alt_get_errno>
   2cb74:	1007883a 	mov	r3,r2
   2cb78:	00801444 	movi	r2,81
   2cb7c:	18800015 	stw	r2,0(r3)
    return 0;
   2cb80:	0005883a 	mov	r2,zero
  }
}
   2cb84:	e037883a 	mov	sp,fp
   2cb88:	dfc00117 	ldw	ra,4(sp)
   2cb8c:	df000017 	ldw	fp,0(sp)
   2cb90:	dec00204 	addi	sp,sp,8
   2cb94:	f800283a 	ret

0002cb98 <alt_load_section>:
   2cb98:	defffc04 	addi	sp,sp,-16
   2cb9c:	df000315 	stw	fp,12(sp)
   2cba0:	df000304 	addi	fp,sp,12
   2cba4:	e13ffd15 	stw	r4,-12(fp)
   2cba8:	e17ffe15 	stw	r5,-8(fp)
   2cbac:	e1bfff15 	stw	r6,-4(fp)
   2cbb0:	e0fffe17 	ldw	r3,-8(fp)
   2cbb4:	e0bffd17 	ldw	r2,-12(fp)
   2cbb8:	18800c26 	beq	r3,r2,2cbec <alt_load_section+0x54>
   2cbbc:	00000806 	br	2cbe0 <alt_load_section+0x48>
   2cbc0:	e0bffe17 	ldw	r2,-8(fp)
   2cbc4:	10c00104 	addi	r3,r2,4
   2cbc8:	e0fffe15 	stw	r3,-8(fp)
   2cbcc:	e0fffd17 	ldw	r3,-12(fp)
   2cbd0:	19000104 	addi	r4,r3,4
   2cbd4:	e13ffd15 	stw	r4,-12(fp)
   2cbd8:	18c00017 	ldw	r3,0(r3)
   2cbdc:	10c00015 	stw	r3,0(r2)
   2cbe0:	e0fffe17 	ldw	r3,-8(fp)
   2cbe4:	e0bfff17 	ldw	r2,-4(fp)
   2cbe8:	18bff51e 	bne	r3,r2,2cbc0 <_gp+0xffff27f4>
   2cbec:	e037883a 	mov	sp,fp
   2cbf0:	df000017 	ldw	fp,0(sp)
   2cbf4:	dec00104 	addi	sp,sp,4
   2cbf8:	f800283a 	ret

0002cbfc <alt_load>:
   2cbfc:	defffe04 	addi	sp,sp,-8
   2cc00:	dfc00115 	stw	ra,4(sp)
   2cc04:	df000015 	stw	fp,0(sp)
   2cc08:	d839883a 	mov	fp,sp
   2cc0c:	010000f4 	movhi	r4,3
   2cc10:	21090504 	addi	r4,r4,9236
   2cc14:	014000f4 	movhi	r5,3
   2cc18:	29420104 	addi	r5,r5,2052
   2cc1c:	018000f4 	movhi	r6,3
   2cc20:	31890504 	addi	r6,r6,9236
   2cc24:	002cb980 	call	2cb98 <alt_load_section>
   2cc28:	010000b4 	movhi	r4,2
   2cc2c:	21000804 	addi	r4,r4,32
   2cc30:	014000b4 	movhi	r5,2
   2cc34:	29400804 	addi	r5,r5,32
   2cc38:	018000b4 	movhi	r6,2
   2cc3c:	31809004 	addi	r6,r6,576
   2cc40:	002cb980 	call	2cb98 <alt_load_section>
   2cc44:	010000f4 	movhi	r4,3
   2cc48:	2100f604 	addi	r4,r4,984
   2cc4c:	014000f4 	movhi	r5,3
   2cc50:	2940f604 	addi	r5,r5,984
   2cc54:	018000f4 	movhi	r6,3
   2cc58:	31820104 	addi	r6,r6,2052
   2cc5c:	002cb980 	call	2cb98 <alt_load_section>
   2cc60:	002f0f40 	call	2f0f4 <alt_dcache_flush_all>
   2cc64:	002f3740 	call	2f374 <alt_icache_flush_all>
   2cc68:	e037883a 	mov	sp,fp
   2cc6c:	dfc00117 	ldw	ra,4(sp)
   2cc70:	df000017 	ldw	fp,0(sp)
   2cc74:	dec00204 	addi	sp,sp,8
   2cc78:	f800283a 	ret

0002cc7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2cc7c:	defffe04 	addi	sp,sp,-8
   2cc80:	dfc00115 	stw	ra,4(sp)
   2cc84:	df000015 	stw	fp,0(sp)
   2cc88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2cc8c:	008000f4 	movhi	r2,3
   2cc90:	1088fe04 	addi	r2,r2,9208
   2cc94:	10800017 	ldw	r2,0(r2)
   2cc98:	10000526 	beq	r2,zero,2ccb0 <alt_get_errno+0x34>
   2cc9c:	008000f4 	movhi	r2,3
   2cca0:	1088fe04 	addi	r2,r2,9208
   2cca4:	10800017 	ldw	r2,0(r2)
   2cca8:	103ee83a 	callr	r2
   2ccac:	00000206 	br	2ccb8 <alt_get_errno+0x3c>
   2ccb0:	008000f4 	movhi	r2,3
   2ccb4:	10900f04 	addi	r2,r2,16444
}
   2ccb8:	e037883a 	mov	sp,fp
   2ccbc:	dfc00117 	ldw	ra,4(sp)
   2ccc0:	df000017 	ldw	fp,0(sp)
   2ccc4:	dec00204 	addi	sp,sp,8
   2ccc8:	f800283a 	ret

0002cccc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2cccc:	defff904 	addi	sp,sp,-28
   2ccd0:	dfc00615 	stw	ra,24(sp)
   2ccd4:	df000515 	stw	fp,20(sp)
   2ccd8:	df000504 	addi	fp,sp,20
   2ccdc:	e13ffd15 	stw	r4,-12(fp)
   2cce0:	e17ffe15 	stw	r5,-8(fp)
   2cce4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2cce8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2ccec:	e0bffd17 	ldw	r2,-12(fp)
   2ccf0:	10000616 	blt	r2,zero,2cd0c <lseek+0x40>
   2ccf4:	e0bffd17 	ldw	r2,-12(fp)
   2ccf8:	10c00324 	muli	r3,r2,12
   2ccfc:	008000f4 	movhi	r2,3
   2cd00:	10843404 	addi	r2,r2,4304
   2cd04:	1885883a 	add	r2,r3,r2
   2cd08:	00000106 	br	2cd10 <lseek+0x44>
   2cd0c:	0005883a 	mov	r2,zero
   2cd10:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2cd14:	e0bffc17 	ldw	r2,-16(fp)
   2cd18:	10001026 	beq	r2,zero,2cd5c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2cd1c:	e0bffc17 	ldw	r2,-16(fp)
   2cd20:	10800017 	ldw	r2,0(r2)
   2cd24:	10800717 	ldw	r2,28(r2)
   2cd28:	10000926 	beq	r2,zero,2cd50 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2cd2c:	e0bffc17 	ldw	r2,-16(fp)
   2cd30:	10800017 	ldw	r2,0(r2)
   2cd34:	10800717 	ldw	r2,28(r2)
   2cd38:	e13ffc17 	ldw	r4,-16(fp)
   2cd3c:	e17ffe17 	ldw	r5,-8(fp)
   2cd40:	e1bfff17 	ldw	r6,-4(fp)
   2cd44:	103ee83a 	callr	r2
   2cd48:	e0bffb15 	stw	r2,-20(fp)
   2cd4c:	00000506 	br	2cd64 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2cd50:	00bfde84 	movi	r2,-134
   2cd54:	e0bffb15 	stw	r2,-20(fp)
   2cd58:	00000206 	br	2cd64 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   2cd5c:	00bfebc4 	movi	r2,-81
   2cd60:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2cd64:	e0bffb17 	ldw	r2,-20(fp)
   2cd68:	1000070e 	bge	r2,zero,2cd88 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   2cd6c:	002cc7c0 	call	2cc7c <alt_get_errno>
   2cd70:	1007883a 	mov	r3,r2
   2cd74:	e0bffb17 	ldw	r2,-20(fp)
   2cd78:	0085c83a 	sub	r2,zero,r2
   2cd7c:	18800015 	stw	r2,0(r3)
    rc = -1;
   2cd80:	00bfffc4 	movi	r2,-1
   2cd84:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2cd88:	e0bffb17 	ldw	r2,-20(fp)
}
   2cd8c:	e037883a 	mov	sp,fp
   2cd90:	dfc00117 	ldw	ra,4(sp)
   2cd94:	df000017 	ldw	fp,0(sp)
   2cd98:	dec00204 	addi	sp,sp,8
   2cd9c:	f800283a 	ret

0002cda0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2cda0:	defffd04 	addi	sp,sp,-12
   2cda4:	dfc00215 	stw	ra,8(sp)
   2cda8:	df000115 	stw	fp,4(sp)
   2cdac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2cdb0:	0009883a 	mov	r4,zero
   2cdb4:	002d55c0 	call	2d55c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2cdb8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2cdbc:	002d5900 	call	2d590 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2cdc0:	010000f4 	movhi	r4,3
   2cdc4:	2101db04 	addi	r4,r4,1900
   2cdc8:	014000f4 	movhi	r5,3
   2cdcc:	2941db04 	addi	r5,r5,1900
   2cdd0:	018000f4 	movhi	r6,3
   2cdd4:	3181db04 	addi	r6,r6,1900
   2cdd8:	002f7340 	call	2f734 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2cddc:	002f22c0 	call	2f22c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2cde0:	010000f4 	movhi	r4,3
   2cde4:	213ca204 	addi	r4,r4,-3448
   2cde8:	002fecc0 	call	2fecc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2cdec:	d1271d17 	ldw	r4,-25484(gp)
   2cdf0:	d0e71e17 	ldw	r3,-25480(gp)
   2cdf4:	d0a71f17 	ldw	r2,-25476(gp)
   2cdf8:	180b883a 	mov	r5,r3
   2cdfc:	100d883a 	mov	r6,r2
   2ce00:	002028c0 	call	2028c <main>
   2ce04:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2ce08:	01000044 	movi	r4,1
   2ce0c:	002c8a80 	call	2c8a8 <close>
  exit (result);
   2ce10:	e13fff17 	ldw	r4,-4(fp)
   2ce14:	002fee00 	call	2fee0 <exit>

0002ce18 <__malloc_lock>:
   2ce18:	defffe04 	addi	sp,sp,-8
   2ce1c:	df000115 	stw	fp,4(sp)
   2ce20:	df000104 	addi	fp,sp,4
   2ce24:	e13fff15 	stw	r4,-4(fp)
   2ce28:	e037883a 	mov	sp,fp
   2ce2c:	df000017 	ldw	fp,0(sp)
   2ce30:	dec00104 	addi	sp,sp,4
   2ce34:	f800283a 	ret

0002ce38 <__malloc_unlock>:
   2ce38:	defffe04 	addi	sp,sp,-8
   2ce3c:	df000115 	stw	fp,4(sp)
   2ce40:	df000104 	addi	fp,sp,4
   2ce44:	e13fff15 	stw	r4,-4(fp)
   2ce48:	e037883a 	mov	sp,fp
   2ce4c:	df000017 	ldw	fp,0(sp)
   2ce50:	dec00104 	addi	sp,sp,4
   2ce54:	f800283a 	ret

0002ce58 <alt_printf>:
   2ce58:	defff204 	addi	sp,sp,-56
   2ce5c:	dfc00a15 	stw	ra,40(sp)
   2ce60:	df000915 	stw	fp,36(sp)
   2ce64:	df000904 	addi	fp,sp,36
   2ce68:	e1400215 	stw	r5,8(fp)
   2ce6c:	e1800315 	stw	r6,12(fp)
   2ce70:	e1c00415 	stw	r7,16(fp)
   2ce74:	e13fff15 	stw	r4,-4(fp)
   2ce78:	e0800204 	addi	r2,fp,8
   2ce7c:	e0bffe15 	stw	r2,-8(fp)
   2ce80:	e0bfff17 	ldw	r2,-4(fp)
   2ce84:	e0bff715 	stw	r2,-36(fp)
   2ce88:	00007106 	br	2d050 <alt_printf+0x1f8>
   2ce8c:	e0bff807 	ldb	r2,-32(fp)
   2ce90:	10800960 	cmpeqi	r2,r2,37
   2ce94:	1000041e 	bne	r2,zero,2cea8 <alt_printf+0x50>
   2ce98:	e0bff807 	ldb	r2,-32(fp)
   2ce9c:	1009883a 	mov	r4,r2
   2cea0:	002d0800 	call	2d080 <alt_putchar>
   2cea4:	00006a06 	br	2d050 <alt_printf+0x1f8>
   2cea8:	e0bff717 	ldw	r2,-36(fp)
   2ceac:	10c00044 	addi	r3,r2,1
   2ceb0:	e0fff715 	stw	r3,-36(fp)
   2ceb4:	10800003 	ldbu	r2,0(r2)
   2ceb8:	e0bff805 	stb	r2,-32(fp)
   2cebc:	e0bff807 	ldb	r2,-32(fp)
   2cec0:	10006226 	beq	r2,zero,2d04c <alt_printf+0x1f4>
   2cec4:	e0bff807 	ldb	r2,-32(fp)
   2cec8:	10800958 	cmpnei	r2,r2,37
   2cecc:	1000041e 	bne	r2,zero,2cee0 <alt_printf+0x88>
   2ced0:	e0bff807 	ldb	r2,-32(fp)
   2ced4:	1009883a 	mov	r4,r2
   2ced8:	002d0800 	call	2d080 <alt_putchar>
   2cedc:	00005c06 	br	2d050 <alt_printf+0x1f8>
   2cee0:	e0bff807 	ldb	r2,-32(fp)
   2cee4:	108018d8 	cmpnei	r2,r2,99
   2cee8:	1000081e 	bne	r2,zero,2cf0c <alt_printf+0xb4>
   2ceec:	e0bffe17 	ldw	r2,-8(fp)
   2cef0:	10c00104 	addi	r3,r2,4
   2cef4:	e0fffe15 	stw	r3,-8(fp)
   2cef8:	10800017 	ldw	r2,0(r2)
   2cefc:	e0bffd15 	stw	r2,-12(fp)
   2cf00:	e13ffd17 	ldw	r4,-12(fp)
   2cf04:	002d0800 	call	2d080 <alt_putchar>
   2cf08:	00005106 	br	2d050 <alt_printf+0x1f8>
   2cf0c:	e0bff807 	ldb	r2,-32(fp)
   2cf10:	10801e18 	cmpnei	r2,r2,120
   2cf14:	1000341e 	bne	r2,zero,2cfe8 <alt_printf+0x190>
   2cf18:	e0bffe17 	ldw	r2,-8(fp)
   2cf1c:	10c00104 	addi	r3,r2,4
   2cf20:	e0fffe15 	stw	r3,-8(fp)
   2cf24:	10800017 	ldw	r2,0(r2)
   2cf28:	e0bffb15 	stw	r2,-20(fp)
   2cf2c:	e0bffb17 	ldw	r2,-20(fp)
   2cf30:	1000031e 	bne	r2,zero,2cf40 <alt_printf+0xe8>
   2cf34:	01000c04 	movi	r4,48
   2cf38:	002d0800 	call	2d080 <alt_putchar>
   2cf3c:	00004406 	br	2d050 <alt_printf+0x1f8>
   2cf40:	00800704 	movi	r2,28
   2cf44:	e0bff915 	stw	r2,-28(fp)
   2cf48:	00000306 	br	2cf58 <alt_printf+0x100>
   2cf4c:	e0bff917 	ldw	r2,-28(fp)
   2cf50:	10bfff04 	addi	r2,r2,-4
   2cf54:	e0bff915 	stw	r2,-28(fp)
   2cf58:	00c003c4 	movi	r3,15
   2cf5c:	e0bff917 	ldw	r2,-28(fp)
   2cf60:	1884983a 	sll	r2,r3,r2
   2cf64:	1007883a 	mov	r3,r2
   2cf68:	e0bffb17 	ldw	r2,-20(fp)
   2cf6c:	1884703a 	and	r2,r3,r2
   2cf70:	103ff626 	beq	r2,zero,2cf4c <_gp+0xffff2b80>
   2cf74:	00001906 	br	2cfdc <alt_printf+0x184>
   2cf78:	00c003c4 	movi	r3,15
   2cf7c:	e0bff917 	ldw	r2,-28(fp)
   2cf80:	1884983a 	sll	r2,r3,r2
   2cf84:	1007883a 	mov	r3,r2
   2cf88:	e0bffb17 	ldw	r2,-20(fp)
   2cf8c:	1886703a 	and	r3,r3,r2
   2cf90:	e0bff917 	ldw	r2,-28(fp)
   2cf94:	1884d83a 	srl	r2,r3,r2
   2cf98:	e0bffc15 	stw	r2,-16(fp)
   2cf9c:	e0bffc17 	ldw	r2,-16(fp)
   2cfa0:	108002a8 	cmpgeui	r2,r2,10
   2cfa4:	1000041e 	bne	r2,zero,2cfb8 <alt_printf+0x160>
   2cfa8:	e0bffc17 	ldw	r2,-16(fp)
   2cfac:	10800c04 	addi	r2,r2,48
   2cfb0:	e0bff805 	stb	r2,-32(fp)
   2cfb4:	00000306 	br	2cfc4 <alt_printf+0x16c>
   2cfb8:	e0bffc17 	ldw	r2,-16(fp)
   2cfbc:	108015c4 	addi	r2,r2,87
   2cfc0:	e0bff805 	stb	r2,-32(fp)
   2cfc4:	e0bff807 	ldb	r2,-32(fp)
   2cfc8:	1009883a 	mov	r4,r2
   2cfcc:	002d0800 	call	2d080 <alt_putchar>
   2cfd0:	e0bff917 	ldw	r2,-28(fp)
   2cfd4:	10bfff04 	addi	r2,r2,-4
   2cfd8:	e0bff915 	stw	r2,-28(fp)
   2cfdc:	e0bff917 	ldw	r2,-28(fp)
   2cfe0:	103fe50e 	bge	r2,zero,2cf78 <_gp+0xffff2bac>
   2cfe4:	00001a06 	br	2d050 <alt_printf+0x1f8>
   2cfe8:	e0bff807 	ldb	r2,-32(fp)
   2cfec:	10801cd8 	cmpnei	r2,r2,115
   2cff0:	1000151e 	bne	r2,zero,2d048 <alt_printf+0x1f0>
   2cff4:	e0bffe17 	ldw	r2,-8(fp)
   2cff8:	10c00104 	addi	r3,r2,4
   2cffc:	e0fffe15 	stw	r3,-8(fp)
   2d000:	10800017 	ldw	r2,0(r2)
   2d004:	e0bffa15 	stw	r2,-24(fp)
   2d008:	00000906 	br	2d030 <alt_printf+0x1d8>
   2d00c:	e0bffa17 	ldw	r2,-24(fp)
   2d010:	10c00044 	addi	r3,r2,1
   2d014:	e0fffa15 	stw	r3,-24(fp)
   2d018:	10800003 	ldbu	r2,0(r2)
   2d01c:	10803fcc 	andi	r2,r2,255
   2d020:	1080201c 	xori	r2,r2,128
   2d024:	10bfe004 	addi	r2,r2,-128
   2d028:	1009883a 	mov	r4,r2
   2d02c:	002d0800 	call	2d080 <alt_putchar>
   2d030:	e0bffa17 	ldw	r2,-24(fp)
   2d034:	10800003 	ldbu	r2,0(r2)
   2d038:	10803fcc 	andi	r2,r2,255
   2d03c:	1080201c 	xori	r2,r2,128
   2d040:	10bfe004 	addi	r2,r2,-128
   2d044:	103ff11e 	bne	r2,zero,2d00c <_gp+0xffff2c40>
   2d048:	00000106 	br	2d050 <alt_printf+0x1f8>
   2d04c:	00000706 	br	2d06c <alt_printf+0x214>
   2d050:	e0bff717 	ldw	r2,-36(fp)
   2d054:	10c00044 	addi	r3,r2,1
   2d058:	e0fff715 	stw	r3,-36(fp)
   2d05c:	10800003 	ldbu	r2,0(r2)
   2d060:	e0bff805 	stb	r2,-32(fp)
   2d064:	e0bff807 	ldb	r2,-32(fp)
   2d068:	103f881e 	bne	r2,zero,2ce8c <_gp+0xffff2ac0>
   2d06c:	e037883a 	mov	sp,fp
   2d070:	dfc00117 	ldw	ra,4(sp)
   2d074:	df000017 	ldw	fp,0(sp)
   2d078:	dec00504 	addi	sp,sp,20
   2d07c:	f800283a 	ret

0002d080 <alt_putchar>:
   2d080:	defffd04 	addi	sp,sp,-12
   2d084:	dfc00215 	stw	ra,8(sp)
   2d088:	df000115 	stw	fp,4(sp)
   2d08c:	df000104 	addi	fp,sp,4
   2d090:	e13fff15 	stw	r4,-4(fp)
   2d094:	008000f4 	movhi	r2,3
   2d098:	1088f404 	addi	r2,r2,9168
   2d09c:	10800017 	ldw	r2,0(r2)
   2d0a0:	10800217 	ldw	r2,8(r2)
   2d0a4:	e13fff17 	ldw	r4,-4(fp)
   2d0a8:	100b883a 	mov	r5,r2
   2d0ac:	00300340 	call	30034 <putc>
   2d0b0:	e037883a 	mov	sp,fp
   2d0b4:	dfc00117 	ldw	ra,4(sp)
   2d0b8:	df000017 	ldw	fp,0(sp)
   2d0bc:	dec00204 	addi	sp,sp,8
   2d0c0:	f800283a 	ret

0002d0c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d0c4:	defffe04 	addi	sp,sp,-8
   2d0c8:	dfc00115 	stw	ra,4(sp)
   2d0cc:	df000015 	stw	fp,0(sp)
   2d0d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d0d4:	008000f4 	movhi	r2,3
   2d0d8:	1088fe04 	addi	r2,r2,9208
   2d0dc:	10800017 	ldw	r2,0(r2)
   2d0e0:	10000526 	beq	r2,zero,2d0f8 <alt_get_errno+0x34>
   2d0e4:	008000f4 	movhi	r2,3
   2d0e8:	1088fe04 	addi	r2,r2,9208
   2d0ec:	10800017 	ldw	r2,0(r2)
   2d0f0:	103ee83a 	callr	r2
   2d0f4:	00000206 	br	2d100 <alt_get_errno+0x3c>
   2d0f8:	008000f4 	movhi	r2,3
   2d0fc:	10900f04 	addi	r2,r2,16444
}
   2d100:	e037883a 	mov	sp,fp
   2d104:	dfc00117 	ldw	ra,4(sp)
   2d108:	df000017 	ldw	fp,0(sp)
   2d10c:	dec00204 	addi	sp,sp,8
   2d110:	f800283a 	ret

0002d114 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2d114:	defff904 	addi	sp,sp,-28
   2d118:	dfc00615 	stw	ra,24(sp)
   2d11c:	df000515 	stw	fp,20(sp)
   2d120:	df000504 	addi	fp,sp,20
   2d124:	e13ffd15 	stw	r4,-12(fp)
   2d128:	e17ffe15 	stw	r5,-8(fp)
   2d12c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d130:	e0bffd17 	ldw	r2,-12(fp)
   2d134:	10000616 	blt	r2,zero,2d150 <read+0x3c>
   2d138:	e0bffd17 	ldw	r2,-12(fp)
   2d13c:	10c00324 	muli	r3,r2,12
   2d140:	008000f4 	movhi	r2,3
   2d144:	10843404 	addi	r2,r2,4304
   2d148:	1885883a 	add	r2,r3,r2
   2d14c:	00000106 	br	2d154 <read+0x40>
   2d150:	0005883a 	mov	r2,zero
   2d154:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2d158:	e0bffb17 	ldw	r2,-20(fp)
   2d15c:	10002226 	beq	r2,zero,2d1e8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2d160:	e0bffb17 	ldw	r2,-20(fp)
   2d164:	10800217 	ldw	r2,8(r2)
   2d168:	108000cc 	andi	r2,r2,3
   2d16c:	10800060 	cmpeqi	r2,r2,1
   2d170:	1000181e 	bne	r2,zero,2d1d4 <read+0xc0>
        (fd->dev->read))
   2d174:	e0bffb17 	ldw	r2,-20(fp)
   2d178:	10800017 	ldw	r2,0(r2)
   2d17c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2d180:	10001426 	beq	r2,zero,2d1d4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2d184:	e0bffb17 	ldw	r2,-20(fp)
   2d188:	10800017 	ldw	r2,0(r2)
   2d18c:	10800517 	ldw	r2,20(r2)
   2d190:	e0ffff17 	ldw	r3,-4(fp)
   2d194:	e13ffb17 	ldw	r4,-20(fp)
   2d198:	e17ffe17 	ldw	r5,-8(fp)
   2d19c:	180d883a 	mov	r6,r3
   2d1a0:	103ee83a 	callr	r2
   2d1a4:	e0bffc15 	stw	r2,-16(fp)
   2d1a8:	e0bffc17 	ldw	r2,-16(fp)
   2d1ac:	1000070e 	bge	r2,zero,2d1cc <read+0xb8>
        {
          ALT_ERRNO = -rval;
   2d1b0:	002d0c40 	call	2d0c4 <alt_get_errno>
   2d1b4:	1007883a 	mov	r3,r2
   2d1b8:	e0bffc17 	ldw	r2,-16(fp)
   2d1bc:	0085c83a 	sub	r2,zero,r2
   2d1c0:	18800015 	stw	r2,0(r3)
          return -1;
   2d1c4:	00bfffc4 	movi	r2,-1
   2d1c8:	00000c06 	br	2d1fc <read+0xe8>
        }
        return rval;
   2d1cc:	e0bffc17 	ldw	r2,-16(fp)
   2d1d0:	00000a06 	br	2d1fc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2d1d4:	002d0c40 	call	2d0c4 <alt_get_errno>
   2d1d8:	1007883a 	mov	r3,r2
   2d1dc:	00800344 	movi	r2,13
   2d1e0:	18800015 	stw	r2,0(r3)
   2d1e4:	00000406 	br	2d1f8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2d1e8:	002d0c40 	call	2d0c4 <alt_get_errno>
   2d1ec:	1007883a 	mov	r3,r2
   2d1f0:	00801444 	movi	r2,81
   2d1f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2d1f8:	00bfffc4 	movi	r2,-1
}
   2d1fc:	e037883a 	mov	sp,fp
   2d200:	dfc00117 	ldw	ra,4(sp)
   2d204:	df000017 	ldw	fp,0(sp)
   2d208:	dec00204 	addi	sp,sp,8
   2d20c:	f800283a 	ret

0002d210 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2d210:	defffe04 	addi	sp,sp,-8
   2d214:	df000115 	stw	fp,4(sp)
   2d218:	df000104 	addi	fp,sp,4
   2d21c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2d220:	e0bfff17 	ldw	r2,-4(fp)
   2d224:	108000d0 	cmplti	r2,r2,3
   2d228:	10000d1e 	bne	r2,zero,2d260 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   2d22c:	008000f4 	movhi	r2,3
   2d230:	10843404 	addi	r2,r2,4304
   2d234:	e0ffff17 	ldw	r3,-4(fp)
   2d238:	18c00324 	muli	r3,r3,12
   2d23c:	10c5883a 	add	r2,r2,r3
   2d240:	10800204 	addi	r2,r2,8
   2d244:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2d248:	008000f4 	movhi	r2,3
   2d24c:	10843404 	addi	r2,r2,4304
   2d250:	e0ffff17 	ldw	r3,-4(fp)
   2d254:	18c00324 	muli	r3,r3,12
   2d258:	10c5883a 	add	r2,r2,r3
   2d25c:	10000015 	stw	zero,0(r2)
  }
}
   2d260:	e037883a 	mov	sp,fp
   2d264:	df000017 	ldw	fp,0(sp)
   2d268:	dec00104 	addi	sp,sp,4
   2d26c:	f800283a 	ret

0002d270 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2d270:	defff904 	addi	sp,sp,-28
   2d274:	df000615 	stw	fp,24(sp)
   2d278:	df000604 	addi	fp,sp,24
   2d27c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d280:	0005303a 	rdctl	r2,status
   2d284:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d288:	e0fffc17 	ldw	r3,-16(fp)
   2d28c:	00bfff84 	movi	r2,-2
   2d290:	1884703a 	and	r2,r3,r2
   2d294:	1001703a 	wrctl	status,r2
  
  return context;
   2d298:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2d29c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2d2a0:	d0a00c17 	ldw	r2,-32720(gp)
   2d2a4:	10c000c4 	addi	r3,r2,3
   2d2a8:	00bfff04 	movi	r2,-4
   2d2ac:	1884703a 	and	r2,r3,r2
   2d2b0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2d2b4:	d0e00c17 	ldw	r3,-32720(gp)
   2d2b8:	e0bfff17 	ldw	r2,-4(fp)
   2d2bc:	1887883a 	add	r3,r3,r2
   2d2c0:	00800134 	movhi	r2,4
   2d2c4:	10a1a804 	addi	r2,r2,-31072
   2d2c8:	10c0062e 	bgeu	r2,r3,2d2e4 <sbrk+0x74>
   2d2cc:	e0bffa17 	ldw	r2,-24(fp)
   2d2d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d2d4:	e0bffd17 	ldw	r2,-12(fp)
   2d2d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2d2dc:	00bfffc4 	movi	r2,-1
   2d2e0:	00000b06 	br	2d310 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2d2e4:	d0a00c17 	ldw	r2,-32720(gp)
   2d2e8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   2d2ec:	d0e00c17 	ldw	r3,-32720(gp)
   2d2f0:	e0bfff17 	ldw	r2,-4(fp)
   2d2f4:	1885883a 	add	r2,r3,r2
   2d2f8:	d0a00c15 	stw	r2,-32720(gp)
   2d2fc:	e0bffa17 	ldw	r2,-24(fp)
   2d300:	e0bffe15 	stw	r2,-8(fp)
   2d304:	e0bffe17 	ldw	r2,-8(fp)
   2d308:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2d30c:	e0bffb17 	ldw	r2,-20(fp)
} 
   2d310:	e037883a 	mov	sp,fp
   2d314:	df000017 	ldw	fp,0(sp)
   2d318:	dec00104 	addi	sp,sp,4
   2d31c:	f800283a 	ret

0002d320 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d320:	defffe04 	addi	sp,sp,-8
   2d324:	dfc00115 	stw	ra,4(sp)
   2d328:	df000015 	stw	fp,0(sp)
   2d32c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d330:	008000f4 	movhi	r2,3
   2d334:	1088fe04 	addi	r2,r2,9208
   2d338:	10800017 	ldw	r2,0(r2)
   2d33c:	10000526 	beq	r2,zero,2d354 <alt_get_errno+0x34>
   2d340:	008000f4 	movhi	r2,3
   2d344:	1088fe04 	addi	r2,r2,9208
   2d348:	10800017 	ldw	r2,0(r2)
   2d34c:	103ee83a 	callr	r2
   2d350:	00000206 	br	2d35c <alt_get_errno+0x3c>
   2d354:	008000f4 	movhi	r2,3
   2d358:	10900f04 	addi	r2,r2,16444
}
   2d35c:	e037883a 	mov	sp,fp
   2d360:	dfc00117 	ldw	ra,4(sp)
   2d364:	df000017 	ldw	fp,0(sp)
   2d368:	dec00204 	addi	sp,sp,8
   2d36c:	f800283a 	ret

0002d370 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2d370:	defff904 	addi	sp,sp,-28
   2d374:	dfc00615 	stw	ra,24(sp)
   2d378:	df000515 	stw	fp,20(sp)
   2d37c:	df000504 	addi	fp,sp,20
   2d380:	e13ffd15 	stw	r4,-12(fp)
   2d384:	e17ffe15 	stw	r5,-8(fp)
   2d388:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d38c:	e0bffd17 	ldw	r2,-12(fp)
   2d390:	10000616 	blt	r2,zero,2d3ac <write+0x3c>
   2d394:	e0bffd17 	ldw	r2,-12(fp)
   2d398:	10c00324 	muli	r3,r2,12
   2d39c:	008000f4 	movhi	r2,3
   2d3a0:	10843404 	addi	r2,r2,4304
   2d3a4:	1885883a 	add	r2,r3,r2
   2d3a8:	00000106 	br	2d3b0 <write+0x40>
   2d3ac:	0005883a 	mov	r2,zero
   2d3b0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2d3b4:	e0bffb17 	ldw	r2,-20(fp)
   2d3b8:	10002126 	beq	r2,zero,2d440 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2d3bc:	e0bffb17 	ldw	r2,-20(fp)
   2d3c0:	10800217 	ldw	r2,8(r2)
   2d3c4:	108000cc 	andi	r2,r2,3
   2d3c8:	10001826 	beq	r2,zero,2d42c <write+0xbc>
   2d3cc:	e0bffb17 	ldw	r2,-20(fp)
   2d3d0:	10800017 	ldw	r2,0(r2)
   2d3d4:	10800617 	ldw	r2,24(r2)
   2d3d8:	10001426 	beq	r2,zero,2d42c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2d3dc:	e0bffb17 	ldw	r2,-20(fp)
   2d3e0:	10800017 	ldw	r2,0(r2)
   2d3e4:	10800617 	ldw	r2,24(r2)
   2d3e8:	e0ffff17 	ldw	r3,-4(fp)
   2d3ec:	e13ffb17 	ldw	r4,-20(fp)
   2d3f0:	e17ffe17 	ldw	r5,-8(fp)
   2d3f4:	180d883a 	mov	r6,r3
   2d3f8:	103ee83a 	callr	r2
   2d3fc:	e0bffc15 	stw	r2,-16(fp)
   2d400:	e0bffc17 	ldw	r2,-16(fp)
   2d404:	1000070e 	bge	r2,zero,2d424 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   2d408:	002d3200 	call	2d320 <alt_get_errno>
   2d40c:	1007883a 	mov	r3,r2
   2d410:	e0bffc17 	ldw	r2,-16(fp)
   2d414:	0085c83a 	sub	r2,zero,r2
   2d418:	18800015 	stw	r2,0(r3)
        return -1;
   2d41c:	00bfffc4 	movi	r2,-1
   2d420:	00000c06 	br	2d454 <write+0xe4>
      }
      return rval;
   2d424:	e0bffc17 	ldw	r2,-16(fp)
   2d428:	00000a06 	br	2d454 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2d42c:	002d3200 	call	2d320 <alt_get_errno>
   2d430:	1007883a 	mov	r3,r2
   2d434:	00800344 	movi	r2,13
   2d438:	18800015 	stw	r2,0(r3)
   2d43c:	00000406 	br	2d450 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2d440:	002d3200 	call	2d320 <alt_get_errno>
   2d444:	1007883a 	mov	r3,r2
   2d448:	00801444 	movi	r2,81
   2d44c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2d450:	00bfffc4 	movi	r2,-1
}
   2d454:	e037883a 	mov	sp,fp
   2d458:	dfc00117 	ldw	ra,4(sp)
   2d45c:	df000017 	ldw	fp,0(sp)
   2d460:	dec00204 	addi	sp,sp,8
   2d464:	f800283a 	ret

0002d468 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2d468:	defffd04 	addi	sp,sp,-12
   2d46c:	dfc00215 	stw	ra,8(sp)
   2d470:	df000115 	stw	fp,4(sp)
   2d474:	df000104 	addi	fp,sp,4
   2d478:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2d47c:	e13fff17 	ldw	r4,-4(fp)
   2d480:	014000f4 	movhi	r5,3
   2d484:	2948fb04 	addi	r5,r5,9196
   2d488:	002f1880 	call	2f188 <alt_dev_llist_insert>
}
   2d48c:	e037883a 	mov	sp,fp
   2d490:	dfc00117 	ldw	ra,4(sp)
   2d494:	df000017 	ldw	fp,0(sp)
   2d498:	dec00204 	addi	sp,sp,8
   2d49c:	f800283a 	ret

0002d4a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d4a0:	defffe04 	addi	sp,sp,-8
   2d4a4:	dfc00115 	stw	ra,4(sp)
   2d4a8:	df000015 	stw	fp,0(sp)
   2d4ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d4b0:	008000f4 	movhi	r2,3
   2d4b4:	1088fe04 	addi	r2,r2,9208
   2d4b8:	10800017 	ldw	r2,0(r2)
   2d4bc:	10000526 	beq	r2,zero,2d4d4 <alt_get_errno+0x34>
   2d4c0:	008000f4 	movhi	r2,3
   2d4c4:	1088fe04 	addi	r2,r2,9208
   2d4c8:	10800017 	ldw	r2,0(r2)
   2d4cc:	103ee83a 	callr	r2
   2d4d0:	00000206 	br	2d4dc <alt_get_errno+0x3c>
   2d4d4:	008000f4 	movhi	r2,3
   2d4d8:	10900f04 	addi	r2,r2,16444
}
   2d4dc:	e037883a 	mov	sp,fp
   2d4e0:	dfc00117 	ldw	ra,4(sp)
   2d4e4:	df000017 	ldw	fp,0(sp)
   2d4e8:	dec00204 	addi	sp,sp,8
   2d4ec:	f800283a 	ret

0002d4f0 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
   2d4f0:	defffc04 	addi	sp,sp,-16
   2d4f4:	dfc00315 	stw	ra,12(sp)
   2d4f8:	df000215 	stw	fp,8(sp)
   2d4fc:	df000204 	addi	fp,sp,8
   2d500:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   2d504:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
   2d508:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
   2d50c:	e0bffe17 	ldw	r2,-8(fp)
   2d510:	1000061e 	bne	r2,zero,2d52c <alt_avalon_mutex_reg+0x3c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
   2d514:	e13fff17 	ldw	r4,-4(fp)
   2d518:	014000f4 	movhi	r5,3
   2d51c:	29490004 	addi	r5,r5,9216
   2d520:	002f1880 	call	2f188 <alt_dev_llist_insert>
   2d524:	e0bffe15 	stw	r2,-8(fp)
   2d528:	00000606 	br	2d544 <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
   2d52c:	002d4a00 	call	2d4a0 <alt_get_errno>
   2d530:	1007883a 	mov	r3,r2
   2d534:	00800304 	movi	r2,12
   2d538:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
   2d53c:	00bffd04 	movi	r2,-12
   2d540:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
   2d544:	e0bffe17 	ldw	r2,-8(fp)
}
   2d548:	e037883a 	mov	sp,fp
   2d54c:	dfc00117 	ldw	ra,4(sp)
   2d550:	df000017 	ldw	fp,0(sp)
   2d554:	dec00204 	addi	sp,sp,8
   2d558:	f800283a 	ret

0002d55c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2d55c:	defffd04 	addi	sp,sp,-12
   2d560:	dfc00215 	stw	ra,8(sp)
   2d564:	df000115 	stw	fp,4(sp)
   2d568:	df000104 	addi	fp,sp,4
   2d56c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPUMASTER, CPUMaster);
   2d570:	002fbbc0 	call	2fbbc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2d574:	00800044 	movi	r2,1
   2d578:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2d57c:	e037883a 	mov	sp,fp
   2d580:	dfc00117 	ldw	ra,4(sp)
   2d584:	df000017 	ldw	fp,0(sp)
   2d588:	dec00204 	addi	sp,sp,8
   2d58c:	f800283a 	ret

0002d590 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2d590:	defffe04 	addi	sp,sp,-8
   2d594:	dfc00115 	stw	ra,4(sp)
   2d598:	df000015 	stw	fp,0(sp)
   2d59c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAGMASTER, JTAGMaster);
   2d5a0:	010000f4 	movhi	r4,3
   2d5a4:	21049e04 	addi	r4,r4,4728
   2d5a8:	000b883a 	mov	r5,zero
   2d5ac:	000d883a 	mov	r6,zero
   2d5b0:	002d81c0 	call	2d81c <altera_avalon_jtag_uart_init>
   2d5b4:	010000f4 	movhi	r4,3
   2d5b8:	21049404 	addi	r4,r4,4688
   2d5bc:	002d4680 	call	2d468 <alt_dev_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
   2d5c0:	010000f4 	movhi	r4,3
   2d5c4:	2108ac04 	addi	r4,r4,8880
   2d5c8:	002d4f00 	call	2d4f0 <alt_avalon_mutex_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   2d5cc:	010000f4 	movhi	r4,3
   2d5d0:	2108ba04 	addi	r4,r4,8936
   2d5d4:	000b883a 	mov	r5,zero
   2d5d8:	018000c4 	movi	r6,3
   2d5dc:	002e4ec0 	call	2e4ec <altera_avalon_uart_init>
   2d5e0:	010000f4 	movhi	r4,3
   2d5e4:	2108b004 	addi	r4,r4,8896
   2d5e8:	002d4680 	call	2d468 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VIDEO_CHARACTER_BUFFER_WITH_DMA_0, video_character_buffer_with_dma_0);
   2d5ec:	008000f4 	movhi	r2,3
   2d5f0:	1088e104 	addi	r2,r2,9092
   2d5f4:	10800a17 	ldw	r2,40(r2)
   2d5f8:	10800104 	addi	r2,r2,4
   2d5fc:	10800017 	ldw	r2,0(r2)
   2d600:	10ffffcc 	andi	r3,r2,65535
   2d604:	008000f4 	movhi	r2,3
   2d608:	1088e104 	addi	r2,r2,9092
   2d60c:	10c00c15 	stw	r3,48(r2)
   2d610:	008000f4 	movhi	r2,3
   2d614:	1088e104 	addi	r2,r2,9092
   2d618:	10800a17 	ldw	r2,40(r2)
   2d61c:	10800104 	addi	r2,r2,4
   2d620:	10800017 	ldw	r2,0(r2)
   2d624:	1006d43a 	srli	r3,r2,16
   2d628:	008000f4 	movhi	r2,3
   2d62c:	1088e104 	addi	r2,r2,9092
   2d630:	10c00d15 	stw	r3,52(r2)
   2d634:	008000f4 	movhi	r2,3
   2d638:	1088e104 	addi	r2,r2,9092
   2d63c:	10800c17 	ldw	r2,48(r2)
   2d640:	10801068 	cmpgeui	r2,r2,65
   2d644:	1000081e 	bne	r2,zero,2d668 <alt_sys_init+0xd8>
   2d648:	008000f4 	movhi	r2,3
   2d64c:	1088e104 	addi	r2,r2,9092
   2d650:	00c00fc4 	movi	r3,63
   2d654:	10c00f15 	stw	r3,60(r2)
   2d658:	008000f4 	movhi	r2,3
   2d65c:	1088e104 	addi	r2,r2,9092
   2d660:	00c00184 	movi	r3,6
   2d664:	10c01015 	stw	r3,64(r2)
   2d668:	008000f4 	movhi	r2,3
   2d66c:	1088e104 	addi	r2,r2,9092
   2d670:	10800d17 	ldw	r2,52(r2)
   2d674:	10800868 	cmpgeui	r2,r2,33
   2d678:	1000041e 	bne	r2,zero,2d68c <alt_sys_init+0xfc>
   2d67c:	008000f4 	movhi	r2,3
   2d680:	1088e104 	addi	r2,r2,9092
   2d684:	00c007c4 	movi	r3,31
   2d688:	10c01115 	stw	r3,68(r2)
   2d68c:	010000f4 	movhi	r4,3
   2d690:	2108e104 	addi	r4,r4,9092
   2d694:	002eccc0 	call	2eccc <alt_up_char_buffer_init>
   2d698:	010000f4 	movhi	r4,3
   2d69c:	2108e104 	addi	r4,r4,9092
   2d6a0:	002d4680 	call	2d468 <alt_dev_reg>
}
   2d6a4:	e037883a 	mov	sp,fp
   2d6a8:	dfc00117 	ldw	ra,4(sp)
   2d6ac:	df000017 	ldw	fp,0(sp)
   2d6b0:	dec00204 	addi	sp,sp,8
   2d6b4:	f800283a 	ret

0002d6b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2d6b8:	defffa04 	addi	sp,sp,-24
   2d6bc:	dfc00515 	stw	ra,20(sp)
   2d6c0:	df000415 	stw	fp,16(sp)
   2d6c4:	df000404 	addi	fp,sp,16
   2d6c8:	e13ffd15 	stw	r4,-12(fp)
   2d6cc:	e17ffe15 	stw	r5,-8(fp)
   2d6d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2d6d4:	e0bffd17 	ldw	r2,-12(fp)
   2d6d8:	10800017 	ldw	r2,0(r2)
   2d6dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2d6e0:	e0bffc17 	ldw	r2,-16(fp)
   2d6e4:	10c00a04 	addi	r3,r2,40
   2d6e8:	e0bffd17 	ldw	r2,-12(fp)
   2d6ec:	10800217 	ldw	r2,8(r2)
   2d6f0:	1809883a 	mov	r4,r3
   2d6f4:	e17ffe17 	ldw	r5,-8(fp)
   2d6f8:	e1bfff17 	ldw	r6,-4(fp)
   2d6fc:	100f883a 	mov	r7,r2
   2d700:	002dce00 	call	2dce0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2d704:	e037883a 	mov	sp,fp
   2d708:	dfc00117 	ldw	ra,4(sp)
   2d70c:	df000017 	ldw	fp,0(sp)
   2d710:	dec00204 	addi	sp,sp,8
   2d714:	f800283a 	ret

0002d718 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2d718:	defffa04 	addi	sp,sp,-24
   2d71c:	dfc00515 	stw	ra,20(sp)
   2d720:	df000415 	stw	fp,16(sp)
   2d724:	df000404 	addi	fp,sp,16
   2d728:	e13ffd15 	stw	r4,-12(fp)
   2d72c:	e17ffe15 	stw	r5,-8(fp)
   2d730:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2d734:	e0bffd17 	ldw	r2,-12(fp)
   2d738:	10800017 	ldw	r2,0(r2)
   2d73c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2d740:	e0bffc17 	ldw	r2,-16(fp)
   2d744:	10c00a04 	addi	r3,r2,40
   2d748:	e0bffd17 	ldw	r2,-12(fp)
   2d74c:	10800217 	ldw	r2,8(r2)
   2d750:	1809883a 	mov	r4,r3
   2d754:	e17ffe17 	ldw	r5,-8(fp)
   2d758:	e1bfff17 	ldw	r6,-4(fp)
   2d75c:	100f883a 	mov	r7,r2
   2d760:	002deec0 	call	2deec <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2d764:	e037883a 	mov	sp,fp
   2d768:	dfc00117 	ldw	ra,4(sp)
   2d76c:	df000017 	ldw	fp,0(sp)
   2d770:	dec00204 	addi	sp,sp,8
   2d774:	f800283a 	ret

0002d778 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2d778:	defffc04 	addi	sp,sp,-16
   2d77c:	dfc00315 	stw	ra,12(sp)
   2d780:	df000215 	stw	fp,8(sp)
   2d784:	df000204 	addi	fp,sp,8
   2d788:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2d78c:	e0bfff17 	ldw	r2,-4(fp)
   2d790:	10800017 	ldw	r2,0(r2)
   2d794:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2d798:	e0bffe17 	ldw	r2,-8(fp)
   2d79c:	10c00a04 	addi	r3,r2,40
   2d7a0:	e0bfff17 	ldw	r2,-4(fp)
   2d7a4:	10800217 	ldw	r2,8(r2)
   2d7a8:	1809883a 	mov	r4,r3
   2d7ac:	100b883a 	mov	r5,r2
   2d7b0:	002db8c0 	call	2db8c <altera_avalon_jtag_uart_close>
}
   2d7b4:	e037883a 	mov	sp,fp
   2d7b8:	dfc00117 	ldw	ra,4(sp)
   2d7bc:	df000017 	ldw	fp,0(sp)
   2d7c0:	dec00204 	addi	sp,sp,8
   2d7c4:	f800283a 	ret

0002d7c8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2d7c8:	defffa04 	addi	sp,sp,-24
   2d7cc:	dfc00515 	stw	ra,20(sp)
   2d7d0:	df000415 	stw	fp,16(sp)
   2d7d4:	df000404 	addi	fp,sp,16
   2d7d8:	e13ffd15 	stw	r4,-12(fp)
   2d7dc:	e17ffe15 	stw	r5,-8(fp)
   2d7e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2d7e4:	e0bffd17 	ldw	r2,-12(fp)
   2d7e8:	10800017 	ldw	r2,0(r2)
   2d7ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2d7f0:	e0bffc17 	ldw	r2,-16(fp)
   2d7f4:	10800a04 	addi	r2,r2,40
   2d7f8:	1009883a 	mov	r4,r2
   2d7fc:	e17ffe17 	ldw	r5,-8(fp)
   2d800:	e1bfff17 	ldw	r6,-4(fp)
   2d804:	002dbf40 	call	2dbf4 <altera_avalon_jtag_uart_ioctl>
}
   2d808:	e037883a 	mov	sp,fp
   2d80c:	dfc00117 	ldw	ra,4(sp)
   2d810:	df000017 	ldw	fp,0(sp)
   2d814:	dec00204 	addi	sp,sp,8
   2d818:	f800283a 	ret

0002d81c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2d81c:	defffa04 	addi	sp,sp,-24
   2d820:	dfc00515 	stw	ra,20(sp)
   2d824:	df000415 	stw	fp,16(sp)
   2d828:	df000404 	addi	fp,sp,16
   2d82c:	e13ffd15 	stw	r4,-12(fp)
   2d830:	e17ffe15 	stw	r5,-8(fp)
   2d834:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2d838:	e0bffd17 	ldw	r2,-12(fp)
   2d83c:	00c00044 	movi	r3,1
   2d840:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2d844:	e0bffd17 	ldw	r2,-12(fp)
   2d848:	10800017 	ldw	r2,0(r2)
   2d84c:	10800104 	addi	r2,r2,4
   2d850:	1007883a 	mov	r3,r2
   2d854:	e0bffd17 	ldw	r2,-12(fp)
   2d858:	10800817 	ldw	r2,32(r2)
   2d85c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2d860:	e0fffe17 	ldw	r3,-8(fp)
   2d864:	e0bfff17 	ldw	r2,-4(fp)
   2d868:	d8000015 	stw	zero,0(sp)
   2d86c:	1809883a 	mov	r4,r3
   2d870:	100b883a 	mov	r5,r2
   2d874:	018000f4 	movhi	r6,3
   2d878:	31b63804 	addi	r6,r6,-10016
   2d87c:	e1fffd17 	ldw	r7,-12(fp)
   2d880:	002f3a40 	call	2f3a4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2d884:	e0bffd17 	ldw	r2,-12(fp)
   2d888:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2d88c:	e0bffd17 	ldw	r2,-12(fp)
   2d890:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2d894:	008000f4 	movhi	r2,3
   2d898:	10901404 	addi	r2,r2,16464
   2d89c:	10800017 	ldw	r2,0(r2)
   2d8a0:	1809883a 	mov	r4,r3
   2d8a4:	100b883a 	mov	r5,r2
   2d8a8:	018000f4 	movhi	r6,3
   2d8ac:	31b6b904 	addi	r6,r6,-9500
   2d8b0:	e1fffd17 	ldw	r7,-12(fp)
   2d8b4:	002efb40 	call	2efb4 <alt_alarm_start>
   2d8b8:	1000040e 	bge	r2,zero,2d8cc <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2d8bc:	e0fffd17 	ldw	r3,-12(fp)
   2d8c0:	00a00034 	movhi	r2,32768
   2d8c4:	10bfffc4 	addi	r2,r2,-1
   2d8c8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2d8cc:	e037883a 	mov	sp,fp
   2d8d0:	dfc00117 	ldw	ra,4(sp)
   2d8d4:	df000017 	ldw	fp,0(sp)
   2d8d8:	dec00204 	addi	sp,sp,8
   2d8dc:	f800283a 	ret

0002d8e0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2d8e0:	defff804 	addi	sp,sp,-32
   2d8e4:	df000715 	stw	fp,28(sp)
   2d8e8:	df000704 	addi	fp,sp,28
   2d8ec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2d8f0:	e0bfff17 	ldw	r2,-4(fp)
   2d8f4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2d8f8:	e0bffb17 	ldw	r2,-20(fp)
   2d8fc:	10800017 	ldw	r2,0(r2)
   2d900:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2d904:	e0bffc17 	ldw	r2,-16(fp)
   2d908:	10800104 	addi	r2,r2,4
   2d90c:	10800037 	ldwio	r2,0(r2)
   2d910:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2d914:	e0bffd17 	ldw	r2,-12(fp)
   2d918:	1080c00c 	andi	r2,r2,768
   2d91c:	1000011e 	bne	r2,zero,2d924 <altera_avalon_jtag_uart_irq+0x44>
      break;
   2d920:	00006c06 	br	2dad4 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2d924:	e0bffd17 	ldw	r2,-12(fp)
   2d928:	1080400c 	andi	r2,r2,256
   2d92c:	10003426 	beq	r2,zero,2da00 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2d930:	00800074 	movhi	r2,1
   2d934:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2d938:	e0bffb17 	ldw	r2,-20(fp)
   2d93c:	10800a17 	ldw	r2,40(r2)
   2d940:	10800044 	addi	r2,r2,1
   2d944:	1081ffcc 	andi	r2,r2,2047
   2d948:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2d94c:	e0bffb17 	ldw	r2,-20(fp)
   2d950:	10c00b17 	ldw	r3,44(r2)
   2d954:	e0bffe17 	ldw	r2,-8(fp)
   2d958:	1880011e 	bne	r3,r2,2d960 <altera_avalon_jtag_uart_irq+0x80>
          break;
   2d95c:	00001606 	br	2d9b8 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2d960:	e0bffc17 	ldw	r2,-16(fp)
   2d964:	10800037 	ldwio	r2,0(r2)
   2d968:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2d96c:	e0bff917 	ldw	r2,-28(fp)
   2d970:	10a0000c 	andi	r2,r2,32768
   2d974:	1000011e 	bne	r2,zero,2d97c <altera_avalon_jtag_uart_irq+0x9c>
          break;
   2d978:	00000f06 	br	2d9b8 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2d97c:	e0bffb17 	ldw	r2,-20(fp)
   2d980:	10800a17 	ldw	r2,40(r2)
   2d984:	e0fff917 	ldw	r3,-28(fp)
   2d988:	1809883a 	mov	r4,r3
   2d98c:	e0fffb17 	ldw	r3,-20(fp)
   2d990:	1885883a 	add	r2,r3,r2
   2d994:	10800e04 	addi	r2,r2,56
   2d998:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2d99c:	e0bffb17 	ldw	r2,-20(fp)
   2d9a0:	10800a17 	ldw	r2,40(r2)
   2d9a4:	10800044 	addi	r2,r2,1
   2d9a8:	10c1ffcc 	andi	r3,r2,2047
   2d9ac:	e0bffb17 	ldw	r2,-20(fp)
   2d9b0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   2d9b4:	003fe006 	br	2d938 <_gp+0xffff356c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2d9b8:	e0bff917 	ldw	r2,-28(fp)
   2d9bc:	10bfffec 	andhi	r2,r2,65535
   2d9c0:	10000f26 	beq	r2,zero,2da00 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2d9c4:	e0bffb17 	ldw	r2,-20(fp)
   2d9c8:	10c00817 	ldw	r3,32(r2)
   2d9cc:	00bfff84 	movi	r2,-2
   2d9d0:	1886703a 	and	r3,r3,r2
   2d9d4:	e0bffb17 	ldw	r2,-20(fp)
   2d9d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2d9dc:	e0bffc17 	ldw	r2,-16(fp)
   2d9e0:	10800104 	addi	r2,r2,4
   2d9e4:	1007883a 	mov	r3,r2
   2d9e8:	e0bffb17 	ldw	r2,-20(fp)
   2d9ec:	10800817 	ldw	r2,32(r2)
   2d9f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2d9f4:	e0bffc17 	ldw	r2,-16(fp)
   2d9f8:	10800104 	addi	r2,r2,4
   2d9fc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2da00:	e0bffd17 	ldw	r2,-12(fp)
   2da04:	1080800c 	andi	r2,r2,512
   2da08:	10003126 	beq	r2,zero,2dad0 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2da0c:	e0bffd17 	ldw	r2,-12(fp)
   2da10:	1004d43a 	srli	r2,r2,16
   2da14:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2da18:	00001406 	br	2da6c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2da1c:	e0bffc17 	ldw	r2,-16(fp)
   2da20:	e0fffb17 	ldw	r3,-20(fp)
   2da24:	18c00d17 	ldw	r3,52(r3)
   2da28:	e13ffb17 	ldw	r4,-20(fp)
   2da2c:	20c7883a 	add	r3,r4,r3
   2da30:	18c20e04 	addi	r3,r3,2104
   2da34:	18c00003 	ldbu	r3,0(r3)
   2da38:	18c03fcc 	andi	r3,r3,255
   2da3c:	18c0201c 	xori	r3,r3,128
   2da40:	18ffe004 	addi	r3,r3,-128
   2da44:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2da48:	e0bffb17 	ldw	r2,-20(fp)
   2da4c:	10800d17 	ldw	r2,52(r2)
   2da50:	10800044 	addi	r2,r2,1
   2da54:	10c1ffcc 	andi	r3,r2,2047
   2da58:	e0bffb17 	ldw	r2,-20(fp)
   2da5c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2da60:	e0bffa17 	ldw	r2,-24(fp)
   2da64:	10bfffc4 	addi	r2,r2,-1
   2da68:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2da6c:	e0bffa17 	ldw	r2,-24(fp)
   2da70:	10000526 	beq	r2,zero,2da88 <altera_avalon_jtag_uart_irq+0x1a8>
   2da74:	e0bffb17 	ldw	r2,-20(fp)
   2da78:	10c00d17 	ldw	r3,52(r2)
   2da7c:	e0bffb17 	ldw	r2,-20(fp)
   2da80:	10800c17 	ldw	r2,48(r2)
   2da84:	18bfe51e 	bne	r3,r2,2da1c <_gp+0xffff3650>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2da88:	e0bffa17 	ldw	r2,-24(fp)
   2da8c:	10001026 	beq	r2,zero,2dad0 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2da90:	e0bffb17 	ldw	r2,-20(fp)
   2da94:	10c00817 	ldw	r3,32(r2)
   2da98:	00bfff44 	movi	r2,-3
   2da9c:	1886703a 	and	r3,r3,r2
   2daa0:	e0bffb17 	ldw	r2,-20(fp)
   2daa4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2daa8:	e0bffb17 	ldw	r2,-20(fp)
   2daac:	10800017 	ldw	r2,0(r2)
   2dab0:	10800104 	addi	r2,r2,4
   2dab4:	1007883a 	mov	r3,r2
   2dab8:	e0bffb17 	ldw	r2,-20(fp)
   2dabc:	10800817 	ldw	r2,32(r2)
   2dac0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2dac4:	e0bffc17 	ldw	r2,-16(fp)
   2dac8:	10800104 	addi	r2,r2,4
   2dacc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2dad0:	003f8c06 	br	2d904 <_gp+0xffff3538>
}
   2dad4:	e037883a 	mov	sp,fp
   2dad8:	df000017 	ldw	fp,0(sp)
   2dadc:	dec00104 	addi	sp,sp,4
   2dae0:	f800283a 	ret

0002dae4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2dae4:	defff804 	addi	sp,sp,-32
   2dae8:	df000715 	stw	fp,28(sp)
   2daec:	df000704 	addi	fp,sp,28
   2daf0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2daf4:	e0bffb17 	ldw	r2,-20(fp)
   2daf8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2dafc:	e0bff917 	ldw	r2,-28(fp)
   2db00:	10800017 	ldw	r2,0(r2)
   2db04:	10800104 	addi	r2,r2,4
   2db08:	10800037 	ldwio	r2,0(r2)
   2db0c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2db10:	e0bffa17 	ldw	r2,-24(fp)
   2db14:	1081000c 	andi	r2,r2,1024
   2db18:	10000b26 	beq	r2,zero,2db48 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2db1c:	e0bff917 	ldw	r2,-28(fp)
   2db20:	10800017 	ldw	r2,0(r2)
   2db24:	10800104 	addi	r2,r2,4
   2db28:	1007883a 	mov	r3,r2
   2db2c:	e0bff917 	ldw	r2,-28(fp)
   2db30:	10800817 	ldw	r2,32(r2)
   2db34:	10810014 	ori	r2,r2,1024
   2db38:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   2db3c:	e0bff917 	ldw	r2,-28(fp)
   2db40:	10000915 	stw	zero,36(r2)
   2db44:	00000a06 	br	2db70 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2db48:	e0bff917 	ldw	r2,-28(fp)
   2db4c:	10c00917 	ldw	r3,36(r2)
   2db50:	00a00034 	movhi	r2,32768
   2db54:	10bfff04 	addi	r2,r2,-4
   2db58:	10c00536 	bltu	r2,r3,2db70 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   2db5c:	e0bff917 	ldw	r2,-28(fp)
   2db60:	10800917 	ldw	r2,36(r2)
   2db64:	10c00044 	addi	r3,r2,1
   2db68:	e0bff917 	ldw	r2,-28(fp)
   2db6c:	10c00915 	stw	r3,36(r2)
   2db70:	008000f4 	movhi	r2,3
   2db74:	10901404 	addi	r2,r2,16464
   2db78:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2db7c:	e037883a 	mov	sp,fp
   2db80:	df000017 	ldw	fp,0(sp)
   2db84:	dec00104 	addi	sp,sp,4
   2db88:	f800283a 	ret

0002db8c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2db8c:	defffd04 	addi	sp,sp,-12
   2db90:	df000215 	stw	fp,8(sp)
   2db94:	df000204 	addi	fp,sp,8
   2db98:	e13ffe15 	stw	r4,-8(fp)
   2db9c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2dba0:	00000506 	br	2dbb8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2dba4:	e0bfff17 	ldw	r2,-4(fp)
   2dba8:	1090000c 	andi	r2,r2,16384
   2dbac:	10000226 	beq	r2,zero,2dbb8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2dbb0:	00bffd44 	movi	r2,-11
   2dbb4:	00000b06 	br	2dbe4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2dbb8:	e0bffe17 	ldw	r2,-8(fp)
   2dbbc:	10c00d17 	ldw	r3,52(r2)
   2dbc0:	e0bffe17 	ldw	r2,-8(fp)
   2dbc4:	10800c17 	ldw	r2,48(r2)
   2dbc8:	18800526 	beq	r3,r2,2dbe0 <altera_avalon_jtag_uart_close+0x54>
   2dbcc:	e0bffe17 	ldw	r2,-8(fp)
   2dbd0:	10c00917 	ldw	r3,36(r2)
   2dbd4:	e0bffe17 	ldw	r2,-8(fp)
   2dbd8:	10800117 	ldw	r2,4(r2)
   2dbdc:	18bff136 	bltu	r3,r2,2dba4 <_gp+0xffff37d8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2dbe0:	0005883a 	mov	r2,zero
}
   2dbe4:	e037883a 	mov	sp,fp
   2dbe8:	df000017 	ldw	fp,0(sp)
   2dbec:	dec00104 	addi	sp,sp,4
   2dbf0:	f800283a 	ret

0002dbf4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2dbf4:	defffa04 	addi	sp,sp,-24
   2dbf8:	df000515 	stw	fp,20(sp)
   2dbfc:	df000504 	addi	fp,sp,20
   2dc00:	e13ffd15 	stw	r4,-12(fp)
   2dc04:	e17ffe15 	stw	r5,-8(fp)
   2dc08:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   2dc0c:	00bff9c4 	movi	r2,-25
   2dc10:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2dc14:	e0bffe17 	ldw	r2,-8(fp)
   2dc18:	10da8060 	cmpeqi	r3,r2,27137
   2dc1c:	1800031e 	bne	r3,zero,2dc2c <altera_avalon_jtag_uart_ioctl+0x38>
   2dc20:	109a80a0 	cmpeqi	r2,r2,27138
   2dc24:	1000191e 	bne	r2,zero,2dc8c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   2dc28:	00002806 	br	2dccc <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2dc2c:	e0bffd17 	ldw	r2,-12(fp)
   2dc30:	10c00117 	ldw	r3,4(r2)
   2dc34:	00a00034 	movhi	r2,32768
   2dc38:	10bfffc4 	addi	r2,r2,-1
   2dc3c:	18801226 	beq	r3,r2,2dc88 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   2dc40:	e0bfff17 	ldw	r2,-4(fp)
   2dc44:	10800017 	ldw	r2,0(r2)
   2dc48:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2dc4c:	e0bffc17 	ldw	r2,-16(fp)
   2dc50:	10800090 	cmplti	r2,r2,2
   2dc54:	1000061e 	bne	r2,zero,2dc70 <altera_avalon_jtag_uart_ioctl+0x7c>
   2dc58:	e0fffc17 	ldw	r3,-16(fp)
   2dc5c:	00a00034 	movhi	r2,32768
   2dc60:	10bfffc4 	addi	r2,r2,-1
   2dc64:	18800226 	beq	r3,r2,2dc70 <altera_avalon_jtag_uart_ioctl+0x7c>
   2dc68:	e0bffc17 	ldw	r2,-16(fp)
   2dc6c:	00000206 	br	2dc78 <altera_avalon_jtag_uart_ioctl+0x84>
   2dc70:	00a00034 	movhi	r2,32768
   2dc74:	10bfff84 	addi	r2,r2,-2
   2dc78:	e0fffd17 	ldw	r3,-12(fp)
   2dc7c:	18800115 	stw	r2,4(r3)
      rc = 0;
   2dc80:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2dc84:	00001106 	br	2dccc <altera_avalon_jtag_uart_ioctl+0xd8>
   2dc88:	00001006 	br	2dccc <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2dc8c:	e0bffd17 	ldw	r2,-12(fp)
   2dc90:	10c00117 	ldw	r3,4(r2)
   2dc94:	00a00034 	movhi	r2,32768
   2dc98:	10bfffc4 	addi	r2,r2,-1
   2dc9c:	18800a26 	beq	r3,r2,2dcc8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2dca0:	e0bffd17 	ldw	r2,-12(fp)
   2dca4:	10c00917 	ldw	r3,36(r2)
   2dca8:	e0bffd17 	ldw	r2,-12(fp)
   2dcac:	10800117 	ldw	r2,4(r2)
   2dcb0:	1885803a 	cmpltu	r2,r3,r2
   2dcb4:	10c03fcc 	andi	r3,r2,255
   2dcb8:	e0bfff17 	ldw	r2,-4(fp)
   2dcbc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   2dcc0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2dcc4:	00000006 	br	2dcc8 <altera_avalon_jtag_uart_ioctl+0xd4>
   2dcc8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   2dccc:	e0bffb17 	ldw	r2,-20(fp)
}
   2dcd0:	e037883a 	mov	sp,fp
   2dcd4:	df000017 	ldw	fp,0(sp)
   2dcd8:	dec00104 	addi	sp,sp,4
   2dcdc:	f800283a 	ret

0002dce0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2dce0:	defff304 	addi	sp,sp,-52
   2dce4:	dfc00c15 	stw	ra,48(sp)
   2dce8:	df000b15 	stw	fp,44(sp)
   2dcec:	df000b04 	addi	fp,sp,44
   2dcf0:	e13ffc15 	stw	r4,-16(fp)
   2dcf4:	e17ffd15 	stw	r5,-12(fp)
   2dcf8:	e1bffe15 	stw	r6,-8(fp)
   2dcfc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2dd00:	e0bffd17 	ldw	r2,-12(fp)
   2dd04:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2dd08:	00004906 	br	2de30 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2dd0c:	e0bffc17 	ldw	r2,-16(fp)
   2dd10:	10800a17 	ldw	r2,40(r2)
   2dd14:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2dd18:	e0bffc17 	ldw	r2,-16(fp)
   2dd1c:	10800b17 	ldw	r2,44(r2)
   2dd20:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   2dd24:	e0fff717 	ldw	r3,-36(fp)
   2dd28:	e0bff817 	ldw	r2,-32(fp)
   2dd2c:	18800536 	bltu	r3,r2,2dd44 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2dd30:	e0fff717 	ldw	r3,-36(fp)
   2dd34:	e0bff817 	ldw	r2,-32(fp)
   2dd38:	1885c83a 	sub	r2,r3,r2
   2dd3c:	e0bff615 	stw	r2,-40(fp)
   2dd40:	00000406 	br	2dd54 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2dd44:	00c20004 	movi	r3,2048
   2dd48:	e0bff817 	ldw	r2,-32(fp)
   2dd4c:	1885c83a 	sub	r2,r3,r2
   2dd50:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2dd54:	e0bff617 	ldw	r2,-40(fp)
   2dd58:	1000011e 	bne	r2,zero,2dd60 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   2dd5c:	00001d06 	br	2ddd4 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   2dd60:	e0fffe17 	ldw	r3,-8(fp)
   2dd64:	e0bff617 	ldw	r2,-40(fp)
   2dd68:	1880022e 	bgeu	r3,r2,2dd74 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   2dd6c:	e0bffe17 	ldw	r2,-8(fp)
   2dd70:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2dd74:	e0bff817 	ldw	r2,-32(fp)
   2dd78:	10800e04 	addi	r2,r2,56
   2dd7c:	e0fffc17 	ldw	r3,-16(fp)
   2dd80:	1885883a 	add	r2,r3,r2
   2dd84:	e13ff517 	ldw	r4,-44(fp)
   2dd88:	100b883a 	mov	r5,r2
   2dd8c:	e1bff617 	ldw	r6,-40(fp)
   2dd90:	0025c840 	call	25c84 <memcpy>
      ptr   += n;
   2dd94:	e0fff517 	ldw	r3,-44(fp)
   2dd98:	e0bff617 	ldw	r2,-40(fp)
   2dd9c:	1885883a 	add	r2,r3,r2
   2dda0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   2dda4:	e0fffe17 	ldw	r3,-8(fp)
   2dda8:	e0bff617 	ldw	r2,-40(fp)
   2ddac:	1885c83a 	sub	r2,r3,r2
   2ddb0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2ddb4:	e0fff817 	ldw	r3,-32(fp)
   2ddb8:	e0bff617 	ldw	r2,-40(fp)
   2ddbc:	1885883a 	add	r2,r3,r2
   2ddc0:	10c1ffcc 	andi	r3,r2,2047
   2ddc4:	e0bffc17 	ldw	r2,-16(fp)
   2ddc8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2ddcc:	e0bffe17 	ldw	r2,-8(fp)
   2ddd0:	00bfce16 	blt	zero,r2,2dd0c <_gp+0xffff3940>

    /* If we read any data then return it */
    if (ptr != buffer)
   2ddd4:	e0fff517 	ldw	r3,-44(fp)
   2ddd8:	e0bffd17 	ldw	r2,-12(fp)
   2dddc:	18800126 	beq	r3,r2,2dde4 <altera_avalon_jtag_uart_read+0x104>
      break;
   2dde0:	00001506 	br	2de38 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2dde4:	e0bfff17 	ldw	r2,-4(fp)
   2dde8:	1090000c 	andi	r2,r2,16384
   2ddec:	10000126 	beq	r2,zero,2ddf4 <altera_avalon_jtag_uart_read+0x114>
      break;
   2ddf0:	00001106 	br	2de38 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2ddf4:	0001883a 	nop
   2ddf8:	e0bffc17 	ldw	r2,-16(fp)
   2ddfc:	10c00a17 	ldw	r3,40(r2)
   2de00:	e0bff717 	ldw	r2,-36(fp)
   2de04:	1880051e 	bne	r3,r2,2de1c <altera_avalon_jtag_uart_read+0x13c>
   2de08:	e0bffc17 	ldw	r2,-16(fp)
   2de0c:	10c00917 	ldw	r3,36(r2)
   2de10:	e0bffc17 	ldw	r2,-16(fp)
   2de14:	10800117 	ldw	r2,4(r2)
   2de18:	18bff736 	bltu	r3,r2,2ddf8 <_gp+0xffff3a2c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2de1c:	e0bffc17 	ldw	r2,-16(fp)
   2de20:	10c00a17 	ldw	r3,40(r2)
   2de24:	e0bff717 	ldw	r2,-36(fp)
   2de28:	1880011e 	bne	r3,r2,2de30 <altera_avalon_jtag_uart_read+0x150>
      break;
   2de2c:	00000206 	br	2de38 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2de30:	e0bffe17 	ldw	r2,-8(fp)
   2de34:	00bfb516 	blt	zero,r2,2dd0c <_gp+0xffff3940>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2de38:	e0fff517 	ldw	r3,-44(fp)
   2de3c:	e0bffd17 	ldw	r2,-12(fp)
   2de40:	18801826 	beq	r3,r2,2dea4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2de44:	0005303a 	rdctl	r2,status
   2de48:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2de4c:	e0fffa17 	ldw	r3,-24(fp)
   2de50:	00bfff84 	movi	r2,-2
   2de54:	1884703a 	and	r2,r3,r2
   2de58:	1001703a 	wrctl	status,r2
  
  return context;
   2de5c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2de60:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2de64:	e0bffc17 	ldw	r2,-16(fp)
   2de68:	10800817 	ldw	r2,32(r2)
   2de6c:	10c00054 	ori	r3,r2,1
   2de70:	e0bffc17 	ldw	r2,-16(fp)
   2de74:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2de78:	e0bffc17 	ldw	r2,-16(fp)
   2de7c:	10800017 	ldw	r2,0(r2)
   2de80:	10800104 	addi	r2,r2,4
   2de84:	1007883a 	mov	r3,r2
   2de88:	e0bffc17 	ldw	r2,-16(fp)
   2de8c:	10800817 	ldw	r2,32(r2)
   2de90:	18800035 	stwio	r2,0(r3)
   2de94:	e0bff917 	ldw	r2,-28(fp)
   2de98:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2de9c:	e0bffb17 	ldw	r2,-20(fp)
   2dea0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2dea4:	e0fff517 	ldw	r3,-44(fp)
   2dea8:	e0bffd17 	ldw	r2,-12(fp)
   2deac:	18800426 	beq	r3,r2,2dec0 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   2deb0:	e0fff517 	ldw	r3,-44(fp)
   2deb4:	e0bffd17 	ldw	r2,-12(fp)
   2deb8:	1885c83a 	sub	r2,r3,r2
   2debc:	00000606 	br	2ded8 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   2dec0:	e0bfff17 	ldw	r2,-4(fp)
   2dec4:	1090000c 	andi	r2,r2,16384
   2dec8:	10000226 	beq	r2,zero,2ded4 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   2decc:	00bffd44 	movi	r2,-11
   2ded0:	00000106 	br	2ded8 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   2ded4:	00bffec4 	movi	r2,-5
}
   2ded8:	e037883a 	mov	sp,fp
   2dedc:	dfc00117 	ldw	ra,4(sp)
   2dee0:	df000017 	ldw	fp,0(sp)
   2dee4:	dec00204 	addi	sp,sp,8
   2dee8:	f800283a 	ret

0002deec <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2deec:	defff304 	addi	sp,sp,-52
   2def0:	dfc00c15 	stw	ra,48(sp)
   2def4:	df000b15 	stw	fp,44(sp)
   2def8:	df000b04 	addi	fp,sp,44
   2defc:	e13ffc15 	stw	r4,-16(fp)
   2df00:	e17ffd15 	stw	r5,-12(fp)
   2df04:	e1bffe15 	stw	r6,-8(fp)
   2df08:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2df0c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2df10:	e0bffd17 	ldw	r2,-12(fp)
   2df14:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2df18:	00003806 	br	2dffc <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2df1c:	e0bffc17 	ldw	r2,-16(fp)
   2df20:	10800c17 	ldw	r2,48(r2)
   2df24:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   2df28:	e0bffc17 	ldw	r2,-16(fp)
   2df2c:	10800d17 	ldw	r2,52(r2)
   2df30:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2df34:	e0fff817 	ldw	r3,-32(fp)
   2df38:	e0bff517 	ldw	r2,-44(fp)
   2df3c:	1880062e 	bgeu	r3,r2,2df58 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2df40:	e0fff517 	ldw	r3,-44(fp)
   2df44:	e0bff817 	ldw	r2,-32(fp)
   2df48:	1885c83a 	sub	r2,r3,r2
   2df4c:	10bfffc4 	addi	r2,r2,-1
   2df50:	e0bff615 	stw	r2,-40(fp)
   2df54:	00000b06 	br	2df84 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2df58:	e0bff517 	ldw	r2,-44(fp)
   2df5c:	10000526 	beq	r2,zero,2df74 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2df60:	00c20004 	movi	r3,2048
   2df64:	e0bff817 	ldw	r2,-32(fp)
   2df68:	1885c83a 	sub	r2,r3,r2
   2df6c:	e0bff615 	stw	r2,-40(fp)
   2df70:	00000406 	br	2df84 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2df74:	00c1ffc4 	movi	r3,2047
   2df78:	e0bff817 	ldw	r2,-32(fp)
   2df7c:	1885c83a 	sub	r2,r3,r2
   2df80:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2df84:	e0bff617 	ldw	r2,-40(fp)
   2df88:	1000011e 	bne	r2,zero,2df90 <altera_avalon_jtag_uart_write+0xa4>
        break;
   2df8c:	00001d06 	br	2e004 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   2df90:	e0fffe17 	ldw	r3,-8(fp)
   2df94:	e0bff617 	ldw	r2,-40(fp)
   2df98:	1880022e 	bgeu	r3,r2,2dfa4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   2df9c:	e0bffe17 	ldw	r2,-8(fp)
   2dfa0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2dfa4:	e0bff817 	ldw	r2,-32(fp)
   2dfa8:	10820e04 	addi	r2,r2,2104
   2dfac:	e0fffc17 	ldw	r3,-16(fp)
   2dfb0:	1885883a 	add	r2,r3,r2
   2dfb4:	1009883a 	mov	r4,r2
   2dfb8:	e17ffd17 	ldw	r5,-12(fp)
   2dfbc:	e1bff617 	ldw	r6,-40(fp)
   2dfc0:	0025c840 	call	25c84 <memcpy>
      ptr   += n;
   2dfc4:	e0fffd17 	ldw	r3,-12(fp)
   2dfc8:	e0bff617 	ldw	r2,-40(fp)
   2dfcc:	1885883a 	add	r2,r3,r2
   2dfd0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2dfd4:	e0fffe17 	ldw	r3,-8(fp)
   2dfd8:	e0bff617 	ldw	r2,-40(fp)
   2dfdc:	1885c83a 	sub	r2,r3,r2
   2dfe0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2dfe4:	e0fff817 	ldw	r3,-32(fp)
   2dfe8:	e0bff617 	ldw	r2,-40(fp)
   2dfec:	1885883a 	add	r2,r3,r2
   2dff0:	10c1ffcc 	andi	r3,r2,2047
   2dff4:	e0bffc17 	ldw	r2,-16(fp)
   2dff8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2dffc:	e0bffe17 	ldw	r2,-8(fp)
   2e000:	00bfc616 	blt	zero,r2,2df1c <_gp+0xffff3b50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e004:	0005303a 	rdctl	r2,status
   2e008:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e00c:	e0fffa17 	ldw	r3,-24(fp)
   2e010:	00bfff84 	movi	r2,-2
   2e014:	1884703a 	and	r2,r3,r2
   2e018:	1001703a 	wrctl	status,r2
  
  return context;
   2e01c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2e020:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2e024:	e0bffc17 	ldw	r2,-16(fp)
   2e028:	10800817 	ldw	r2,32(r2)
   2e02c:	10c00094 	ori	r3,r2,2
   2e030:	e0bffc17 	ldw	r2,-16(fp)
   2e034:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2e038:	e0bffc17 	ldw	r2,-16(fp)
   2e03c:	10800017 	ldw	r2,0(r2)
   2e040:	10800104 	addi	r2,r2,4
   2e044:	1007883a 	mov	r3,r2
   2e048:	e0bffc17 	ldw	r2,-16(fp)
   2e04c:	10800817 	ldw	r2,32(r2)
   2e050:	18800035 	stwio	r2,0(r3)
   2e054:	e0bff917 	ldw	r2,-28(fp)
   2e058:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e05c:	e0bffb17 	ldw	r2,-20(fp)
   2e060:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2e064:	e0bffe17 	ldw	r2,-8(fp)
   2e068:	0080120e 	bge	zero,r2,2e0b4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   2e06c:	e0bfff17 	ldw	r2,-4(fp)
   2e070:	1090000c 	andi	r2,r2,16384
   2e074:	10000126 	beq	r2,zero,2e07c <altera_avalon_jtag_uart_write+0x190>
        break;
   2e078:	00001006 	br	2e0bc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2e07c:	0001883a 	nop
   2e080:	e0bffc17 	ldw	r2,-16(fp)
   2e084:	10c00d17 	ldw	r3,52(r2)
   2e088:	e0bff517 	ldw	r2,-44(fp)
   2e08c:	1880051e 	bne	r3,r2,2e0a4 <altera_avalon_jtag_uart_write+0x1b8>
   2e090:	e0bffc17 	ldw	r2,-16(fp)
   2e094:	10c00917 	ldw	r3,36(r2)
   2e098:	e0bffc17 	ldw	r2,-16(fp)
   2e09c:	10800117 	ldw	r2,4(r2)
   2e0a0:	18bff736 	bltu	r3,r2,2e080 <_gp+0xffff3cb4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   2e0a4:	e0bffc17 	ldw	r2,-16(fp)
   2e0a8:	10800917 	ldw	r2,36(r2)
   2e0ac:	10000126 	beq	r2,zero,2e0b4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   2e0b0:	00000206 	br	2e0bc <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   2e0b4:	e0bffe17 	ldw	r2,-8(fp)
   2e0b8:	00bf9716 	blt	zero,r2,2df18 <_gp+0xffff3b4c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2e0bc:	e0fffd17 	ldw	r3,-12(fp)
   2e0c0:	e0bff717 	ldw	r2,-36(fp)
   2e0c4:	18800426 	beq	r3,r2,2e0d8 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   2e0c8:	e0fffd17 	ldw	r3,-12(fp)
   2e0cc:	e0bff717 	ldw	r2,-36(fp)
   2e0d0:	1885c83a 	sub	r2,r3,r2
   2e0d4:	00000606 	br	2e0f0 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   2e0d8:	e0bfff17 	ldw	r2,-4(fp)
   2e0dc:	1090000c 	andi	r2,r2,16384
   2e0e0:	10000226 	beq	r2,zero,2e0ec <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   2e0e4:	00bffd44 	movi	r2,-11
   2e0e8:	00000106 	br	2e0f0 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2e0ec:	00bffec4 	movi	r2,-5
}
   2e0f0:	e037883a 	mov	sp,fp
   2e0f4:	dfc00117 	ldw	ra,4(sp)
   2e0f8:	df000017 	ldw	fp,0(sp)
   2e0fc:	dec00204 	addi	sp,sp,8
   2e100:	f800283a 	ret

0002e104 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2e104:	defffe04 	addi	sp,sp,-8
   2e108:	dfc00115 	stw	ra,4(sp)
   2e10c:	df000015 	stw	fp,0(sp)
   2e110:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2e114:	008000f4 	movhi	r2,3
   2e118:	1088fe04 	addi	r2,r2,9208
   2e11c:	10800017 	ldw	r2,0(r2)
   2e120:	10000526 	beq	r2,zero,2e138 <alt_get_errno+0x34>
   2e124:	008000f4 	movhi	r2,3
   2e128:	1088fe04 	addi	r2,r2,9208
   2e12c:	10800017 	ldw	r2,0(r2)
   2e130:	103ee83a 	callr	r2
   2e134:	00000206 	br	2e140 <alt_get_errno+0x3c>
   2e138:	008000f4 	movhi	r2,3
   2e13c:	10900f04 	addi	r2,r2,16444
}
   2e140:	e037883a 	mov	sp,fp
   2e144:	dfc00117 	ldw	ra,4(sp)
   2e148:	df000017 	ldw	fp,0(sp)
   2e14c:	dec00204 	addi	sp,sp,8
   2e150:	f800283a 	ret

0002e154 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
   2e154:	defff904 	addi	sp,sp,-28
   2e158:	df000615 	stw	fp,24(sp)
   2e15c:	df000604 	addi	fp,sp,24
   2e160:	e13ffe15 	stw	r4,-8(fp)
   2e164:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
   2e168:	00bfffc4 	movi	r2,-1
   2e16c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
   2e170:	0005317a 	rdctl	r2,cpuid
   2e174:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
   2e178:	e0bffb17 	ldw	r2,-20(fp)
   2e17c:	1006943a 	slli	r3,r2,16
   2e180:	e0bfff17 	ldw	r2,-4(fp)
   2e184:	1884b03a 	or	r2,r3,r2
   2e188:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
   2e18c:	e0bffe17 	ldw	r2,-8(fp)
   2e190:	10800317 	ldw	r2,12(r2)
   2e194:	e0fffc17 	ldw	r3,-16(fp)
   2e198:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
   2e19c:	e0bffe17 	ldw	r2,-8(fp)
   2e1a0:	10800317 	ldw	r2,12(r2)
   2e1a4:	10800037 	ldwio	r2,0(r2)
   2e1a8:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
   2e1ac:	e0fffd17 	ldw	r3,-12(fp)
   2e1b0:	e0bffc17 	ldw	r2,-16(fp)
   2e1b4:	1880011e 	bne	r3,r2,2e1bc <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
   2e1b8:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
   2e1bc:	e0bffa17 	ldw	r2,-24(fp)
}
   2e1c0:	e037883a 	mov	sp,fp
   2e1c4:	df000017 	ldw	fp,0(sp)
   2e1c8:	dec00104 	addi	sp,sp,4
   2e1cc:	f800283a 	ret

0002e1d0 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
   2e1d0:	defffc04 	addi	sp,sp,-16
   2e1d4:	dfc00315 	stw	ra,12(sp)
   2e1d8:	df000215 	stw	fp,8(sp)
   2e1dc:	df000204 	addi	fp,sp,8
   2e1e0:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
   2e1e4:	e13fff17 	ldw	r4,-4(fp)
   2e1e8:	d1600d04 	addi	r5,gp,-32716
   2e1ec:	002f2e40 	call	2f2e4 <alt_find_dev>
   2e1f0:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
   2e1f4:	e0bffe17 	ldw	r2,-8(fp)
   2e1f8:	1000041e 	bne	r2,zero,2e20c <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
   2e1fc:	002e1040 	call	2e104 <alt_get_errno>
   2e200:	1007883a 	mov	r3,r2
   2e204:	008004c4 	movi	r2,19
   2e208:	18800015 	stw	r2,0(r3)
  }

  return dev;
   2e20c:	e0bffe17 	ldw	r2,-8(fp)
}
   2e210:	e037883a 	mov	sp,fp
   2e214:	dfc00117 	ldw	ra,4(sp)
   2e218:	df000017 	ldw	fp,0(sp)
   2e21c:	dec00204 	addi	sp,sp,8
   2e220:	f800283a 	ret

0002e224 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
   2e224:	defffe04 	addi	sp,sp,-8
   2e228:	df000115 	stw	fp,4(sp)
   2e22c:	df000104 	addi	fp,sp,4
   2e230:	e13fff15 	stw	r4,-4(fp)
  return;
   2e234:	0001883a 	nop
}
   2e238:	e037883a 	mov	sp,fp
   2e23c:	df000017 	ldw	fp,0(sp)
   2e240:	dec00104 	addi	sp,sp,4
   2e244:	f800283a 	ret

0002e248 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
   2e248:	defffc04 	addi	sp,sp,-16
   2e24c:	dfc00315 	stw	ra,12(sp)
   2e250:	df000215 	stw	fp,8(sp)
   2e254:	df000204 	addi	fp,sp,8
   2e258:	e13ffe15 	stw	r4,-8(fp)
   2e25c:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
   2e260:	0001883a 	nop
   2e264:	e13ffe17 	ldw	r4,-8(fp)
   2e268:	e17fff17 	ldw	r5,-4(fp)
   2e26c:	002e1540 	call	2e154 <alt_mutex_trylock>
   2e270:	103ffc1e 	bne	r2,zero,2e264 <_gp+0xffff3e98>
}
   2e274:	e037883a 	mov	sp,fp
   2e278:	dfc00117 	ldw	ra,4(sp)
   2e27c:	df000017 	ldw	fp,0(sp)
   2e280:	dec00204 	addi	sp,sp,8
   2e284:	f800283a 	ret

0002e288 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
   2e288:	defffa04 	addi	sp,sp,-24
   2e28c:	dfc00515 	stw	ra,20(sp)
   2e290:	df000415 	stw	fp,16(sp)
   2e294:	df000404 	addi	fp,sp,16
   2e298:	e13ffd15 	stw	r4,-12(fp)
   2e29c:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
   2e2a0:	e13ffd17 	ldw	r4,-12(fp)
   2e2a4:	e17ffe17 	ldw	r5,-8(fp)
   2e2a8:	002e1540 	call	2e154 <alt_mutex_trylock>
   2e2ac:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
   2e2b0:	e0bffc17 	ldw	r2,-16(fp)
}
   2e2b4:	e037883a 	mov	sp,fp
   2e2b8:	dfc00117 	ldw	ra,4(sp)
   2e2bc:	df000017 	ldw	fp,0(sp)
   2e2c0:	dec00204 	addi	sp,sp,8
   2e2c4:	f800283a 	ret

0002e2c8 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
   2e2c8:	defffd04 	addi	sp,sp,-12
   2e2cc:	df000215 	stw	fp,8(sp)
   2e2d0:	df000204 	addi	fp,sp,8
   2e2d4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
   2e2d8:	0005317a 	rdctl	r2,cpuid
   2e2dc:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
   2e2e0:	e0bfff17 	ldw	r2,-4(fp)
   2e2e4:	10800317 	ldw	r2,12(r2)
   2e2e8:	10800104 	addi	r2,r2,4
   2e2ec:	00c00044 	movi	r3,1
   2e2f0:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
   2e2f4:	e0bfff17 	ldw	r2,-4(fp)
   2e2f8:	10800317 	ldw	r2,12(r2)
   2e2fc:	e0fffe17 	ldw	r3,-8(fp)
   2e300:	1806943a 	slli	r3,r3,16
   2e304:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
   2e308:	e037883a 	mov	sp,fp
   2e30c:	df000017 	ldw	fp,0(sp)
   2e310:	dec00104 	addi	sp,sp,4
   2e314:	f800283a 	ret

0002e318 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
   2e318:	defff904 	addi	sp,sp,-28
   2e31c:	df000615 	stw	fp,24(sp)
   2e320:	df000604 	addi	fp,sp,24
   2e324:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
   2e328:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
   2e32c:	0005317a 	rdctl	r2,cpuid
   2e330:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
   2e334:	e0bfff17 	ldw	r2,-4(fp)
   2e338:	10800317 	ldw	r2,12(r2)
   2e33c:	10800037 	ldwio	r2,0(r2)
   2e340:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
   2e344:	e0bffc17 	ldw	r2,-16(fp)
   2e348:	1004d43a 	srli	r2,r2,16
   2e34c:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
   2e350:	e0fffd17 	ldw	r3,-12(fp)
   2e354:	e0bffb17 	ldw	r2,-20(fp)
   2e358:	1880071e 	bne	r3,r2,2e378 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
   2e35c:	e0bffc17 	ldw	r2,-16(fp)
   2e360:	10bfffcc 	andi	r2,r2,65535
   2e364:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
   2e368:	e0bffe17 	ldw	r2,-8(fp)
   2e36c:	10000226 	beq	r2,zero,2e378 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
   2e370:	00800044 	movi	r2,1
   2e374:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
   2e378:	e0bffa17 	ldw	r2,-24(fp)
}
   2e37c:	e037883a 	mov	sp,fp
   2e380:	df000017 	ldw	fp,0(sp)
   2e384:	dec00104 	addi	sp,sp,4
   2e388:	f800283a 	ret

0002e38c <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
   2e38c:	defffc04 	addi	sp,sp,-16
   2e390:	df000315 	stw	fp,12(sp)
   2e394:	df000304 	addi	fp,sp,12
   2e398:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
   2e39c:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
   2e3a0:	e0bfff17 	ldw	r2,-4(fp)
   2e3a4:	10800317 	ldw	r2,12(r2)
   2e3a8:	10800104 	addi	r2,r2,4
   2e3ac:	10800037 	ldwio	r2,0(r2)
   2e3b0:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
   2e3b4:	e0bffe17 	ldw	r2,-8(fp)
   2e3b8:	1080004c 	andi	r2,r2,1
   2e3bc:	10000226 	beq	r2,zero,2e3c8 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
   2e3c0:	00800044 	movi	r2,1
   2e3c4:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
   2e3c8:	e0bffd17 	ldw	r2,-12(fp)
}
   2e3cc:	e037883a 	mov	sp,fp
   2e3d0:	df000017 	ldw	fp,0(sp)
   2e3d4:	dec00104 	addi	sp,sp,4
   2e3d8:	f800283a 	ret

0002e3dc <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2e3dc:	defffa04 	addi	sp,sp,-24
   2e3e0:	dfc00515 	stw	ra,20(sp)
   2e3e4:	df000415 	stw	fp,16(sp)
   2e3e8:	df000404 	addi	fp,sp,16
   2e3ec:	e13ffd15 	stw	r4,-12(fp)
   2e3f0:	e17ffe15 	stw	r5,-8(fp)
   2e3f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2e3f8:	e0bffd17 	ldw	r2,-12(fp)
   2e3fc:	10800017 	ldw	r2,0(r2)
   2e400:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   2e404:	e0bffc17 	ldw	r2,-16(fp)
   2e408:	10c00a04 	addi	r3,r2,40
   2e40c:	e0bffd17 	ldw	r2,-12(fp)
   2e410:	10800217 	ldw	r2,8(r2)
   2e414:	1809883a 	mov	r4,r3
   2e418:	e17ffe17 	ldw	r5,-8(fp)
   2e41c:	e1bfff17 	ldw	r6,-4(fp)
   2e420:	100f883a 	mov	r7,r2
   2e424:	002e8f40 	call	2e8f4 <altera_avalon_uart_read>
      fd->fd_flags);
}
   2e428:	e037883a 	mov	sp,fp
   2e42c:	dfc00117 	ldw	ra,4(sp)
   2e430:	df000017 	ldw	fp,0(sp)
   2e434:	dec00204 	addi	sp,sp,8
   2e438:	f800283a 	ret

0002e43c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2e43c:	defffa04 	addi	sp,sp,-24
   2e440:	dfc00515 	stw	ra,20(sp)
   2e444:	df000415 	stw	fp,16(sp)
   2e448:	df000404 	addi	fp,sp,16
   2e44c:	e13ffd15 	stw	r4,-12(fp)
   2e450:	e17ffe15 	stw	r5,-8(fp)
   2e454:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2e458:	e0bffd17 	ldw	r2,-12(fp)
   2e45c:	10800017 	ldw	r2,0(r2)
   2e460:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   2e464:	e0bffc17 	ldw	r2,-16(fp)
   2e468:	10c00a04 	addi	r3,r2,40
   2e46c:	e0bffd17 	ldw	r2,-12(fp)
   2e470:	10800217 	ldw	r2,8(r2)
   2e474:	1809883a 	mov	r4,r3
   2e478:	e17ffe17 	ldw	r5,-8(fp)
   2e47c:	e1bfff17 	ldw	r6,-4(fp)
   2e480:	100f883a 	mov	r7,r2
   2e484:	002eb200 	call	2eb20 <altera_avalon_uart_write>
      fd->fd_flags);
}
   2e488:	e037883a 	mov	sp,fp
   2e48c:	dfc00117 	ldw	ra,4(sp)
   2e490:	df000017 	ldw	fp,0(sp)
   2e494:	dec00204 	addi	sp,sp,8
   2e498:	f800283a 	ret

0002e49c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   2e49c:	defffc04 	addi	sp,sp,-16
   2e4a0:	dfc00315 	stw	ra,12(sp)
   2e4a4:	df000215 	stw	fp,8(sp)
   2e4a8:	df000204 	addi	fp,sp,8
   2e4ac:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2e4b0:	e0bfff17 	ldw	r2,-4(fp)
   2e4b4:	10800017 	ldw	r2,0(r2)
   2e4b8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   2e4bc:	e0bffe17 	ldw	r2,-8(fp)
   2e4c0:	10c00a04 	addi	r3,r2,40
   2e4c4:	e0bfff17 	ldw	r2,-4(fp)
   2e4c8:	10800217 	ldw	r2,8(r2)
   2e4cc:	1809883a 	mov	r4,r3
   2e4d0:	100b883a 	mov	r5,r2
   2e4d4:	002e8500 	call	2e850 <altera_avalon_uart_close>
}
   2e4d8:	e037883a 	mov	sp,fp
   2e4dc:	dfc00117 	ldw	ra,4(sp)
   2e4e0:	df000017 	ldw	fp,0(sp)
   2e4e4:	dec00204 	addi	sp,sp,8
   2e4e8:	f800283a 	ret

0002e4ec <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   2e4ec:	defff804 	addi	sp,sp,-32
   2e4f0:	dfc00715 	stw	ra,28(sp)
   2e4f4:	df000615 	stw	fp,24(sp)
   2e4f8:	df000604 	addi	fp,sp,24
   2e4fc:	e13ffd15 	stw	r4,-12(fp)
   2e500:	e17ffe15 	stw	r5,-8(fp)
   2e504:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   2e508:	e0bffd17 	ldw	r2,-12(fp)
   2e50c:	10800017 	ldw	r2,0(r2)
   2e510:	e0bffb15 	stw	r2,-20(fp)
   2e514:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   2e518:	1000041e 	bne	r2,zero,2e52c <altera_avalon_uart_init+0x40>
   2e51c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   2e520:	1000021e 	bne	r2,zero,2e52c <altera_avalon_uart_init+0x40>
   2e524:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   2e528:	10000226 	beq	r2,zero,2e534 <altera_avalon_uart_init+0x48>
   2e52c:	00800044 	movi	r2,1
   2e530:	00000106 	br	2e538 <altera_avalon_uart_init+0x4c>
   2e534:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   2e538:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   2e53c:	e0bffc17 	ldw	r2,-16(fp)
   2e540:	10000f1e 	bne	r2,zero,2e580 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   2e544:	e0bffd17 	ldw	r2,-12(fp)
   2e548:	00c32004 	movi	r3,3200
   2e54c:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   2e550:	e0bffb17 	ldw	r2,-20(fp)
   2e554:	10800304 	addi	r2,r2,12
   2e558:	e0fffd17 	ldw	r3,-12(fp)
   2e55c:	18c00117 	ldw	r3,4(r3)
   2e560:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   2e564:	d8000015 	stw	zero,0(sp)
   2e568:	e13ffe17 	ldw	r4,-8(fp)
   2e56c:	e17fff17 	ldw	r5,-4(fp)
   2e570:	018000f4 	movhi	r6,3
   2e574:	31b96504 	addi	r6,r6,-6764
   2e578:	e1fffd17 	ldw	r7,-12(fp)
   2e57c:	002f3a40 	call	2f3a4 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   2e580:	e037883a 	mov	sp,fp
   2e584:	dfc00117 	ldw	ra,4(sp)
   2e588:	df000017 	ldw	fp,0(sp)
   2e58c:	dec00204 	addi	sp,sp,8
   2e590:	f800283a 	ret

0002e594 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   2e594:	defffa04 	addi	sp,sp,-24
   2e598:	dfc00515 	stw	ra,20(sp)
   2e59c:	df000415 	stw	fp,16(sp)
   2e5a0:	df000404 	addi	fp,sp,16
   2e5a4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   2e5a8:	e0bfff17 	ldw	r2,-4(fp)
   2e5ac:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   2e5b0:	e0bffc17 	ldw	r2,-16(fp)
   2e5b4:	10800017 	ldw	r2,0(r2)
   2e5b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   2e5bc:	e0bffd17 	ldw	r2,-12(fp)
   2e5c0:	10800204 	addi	r2,r2,8
   2e5c4:	10800037 	ldwio	r2,0(r2)
   2e5c8:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   2e5cc:	e0bffd17 	ldw	r2,-12(fp)
   2e5d0:	10800204 	addi	r2,r2,8
   2e5d4:	0007883a 	mov	r3,zero
   2e5d8:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   2e5dc:	e0bffd17 	ldw	r2,-12(fp)
   2e5e0:	10800204 	addi	r2,r2,8
   2e5e4:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   2e5e8:	e0bffe17 	ldw	r2,-8(fp)
   2e5ec:	1080200c 	andi	r2,r2,128
   2e5f0:	10000326 	beq	r2,zero,2e600 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   2e5f4:	e13ffc17 	ldw	r4,-16(fp)
   2e5f8:	e17ffe17 	ldw	r5,-8(fp)
   2e5fc:	002e62c0 	call	2e62c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   2e600:	e0bffe17 	ldw	r2,-8(fp)
   2e604:	1081100c 	andi	r2,r2,1088
   2e608:	10000326 	beq	r2,zero,2e618 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   2e60c:	e13ffc17 	ldw	r4,-16(fp)
   2e610:	e17ffe17 	ldw	r5,-8(fp)
   2e614:	002e70c0 	call	2e70c <altera_avalon_uart_txirq>
  }
  

}
   2e618:	e037883a 	mov	sp,fp
   2e61c:	dfc00117 	ldw	ra,4(sp)
   2e620:	df000017 	ldw	fp,0(sp)
   2e624:	dec00204 	addi	sp,sp,8
   2e628:	f800283a 	ret

0002e62c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   2e62c:	defffc04 	addi	sp,sp,-16
   2e630:	df000315 	stw	fp,12(sp)
   2e634:	df000304 	addi	fp,sp,12
   2e638:	e13ffe15 	stw	r4,-8(fp)
   2e63c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   2e640:	e0bfff17 	ldw	r2,-4(fp)
   2e644:	108000cc 	andi	r2,r2,3
   2e648:	10000126 	beq	r2,zero,2e650 <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   2e64c:	00002b06 	br	2e6fc <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   2e650:	e0bffe17 	ldw	r2,-8(fp)
   2e654:	10800317 	ldw	r2,12(r2)
   2e658:	e0bffe17 	ldw	r2,-8(fp)
   2e65c:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2e660:	e0bffe17 	ldw	r2,-8(fp)
   2e664:	10800317 	ldw	r2,12(r2)
   2e668:	10800044 	addi	r2,r2,1
   2e66c:	10800fcc 	andi	r2,r2,63
   2e670:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   2e674:	e0bffe17 	ldw	r2,-8(fp)
   2e678:	10800317 	ldw	r2,12(r2)
   2e67c:	e0fffe17 	ldw	r3,-8(fp)
   2e680:	18c00017 	ldw	r3,0(r3)
   2e684:	18c00037 	ldwio	r3,0(r3)
   2e688:	1809883a 	mov	r4,r3
   2e68c:	e0fffe17 	ldw	r3,-8(fp)
   2e690:	1885883a 	add	r2,r3,r2
   2e694:	10800704 	addi	r2,r2,28
   2e698:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   2e69c:	e0bffe17 	ldw	r2,-8(fp)
   2e6a0:	e0fffd17 	ldw	r3,-12(fp)
   2e6a4:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2e6a8:	e0bffe17 	ldw	r2,-8(fp)
   2e6ac:	10800317 	ldw	r2,12(r2)
   2e6b0:	10800044 	addi	r2,r2,1
   2e6b4:	10800fcc 	andi	r2,r2,63
   2e6b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   2e6bc:	e0bffe17 	ldw	r2,-8(fp)
   2e6c0:	10c00217 	ldw	r3,8(r2)
   2e6c4:	e0bffd17 	ldw	r2,-12(fp)
   2e6c8:	18800c1e 	bne	r3,r2,2e6fc <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2e6cc:	e0bffe17 	ldw	r2,-8(fp)
   2e6d0:	10c00117 	ldw	r3,4(r2)
   2e6d4:	00bfdfc4 	movi	r2,-129
   2e6d8:	1886703a 	and	r3,r3,r2
   2e6dc:	e0bffe17 	ldw	r2,-8(fp)
   2e6e0:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   2e6e4:	e0bffe17 	ldw	r2,-8(fp)
   2e6e8:	10800017 	ldw	r2,0(r2)
   2e6ec:	10800304 	addi	r2,r2,12
   2e6f0:	e0fffe17 	ldw	r3,-8(fp)
   2e6f4:	18c00117 	ldw	r3,4(r3)
   2e6f8:	10c00035 	stwio	r3,0(r2)
  }   
}
   2e6fc:	e037883a 	mov	sp,fp
   2e700:	df000017 	ldw	fp,0(sp)
   2e704:	dec00104 	addi	sp,sp,4
   2e708:	f800283a 	ret

0002e70c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   2e70c:	defffb04 	addi	sp,sp,-20
   2e710:	df000415 	stw	fp,16(sp)
   2e714:	df000404 	addi	fp,sp,16
   2e718:	e13ffc15 	stw	r4,-16(fp)
   2e71c:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   2e720:	e0bffc17 	ldw	r2,-16(fp)
   2e724:	10c00417 	ldw	r3,16(r2)
   2e728:	e0bffc17 	ldw	r2,-16(fp)
   2e72c:	10800517 	ldw	r2,20(r2)
   2e730:	18803226 	beq	r3,r2,2e7fc <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   2e734:	e0bffc17 	ldw	r2,-16(fp)
   2e738:	10800617 	ldw	r2,24(r2)
   2e73c:	1080008c 	andi	r2,r2,2
   2e740:	10000326 	beq	r2,zero,2e750 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   2e744:	e0bffd17 	ldw	r2,-12(fp)
   2e748:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   2e74c:	10001d26 	beq	r2,zero,2e7c4 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   2e750:	e0bffc17 	ldw	r2,-16(fp)
   2e754:	10800417 	ldw	r2,16(r2)
   2e758:	e0bffc17 	ldw	r2,-16(fp)
   2e75c:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   2e760:	e0bffc17 	ldw	r2,-16(fp)
   2e764:	10800017 	ldw	r2,0(r2)
   2e768:	10800104 	addi	r2,r2,4
   2e76c:	e0fffc17 	ldw	r3,-16(fp)
   2e770:	18c00417 	ldw	r3,16(r3)
   2e774:	e13ffc17 	ldw	r4,-16(fp)
   2e778:	20c7883a 	add	r3,r4,r3
   2e77c:	18c01704 	addi	r3,r3,92
   2e780:	18c00003 	ldbu	r3,0(r3)
   2e784:	18c03fcc 	andi	r3,r3,255
   2e788:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   2e78c:	e0bffc17 	ldw	r2,-16(fp)
   2e790:	10800417 	ldw	r2,16(r2)
   2e794:	10800044 	addi	r2,r2,1
   2e798:	e0fffc17 	ldw	r3,-16(fp)
   2e79c:	18800415 	stw	r2,16(r3)
   2e7a0:	10c00fcc 	andi	r3,r2,63
   2e7a4:	e0bffc17 	ldw	r2,-16(fp)
   2e7a8:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   2e7ac:	e0bffc17 	ldw	r2,-16(fp)
   2e7b0:	10800117 	ldw	r2,4(r2)
   2e7b4:	10c01014 	ori	r3,r2,64
   2e7b8:	e0bffc17 	ldw	r2,-16(fp)
   2e7bc:	10c00115 	stw	r3,4(r2)
   2e7c0:	00000e06 	br	2e7fc <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   2e7c4:	e0bffc17 	ldw	r2,-16(fp)
   2e7c8:	10800017 	ldw	r2,0(r2)
   2e7cc:	10800204 	addi	r2,r2,8
   2e7d0:	10800037 	ldwio	r2,0(r2)
   2e7d4:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   2e7d8:	e0bffd17 	ldw	r2,-12(fp)
   2e7dc:	1082000c 	andi	r2,r2,2048
   2e7e0:	1000061e 	bne	r2,zero,2e7fc <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   2e7e4:	e0bffc17 	ldw	r2,-16(fp)
   2e7e8:	10c00117 	ldw	r3,4(r2)
   2e7ec:	00bfefc4 	movi	r2,-65
   2e7f0:	1886703a 	and	r3,r3,r2
   2e7f4:	e0bffc17 	ldw	r2,-16(fp)
   2e7f8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   2e7fc:	e0bffc17 	ldw	r2,-16(fp)
   2e800:	10c00417 	ldw	r3,16(r2)
   2e804:	e0bffc17 	ldw	r2,-16(fp)
   2e808:	10800517 	ldw	r2,20(r2)
   2e80c:	1880061e 	bne	r3,r2,2e828 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2e810:	e0bffc17 	ldw	r2,-16(fp)
   2e814:	10c00117 	ldw	r3,4(r2)
   2e818:	00beefc4 	movi	r2,-1089
   2e81c:	1886703a 	and	r3,r3,r2
   2e820:	e0bffc17 	ldw	r2,-16(fp)
   2e824:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2e828:	e0bffc17 	ldw	r2,-16(fp)
   2e82c:	10800017 	ldw	r2,0(r2)
   2e830:	10800304 	addi	r2,r2,12
   2e834:	e0fffc17 	ldw	r3,-16(fp)
   2e838:	18c00117 	ldw	r3,4(r3)
   2e83c:	10c00035 	stwio	r3,0(r2)
}
   2e840:	e037883a 	mov	sp,fp
   2e844:	df000017 	ldw	fp,0(sp)
   2e848:	dec00104 	addi	sp,sp,4
   2e84c:	f800283a 	ret

0002e850 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   2e850:	defffd04 	addi	sp,sp,-12
   2e854:	df000215 	stw	fp,8(sp)
   2e858:	df000204 	addi	fp,sp,8
   2e85c:	e13ffe15 	stw	r4,-8(fp)
   2e860:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   2e864:	00000506 	br	2e87c <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2e868:	e0bfff17 	ldw	r2,-4(fp)
   2e86c:	1090000c 	andi	r2,r2,16384
   2e870:	10000226 	beq	r2,zero,2e87c <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2e874:	00bffd44 	movi	r2,-11
   2e878:	00000606 	br	2e894 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   2e87c:	e0bffe17 	ldw	r2,-8(fp)
   2e880:	10c00417 	ldw	r3,16(r2)
   2e884:	e0bffe17 	ldw	r2,-8(fp)
   2e888:	10800517 	ldw	r2,20(r2)
   2e88c:	18bff61e 	bne	r3,r2,2e868 <_gp+0xffff449c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2e890:	0005883a 	mov	r2,zero
}
   2e894:	e037883a 	mov	sp,fp
   2e898:	df000017 	ldw	fp,0(sp)
   2e89c:	dec00104 	addi	sp,sp,4
   2e8a0:	f800283a 	ret

0002e8a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2e8a4:	defffe04 	addi	sp,sp,-8
   2e8a8:	dfc00115 	stw	ra,4(sp)
   2e8ac:	df000015 	stw	fp,0(sp)
   2e8b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2e8b4:	008000f4 	movhi	r2,3
   2e8b8:	1088fe04 	addi	r2,r2,9208
   2e8bc:	10800017 	ldw	r2,0(r2)
   2e8c0:	10000526 	beq	r2,zero,2e8d8 <alt_get_errno+0x34>
   2e8c4:	008000f4 	movhi	r2,3
   2e8c8:	1088fe04 	addi	r2,r2,9208
   2e8cc:	10800017 	ldw	r2,0(r2)
   2e8d0:	103ee83a 	callr	r2
   2e8d4:	00000206 	br	2e8e0 <alt_get_errno+0x3c>
   2e8d8:	008000f4 	movhi	r2,3
   2e8dc:	10900f04 	addi	r2,r2,16444
}
   2e8e0:	e037883a 	mov	sp,fp
   2e8e4:	dfc00117 	ldw	ra,4(sp)
   2e8e8:	df000017 	ldw	fp,0(sp)
   2e8ec:	dec00204 	addi	sp,sp,8
   2e8f0:	f800283a 	ret

0002e8f4 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   2e8f4:	defff204 	addi	sp,sp,-56
   2e8f8:	dfc00d15 	stw	ra,52(sp)
   2e8fc:	df000c15 	stw	fp,48(sp)
   2e900:	df000c04 	addi	fp,sp,48
   2e904:	e13ffc15 	stw	r4,-16(fp)
   2e908:	e17ffd15 	stw	r5,-12(fp)
   2e90c:	e1bffe15 	stw	r6,-8(fp)
   2e910:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   2e914:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   2e918:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   2e91c:	e0bfff17 	ldw	r2,-4(fp)
   2e920:	1090000c 	andi	r2,r2,16384
   2e924:	1005003a 	cmpeq	r2,r2,zero
   2e928:	10803fcc 	andi	r2,r2,255
   2e92c:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   2e930:	00001306 	br	2e980 <altera_avalon_uart_read+0x8c>
    {
      count++;
   2e934:	e0bff517 	ldw	r2,-44(fp)
   2e938:	10800044 	addi	r2,r2,1
   2e93c:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   2e940:	e0bffd17 	ldw	r2,-12(fp)
   2e944:	10c00044 	addi	r3,r2,1
   2e948:	e0fffd15 	stw	r3,-12(fp)
   2e94c:	e0fffc17 	ldw	r3,-16(fp)
   2e950:	18c00217 	ldw	r3,8(r3)
   2e954:	e13ffc17 	ldw	r4,-16(fp)
   2e958:	20c7883a 	add	r3,r4,r3
   2e95c:	18c00704 	addi	r3,r3,28
   2e960:	18c00003 	ldbu	r3,0(r3)
   2e964:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   2e968:	e0bffc17 	ldw	r2,-16(fp)
   2e96c:	10800217 	ldw	r2,8(r2)
   2e970:	10800044 	addi	r2,r2,1
   2e974:	10c00fcc 	andi	r3,r2,63
   2e978:	e0bffc17 	ldw	r2,-16(fp)
   2e97c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   2e980:	e0fff517 	ldw	r3,-44(fp)
   2e984:	e0bffe17 	ldw	r2,-8(fp)
   2e988:	1880050e 	bge	r3,r2,2e9a0 <altera_avalon_uart_read+0xac>
   2e98c:	e0bffc17 	ldw	r2,-16(fp)
   2e990:	10c00217 	ldw	r3,8(r2)
   2e994:	e0bffc17 	ldw	r2,-16(fp)
   2e998:	10800317 	ldw	r2,12(r2)
   2e99c:	18bfe51e 	bne	r3,r2,2e934 <_gp+0xffff4568>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   2e9a0:	e0bff517 	ldw	r2,-44(fp)
   2e9a4:	1000251e 	bne	r2,zero,2ea3c <altera_avalon_uart_read+0x148>
   2e9a8:	e0bffc17 	ldw	r2,-16(fp)
   2e9ac:	10c00217 	ldw	r3,8(r2)
   2e9b0:	e0bffc17 	ldw	r2,-16(fp)
   2e9b4:	10800317 	ldw	r2,12(r2)
   2e9b8:	1880201e 	bne	r3,r2,2ea3c <altera_avalon_uart_read+0x148>
    {
      if (!block)
   2e9bc:	e0bff617 	ldw	r2,-40(fp)
   2e9c0:	1000071e 	bne	r2,zero,2e9e0 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   2e9c4:	002e8a40 	call	2e8a4 <alt_get_errno>
   2e9c8:	1007883a 	mov	r3,r2
   2e9cc:	008002c4 	movi	r2,11
   2e9d0:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   2e9d4:	00800044 	movi	r2,1
   2e9d8:	e0bff405 	stb	r2,-48(fp)
        break;
   2e9dc:	00001b06 	br	2ea4c <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e9e0:	0005303a 	rdctl	r2,status
   2e9e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e9e8:	e0fff817 	ldw	r3,-32(fp)
   2e9ec:	00bfff84 	movi	r2,-2
   2e9f0:	1884703a 	and	r2,r3,r2
   2e9f4:	1001703a 	wrctl	status,r2
  
  return context;
   2e9f8:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   2e9fc:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2ea00:	e0bffc17 	ldw	r2,-16(fp)
   2ea04:	10800117 	ldw	r2,4(r2)
   2ea08:	10c02014 	ori	r3,r2,128
   2ea0c:	e0bffc17 	ldw	r2,-16(fp)
   2ea10:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2ea14:	e0bffc17 	ldw	r2,-16(fp)
   2ea18:	10800017 	ldw	r2,0(r2)
   2ea1c:	10800304 	addi	r2,r2,12
   2ea20:	e0fffc17 	ldw	r3,-16(fp)
   2ea24:	18c00117 	ldw	r3,4(r3)
   2ea28:	10c00035 	stwio	r3,0(r2)
   2ea2c:	e0bff717 	ldw	r2,-36(fp)
   2ea30:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ea34:	e0bff917 	ldw	r2,-28(fp)
   2ea38:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   2ea3c:	e0bff517 	ldw	r2,-44(fp)
   2ea40:	1000021e 	bne	r2,zero,2ea4c <altera_avalon_uart_read+0x158>
   2ea44:	e0bffe17 	ldw	r2,-8(fp)
   2ea48:	103fb91e 	bne	r2,zero,2e930 <_gp+0xffff4564>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ea4c:	0005303a 	rdctl	r2,status
   2ea50:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ea54:	e0fffa17 	ldw	r3,-24(fp)
   2ea58:	00bfff84 	movi	r2,-2
   2ea5c:	1884703a 	and	r2,r3,r2
   2ea60:	1001703a 	wrctl	status,r2
  
  return context;
   2ea64:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   2ea68:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2ea6c:	e0bffc17 	ldw	r2,-16(fp)
   2ea70:	10800117 	ldw	r2,4(r2)
   2ea74:	10c02014 	ori	r3,r2,128
   2ea78:	e0bffc17 	ldw	r2,-16(fp)
   2ea7c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2ea80:	e0bffc17 	ldw	r2,-16(fp)
   2ea84:	10800017 	ldw	r2,0(r2)
   2ea88:	10800304 	addi	r2,r2,12
   2ea8c:	e0fffc17 	ldw	r3,-16(fp)
   2ea90:	18c00117 	ldw	r3,4(r3)
   2ea94:	10c00035 	stwio	r3,0(r2)
   2ea98:	e0bff717 	ldw	r2,-36(fp)
   2ea9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2eaa0:	e0bffb17 	ldw	r2,-20(fp)
   2eaa4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   2eaa8:	e0bff403 	ldbu	r2,-48(fp)
   2eaac:	10000226 	beq	r2,zero,2eab8 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   2eab0:	00bffd44 	movi	r2,-11
   2eab4:	00000106 	br	2eabc <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   2eab8:	e0bff517 	ldw	r2,-44(fp)
  }
}
   2eabc:	e037883a 	mov	sp,fp
   2eac0:	dfc00117 	ldw	ra,4(sp)
   2eac4:	df000017 	ldw	fp,0(sp)
   2eac8:	dec00204 	addi	sp,sp,8
   2eacc:	f800283a 	ret

0002ead0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2ead0:	defffe04 	addi	sp,sp,-8
   2ead4:	dfc00115 	stw	ra,4(sp)
   2ead8:	df000015 	stw	fp,0(sp)
   2eadc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2eae0:	008000f4 	movhi	r2,3
   2eae4:	1088fe04 	addi	r2,r2,9208
   2eae8:	10800017 	ldw	r2,0(r2)
   2eaec:	10000526 	beq	r2,zero,2eb04 <alt_get_errno+0x34>
   2eaf0:	008000f4 	movhi	r2,3
   2eaf4:	1088fe04 	addi	r2,r2,9208
   2eaf8:	10800017 	ldw	r2,0(r2)
   2eafc:	103ee83a 	callr	r2
   2eb00:	00000206 	br	2eb0c <alt_get_errno+0x3c>
   2eb04:	008000f4 	movhi	r2,3
   2eb08:	10900f04 	addi	r2,r2,16444
}
   2eb0c:	e037883a 	mov	sp,fp
   2eb10:	dfc00117 	ldw	ra,4(sp)
   2eb14:	df000017 	ldw	fp,0(sp)
   2eb18:	dec00204 	addi	sp,sp,8
   2eb1c:	f800283a 	ret

0002eb20 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   2eb20:	defff204 	addi	sp,sp,-56
   2eb24:	dfc00d15 	stw	ra,52(sp)
   2eb28:	df000c15 	stw	fp,48(sp)
   2eb2c:	df000c04 	addi	fp,sp,48
   2eb30:	e13ffc15 	stw	r4,-16(fp)
   2eb34:	e17ffd15 	stw	r5,-12(fp)
   2eb38:	e1bffe15 	stw	r6,-8(fp)
   2eb3c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   2eb40:	e0bffe17 	ldw	r2,-8(fp)
   2eb44:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   2eb48:	e0bfff17 	ldw	r2,-4(fp)
   2eb4c:	1090000c 	andi	r2,r2,16384
   2eb50:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   2eb54:	00003c06 	br	2ec48 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2eb58:	e0bffc17 	ldw	r2,-16(fp)
   2eb5c:	10800517 	ldw	r2,20(r2)
   2eb60:	10800044 	addi	r2,r2,1
   2eb64:	10800fcc 	andi	r2,r2,63
   2eb68:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   2eb6c:	e0bffc17 	ldw	r2,-16(fp)
   2eb70:	10c00417 	ldw	r3,16(r2)
   2eb74:	e0bff617 	ldw	r2,-40(fp)
   2eb78:	1880221e 	bne	r3,r2,2ec04 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   2eb7c:	e0bff517 	ldw	r2,-44(fp)
   2eb80:	10000526 	beq	r2,zero,2eb98 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   2eb84:	002ead00 	call	2ead0 <alt_get_errno>
   2eb88:	1007883a 	mov	r3,r2
   2eb8c:	008002c4 	movi	r2,11
   2eb90:	18800015 	stw	r2,0(r3)
        break;
   2eb94:	00002e06 	br	2ec50 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2eb98:	0005303a 	rdctl	r2,status
   2eb9c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2eba0:	e0fff817 	ldw	r3,-32(fp)
   2eba4:	00bfff84 	movi	r2,-2
   2eba8:	1884703a 	and	r2,r3,r2
   2ebac:	1001703a 	wrctl	status,r2
  
  return context;
   2ebb0:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   2ebb4:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2ebb8:	e0bffc17 	ldw	r2,-16(fp)
   2ebbc:	10800117 	ldw	r2,4(r2)
   2ebc0:	10c11014 	ori	r3,r2,1088
   2ebc4:	e0bffc17 	ldw	r2,-16(fp)
   2ebc8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2ebcc:	e0bffc17 	ldw	r2,-16(fp)
   2ebd0:	10800017 	ldw	r2,0(r2)
   2ebd4:	10800304 	addi	r2,r2,12
   2ebd8:	e0fffc17 	ldw	r3,-16(fp)
   2ebdc:	18c00117 	ldw	r3,4(r3)
   2ebe0:	10c00035 	stwio	r3,0(r2)
   2ebe4:	e0bff717 	ldw	r2,-36(fp)
   2ebe8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ebec:	e0bff917 	ldw	r2,-28(fp)
   2ebf0:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   2ebf4:	e0bffc17 	ldw	r2,-16(fp)
   2ebf8:	10c00417 	ldw	r3,16(r2)
   2ebfc:	e0bff617 	ldw	r2,-40(fp)
   2ec00:	18bffc26 	beq	r3,r2,2ebf4 <_gp+0xffff4828>
      }
    }

    count--;
   2ec04:	e0bff417 	ldw	r2,-48(fp)
   2ec08:	10bfffc4 	addi	r2,r2,-1
   2ec0c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   2ec10:	e0bffc17 	ldw	r2,-16(fp)
   2ec14:	10c00517 	ldw	r3,20(r2)
   2ec18:	e0bffd17 	ldw	r2,-12(fp)
   2ec1c:	11000044 	addi	r4,r2,1
   2ec20:	e13ffd15 	stw	r4,-12(fp)
   2ec24:	10800003 	ldbu	r2,0(r2)
   2ec28:	1009883a 	mov	r4,r2
   2ec2c:	e0bffc17 	ldw	r2,-16(fp)
   2ec30:	10c5883a 	add	r2,r2,r3
   2ec34:	10801704 	addi	r2,r2,92
   2ec38:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   2ec3c:	e0bffc17 	ldw	r2,-16(fp)
   2ec40:	e0fff617 	ldw	r3,-40(fp)
   2ec44:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   2ec48:	e0bff417 	ldw	r2,-48(fp)
   2ec4c:	103fc21e 	bne	r2,zero,2eb58 <_gp+0xffff478c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ec50:	0005303a 	rdctl	r2,status
   2ec54:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ec58:	e0fffa17 	ldw	r3,-24(fp)
   2ec5c:	00bfff84 	movi	r2,-2
   2ec60:	1884703a 	and	r2,r3,r2
   2ec64:	1001703a 	wrctl	status,r2
  
  return context;
   2ec68:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   2ec6c:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2ec70:	e0bffc17 	ldw	r2,-16(fp)
   2ec74:	10800117 	ldw	r2,4(r2)
   2ec78:	10c11014 	ori	r3,r2,1088
   2ec7c:	e0bffc17 	ldw	r2,-16(fp)
   2ec80:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2ec84:	e0bffc17 	ldw	r2,-16(fp)
   2ec88:	10800017 	ldw	r2,0(r2)
   2ec8c:	10800304 	addi	r2,r2,12
   2ec90:	e0fffc17 	ldw	r3,-16(fp)
   2ec94:	18c00117 	ldw	r3,4(r3)
   2ec98:	10c00035 	stwio	r3,0(r2)
   2ec9c:	e0bff717 	ldw	r2,-36(fp)
   2eca0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2eca4:	e0bffb17 	ldw	r2,-20(fp)
   2eca8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   2ecac:	e0fffe17 	ldw	r3,-8(fp)
   2ecb0:	e0bff417 	ldw	r2,-48(fp)
   2ecb4:	1885c83a 	sub	r2,r3,r2
}
   2ecb8:	e037883a 	mov	sp,fp
   2ecbc:	dfc00117 	ldw	ra,4(sp)
   2ecc0:	df000017 	ldw	fp,0(sp)
   2ecc4:	dec00204 	addi	sp,sp,8
   2ecc8:	f800283a 	ret

0002eccc <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   2eccc:	defffc04 	addi	sp,sp,-16
   2ecd0:	dfc00315 	stw	ra,12(sp)
   2ecd4:	df000215 	stw	fp,8(sp)
   2ecd8:	df000204 	addi	fp,sp,8
   2ecdc:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   2ece0:	e0bfff17 	ldw	r2,-4(fp)
   2ece4:	10800217 	ldw	r2,8(r2)
   2ece8:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   2ecec:	00000b06 	br	2ed1c <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   2ecf0:	e13ffe17 	ldw	r4,-8(fp)
   2ecf4:	014000f4 	movhi	r5,3
   2ecf8:	2941fa04 	addi	r5,r5,2024
   2ecfc:	002776c0 	call	2776c <strcmp>
   2ed00:	1000031e 	bne	r2,zero,2ed10 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   2ed04:	e0bffe17 	ldw	r2,-8(fp)
   2ed08:	10000005 	stb	zero,0(r2)
			break;
   2ed0c:	00000906 	br	2ed34 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   2ed10:	e0bffe17 	ldw	r2,-8(fp)
   2ed14:	10800044 	addi	r2,r2,1
   2ed18:	e0bffe15 	stw	r2,-8(fp)
   2ed1c:	e0bffe17 	ldw	r2,-8(fp)
   2ed20:	10800003 	ldbu	r2,0(r2)
   2ed24:	10803fcc 	andi	r2,r2,255
   2ed28:	1080201c 	xori	r2,r2,128
   2ed2c:	10bfe004 	addi	r2,r2,-128
   2ed30:	103fef1e 	bne	r2,zero,2ecf0 <_gp+0xffff4924>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   2ed34:	0001883a 	nop
}
   2ed38:	e037883a 	mov	sp,fp
   2ed3c:	dfc00117 	ldw	ra,4(sp)
   2ed40:	df000017 	ldw	fp,0(sp)
   2ed44:	dec00204 	addi	sp,sp,8
   2ed48:	f800283a 	ret

0002ed4c <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   2ed4c:	defffc04 	addi	sp,sp,-16
   2ed50:	dfc00315 	stw	ra,12(sp)
   2ed54:	df000215 	stw	fp,8(sp)
   2ed58:	df000204 	addi	fp,sp,8
   2ed5c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   2ed60:	e13fff17 	ldw	r4,-4(fp)
   2ed64:	014000f4 	movhi	r5,3
   2ed68:	2948fb04 	addi	r5,r5,9196
   2ed6c:	002f2e40 	call	2f2e4 <alt_find_dev>
   2ed70:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   2ed74:	e0bffe17 	ldw	r2,-8(fp)
}
   2ed78:	e037883a 	mov	sp,fp
   2ed7c:	dfc00117 	ldw	ra,4(sp)
   2ed80:	df000017 	ldw	fp,0(sp)
   2ed84:	dec00204 	addi	sp,sp,8
   2ed88:	f800283a 	ret

0002ed8c <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   2ed8c:	defffa04 	addi	sp,sp,-24
   2ed90:	df000515 	stw	fp,20(sp)
   2ed94:	df000504 	addi	fp,sp,20
   2ed98:	e13ffc15 	stw	r4,-16(fp)
   2ed9c:	2805883a 	mov	r2,r5
   2eda0:	e1bffe15 	stw	r6,-8(fp)
   2eda4:	e1ffff15 	stw	r7,-4(fp)
   2eda8:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   2edac:	e0bffc17 	ldw	r2,-16(fp)
   2edb0:	10800c17 	ldw	r2,48(r2)
   2edb4:	e0fffe17 	ldw	r3,-8(fp)
   2edb8:	1880042e 	bgeu	r3,r2,2edcc <alt_up_char_buffer_draw+0x40>
   2edbc:	e0bffc17 	ldw	r2,-16(fp)
   2edc0:	10800d17 	ldw	r2,52(r2)
   2edc4:	e0ffff17 	ldw	r3,-4(fp)
   2edc8:	18800236 	bltu	r3,r2,2edd4 <alt_up_char_buffer_draw+0x48>
		return -1;
   2edcc:	00bfffc4 	movi	r2,-1
   2edd0:	00001d06 	br	2ee48 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   2edd4:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   2edd8:	e0bffc17 	ldw	r2,-16(fp)
   2eddc:	10c00f17 	ldw	r3,60(r2)
   2ede0:	e0bffe17 	ldw	r2,-8(fp)
   2ede4:	1884703a 	and	r2,r3,r2
   2ede8:	e0fffc17 	ldw	r3,-16(fp)
   2edec:	18c00e17 	ldw	r3,56(r3)
   2edf0:	10c4983a 	sll	r2,r2,r3
   2edf4:	e0fffb17 	ldw	r3,-20(fp)
   2edf8:	1884b03a 	or	r2,r3,r2
   2edfc:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   2ee00:	e0bffc17 	ldw	r2,-16(fp)
   2ee04:	10c01117 	ldw	r3,68(r2)
   2ee08:	e0bfff17 	ldw	r2,-4(fp)
   2ee0c:	1884703a 	and	r2,r3,r2
   2ee10:	e0fffc17 	ldw	r3,-16(fp)
   2ee14:	18c01017 	ldw	r3,64(r3)
   2ee18:	10c4983a 	sll	r2,r2,r3
   2ee1c:	e0fffb17 	ldw	r3,-20(fp)
   2ee20:	1884b03a 	or	r2,r3,r2
   2ee24:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   2ee28:	e0bffc17 	ldw	r2,-16(fp)
   2ee2c:	10c00b17 	ldw	r3,44(r2)
   2ee30:	e0bffb17 	ldw	r2,-20(fp)
   2ee34:	1885883a 	add	r2,r3,r2
   2ee38:	1007883a 	mov	r3,r2
   2ee3c:	e0bffd03 	ldbu	r2,-12(fp)
   2ee40:	18800025 	stbio	r2,0(r3)

	return 0;
   2ee44:	0005883a 	mov	r2,zero
}
   2ee48:	e037883a 	mov	sp,fp
   2ee4c:	df000017 	ldw	fp,0(sp)
   2ee50:	dec00104 	addi	sp,sp,4
   2ee54:	f800283a 	ret

0002ee58 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   2ee58:	defffa04 	addi	sp,sp,-24
   2ee5c:	df000515 	stw	fp,20(sp)
   2ee60:	df000504 	addi	fp,sp,20
   2ee64:	e13ffc15 	stw	r4,-16(fp)
   2ee68:	e17ffd15 	stw	r5,-12(fp)
   2ee6c:	e1bffe15 	stw	r6,-8(fp)
   2ee70:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   2ee74:	e0bffc17 	ldw	r2,-16(fp)
   2ee78:	10800c17 	ldw	r2,48(r2)
   2ee7c:	e0fffe17 	ldw	r3,-8(fp)
   2ee80:	1880042e 	bgeu	r3,r2,2ee94 <alt_up_char_buffer_string+0x3c>
   2ee84:	e0bffc17 	ldw	r2,-16(fp)
   2ee88:	10800d17 	ldw	r2,52(r2)
   2ee8c:	e0ffff17 	ldw	r3,-4(fp)
   2ee90:	18800236 	bltu	r3,r2,2ee9c <alt_up_char_buffer_string+0x44>
		return -1;
   2ee94:	00bfffc4 	movi	r2,-1
   2ee98:	00002b06 	br	2ef48 <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   2ee9c:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   2eea0:	e0bffc17 	ldw	r2,-16(fp)
   2eea4:	10801017 	ldw	r2,64(r2)
   2eea8:	1007883a 	mov	r3,r2
   2eeac:	e0bfff17 	ldw	r2,-4(fp)
   2eeb0:	10c6983a 	sll	r3,r2,r3
   2eeb4:	e0bffe17 	ldw	r2,-8(fp)
   2eeb8:	1885883a 	add	r2,r3,r2
   2eebc:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   2eec0:	00001a06 	br	2ef2c <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   2eec4:	e0bffc17 	ldw	r2,-16(fp)
   2eec8:	10c00b17 	ldw	r3,44(r2)
   2eecc:	e0bffb17 	ldw	r2,-20(fp)
   2eed0:	1885883a 	add	r2,r3,r2
   2eed4:	1007883a 	mov	r3,r2
   2eed8:	e0bffd17 	ldw	r2,-12(fp)
   2eedc:	10800003 	ldbu	r2,0(r2)
   2eee0:	10803fcc 	andi	r2,r2,255
   2eee4:	1080201c 	xori	r2,r2,128
   2eee8:	10bfe004 	addi	r2,r2,-128
   2eeec:	18800025 	stbio	r2,0(r3)
		++ptr;
   2eef0:	e0bffd17 	ldw	r2,-12(fp)
   2eef4:	10800044 	addi	r2,r2,1
   2eef8:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   2eefc:	e0bffe17 	ldw	r2,-8(fp)
   2ef00:	10800044 	addi	r2,r2,1
   2ef04:	e0bffe15 	stw	r2,-8(fp)
   2ef08:	e0bffc17 	ldw	r2,-16(fp)
   2ef0c:	10800c17 	ldw	r2,48(r2)
   2ef10:	e0fffe17 	ldw	r3,-8(fp)
   2ef14:	18800236 	bltu	r3,r2,2ef20 <alt_up_char_buffer_string+0xc8>
			return -1;
   2ef18:	00bfffc4 	movi	r2,-1
   2ef1c:	00000a06 	br	2ef48 <alt_up_char_buffer_string+0xf0>
		++offset;
   2ef20:	e0bffb17 	ldw	r2,-20(fp)
   2ef24:	10800044 	addi	r2,r2,1
   2ef28:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   2ef2c:	e0bffd17 	ldw	r2,-12(fp)
   2ef30:	10800003 	ldbu	r2,0(r2)
   2ef34:	10803fcc 	andi	r2,r2,255
   2ef38:	1080201c 	xori	r2,r2,128
   2ef3c:	10bfe004 	addi	r2,r2,-128
   2ef40:	103fe01e 	bne	r2,zero,2eec4 <_gp+0xffff4af8>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   2ef44:	0005883a 	mov	r2,zero
}
   2ef48:	e037883a 	mov	sp,fp
   2ef4c:	df000017 	ldw	fp,0(sp)
   2ef50:	dec00104 	addi	sp,sp,4
   2ef54:	f800283a 	ret

0002ef58 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   2ef58:	defffe04 	addi	sp,sp,-8
   2ef5c:	df000115 	stw	fp,4(sp)
   2ef60:	df000104 	addi	fp,sp,4
   2ef64:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   2ef68:	e0bfff17 	ldw	r2,-4(fp)
   2ef6c:	10800a17 	ldw	r2,40(r2)
   2ef70:	10800084 	addi	r2,r2,2
   2ef74:	1007883a 	mov	r3,r2
   2ef78:	00800044 	movi	r2,1
   2ef7c:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   2ef80:	0001883a 	nop
   2ef84:	e0bfff17 	ldw	r2,-4(fp)
   2ef88:	10800a17 	ldw	r2,40(r2)
   2ef8c:	10800084 	addi	r2,r2,2
   2ef90:	10800023 	ldbuio	r2,0(r2)
   2ef94:	10803fcc 	andi	r2,r2,255
   2ef98:	1080004c 	andi	r2,r2,1
   2ef9c:	103ff91e 	bne	r2,zero,2ef84 <_gp+0xffff4bb8>
	return 0;
   2efa0:	0005883a 	mov	r2,zero
}
   2efa4:	e037883a 	mov	sp,fp
   2efa8:	df000017 	ldw	fp,0(sp)
   2efac:	dec00104 	addi	sp,sp,4
   2efb0:	f800283a 	ret

0002efb4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2efb4:	defff504 	addi	sp,sp,-44
   2efb8:	df000a15 	stw	fp,40(sp)
   2efbc:	df000a04 	addi	fp,sp,40
   2efc0:	e13ffc15 	stw	r4,-16(fp)
   2efc4:	e17ffd15 	stw	r5,-12(fp)
   2efc8:	e1bffe15 	stw	r6,-8(fp)
   2efcc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2efd0:	e03ff615 	stw	zero,-40(fp)
   2efd4:	008000f4 	movhi	r2,3
   2efd8:	10901404 	addi	r2,r2,16464
   2efdc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   2efe0:	10003f26 	beq	r2,zero,2f0e0 <alt_alarm_start+0x12c>
  {
    if (alarm)
   2efe4:	e0bffc17 	ldw	r2,-16(fp)
   2efe8:	10003b26 	beq	r2,zero,2f0d8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   2efec:	e0bffc17 	ldw	r2,-16(fp)
   2eff0:	e0fffe17 	ldw	r3,-8(fp)
   2eff4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2eff8:	e0bffc17 	ldw	r2,-16(fp)
   2effc:	e0ffff17 	ldw	r3,-4(fp)
   2f000:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f004:	0005303a 	rdctl	r2,status
   2f008:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f00c:	e0fff817 	ldw	r3,-32(fp)
   2f010:	00bfff84 	movi	r2,-2
   2f014:	1884703a 	and	r2,r3,r2
   2f018:	1001703a 	wrctl	status,r2
  
  return context;
   2f01c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   2f020:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2f024:	008000f4 	movhi	r2,3
   2f028:	10901504 	addi	r2,r2,16468
   2f02c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   2f030:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   2f034:	e0fffd17 	ldw	r3,-12(fp)
   2f038:	e0bff617 	ldw	r2,-40(fp)
   2f03c:	1885883a 	add	r2,r3,r2
   2f040:	10c00044 	addi	r3,r2,1
   2f044:	e0bffc17 	ldw	r2,-16(fp)
   2f048:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2f04c:	e0bffc17 	ldw	r2,-16(fp)
   2f050:	10c00217 	ldw	r3,8(r2)
   2f054:	e0bff617 	ldw	r2,-40(fp)
   2f058:	1880042e 	bgeu	r3,r2,2f06c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   2f05c:	e0bffc17 	ldw	r2,-16(fp)
   2f060:	00c00044 	movi	r3,1
   2f064:	10c00405 	stb	r3,16(r2)
   2f068:	00000206 	br	2f074 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   2f06c:	e0bffc17 	ldw	r2,-16(fp)
   2f070:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2f074:	e0fffc17 	ldw	r3,-16(fp)
   2f078:	008000f4 	movhi	r2,3
   2f07c:	10890304 	addi	r2,r2,9228
   2f080:	e0bff915 	stw	r2,-28(fp)
   2f084:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2f088:	e0bffa17 	ldw	r2,-24(fp)
   2f08c:	e0fff917 	ldw	r3,-28(fp)
   2f090:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2f094:	e0bff917 	ldw	r2,-28(fp)
   2f098:	10c00017 	ldw	r3,0(r2)
   2f09c:	e0bffa17 	ldw	r2,-24(fp)
   2f0a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2f0a4:	e0bff917 	ldw	r2,-28(fp)
   2f0a8:	10800017 	ldw	r2,0(r2)
   2f0ac:	e0fffa17 	ldw	r3,-24(fp)
   2f0b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2f0b4:	e0bff917 	ldw	r2,-28(fp)
   2f0b8:	e0fffa17 	ldw	r3,-24(fp)
   2f0bc:	10c00015 	stw	r3,0(r2)
   2f0c0:	e0bff717 	ldw	r2,-36(fp)
   2f0c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f0c8:	e0bffb17 	ldw	r2,-20(fp)
   2f0cc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2f0d0:	0005883a 	mov	r2,zero
   2f0d4:	00000306 	br	2f0e4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   2f0d8:	00bffa84 	movi	r2,-22
   2f0dc:	00000106 	br	2f0e4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   2f0e0:	00bfde84 	movi	r2,-134
  }
}
   2f0e4:	e037883a 	mov	sp,fp
   2f0e8:	df000017 	ldw	fp,0(sp)
   2f0ec:	dec00104 	addi	sp,sp,4
   2f0f0:	f800283a 	ret

0002f0f4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2f0f4:	defffe04 	addi	sp,sp,-8
   2f0f8:	df000115 	stw	fp,4(sp)
   2f0fc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   2f100:	e03fff15 	stw	zero,-4(fp)
   2f104:	00000506 	br	2f11c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   2f108:	e0bfff17 	ldw	r2,-4(fp)
   2f10c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   2f110:	e0bfff17 	ldw	r2,-4(fp)
   2f114:	10800804 	addi	r2,r2,32
   2f118:	e0bfff15 	stw	r2,-4(fp)
   2f11c:	e0bfff17 	ldw	r2,-4(fp)
   2f120:	10820030 	cmpltui	r2,r2,2048
   2f124:	103ff81e 	bne	r2,zero,2f108 <_gp+0xffff4d3c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2f128:	e037883a 	mov	sp,fp
   2f12c:	df000017 	ldw	fp,0(sp)
   2f130:	dec00104 	addi	sp,sp,4
   2f134:	f800283a 	ret

0002f138 <alt_get_errno>:
   2f138:	defffe04 	addi	sp,sp,-8
   2f13c:	dfc00115 	stw	ra,4(sp)
   2f140:	df000015 	stw	fp,0(sp)
   2f144:	d839883a 	mov	fp,sp
   2f148:	008000f4 	movhi	r2,3
   2f14c:	1088fe04 	addi	r2,r2,9208
   2f150:	10800017 	ldw	r2,0(r2)
   2f154:	10000526 	beq	r2,zero,2f16c <alt_get_errno+0x34>
   2f158:	008000f4 	movhi	r2,3
   2f15c:	1088fe04 	addi	r2,r2,9208
   2f160:	10800017 	ldw	r2,0(r2)
   2f164:	103ee83a 	callr	r2
   2f168:	00000206 	br	2f174 <alt_get_errno+0x3c>
   2f16c:	008000f4 	movhi	r2,3
   2f170:	10900f04 	addi	r2,r2,16444
   2f174:	e037883a 	mov	sp,fp
   2f178:	dfc00117 	ldw	ra,4(sp)
   2f17c:	df000017 	ldw	fp,0(sp)
   2f180:	dec00204 	addi	sp,sp,8
   2f184:	f800283a 	ret

0002f188 <alt_dev_llist_insert>:
   2f188:	defffa04 	addi	sp,sp,-24
   2f18c:	dfc00515 	stw	ra,20(sp)
   2f190:	df000415 	stw	fp,16(sp)
   2f194:	df000404 	addi	fp,sp,16
   2f198:	e13ffe15 	stw	r4,-8(fp)
   2f19c:	e17fff15 	stw	r5,-4(fp)
   2f1a0:	e0bffe17 	ldw	r2,-8(fp)
   2f1a4:	10000326 	beq	r2,zero,2f1b4 <alt_dev_llist_insert+0x2c>
   2f1a8:	e0bffe17 	ldw	r2,-8(fp)
   2f1ac:	10800217 	ldw	r2,8(r2)
   2f1b0:	1000061e 	bne	r2,zero,2f1cc <alt_dev_llist_insert+0x44>
   2f1b4:	002f1380 	call	2f138 <alt_get_errno>
   2f1b8:	1007883a 	mov	r3,r2
   2f1bc:	00800584 	movi	r2,22
   2f1c0:	18800015 	stw	r2,0(r3)
   2f1c4:	00bffa84 	movi	r2,-22
   2f1c8:	00001306 	br	2f218 <alt_dev_llist_insert+0x90>
   2f1cc:	e0bffe17 	ldw	r2,-8(fp)
   2f1d0:	e0ffff17 	ldw	r3,-4(fp)
   2f1d4:	e0fffc15 	stw	r3,-16(fp)
   2f1d8:	e0bffd15 	stw	r2,-12(fp)
   2f1dc:	e0bffd17 	ldw	r2,-12(fp)
   2f1e0:	e0fffc17 	ldw	r3,-16(fp)
   2f1e4:	10c00115 	stw	r3,4(r2)
   2f1e8:	e0bffc17 	ldw	r2,-16(fp)
   2f1ec:	10c00017 	ldw	r3,0(r2)
   2f1f0:	e0bffd17 	ldw	r2,-12(fp)
   2f1f4:	10c00015 	stw	r3,0(r2)
   2f1f8:	e0bffc17 	ldw	r2,-16(fp)
   2f1fc:	10800017 	ldw	r2,0(r2)
   2f200:	e0fffd17 	ldw	r3,-12(fp)
   2f204:	10c00115 	stw	r3,4(r2)
   2f208:	e0bffc17 	ldw	r2,-16(fp)
   2f20c:	e0fffd17 	ldw	r3,-12(fp)
   2f210:	10c00015 	stw	r3,0(r2)
   2f214:	0005883a 	mov	r2,zero
   2f218:	e037883a 	mov	sp,fp
   2f21c:	dfc00117 	ldw	ra,4(sp)
   2f220:	df000017 	ldw	fp,0(sp)
   2f224:	dec00204 	addi	sp,sp,8
   2f228:	f800283a 	ret

0002f22c <_do_ctors>:
   2f22c:	defffd04 	addi	sp,sp,-12
   2f230:	dfc00215 	stw	ra,8(sp)
   2f234:	df000115 	stw	fp,4(sp)
   2f238:	df000104 	addi	fp,sp,4
   2f23c:	008000f4 	movhi	r2,3
   2f240:	1080f504 	addi	r2,r2,980
   2f244:	e0bfff15 	stw	r2,-4(fp)
   2f248:	00000606 	br	2f264 <_do_ctors+0x38>
   2f24c:	e0bfff17 	ldw	r2,-4(fp)
   2f250:	10800017 	ldw	r2,0(r2)
   2f254:	103ee83a 	callr	r2
   2f258:	e0bfff17 	ldw	r2,-4(fp)
   2f25c:	10bfff04 	addi	r2,r2,-4
   2f260:	e0bfff15 	stw	r2,-4(fp)
   2f264:	e0ffff17 	ldw	r3,-4(fp)
   2f268:	008000f4 	movhi	r2,3
   2f26c:	1080f604 	addi	r2,r2,984
   2f270:	18bff62e 	bgeu	r3,r2,2f24c <_gp+0xffff4e80>
   2f274:	e037883a 	mov	sp,fp
   2f278:	dfc00117 	ldw	ra,4(sp)
   2f27c:	df000017 	ldw	fp,0(sp)
   2f280:	dec00204 	addi	sp,sp,8
   2f284:	f800283a 	ret

0002f288 <_do_dtors>:
   2f288:	defffd04 	addi	sp,sp,-12
   2f28c:	dfc00215 	stw	ra,8(sp)
   2f290:	df000115 	stw	fp,4(sp)
   2f294:	df000104 	addi	fp,sp,4
   2f298:	008000f4 	movhi	r2,3
   2f29c:	1080f504 	addi	r2,r2,980
   2f2a0:	e0bfff15 	stw	r2,-4(fp)
   2f2a4:	00000606 	br	2f2c0 <_do_dtors+0x38>
   2f2a8:	e0bfff17 	ldw	r2,-4(fp)
   2f2ac:	10800017 	ldw	r2,0(r2)
   2f2b0:	103ee83a 	callr	r2
   2f2b4:	e0bfff17 	ldw	r2,-4(fp)
   2f2b8:	10bfff04 	addi	r2,r2,-4
   2f2bc:	e0bfff15 	stw	r2,-4(fp)
   2f2c0:	e0ffff17 	ldw	r3,-4(fp)
   2f2c4:	008000f4 	movhi	r2,3
   2f2c8:	1080f604 	addi	r2,r2,984
   2f2cc:	18bff62e 	bgeu	r3,r2,2f2a8 <_gp+0xffff4edc>
   2f2d0:	e037883a 	mov	sp,fp
   2f2d4:	dfc00117 	ldw	ra,4(sp)
   2f2d8:	df000017 	ldw	fp,0(sp)
   2f2dc:	dec00204 	addi	sp,sp,8
   2f2e0:	f800283a 	ret

0002f2e4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2f2e4:	defffa04 	addi	sp,sp,-24
   2f2e8:	dfc00515 	stw	ra,20(sp)
   2f2ec:	df000415 	stw	fp,16(sp)
   2f2f0:	df000404 	addi	fp,sp,16
   2f2f4:	e13ffe15 	stw	r4,-8(fp)
   2f2f8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2f2fc:	e0bfff17 	ldw	r2,-4(fp)
   2f300:	10800017 	ldw	r2,0(r2)
   2f304:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2f308:	e13ffe17 	ldw	r4,-8(fp)
   2f30c:	002062c0 	call	2062c <strlen>
   2f310:	10800044 	addi	r2,r2,1
   2f314:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2f318:	00000d06 	br	2f350 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2f31c:	e0bffc17 	ldw	r2,-16(fp)
   2f320:	10c00217 	ldw	r3,8(r2)
   2f324:	e0bffd17 	ldw	r2,-12(fp)
   2f328:	1809883a 	mov	r4,r3
   2f32c:	e17ffe17 	ldw	r5,-8(fp)
   2f330:	100d883a 	mov	r6,r2
   2f334:	002ff180 	call	2ff18 <memcmp>
   2f338:	1000021e 	bne	r2,zero,2f344 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2f33c:	e0bffc17 	ldw	r2,-16(fp)
   2f340:	00000706 	br	2f360 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2f344:	e0bffc17 	ldw	r2,-16(fp)
   2f348:	10800017 	ldw	r2,0(r2)
   2f34c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2f350:	e0fffc17 	ldw	r3,-16(fp)
   2f354:	e0bfff17 	ldw	r2,-4(fp)
   2f358:	18bff01e 	bne	r3,r2,2f31c <_gp+0xffff4f50>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2f35c:	0005883a 	mov	r2,zero
}
   2f360:	e037883a 	mov	sp,fp
   2f364:	dfc00117 	ldw	ra,4(sp)
   2f368:	df000017 	ldw	fp,0(sp)
   2f36c:	dec00204 	addi	sp,sp,8
   2f370:	f800283a 	ret

0002f374 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2f374:	defffe04 	addi	sp,sp,-8
   2f378:	dfc00115 	stw	ra,4(sp)
   2f37c:	df000015 	stw	fp,0(sp)
   2f380:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   2f384:	0009883a 	mov	r4,zero
   2f388:	01440004 	movi	r5,4096
   2f38c:	002fda40 	call	2fda4 <alt_icache_flush>
#endif
}
   2f390:	e037883a 	mov	sp,fp
   2f394:	dfc00117 	ldw	ra,4(sp)
   2f398:	df000017 	ldw	fp,0(sp)
   2f39c:	dec00204 	addi	sp,sp,8
   2f3a0:	f800283a 	ret

0002f3a4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2f3a4:	defff904 	addi	sp,sp,-28
   2f3a8:	dfc00615 	stw	ra,24(sp)
   2f3ac:	df000515 	stw	fp,20(sp)
   2f3b0:	df000504 	addi	fp,sp,20
   2f3b4:	e13ffc15 	stw	r4,-16(fp)
   2f3b8:	e17ffd15 	stw	r5,-12(fp)
   2f3bc:	e1bffe15 	stw	r6,-8(fp)
   2f3c0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2f3c4:	e0800217 	ldw	r2,8(fp)
   2f3c8:	d8800015 	stw	r2,0(sp)
   2f3cc:	e13ffc17 	ldw	r4,-16(fp)
   2f3d0:	e17ffd17 	ldw	r5,-12(fp)
   2f3d4:	e1bffe17 	ldw	r6,-8(fp)
   2f3d8:	e1ffff17 	ldw	r7,-4(fp)
   2f3dc:	002f5840 	call	2f584 <alt_iic_isr_register>
}  
   2f3e0:	e037883a 	mov	sp,fp
   2f3e4:	dfc00117 	ldw	ra,4(sp)
   2f3e8:	df000017 	ldw	fp,0(sp)
   2f3ec:	dec00204 	addi	sp,sp,8
   2f3f0:	f800283a 	ret

0002f3f4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2f3f4:	defff904 	addi	sp,sp,-28
   2f3f8:	df000615 	stw	fp,24(sp)
   2f3fc:	df000604 	addi	fp,sp,24
   2f400:	e13ffe15 	stw	r4,-8(fp)
   2f404:	e17fff15 	stw	r5,-4(fp)
   2f408:	e0bfff17 	ldw	r2,-4(fp)
   2f40c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f410:	0005303a 	rdctl	r2,status
   2f414:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f418:	e0fffb17 	ldw	r3,-20(fp)
   2f41c:	00bfff84 	movi	r2,-2
   2f420:	1884703a 	and	r2,r3,r2
   2f424:	1001703a 	wrctl	status,r2
  
  return context;
   2f428:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2f42c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   2f430:	e0bffa17 	ldw	r2,-24(fp)
   2f434:	00c00044 	movi	r3,1
   2f438:	1884983a 	sll	r2,r3,r2
   2f43c:	1007883a 	mov	r3,r2
   2f440:	008000f4 	movhi	r2,3
   2f444:	10901304 	addi	r2,r2,16460
   2f448:	10800017 	ldw	r2,0(r2)
   2f44c:	1886b03a 	or	r3,r3,r2
   2f450:	008000f4 	movhi	r2,3
   2f454:	10901304 	addi	r2,r2,16460
   2f458:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2f45c:	008000f4 	movhi	r2,3
   2f460:	10901304 	addi	r2,r2,16460
   2f464:	10800017 	ldw	r2,0(r2)
   2f468:	100170fa 	wrctl	ienable,r2
   2f46c:	e0bffc17 	ldw	r2,-16(fp)
   2f470:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f474:	e0bffd17 	ldw	r2,-12(fp)
   2f478:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2f47c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   2f480:	0001883a 	nop
}
   2f484:	e037883a 	mov	sp,fp
   2f488:	df000017 	ldw	fp,0(sp)
   2f48c:	dec00104 	addi	sp,sp,4
   2f490:	f800283a 	ret

0002f494 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2f494:	defff904 	addi	sp,sp,-28
   2f498:	df000615 	stw	fp,24(sp)
   2f49c:	df000604 	addi	fp,sp,24
   2f4a0:	e13ffe15 	stw	r4,-8(fp)
   2f4a4:	e17fff15 	stw	r5,-4(fp)
   2f4a8:	e0bfff17 	ldw	r2,-4(fp)
   2f4ac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f4b0:	0005303a 	rdctl	r2,status
   2f4b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f4b8:	e0fffb17 	ldw	r3,-20(fp)
   2f4bc:	00bfff84 	movi	r2,-2
   2f4c0:	1884703a 	and	r2,r3,r2
   2f4c4:	1001703a 	wrctl	status,r2
  
  return context;
   2f4c8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2f4cc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   2f4d0:	e0bffa17 	ldw	r2,-24(fp)
   2f4d4:	00c00044 	movi	r3,1
   2f4d8:	1884983a 	sll	r2,r3,r2
   2f4dc:	0084303a 	nor	r2,zero,r2
   2f4e0:	1007883a 	mov	r3,r2
   2f4e4:	008000f4 	movhi	r2,3
   2f4e8:	10901304 	addi	r2,r2,16460
   2f4ec:	10800017 	ldw	r2,0(r2)
   2f4f0:	1886703a 	and	r3,r3,r2
   2f4f4:	008000f4 	movhi	r2,3
   2f4f8:	10901304 	addi	r2,r2,16460
   2f4fc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2f500:	008000f4 	movhi	r2,3
   2f504:	10901304 	addi	r2,r2,16460
   2f508:	10800017 	ldw	r2,0(r2)
   2f50c:	100170fa 	wrctl	ienable,r2
   2f510:	e0bffc17 	ldw	r2,-16(fp)
   2f514:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f518:	e0bffd17 	ldw	r2,-12(fp)
   2f51c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2f520:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   2f524:	0001883a 	nop
}
   2f528:	e037883a 	mov	sp,fp
   2f52c:	df000017 	ldw	fp,0(sp)
   2f530:	dec00104 	addi	sp,sp,4
   2f534:	f800283a 	ret

0002f538 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2f538:	defffc04 	addi	sp,sp,-16
   2f53c:	df000315 	stw	fp,12(sp)
   2f540:	df000304 	addi	fp,sp,12
   2f544:	e13ffe15 	stw	r4,-8(fp)
   2f548:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2f54c:	000530fa 	rdctl	r2,ienable
   2f550:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2f554:	e0bfff17 	ldw	r2,-4(fp)
   2f558:	00c00044 	movi	r3,1
   2f55c:	1884983a 	sll	r2,r3,r2
   2f560:	1007883a 	mov	r3,r2
   2f564:	e0bffd17 	ldw	r2,-12(fp)
   2f568:	1884703a 	and	r2,r3,r2
   2f56c:	1004c03a 	cmpne	r2,r2,zero
   2f570:	10803fcc 	andi	r2,r2,255
}
   2f574:	e037883a 	mov	sp,fp
   2f578:	df000017 	ldw	fp,0(sp)
   2f57c:	dec00104 	addi	sp,sp,4
   2f580:	f800283a 	ret

0002f584 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2f584:	defff504 	addi	sp,sp,-44
   2f588:	dfc00a15 	stw	ra,40(sp)
   2f58c:	df000915 	stw	fp,36(sp)
   2f590:	df000904 	addi	fp,sp,36
   2f594:	e13ffc15 	stw	r4,-16(fp)
   2f598:	e17ffd15 	stw	r5,-12(fp)
   2f59c:	e1bffe15 	stw	r6,-8(fp)
   2f5a0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   2f5a4:	00bffa84 	movi	r2,-22
   2f5a8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2f5ac:	e0bffd17 	ldw	r2,-12(fp)
   2f5b0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2f5b4:	e0bff817 	ldw	r2,-32(fp)
   2f5b8:	10800808 	cmpgei	r2,r2,32
   2f5bc:	1000271e 	bne	r2,zero,2f65c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f5c0:	0005303a 	rdctl	r2,status
   2f5c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f5c8:	e0fffa17 	ldw	r3,-24(fp)
   2f5cc:	00bfff84 	movi	r2,-2
   2f5d0:	1884703a 	and	r2,r3,r2
   2f5d4:	1001703a 	wrctl	status,r2
  
  return context;
   2f5d8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2f5dc:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   2f5e0:	008000f4 	movhi	r2,3
   2f5e4:	10902104 	addi	r2,r2,16516
   2f5e8:	e0fff817 	ldw	r3,-32(fp)
   2f5ec:	180690fa 	slli	r3,r3,3
   2f5f0:	10c5883a 	add	r2,r2,r3
   2f5f4:	e0fffe17 	ldw	r3,-8(fp)
   2f5f8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   2f5fc:	008000f4 	movhi	r2,3
   2f600:	10902104 	addi	r2,r2,16516
   2f604:	e0fff817 	ldw	r3,-32(fp)
   2f608:	180690fa 	slli	r3,r3,3
   2f60c:	10c5883a 	add	r2,r2,r3
   2f610:	10800104 	addi	r2,r2,4
   2f614:	e0ffff17 	ldw	r3,-4(fp)
   2f618:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2f61c:	e0bffe17 	ldw	r2,-8(fp)
   2f620:	10000526 	beq	r2,zero,2f638 <alt_iic_isr_register+0xb4>
   2f624:	e0bff817 	ldw	r2,-32(fp)
   2f628:	e13ffc17 	ldw	r4,-16(fp)
   2f62c:	100b883a 	mov	r5,r2
   2f630:	002f3f40 	call	2f3f4 <alt_ic_irq_enable>
   2f634:	00000406 	br	2f648 <alt_iic_isr_register+0xc4>
   2f638:	e0bff817 	ldw	r2,-32(fp)
   2f63c:	e13ffc17 	ldw	r4,-16(fp)
   2f640:	100b883a 	mov	r5,r2
   2f644:	002f4940 	call	2f494 <alt_ic_irq_disable>
   2f648:	e0bff715 	stw	r2,-36(fp)
   2f64c:	e0bff917 	ldw	r2,-28(fp)
   2f650:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f654:	e0bffb17 	ldw	r2,-20(fp)
   2f658:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2f65c:	e0bff717 	ldw	r2,-36(fp)
}
   2f660:	e037883a 	mov	sp,fp
   2f664:	dfc00117 	ldw	ra,4(sp)
   2f668:	df000017 	ldw	fp,0(sp)
   2f66c:	dec00204 	addi	sp,sp,8
   2f670:	f800283a 	ret

0002f674 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2f674:	defff904 	addi	sp,sp,-28
   2f678:	dfc00615 	stw	ra,24(sp)
   2f67c:	df000515 	stw	fp,20(sp)
   2f680:	df000504 	addi	fp,sp,20
   2f684:	e13ffc15 	stw	r4,-16(fp)
   2f688:	e17ffd15 	stw	r5,-12(fp)
   2f68c:	e1bffe15 	stw	r6,-8(fp)
   2f690:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   2f694:	e13ffd17 	ldw	r4,-12(fp)
   2f698:	e17ffe17 	ldw	r5,-8(fp)
   2f69c:	e1bfff17 	ldw	r6,-4(fp)
   2f6a0:	002f8c80 	call	2f8c8 <open>
   2f6a4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   2f6a8:	e0bffb17 	ldw	r2,-20(fp)
   2f6ac:	10001c16 	blt	r2,zero,2f720 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   2f6b0:	008000f4 	movhi	r2,3
   2f6b4:	10843404 	addi	r2,r2,4304
   2f6b8:	e0fffb17 	ldw	r3,-20(fp)
   2f6bc:	18c00324 	muli	r3,r3,12
   2f6c0:	10c5883a 	add	r2,r2,r3
   2f6c4:	10c00017 	ldw	r3,0(r2)
   2f6c8:	e0bffc17 	ldw	r2,-16(fp)
   2f6cc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2f6d0:	008000f4 	movhi	r2,3
   2f6d4:	10843404 	addi	r2,r2,4304
   2f6d8:	e0fffb17 	ldw	r3,-20(fp)
   2f6dc:	18c00324 	muli	r3,r3,12
   2f6e0:	10c5883a 	add	r2,r2,r3
   2f6e4:	10800104 	addi	r2,r2,4
   2f6e8:	10c00017 	ldw	r3,0(r2)
   2f6ec:	e0bffc17 	ldw	r2,-16(fp)
   2f6f0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2f6f4:	008000f4 	movhi	r2,3
   2f6f8:	10843404 	addi	r2,r2,4304
   2f6fc:	e0fffb17 	ldw	r3,-20(fp)
   2f700:	18c00324 	muli	r3,r3,12
   2f704:	10c5883a 	add	r2,r2,r3
   2f708:	10800204 	addi	r2,r2,8
   2f70c:	10c00017 	ldw	r3,0(r2)
   2f710:	e0bffc17 	ldw	r2,-16(fp)
   2f714:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2f718:	e13ffb17 	ldw	r4,-20(fp)
   2f71c:	002d2100 	call	2d210 <alt_release_fd>
  }
} 
   2f720:	e037883a 	mov	sp,fp
   2f724:	dfc00117 	ldw	ra,4(sp)
   2f728:	df000017 	ldw	fp,0(sp)
   2f72c:	dec00204 	addi	sp,sp,8
   2f730:	f800283a 	ret

0002f734 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2f734:	defffb04 	addi	sp,sp,-20
   2f738:	dfc00415 	stw	ra,16(sp)
   2f73c:	df000315 	stw	fp,12(sp)
   2f740:	df000304 	addi	fp,sp,12
   2f744:	e13ffd15 	stw	r4,-12(fp)
   2f748:	e17ffe15 	stw	r5,-8(fp)
   2f74c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2f750:	010000f4 	movhi	r4,3
   2f754:	21043704 	addi	r4,r4,4316
   2f758:	e17ffd17 	ldw	r5,-12(fp)
   2f75c:	01800044 	movi	r6,1
   2f760:	01c07fc4 	movi	r7,511
   2f764:	002f6740 	call	2f674 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2f768:	010000f4 	movhi	r4,3
   2f76c:	21043404 	addi	r4,r4,4304
   2f770:	e17ffe17 	ldw	r5,-8(fp)
   2f774:	000d883a 	mov	r6,zero
   2f778:	01c07fc4 	movi	r7,511
   2f77c:	002f6740 	call	2f674 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2f780:	010000f4 	movhi	r4,3
   2f784:	21043a04 	addi	r4,r4,4328
   2f788:	e17fff17 	ldw	r5,-4(fp)
   2f78c:	01800044 	movi	r6,1
   2f790:	01c07fc4 	movi	r7,511
   2f794:	002f6740 	call	2f674 <alt_open_fd>
}  
   2f798:	e037883a 	mov	sp,fp
   2f79c:	dfc00117 	ldw	ra,4(sp)
   2f7a0:	df000017 	ldw	fp,0(sp)
   2f7a4:	dec00204 	addi	sp,sp,8
   2f7a8:	f800283a 	ret

0002f7ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2f7ac:	defffe04 	addi	sp,sp,-8
   2f7b0:	dfc00115 	stw	ra,4(sp)
   2f7b4:	df000015 	stw	fp,0(sp)
   2f7b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2f7bc:	008000f4 	movhi	r2,3
   2f7c0:	1088fe04 	addi	r2,r2,9208
   2f7c4:	10800017 	ldw	r2,0(r2)
   2f7c8:	10000526 	beq	r2,zero,2f7e0 <alt_get_errno+0x34>
   2f7cc:	008000f4 	movhi	r2,3
   2f7d0:	1088fe04 	addi	r2,r2,9208
   2f7d4:	10800017 	ldw	r2,0(r2)
   2f7d8:	103ee83a 	callr	r2
   2f7dc:	00000206 	br	2f7e8 <alt_get_errno+0x3c>
   2f7e0:	008000f4 	movhi	r2,3
   2f7e4:	10900f04 	addi	r2,r2,16444
}
   2f7e8:	e037883a 	mov	sp,fp
   2f7ec:	dfc00117 	ldw	ra,4(sp)
   2f7f0:	df000017 	ldw	fp,0(sp)
   2f7f4:	dec00204 	addi	sp,sp,8
   2f7f8:	f800283a 	ret

0002f7fc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2f7fc:	defffd04 	addi	sp,sp,-12
   2f800:	df000215 	stw	fp,8(sp)
   2f804:	df000204 	addi	fp,sp,8
   2f808:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2f80c:	e0bfff17 	ldw	r2,-4(fp)
   2f810:	10800217 	ldw	r2,8(r2)
   2f814:	10d00034 	orhi	r3,r2,16384
   2f818:	e0bfff17 	ldw	r2,-4(fp)
   2f81c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2f820:	e03ffe15 	stw	zero,-8(fp)
   2f824:	00001d06 	br	2f89c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2f828:	008000f4 	movhi	r2,3
   2f82c:	10843404 	addi	r2,r2,4304
   2f830:	e0fffe17 	ldw	r3,-8(fp)
   2f834:	18c00324 	muli	r3,r3,12
   2f838:	10c5883a 	add	r2,r2,r3
   2f83c:	10c00017 	ldw	r3,0(r2)
   2f840:	e0bfff17 	ldw	r2,-4(fp)
   2f844:	10800017 	ldw	r2,0(r2)
   2f848:	1880111e 	bne	r3,r2,2f890 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2f84c:	008000f4 	movhi	r2,3
   2f850:	10843404 	addi	r2,r2,4304
   2f854:	e0fffe17 	ldw	r3,-8(fp)
   2f858:	18c00324 	muli	r3,r3,12
   2f85c:	10c5883a 	add	r2,r2,r3
   2f860:	10800204 	addi	r2,r2,8
   2f864:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2f868:	1000090e 	bge	r2,zero,2f890 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2f86c:	e0bffe17 	ldw	r2,-8(fp)
   2f870:	10c00324 	muli	r3,r2,12
   2f874:	008000f4 	movhi	r2,3
   2f878:	10843404 	addi	r2,r2,4304
   2f87c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2f880:	e0bfff17 	ldw	r2,-4(fp)
   2f884:	18800226 	beq	r3,r2,2f890 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2f888:	00bffcc4 	movi	r2,-13
   2f88c:	00000a06 	br	2f8b8 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2f890:	e0bffe17 	ldw	r2,-8(fp)
   2f894:	10800044 	addi	r2,r2,1
   2f898:	e0bffe15 	stw	r2,-8(fp)
   2f89c:	008000f4 	movhi	r2,3
   2f8a0:	1088fd04 	addi	r2,r2,9204
   2f8a4:	10800017 	ldw	r2,0(r2)
   2f8a8:	1007883a 	mov	r3,r2
   2f8ac:	e0bffe17 	ldw	r2,-8(fp)
   2f8b0:	18bfdd2e 	bgeu	r3,r2,2f828 <_gp+0xffff545c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2f8b4:	0005883a 	mov	r2,zero
}
   2f8b8:	e037883a 	mov	sp,fp
   2f8bc:	df000017 	ldw	fp,0(sp)
   2f8c0:	dec00104 	addi	sp,sp,4
   2f8c4:	f800283a 	ret

0002f8c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2f8c8:	defff604 	addi	sp,sp,-40
   2f8cc:	dfc00915 	stw	ra,36(sp)
   2f8d0:	df000815 	stw	fp,32(sp)
   2f8d4:	df000804 	addi	fp,sp,32
   2f8d8:	e13ffd15 	stw	r4,-12(fp)
   2f8dc:	e17ffe15 	stw	r5,-8(fp)
   2f8e0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2f8e4:	00bfffc4 	movi	r2,-1
   2f8e8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   2f8ec:	00bffb44 	movi	r2,-19
   2f8f0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   2f8f4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2f8f8:	e13ffd17 	ldw	r4,-12(fp)
   2f8fc:	014000f4 	movhi	r5,3
   2f900:	2948fb04 	addi	r5,r5,9196
   2f904:	002f2e40 	call	2f2e4 <alt_find_dev>
   2f908:	e0bff815 	stw	r2,-32(fp)
   2f90c:	e0bff817 	ldw	r2,-32(fp)
   2f910:	1000051e 	bne	r2,zero,2f928 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2f914:	e13ffd17 	ldw	r4,-12(fp)
   2f918:	002fbdc0 	call	2fbdc <alt_find_file>
   2f91c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   2f920:	00800044 	movi	r2,1
   2f924:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2f928:	e0bff817 	ldw	r2,-32(fp)
   2f92c:	10002926 	beq	r2,zero,2f9d4 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2f930:	e13ff817 	ldw	r4,-32(fp)
   2f934:	002fcf00 	call	2fcf0 <alt_get_fd>
   2f938:	e0bff915 	stw	r2,-28(fp)
   2f93c:	e0bff917 	ldw	r2,-28(fp)
   2f940:	1000030e 	bge	r2,zero,2f950 <open+0x88>
    {
      status = index;
   2f944:	e0bff917 	ldw	r2,-28(fp)
   2f948:	e0bffa15 	stw	r2,-24(fp)
   2f94c:	00002306 	br	2f9dc <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   2f950:	e0bff917 	ldw	r2,-28(fp)
   2f954:	10c00324 	muli	r3,r2,12
   2f958:	008000f4 	movhi	r2,3
   2f95c:	10843404 	addi	r2,r2,4304
   2f960:	1885883a 	add	r2,r3,r2
   2f964:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2f968:	e0fffe17 	ldw	r3,-8(fp)
   2f96c:	00900034 	movhi	r2,16384
   2f970:	10bfffc4 	addi	r2,r2,-1
   2f974:	1886703a 	and	r3,r3,r2
   2f978:	e0bffc17 	ldw	r2,-16(fp)
   2f97c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2f980:	e0bffb17 	ldw	r2,-20(fp)
   2f984:	1000051e 	bne	r2,zero,2f99c <open+0xd4>
   2f988:	e13ffc17 	ldw	r4,-16(fp)
   2f98c:	002f7fc0 	call	2f7fc <alt_file_locked>
   2f990:	e0bffa15 	stw	r2,-24(fp)
   2f994:	e0bffa17 	ldw	r2,-24(fp)
   2f998:	10001016 	blt	r2,zero,2f9dc <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2f99c:	e0bff817 	ldw	r2,-32(fp)
   2f9a0:	10800317 	ldw	r2,12(r2)
   2f9a4:	10000826 	beq	r2,zero,2f9c8 <open+0x100>
   2f9a8:	e0bff817 	ldw	r2,-32(fp)
   2f9ac:	10800317 	ldw	r2,12(r2)
   2f9b0:	e13ffc17 	ldw	r4,-16(fp)
   2f9b4:	e17ffd17 	ldw	r5,-12(fp)
   2f9b8:	e1bffe17 	ldw	r6,-8(fp)
   2f9bc:	e1ffff17 	ldw	r7,-4(fp)
   2f9c0:	103ee83a 	callr	r2
   2f9c4:	00000106 	br	2f9cc <open+0x104>
   2f9c8:	0005883a 	mov	r2,zero
   2f9cc:	e0bffa15 	stw	r2,-24(fp)
   2f9d0:	00000206 	br	2f9dc <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2f9d4:	00bffb44 	movi	r2,-19
   2f9d8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2f9dc:	e0bffa17 	ldw	r2,-24(fp)
   2f9e0:	1000090e 	bge	r2,zero,2fa08 <open+0x140>
  {
    alt_release_fd (index);  
   2f9e4:	e13ff917 	ldw	r4,-28(fp)
   2f9e8:	002d2100 	call	2d210 <alt_release_fd>
    ALT_ERRNO = -status;
   2f9ec:	002f7ac0 	call	2f7ac <alt_get_errno>
   2f9f0:	1007883a 	mov	r3,r2
   2f9f4:	e0bffa17 	ldw	r2,-24(fp)
   2f9f8:	0085c83a 	sub	r2,zero,r2
   2f9fc:	18800015 	stw	r2,0(r3)
    return -1;
   2fa00:	00bfffc4 	movi	r2,-1
   2fa04:	00000106 	br	2fa0c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   2fa08:	e0bff917 	ldw	r2,-28(fp)
}
   2fa0c:	e037883a 	mov	sp,fp
   2fa10:	dfc00117 	ldw	ra,4(sp)
   2fa14:	df000017 	ldw	fp,0(sp)
   2fa18:	dec00204 	addi	sp,sp,8
   2fa1c:	f800283a 	ret

0002fa20 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2fa20:	defffa04 	addi	sp,sp,-24
   2fa24:	df000515 	stw	fp,20(sp)
   2fa28:	df000504 	addi	fp,sp,20
   2fa2c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2fa30:	0005303a 	rdctl	r2,status
   2fa34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2fa38:	e0fffc17 	ldw	r3,-16(fp)
   2fa3c:	00bfff84 	movi	r2,-2
   2fa40:	1884703a 	and	r2,r3,r2
   2fa44:	1001703a 	wrctl	status,r2
  
  return context;
   2fa48:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2fa4c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   2fa50:	e0bfff17 	ldw	r2,-4(fp)
   2fa54:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2fa58:	e0bffd17 	ldw	r2,-12(fp)
   2fa5c:	10800017 	ldw	r2,0(r2)
   2fa60:	e0fffd17 	ldw	r3,-12(fp)
   2fa64:	18c00117 	ldw	r3,4(r3)
   2fa68:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   2fa6c:	e0bffd17 	ldw	r2,-12(fp)
   2fa70:	10800117 	ldw	r2,4(r2)
   2fa74:	e0fffd17 	ldw	r3,-12(fp)
   2fa78:	18c00017 	ldw	r3,0(r3)
   2fa7c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2fa80:	e0bffd17 	ldw	r2,-12(fp)
   2fa84:	e0fffd17 	ldw	r3,-12(fp)
   2fa88:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   2fa8c:	e0bffd17 	ldw	r2,-12(fp)
   2fa90:	e0fffd17 	ldw	r3,-12(fp)
   2fa94:	10c00015 	stw	r3,0(r2)
   2fa98:	e0bffb17 	ldw	r2,-20(fp)
   2fa9c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2faa0:	e0bffe17 	ldw	r2,-8(fp)
   2faa4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   2faa8:	e037883a 	mov	sp,fp
   2faac:	df000017 	ldw	fp,0(sp)
   2fab0:	dec00104 	addi	sp,sp,4
   2fab4:	f800283a 	ret

0002fab8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   2fab8:	defffb04 	addi	sp,sp,-20
   2fabc:	dfc00415 	stw	ra,16(sp)
   2fac0:	df000315 	stw	fp,12(sp)
   2fac4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2fac8:	d0a01017 	ldw	r2,-32704(gp)
   2facc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2fad0:	d0a72217 	ldw	r2,-25464(gp)
   2fad4:	10800044 	addi	r2,r2,1
   2fad8:	d0a72215 	stw	r2,-25464(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2fadc:	00002e06 	br	2fb98 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   2fae0:	e0bffd17 	ldw	r2,-12(fp)
   2fae4:	10800017 	ldw	r2,0(r2)
   2fae8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2faec:	e0bffd17 	ldw	r2,-12(fp)
   2faf0:	10800403 	ldbu	r2,16(r2)
   2faf4:	10803fcc 	andi	r2,r2,255
   2faf8:	10000426 	beq	r2,zero,2fb0c <alt_tick+0x54>
   2fafc:	d0a72217 	ldw	r2,-25464(gp)
   2fb00:	1000021e 	bne	r2,zero,2fb0c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   2fb04:	e0bffd17 	ldw	r2,-12(fp)
   2fb08:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2fb0c:	e0bffd17 	ldw	r2,-12(fp)
   2fb10:	10800217 	ldw	r2,8(r2)
   2fb14:	d0e72217 	ldw	r3,-25464(gp)
   2fb18:	18801d36 	bltu	r3,r2,2fb90 <alt_tick+0xd8>
   2fb1c:	e0bffd17 	ldw	r2,-12(fp)
   2fb20:	10800403 	ldbu	r2,16(r2)
   2fb24:	10803fcc 	andi	r2,r2,255
   2fb28:	1000191e 	bne	r2,zero,2fb90 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   2fb2c:	e0bffd17 	ldw	r2,-12(fp)
   2fb30:	10800317 	ldw	r2,12(r2)
   2fb34:	e0fffd17 	ldw	r3,-12(fp)
   2fb38:	18c00517 	ldw	r3,20(r3)
   2fb3c:	1809883a 	mov	r4,r3
   2fb40:	103ee83a 	callr	r2
   2fb44:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2fb48:	e0bfff17 	ldw	r2,-4(fp)
   2fb4c:	1000031e 	bne	r2,zero,2fb5c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   2fb50:	e13ffd17 	ldw	r4,-12(fp)
   2fb54:	002fa200 	call	2fa20 <alt_alarm_stop>
   2fb58:	00000d06 	br	2fb90 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   2fb5c:	e0bffd17 	ldw	r2,-12(fp)
   2fb60:	10c00217 	ldw	r3,8(r2)
   2fb64:	e0bfff17 	ldw	r2,-4(fp)
   2fb68:	1887883a 	add	r3,r3,r2
   2fb6c:	e0bffd17 	ldw	r2,-12(fp)
   2fb70:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2fb74:	e0bffd17 	ldw	r2,-12(fp)
   2fb78:	10c00217 	ldw	r3,8(r2)
   2fb7c:	d0a72217 	ldw	r2,-25464(gp)
   2fb80:	1880032e 	bgeu	r3,r2,2fb90 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   2fb84:	e0bffd17 	ldw	r2,-12(fp)
   2fb88:	00c00044 	movi	r3,1
   2fb8c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   2fb90:	e0bffe17 	ldw	r2,-8(fp)
   2fb94:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2fb98:	e0fffd17 	ldw	r3,-12(fp)
   2fb9c:	d0a01004 	addi	r2,gp,-32704
   2fba0:	18bfcf1e 	bne	r3,r2,2fae0 <_gp+0xffff5714>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   2fba4:	0001883a 	nop
}
   2fba8:	e037883a 	mov	sp,fp
   2fbac:	dfc00117 	ldw	ra,4(sp)
   2fbb0:	df000017 	ldw	fp,0(sp)
   2fbb4:	dec00204 	addi	sp,sp,8
   2fbb8:	f800283a 	ret

0002fbbc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   2fbbc:	deffff04 	addi	sp,sp,-4
   2fbc0:	df000015 	stw	fp,0(sp)
   2fbc4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2fbc8:	000170fa 	wrctl	ienable,zero
}
   2fbcc:	e037883a 	mov	sp,fp
   2fbd0:	df000017 	ldw	fp,0(sp)
   2fbd4:	dec00104 	addi	sp,sp,4
   2fbd8:	f800283a 	ret

0002fbdc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2fbdc:	defffb04 	addi	sp,sp,-20
   2fbe0:	dfc00415 	stw	ra,16(sp)
   2fbe4:	df000315 	stw	fp,12(sp)
   2fbe8:	df000304 	addi	fp,sp,12
   2fbec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2fbf0:	008000f4 	movhi	r2,3
   2fbf4:	1088f904 	addi	r2,r2,9188
   2fbf8:	10800017 	ldw	r2,0(r2)
   2fbfc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2fc00:	00003106 	br	2fcc8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   2fc04:	e0bffd17 	ldw	r2,-12(fp)
   2fc08:	10800217 	ldw	r2,8(r2)
   2fc0c:	1009883a 	mov	r4,r2
   2fc10:	002062c0 	call	2062c <strlen>
   2fc14:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2fc18:	e0bffd17 	ldw	r2,-12(fp)
   2fc1c:	10c00217 	ldw	r3,8(r2)
   2fc20:	e0bffe17 	ldw	r2,-8(fp)
   2fc24:	10bfffc4 	addi	r2,r2,-1
   2fc28:	1885883a 	add	r2,r3,r2
   2fc2c:	10800003 	ldbu	r2,0(r2)
   2fc30:	10803fcc 	andi	r2,r2,255
   2fc34:	1080201c 	xori	r2,r2,128
   2fc38:	10bfe004 	addi	r2,r2,-128
   2fc3c:	10800bd8 	cmpnei	r2,r2,47
   2fc40:	1000031e 	bne	r2,zero,2fc50 <alt_find_file+0x74>
    {
      len -= 1;
   2fc44:	e0bffe17 	ldw	r2,-8(fp)
   2fc48:	10bfffc4 	addi	r2,r2,-1
   2fc4c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2fc50:	e0bffe17 	ldw	r2,-8(fp)
   2fc54:	e0ffff17 	ldw	r3,-4(fp)
   2fc58:	1885883a 	add	r2,r3,r2
   2fc5c:	10800003 	ldbu	r2,0(r2)
   2fc60:	10803fcc 	andi	r2,r2,255
   2fc64:	1080201c 	xori	r2,r2,128
   2fc68:	10bfe004 	addi	r2,r2,-128
   2fc6c:	10800be0 	cmpeqi	r2,r2,47
   2fc70:	1000081e 	bne	r2,zero,2fc94 <alt_find_file+0xb8>
   2fc74:	e0bffe17 	ldw	r2,-8(fp)
   2fc78:	e0ffff17 	ldw	r3,-4(fp)
   2fc7c:	1885883a 	add	r2,r3,r2
   2fc80:	10800003 	ldbu	r2,0(r2)
   2fc84:	10803fcc 	andi	r2,r2,255
   2fc88:	1080201c 	xori	r2,r2,128
   2fc8c:	10bfe004 	addi	r2,r2,-128
   2fc90:	10000a1e 	bne	r2,zero,2fcbc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   2fc94:	e0bffd17 	ldw	r2,-12(fp)
   2fc98:	10c00217 	ldw	r3,8(r2)
   2fc9c:	e0bffe17 	ldw	r2,-8(fp)
   2fca0:	1809883a 	mov	r4,r3
   2fca4:	e17fff17 	ldw	r5,-4(fp)
   2fca8:	100d883a 	mov	r6,r2
   2fcac:	002ff180 	call	2ff18 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2fcb0:	1000021e 	bne	r2,zero,2fcbc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2fcb4:	e0bffd17 	ldw	r2,-12(fp)
   2fcb8:	00000806 	br	2fcdc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   2fcbc:	e0bffd17 	ldw	r2,-12(fp)
   2fcc0:	10800017 	ldw	r2,0(r2)
   2fcc4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2fcc8:	e0fffd17 	ldw	r3,-12(fp)
   2fccc:	008000f4 	movhi	r2,3
   2fcd0:	1088f904 	addi	r2,r2,9188
   2fcd4:	18bfcb1e 	bne	r3,r2,2fc04 <_gp+0xffff5838>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2fcd8:	0005883a 	mov	r2,zero
}
   2fcdc:	e037883a 	mov	sp,fp
   2fce0:	dfc00117 	ldw	ra,4(sp)
   2fce4:	df000017 	ldw	fp,0(sp)
   2fce8:	dec00204 	addi	sp,sp,8
   2fcec:	f800283a 	ret

0002fcf0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2fcf0:	defffc04 	addi	sp,sp,-16
   2fcf4:	df000315 	stw	fp,12(sp)
   2fcf8:	df000304 	addi	fp,sp,12
   2fcfc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   2fd00:	00bffa04 	movi	r2,-24
   2fd04:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2fd08:	e03ffd15 	stw	zero,-12(fp)
   2fd0c:	00001d06 	br	2fd84 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   2fd10:	008000f4 	movhi	r2,3
   2fd14:	10843404 	addi	r2,r2,4304
   2fd18:	e0fffd17 	ldw	r3,-12(fp)
   2fd1c:	18c00324 	muli	r3,r3,12
   2fd20:	10c5883a 	add	r2,r2,r3
   2fd24:	10800017 	ldw	r2,0(r2)
   2fd28:	1000131e 	bne	r2,zero,2fd78 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   2fd2c:	008000f4 	movhi	r2,3
   2fd30:	10843404 	addi	r2,r2,4304
   2fd34:	e0fffd17 	ldw	r3,-12(fp)
   2fd38:	18c00324 	muli	r3,r3,12
   2fd3c:	10c5883a 	add	r2,r2,r3
   2fd40:	e0ffff17 	ldw	r3,-4(fp)
   2fd44:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   2fd48:	008000f4 	movhi	r2,3
   2fd4c:	1088fd04 	addi	r2,r2,9204
   2fd50:	10c00017 	ldw	r3,0(r2)
   2fd54:	e0bffd17 	ldw	r2,-12(fp)
   2fd58:	1880040e 	bge	r3,r2,2fd6c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   2fd5c:	008000f4 	movhi	r2,3
   2fd60:	1088fd04 	addi	r2,r2,9204
   2fd64:	e0fffd17 	ldw	r3,-12(fp)
   2fd68:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   2fd6c:	e0bffd17 	ldw	r2,-12(fp)
   2fd70:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   2fd74:	00000606 	br	2fd90 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2fd78:	e0bffd17 	ldw	r2,-12(fp)
   2fd7c:	10800044 	addi	r2,r2,1
   2fd80:	e0bffd15 	stw	r2,-12(fp)
   2fd84:	e0bffd17 	ldw	r2,-12(fp)
   2fd88:	10800810 	cmplti	r2,r2,32
   2fd8c:	103fe01e 	bne	r2,zero,2fd10 <_gp+0xffff5944>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2fd90:	e0bffe17 	ldw	r2,-8(fp)
}
   2fd94:	e037883a 	mov	sp,fp
   2fd98:	df000017 	ldw	fp,0(sp)
   2fd9c:	dec00104 	addi	sp,sp,4
   2fda0:	f800283a 	ret

0002fda4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   2fda4:	defffb04 	addi	sp,sp,-20
   2fda8:	df000415 	stw	fp,16(sp)
   2fdac:	df000404 	addi	fp,sp,16
   2fdb0:	e13ffe15 	stw	r4,-8(fp)
   2fdb4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   2fdb8:	e0bfff17 	ldw	r2,-4(fp)
   2fdbc:	10840070 	cmpltui	r2,r2,4097
   2fdc0:	1000021e 	bne	r2,zero,2fdcc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   2fdc4:	00840004 	movi	r2,4096
   2fdc8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   2fdcc:	e0fffe17 	ldw	r3,-8(fp)
   2fdd0:	e0bfff17 	ldw	r2,-4(fp)
   2fdd4:	1885883a 	add	r2,r3,r2
   2fdd8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2fddc:	e0bffe17 	ldw	r2,-8(fp)
   2fde0:	e0bffc15 	stw	r2,-16(fp)
   2fde4:	00000506 	br	2fdfc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   2fde8:	e0bffc17 	ldw	r2,-16(fp)
   2fdec:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2fdf0:	e0bffc17 	ldw	r2,-16(fp)
   2fdf4:	10800804 	addi	r2,r2,32
   2fdf8:	e0bffc15 	stw	r2,-16(fp)
   2fdfc:	e0fffc17 	ldw	r3,-16(fp)
   2fe00:	e0bffd17 	ldw	r2,-12(fp)
   2fe04:	18bff836 	bltu	r3,r2,2fde8 <_gp+0xffff5a1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   2fe08:	e0bffe17 	ldw	r2,-8(fp)
   2fe0c:	108007cc 	andi	r2,r2,31
   2fe10:	10000226 	beq	r2,zero,2fe1c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   2fe14:	e0bffc17 	ldw	r2,-16(fp)
   2fe18:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   2fe1c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   2fe20:	e037883a 	mov	sp,fp
   2fe24:	df000017 	ldw	fp,0(sp)
   2fe28:	dec00104 	addi	sp,sp,4
   2fe2c:	f800283a 	ret

0002fe30 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   2fe30:	defffe04 	addi	sp,sp,-8
   2fe34:	df000115 	stw	fp,4(sp)
   2fe38:	df000104 	addi	fp,sp,4
   2fe3c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   2fe40:	e0bfff17 	ldw	r2,-4(fp)
   2fe44:	10bffe84 	addi	r2,r2,-6
   2fe48:	10c00428 	cmpgeui	r3,r2,16
   2fe4c:	18001a1e 	bne	r3,zero,2feb8 <alt_exception_cause_generated_bad_addr+0x88>
   2fe50:	100690ba 	slli	r3,r2,2
   2fe54:	008000f4 	movhi	r2,3
   2fe58:	10bf9a04 	addi	r2,r2,-408
   2fe5c:	1885883a 	add	r2,r3,r2
   2fe60:	10800017 	ldw	r2,0(r2)
   2fe64:	1000683a 	jmp	r2
   2fe68:	0002fea8 	cmpgeui	zero,zero,3066
   2fe6c:	0002fea8 	cmpgeui	zero,zero,3066
   2fe70:	0002feb8 	rdprs	zero,zero,3066
   2fe74:	0002feb8 	rdprs	zero,zero,3066
   2fe78:	0002feb8 	rdprs	zero,zero,3066
   2fe7c:	0002fea8 	cmpgeui	zero,zero,3066
   2fe80:	0002feb0 	cmpltui	zero,zero,3066
   2fe84:	0002feb8 	rdprs	zero,zero,3066
   2fe88:	0002fea8 	cmpgeui	zero,zero,3066
   2fe8c:	0002fea8 	cmpgeui	zero,zero,3066
   2fe90:	0002feb8 	rdprs	zero,zero,3066
   2fe94:	0002fea8 	cmpgeui	zero,zero,3066
   2fe98:	0002feb0 	cmpltui	zero,zero,3066
   2fe9c:	0002feb8 	rdprs	zero,zero,3066
   2fea0:	0002feb8 	rdprs	zero,zero,3066
   2fea4:	0002fea8 	cmpgeui	zero,zero,3066
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   2fea8:	00800044 	movi	r2,1
   2feac:	00000306 	br	2febc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   2feb0:	0005883a 	mov	r2,zero
   2feb4:	00000106 	br	2febc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   2feb8:	0005883a 	mov	r2,zero
  }
}
   2febc:	e037883a 	mov	sp,fp
   2fec0:	df000017 	ldw	fp,0(sp)
   2fec4:	dec00104 	addi	sp,sp,4
   2fec8:	f800283a 	ret

0002fecc <atexit>:
   2fecc:	200b883a 	mov	r5,r4
   2fed0:	000d883a 	mov	r6,zero
   2fed4:	0009883a 	mov	r4,zero
   2fed8:	000f883a 	mov	r7,zero
   2fedc:	00300fc1 	jmpi	300fc <__register_exitproc>

0002fee0 <exit>:
   2fee0:	defffe04 	addi	sp,sp,-8
   2fee4:	000b883a 	mov	r5,zero
   2fee8:	dc000015 	stw	r16,0(sp)
   2feec:	dfc00115 	stw	ra,4(sp)
   2fef0:	2021883a 	mov	r16,r4
   2fef4:	00302100 	call	30210 <__call_exitprocs>
   2fef8:	008000f4 	movhi	r2,3
   2fefc:	1088f304 	addi	r2,r2,9164
   2ff00:	11000017 	ldw	r4,0(r2)
   2ff04:	20800f17 	ldw	r2,60(r4)
   2ff08:	10000126 	beq	r2,zero,2ff10 <exit+0x30>
   2ff0c:	103ee83a 	callr	r2
   2ff10:	8009883a 	mov	r4,r16
   2ff14:	00303a40 	call	303a4 <_exit>

0002ff18 <memcmp>:
   2ff18:	01c000c4 	movi	r7,3
   2ff1c:	3980192e 	bgeu	r7,r6,2ff84 <memcmp+0x6c>
   2ff20:	2144b03a 	or	r2,r4,r5
   2ff24:	11c4703a 	and	r2,r2,r7
   2ff28:	10000f26 	beq	r2,zero,2ff68 <memcmp+0x50>
   2ff2c:	20800003 	ldbu	r2,0(r4)
   2ff30:	28c00003 	ldbu	r3,0(r5)
   2ff34:	10c0151e 	bne	r2,r3,2ff8c <memcmp+0x74>
   2ff38:	31bfff84 	addi	r6,r6,-2
   2ff3c:	01ffffc4 	movi	r7,-1
   2ff40:	00000406 	br	2ff54 <memcmp+0x3c>
   2ff44:	20800003 	ldbu	r2,0(r4)
   2ff48:	28c00003 	ldbu	r3,0(r5)
   2ff4c:	31bfffc4 	addi	r6,r6,-1
   2ff50:	10c00e1e 	bne	r2,r3,2ff8c <memcmp+0x74>
   2ff54:	21000044 	addi	r4,r4,1
   2ff58:	29400044 	addi	r5,r5,1
   2ff5c:	31fff91e 	bne	r6,r7,2ff44 <_gp+0xffff5b78>
   2ff60:	0005883a 	mov	r2,zero
   2ff64:	f800283a 	ret
   2ff68:	20c00017 	ldw	r3,0(r4)
   2ff6c:	28800017 	ldw	r2,0(r5)
   2ff70:	1880041e 	bne	r3,r2,2ff84 <memcmp+0x6c>
   2ff74:	31bfff04 	addi	r6,r6,-4
   2ff78:	21000104 	addi	r4,r4,4
   2ff7c:	29400104 	addi	r5,r5,4
   2ff80:	39bff936 	bltu	r7,r6,2ff68 <_gp+0xffff5b9c>
   2ff84:	303fe91e 	bne	r6,zero,2ff2c <_gp+0xffff5b60>
   2ff88:	003ff506 	br	2ff60 <_gp+0xffff5b94>
   2ff8c:	10c5c83a 	sub	r2,r2,r3
   2ff90:	f800283a 	ret

0002ff94 <_putc_r>:
   2ff94:	defffc04 	addi	sp,sp,-16
   2ff98:	dc000215 	stw	r16,8(sp)
   2ff9c:	dfc00315 	stw	ra,12(sp)
   2ffa0:	2021883a 	mov	r16,r4
   2ffa4:	20000226 	beq	r4,zero,2ffb0 <_putc_r+0x1c>
   2ffa8:	20800e17 	ldw	r2,56(r4)
   2ffac:	10001b26 	beq	r2,zero,3001c <_putc_r+0x88>
   2ffb0:	30800217 	ldw	r2,8(r6)
   2ffb4:	10bfffc4 	addi	r2,r2,-1
   2ffb8:	30800215 	stw	r2,8(r6)
   2ffbc:	10000a16 	blt	r2,zero,2ffe8 <_putc_r+0x54>
   2ffc0:	30800017 	ldw	r2,0(r6)
   2ffc4:	11400005 	stb	r5,0(r2)
   2ffc8:	30800017 	ldw	r2,0(r6)
   2ffcc:	10c00044 	addi	r3,r2,1
   2ffd0:	30c00015 	stw	r3,0(r6)
   2ffd4:	10800003 	ldbu	r2,0(r2)
   2ffd8:	dfc00317 	ldw	ra,12(sp)
   2ffdc:	dc000217 	ldw	r16,8(sp)
   2ffe0:	dec00404 	addi	sp,sp,16
   2ffe4:	f800283a 	ret
   2ffe8:	30c00617 	ldw	r3,24(r6)
   2ffec:	10c00616 	blt	r2,r3,30008 <_putc_r+0x74>
   2fff0:	30800017 	ldw	r2,0(r6)
   2fff4:	00c00284 	movi	r3,10
   2fff8:	11400005 	stb	r5,0(r2)
   2fffc:	30800017 	ldw	r2,0(r6)
   30000:	11400003 	ldbu	r5,0(r2)
   30004:	28fff11e 	bne	r5,r3,2ffcc <_gp+0xffff5c00>
   30008:	8009883a 	mov	r4,r16
   3000c:	dfc00317 	ldw	ra,12(sp)
   30010:	dc000217 	ldw	r16,8(sp)
   30014:	dec00404 	addi	sp,sp,16
   30018:	002926c1 	jmpi	2926c <__swbuf_r>
   3001c:	d9400015 	stw	r5,0(sp)
   30020:	d9800115 	stw	r6,4(sp)
   30024:	00246e40 	call	246e4 <__sinit>
   30028:	d9800117 	ldw	r6,4(sp)
   3002c:	d9400017 	ldw	r5,0(sp)
   30030:	003fdf06 	br	2ffb0 <_gp+0xffff5be4>

00030034 <putc>:
   30034:	defffc04 	addi	sp,sp,-16
   30038:	dc400115 	stw	r17,4(sp)
   3003c:	044000f4 	movhi	r17,3
   30040:	8c48f404 	addi	r17,r17,9168
   30044:	dc800215 	stw	r18,8(sp)
   30048:	2025883a 	mov	r18,r4
   3004c:	89000017 	ldw	r4,0(r17)
   30050:	dc000015 	stw	r16,0(sp)
   30054:	dfc00315 	stw	ra,12(sp)
   30058:	2821883a 	mov	r16,r5
   3005c:	20000226 	beq	r4,zero,30068 <putc+0x34>
   30060:	20c00e17 	ldw	r3,56(r4)
   30064:	18001a26 	beq	r3,zero,300d0 <putc+0x9c>
   30068:	80800217 	ldw	r2,8(r16)
   3006c:	10bfffc4 	addi	r2,r2,-1
   30070:	80800215 	stw	r2,8(r16)
   30074:	10000c16 	blt	r2,zero,300a8 <putc+0x74>
   30078:	80800017 	ldw	r2,0(r16)
   3007c:	14800005 	stb	r18,0(r2)
   30080:	80800017 	ldw	r2,0(r16)
   30084:	10c00044 	addi	r3,r2,1
   30088:	80c00015 	stw	r3,0(r16)
   3008c:	10800003 	ldbu	r2,0(r2)
   30090:	dfc00317 	ldw	ra,12(sp)
   30094:	dc800217 	ldw	r18,8(sp)
   30098:	dc400117 	ldw	r17,4(sp)
   3009c:	dc000017 	ldw	r16,0(sp)
   300a0:	dec00404 	addi	sp,sp,16
   300a4:	f800283a 	ret
   300a8:	80c00617 	ldw	r3,24(r16)
   300ac:	10c00a16 	blt	r2,r3,300d8 <putc+0xa4>
   300b0:	80800017 	ldw	r2,0(r16)
   300b4:	00c00284 	movi	r3,10
   300b8:	14800005 	stb	r18,0(r2)
   300bc:	80800017 	ldw	r2,0(r16)
   300c0:	11400003 	ldbu	r5,0(r2)
   300c4:	28ffef1e 	bne	r5,r3,30084 <_gp+0xffff5cb8>
   300c8:	89000017 	ldw	r4,0(r17)
   300cc:	00000406 	br	300e0 <putc+0xac>
   300d0:	00246e40 	call	246e4 <__sinit>
   300d4:	003fe406 	br	30068 <_gp+0xffff5c9c>
   300d8:	89000017 	ldw	r4,0(r17)
   300dc:	900b883a 	mov	r5,r18
   300e0:	800d883a 	mov	r6,r16
   300e4:	dfc00317 	ldw	ra,12(sp)
   300e8:	dc800217 	ldw	r18,8(sp)
   300ec:	dc400117 	ldw	r17,4(sp)
   300f0:	dc000017 	ldw	r16,0(sp)
   300f4:	dec00404 	addi	sp,sp,16
   300f8:	002926c1 	jmpi	2926c <__swbuf_r>

000300fc <__register_exitproc>:
   300fc:	008000f4 	movhi	r2,3
   30100:	defffa04 	addi	sp,sp,-24
   30104:	1088f304 	addi	r2,r2,9164
   30108:	dc000315 	stw	r16,12(sp)
   3010c:	14000017 	ldw	r16,0(r2)
   30110:	dc400415 	stw	r17,16(sp)
   30114:	dfc00515 	stw	ra,20(sp)
   30118:	80805217 	ldw	r2,328(r16)
   3011c:	2023883a 	mov	r17,r4
   30120:	10003626 	beq	r2,zero,301fc <__register_exitproc+0x100>
   30124:	10c00117 	ldw	r3,4(r2)
   30128:	010007c4 	movi	r4,31
   3012c:	20c00e16 	blt	r4,r3,30168 <__register_exitproc+0x6c>
   30130:	1a400044 	addi	r9,r3,1
   30134:	8800211e 	bne	r17,zero,301bc <__register_exitproc+0xc0>
   30138:	18c00084 	addi	r3,r3,2
   3013c:	18c7883a 	add	r3,r3,r3
   30140:	18c7883a 	add	r3,r3,r3
   30144:	12400115 	stw	r9,4(r2)
   30148:	10c7883a 	add	r3,r2,r3
   3014c:	19400015 	stw	r5,0(r3)
   30150:	0005883a 	mov	r2,zero
   30154:	dfc00517 	ldw	ra,20(sp)
   30158:	dc400417 	ldw	r17,16(sp)
   3015c:	dc000317 	ldw	r16,12(sp)
   30160:	dec00604 	addi	sp,sp,24
   30164:	f800283a 	ret
   30168:	00800034 	movhi	r2,0
   3016c:	10800004 	addi	r2,r2,0
   30170:	10002526 	beq	r2,zero,30208 <__register_exitproc+0x10c>
   30174:	01006404 	movi	r4,400
   30178:	d9400015 	stw	r5,0(sp)
   3017c:	d9800115 	stw	r6,4(sp)
   30180:	d9c00215 	stw	r7,8(sp)
   30184:	00000000 	call	0 <__reset-0x20000>
   30188:	d9400017 	ldw	r5,0(sp)
   3018c:	d9800117 	ldw	r6,4(sp)
   30190:	d9c00217 	ldw	r7,8(sp)
   30194:	10001c26 	beq	r2,zero,30208 <__register_exitproc+0x10c>
   30198:	80c05217 	ldw	r3,328(r16)
   3019c:	10000115 	stw	zero,4(r2)
   301a0:	02400044 	movi	r9,1
   301a4:	10c00015 	stw	r3,0(r2)
   301a8:	80805215 	stw	r2,328(r16)
   301ac:	10006215 	stw	zero,392(r2)
   301b0:	10006315 	stw	zero,396(r2)
   301b4:	0007883a 	mov	r3,zero
   301b8:	883fdf26 	beq	r17,zero,30138 <_gp+0xffff5d6c>
   301bc:	18d1883a 	add	r8,r3,r3
   301c0:	4211883a 	add	r8,r8,r8
   301c4:	1211883a 	add	r8,r2,r8
   301c8:	41802215 	stw	r6,136(r8)
   301cc:	01000044 	movi	r4,1
   301d0:	11806217 	ldw	r6,392(r2)
   301d4:	20c8983a 	sll	r4,r4,r3
   301d8:	310cb03a 	or	r6,r6,r4
   301dc:	11806215 	stw	r6,392(r2)
   301e0:	41c04215 	stw	r7,264(r8)
   301e4:	01800084 	movi	r6,2
   301e8:	89bfd31e 	bne	r17,r6,30138 <_gp+0xffff5d6c>
   301ec:	11806317 	ldw	r6,396(r2)
   301f0:	3108b03a 	or	r4,r6,r4
   301f4:	11006315 	stw	r4,396(r2)
   301f8:	003fcf06 	br	30138 <_gp+0xffff5d6c>
   301fc:	80805304 	addi	r2,r16,332
   30200:	80805215 	stw	r2,328(r16)
   30204:	003fc706 	br	30124 <_gp+0xffff5d58>
   30208:	00bfffc4 	movi	r2,-1
   3020c:	003fd106 	br	30154 <_gp+0xffff5d88>

00030210 <__call_exitprocs>:
   30210:	008000f4 	movhi	r2,3
   30214:	1088f304 	addi	r2,r2,9164
   30218:	10800017 	ldw	r2,0(r2)
   3021c:	defff404 	addi	sp,sp,-48
   30220:	dd800815 	stw	r22,32(sp)
   30224:	d8800015 	stw	r2,0(sp)
   30228:	10805204 	addi	r2,r2,328
   3022c:	dd000615 	stw	r20,24(sp)
   30230:	dc800415 	stw	r18,16(sp)
   30234:	dfc00b15 	stw	ra,44(sp)
   30238:	df000a15 	stw	fp,40(sp)
   3023c:	ddc00915 	stw	r23,36(sp)
   30240:	dd400715 	stw	r21,28(sp)
   30244:	dcc00515 	stw	r19,20(sp)
   30248:	dc400315 	stw	r17,12(sp)
   3024c:	dc000215 	stw	r16,8(sp)
   30250:	2025883a 	mov	r18,r4
   30254:	2829883a 	mov	r20,r5
   30258:	d8800115 	stw	r2,4(sp)
   3025c:	05bfffc4 	movi	r22,-1
   30260:	d8800017 	ldw	r2,0(sp)
   30264:	14c05217 	ldw	r19,328(r2)
   30268:	98001d26 	beq	r19,zero,302e0 <__call_exitprocs+0xd0>
   3026c:	dd400117 	ldw	r21,4(sp)
   30270:	98800117 	ldw	r2,4(r19)
   30274:	173fffc4 	addi	fp,r2,-1
   30278:	e0000d16 	blt	fp,zero,302b0 <__call_exitprocs+0xa0>
   3027c:	14000044 	addi	r16,r2,1
   30280:	8421883a 	add	r16,r16,r16
   30284:	8421883a 	add	r16,r16,r16
   30288:	84402004 	addi	r17,r16,128
   3028c:	9c63883a 	add	r17,r19,r17
   30290:	9c21883a 	add	r16,r19,r16
   30294:	a0001e26 	beq	r20,zero,30310 <__call_exitprocs+0x100>
   30298:	80804017 	ldw	r2,256(r16)
   3029c:	15001c26 	beq	r2,r20,30310 <__call_exitprocs+0x100>
   302a0:	e73fffc4 	addi	fp,fp,-1
   302a4:	843fff04 	addi	r16,r16,-4
   302a8:	8c7fff04 	addi	r17,r17,-4
   302ac:	e5bff91e 	bne	fp,r22,30294 <_gp+0xffff5ec8>
   302b0:	00800034 	movhi	r2,0
   302b4:	10800004 	addi	r2,r2,0
   302b8:	10000926 	beq	r2,zero,302e0 <__call_exitprocs+0xd0>
   302bc:	98800117 	ldw	r2,4(r19)
   302c0:	1000311e 	bne	r2,zero,30388 <__call_exitprocs+0x178>
   302c4:	98800017 	ldw	r2,0(r19)
   302c8:	10003426 	beq	r2,zero,3039c <__call_exitprocs+0x18c>
   302cc:	9809883a 	mov	r4,r19
   302d0:	a8800015 	stw	r2,0(r21)
   302d4:	00000000 	call	0 <__reset-0x20000>
   302d8:	acc00017 	ldw	r19,0(r21)
   302dc:	983fe41e 	bne	r19,zero,30270 <_gp+0xffff5ea4>
   302e0:	dfc00b17 	ldw	ra,44(sp)
   302e4:	df000a17 	ldw	fp,40(sp)
   302e8:	ddc00917 	ldw	r23,36(sp)
   302ec:	dd800817 	ldw	r22,32(sp)
   302f0:	dd400717 	ldw	r21,28(sp)
   302f4:	dd000617 	ldw	r20,24(sp)
   302f8:	dcc00517 	ldw	r19,20(sp)
   302fc:	dc800417 	ldw	r18,16(sp)
   30300:	dc400317 	ldw	r17,12(sp)
   30304:	dc000217 	ldw	r16,8(sp)
   30308:	dec00c04 	addi	sp,sp,48
   3030c:	f800283a 	ret
   30310:	98800117 	ldw	r2,4(r19)
   30314:	80c00017 	ldw	r3,0(r16)
   30318:	10bfffc4 	addi	r2,r2,-1
   3031c:	17001526 	beq	r2,fp,30374 <__call_exitprocs+0x164>
   30320:	80000015 	stw	zero,0(r16)
   30324:	183fde26 	beq	r3,zero,302a0 <_gp+0xffff5ed4>
   30328:	00800044 	movi	r2,1
   3032c:	1708983a 	sll	r4,r2,fp
   30330:	98806217 	ldw	r2,392(r19)
   30334:	9dc00117 	ldw	r23,4(r19)
   30338:	2084703a 	and	r2,r4,r2
   3033c:	1000061e 	bne	r2,zero,30358 <__call_exitprocs+0x148>
   30340:	183ee83a 	callr	r3
   30344:	98800117 	ldw	r2,4(r19)
   30348:	15ffc51e 	bne	r2,r23,30260 <_gp+0xffff5e94>
   3034c:	a8800017 	ldw	r2,0(r21)
   30350:	14ffd326 	beq	r2,r19,302a0 <_gp+0xffff5ed4>
   30354:	003fc206 	br	30260 <_gp+0xffff5e94>
   30358:	98806317 	ldw	r2,396(r19)
   3035c:	2084703a 	and	r2,r4,r2
   30360:	1000061e 	bne	r2,zero,3037c <__call_exitprocs+0x16c>
   30364:	89400017 	ldw	r5,0(r17)
   30368:	9009883a 	mov	r4,r18
   3036c:	183ee83a 	callr	r3
   30370:	003ff406 	br	30344 <_gp+0xffff5f78>
   30374:	9f000115 	stw	fp,4(r19)
   30378:	003fea06 	br	30324 <_gp+0xffff5f58>
   3037c:	89000017 	ldw	r4,0(r17)
   30380:	183ee83a 	callr	r3
   30384:	003fef06 	br	30344 <_gp+0xffff5f78>
   30388:	98800017 	ldw	r2,0(r19)
   3038c:	982b883a 	mov	r21,r19
   30390:	1027883a 	mov	r19,r2
   30394:	983fb61e 	bne	r19,zero,30270 <_gp+0xffff5ea4>
   30398:	003fd106 	br	302e0 <_gp+0xffff5f14>
   3039c:	0005883a 	mov	r2,zero
   303a0:	003ffa06 	br	3038c <_gp+0xffff5fc0>

000303a4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   303a4:	defffd04 	addi	sp,sp,-12
   303a8:	df000215 	stw	fp,8(sp)
   303ac:	df000204 	addi	fp,sp,8
   303b0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   303b4:	0001883a 	nop
   303b8:	e0bfff17 	ldw	r2,-4(fp)
   303bc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   303c0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   303c4:	10000226 	beq	r2,zero,303d0 <_exit+0x2c>
    ALT_SIM_FAIL();
   303c8:	002af070 	cmpltui	zero,zero,43969
   303cc:	00000106 	br	303d4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   303d0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   303d4:	003fff06 	br	303d4 <_gp+0xffff6008>
